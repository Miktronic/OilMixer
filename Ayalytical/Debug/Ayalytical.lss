
Ayalytical.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00017374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .BOOT         00000044  00017374  00017374  00017408  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000018c  00802000  000173b8  0001744c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000833  0080218c  0080218c  000175dc  2**4
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000175d8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00017634  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00001438  00000000  00000000  00017678  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001971b  00000000  00000000  00018ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000076cc  00000000  00000000  000321cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00015723  00000000  00000000  00039897  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000059bc  00000000  00000000  0004efbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000404cf  00000000  00000000  00054978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c263  00000000  00000000  00094e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012f8  00000000  00000000  000a10b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000f910  00000000  00000000  000a23a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__ctors_end>
       4:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
       8:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__vector_2>
       c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      10:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      14:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      18:	0c 94 91 6d 	jmp	0xdb22	; 0xdb22 <__vector_6>
      1c:	0c 94 de 6d 	jmp	0xdbbc	; 0xdbbc <__vector_7>
      20:	0c 94 2b 6e 	jmp	0xdc56	; 0xdc56 <__vector_8>
      24:	0c 94 78 6e 	jmp	0xdcf0	; 0xdcf0 <__vector_9>
      28:	0c 94 4d 6f 	jmp	0xde9a	; 0xde9a <__vector_10>
      2c:	0c 94 7d 6f 	jmp	0xdefa	; 0xdefa <__vector_11>
      30:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      34:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      38:	0c 94 a0 9f 	jmp	0x13f40	; 0x13f40 <__vector_14>
      3c:	0c 94 f7 9f 	jmp	0x13fee	; 0x13fee <__vector_15>
      40:	0c 94 4e a0 	jmp	0x1409c	; 0x1409c <__vector_16>
      44:	0c 94 a5 a0 	jmp	0x1414a	; 0x1414a <__vector_17>
      48:	0c 94 fc a0 	jmp	0x141f8	; 0x141f8 <__vector_18>
      4c:	0c 94 53 a1 	jmp	0x142a6	; 0x142a6 <__vector_19>
      50:	0c 94 aa a1 	jmp	0x14354	; 0x14354 <__vector_20>
      54:	0c 94 01 a2 	jmp	0x14402	; 0x14402 <__vector_21>
      58:	0c 94 58 a2 	jmp	0x144b0	; 0x144b0 <__vector_22>
      5c:	0c 94 af a2 	jmp	0x1455e	; 0x1455e <__vector_23>
      60:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      64:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      68:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      6c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      70:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      74:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      78:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      7c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      80:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      84:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      88:	0c 94 c4 32 	jmp	0x6588	; 0x6588 <__vector_34>
      8c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      90:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      94:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      98:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      9c:	0c 94 9f 93 	jmp	0x1273e	; 0x1273e <__vector_39>
      a0:	0c 94 2b 94 	jmp	0x12856	; 0x12856 <__vector_40>
      a4:	0c 94 b7 94 	jmp	0x1296e	; 0x1296e <__vector_41>
      a8:	0c 94 43 95 	jmp	0x12a86	; 0x12a86 <__vector_42>
      ac:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      b0:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      b4:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      b8:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      bc:	0c 94 6c a6 	jmp	0x14cd8	; 0x14cd8 <__vector_47>
      c0:	0c 94 c3 a6 	jmp	0x14d86	; 0x14d86 <__vector_48>
      c4:	0c 94 1a a7 	jmp	0x14e34	; 0x14e34 <__vector_49>
      c8:	0c 94 71 a7 	jmp	0x14ee2	; 0x14ee2 <__vector_50>
      cc:	0c 94 c8 a7 	jmp	0x14f90	; 0x14f90 <__vector_51>
      d0:	0c 94 1f a8 	jmp	0x1503e	; 0x1503e <__vector_52>
      d4:	0c 94 76 a8 	jmp	0x150ec	; 0x150ec <__vector_53>
      d8:	0c 94 cd a8 	jmp	0x1519a	; 0x1519a <__vector_54>
      dc:	0c 94 24 a9 	jmp	0x15248	; 0x15248 <__vector_55>
      e0:	0c 94 7b a9 	jmp	0x152f6	; 0x152f6 <__vector_56>
      e4:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      e8:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      ec:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      f0:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      f4:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      f8:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
      fc:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     100:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     104:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     108:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     10c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     110:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     114:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     118:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     11c:	0c 94 6f 91 	jmp	0x122de	; 0x122de <__vector_71>
     120:	0c 94 fb 91 	jmp	0x123f6	; 0x123f6 <__vector_72>
     124:	0c 94 87 92 	jmp	0x1250e	; 0x1250e <__vector_73>
     128:	0c 94 13 93 	jmp	0x12626	; 0x12626 <__vector_74>
     12c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     130:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     134:	0c 94 06 a3 	jmp	0x1460c	; 0x1460c <__vector_77>
     138:	0c 94 5d a3 	jmp	0x146ba	; 0x146ba <__vector_78>
     13c:	0c 94 b4 a3 	jmp	0x14768	; 0x14768 <__vector_79>
     140:	0c 94 0b a4 	jmp	0x14816	; 0x14816 <__vector_80>
     144:	0c 94 62 a4 	jmp	0x148c4	; 0x148c4 <__vector_81>
     148:	0c 94 b9 a4 	jmp	0x14972	; 0x14972 <__vector_82>
     14c:	0c 94 10 a5 	jmp	0x14a20	; 0x14a20 <__vector_83>
     150:	0c 94 67 a5 	jmp	0x14ace	; 0x14ace <__vector_84>
     154:	0c 94 be a5 	jmp	0x14b7c	; 0x14b7c <__vector_85>
     158:	0c 94 15 a6 	jmp	0x14c2a	; 0x14c2a <__vector_86>
     15c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     160:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     164:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     168:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     16c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     170:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     174:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     178:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     17c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     180:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     184:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     188:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     18c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     190:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     194:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     198:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     19c:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1a0:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1a4:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1a8:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1ac:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1b0:	0c 94 d2 a9 	jmp	0x153a4	; 0x153a4 <__vector_108>
     1b4:	0c 94 29 aa 	jmp	0x15452	; 0x15452 <__vector_109>
     1b8:	0c 94 80 aa 	jmp	0x15500	; 0x15500 <__vector_110>
     1bc:	0c 94 d7 aa 	jmp	0x155ae	; 0x155ae <__vector_111>
     1c0:	0c 94 2e ab 	jmp	0x1565c	; 0x1565c <__vector_112>
     1c4:	0c 94 85 ab 	jmp	0x1570a	; 0x1570a <__vector_113>
     1c8:	0c 94 dc ab 	jmp	0x157b8	; 0x157b8 <__vector_114>
     1cc:	0c 94 33 ac 	jmp	0x15866	; 0x15866 <__vector_115>
     1d0:	0c 94 8a ac 	jmp	0x15914	; 0x15914 <__vector_116>
     1d4:	0c 94 e1 ac 	jmp	0x159c2	; 0x159c2 <__vector_117>
     1d8:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1dc:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1e0:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1e4:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1e8:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1ec:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1f0:	0c 94 70 29 	jmp	0x52e0	; 0x52e0 <__bad_interrupt>
     1f4:	0c 94 33 74 	jmp	0xe866	; 0xe866 <__vector_125>
     1f8:	0c 94 ed 74 	jmp	0xe9da	; 0xe9da <__vector_126>
     1fc:	b3 41       	sbci	r27, 0x13	; 19
     1fe:	05 42       	sbci	r16, 0x25	; 37
     200:	5d 43       	sbci	r21, 0x3D	; 61
     202:	37 44       	sbci	r19, 0x47	; 71
     204:	75 44       	sbci	r23, 0x45	; 69
     206:	6a 45       	sbci	r22, 0x5A	; 90
     208:	fe 47       	sbci	r31, 0x7E	; 126
     20a:	a0 54       	subi	r26, 0x40	; 64
     20c:	fb 48       	sbci	r31, 0x8B	; 139
     20e:	0a 4a       	sbci	r16, 0xAA	; 170
     210:	e2 4b       	sbci	r30, 0xB2	; 178
     212:	a0 54       	subi	r26, 0x40	; 64
     214:	64 4d       	sbci	r22, 0xD4	; 212
     216:	a7 4e       	sbci	r26, 0xE7	; 231
     218:	57 4f       	sbci	r21, 0xF7	; 247
     21a:	c3 4f       	sbci	r28, 0xF3	; 243
     21c:	0a 50       	subi	r16, 0x0A	; 10
     21e:	a9 50       	subi	r26, 0x09	; 9
     220:	92 51       	subi	r25, 0x12	; 18
     222:	b2 52       	subi	r27, 0x22	; 34
     224:	f8 52       	subi	r31, 0x28	; 40
     226:	a4 53       	subi	r26, 0x34	; 52
     228:	ed 56       	subi	r30, 0x6D	; 109
     22a:	f4 56       	subi	r31, 0x64	; 100
     22c:	fb 56       	subi	r31, 0x6B	; 107
     22e:	02 57       	subi	r16, 0x72	; 114
     230:	3e 57       	subi	r19, 0x7E	; 126
     232:	7a 57       	subi	r23, 0x7A	; 122
     234:	b9 57       	subi	r27, 0x79	; 121
     236:	8e 79       	andi	r24, 0x9E	; 158
     238:	91 79       	andi	r25, 0x91	; 145
     23a:	94 79       	andi	r25, 0x94	; 148
     23c:	97 79       	andi	r25, 0x97	; 151
     23e:	9a 79       	andi	r25, 0x9A	; 154
     240:	9d 79       	andi	r25, 0x9D	; 157
     242:	a0 79       	andi	r26, 0x90	; 144
     244:	5b b2       	in	r5, 0x1b	; 27
     246:	7c b2       	in	r7, 0x1c	; 28
     248:	9d b2       	in	r9, 0x1d	; 29
     24a:	be b2       	in	r11, 0x1e	; 30
     24c:	df b2       	in	r13, 0x1f	; 31
     24e:	00 b3       	in	r16, 0x10	; 16
     250:	21 b3       	in	r18, 0x11	; 17
     252:	42 b3       	in	r20, 0x12	; 18

00000254 <__trampolines_end>:
     254:	4e 41       	sbci	r20, 0x1E	; 30
     256:	4e 49       	Address 0x00000256 is out of bounds.
.word	0xffff	; ????

00000257 <pstr_inity>:
     257:	49 4e 49 54 59                                      INITY

0000025c <pstr_inf>:
     25c:	49 4e 46                                            INF

0000025f <pwr_m10>:
     25f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     26f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000277 <pwr_p10>:
     277:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     287:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000028f <thermSensorLUT>:
     28f:	eb 10 cb 11 3a 10 aa 0f 30 0f c7 0e 6b 0e 19 0e     ....:...0...k...
     29f:	d0 0d 8f 0d 52 0d 1b 0d e8 0c b9 0c 8d 0c 64 0c     ....R.........d.
     2af:	3e 0c 19 0c f7 0b d7 0b b8 0b 9b 0b 7f 0b 64 0b     >.............d.
     2bf:	4a 0b 32 0b 1b 0b 04 0b ef 0a da 0a c6 0a b2 0a     J.2.............
     2cf:	9f 0a 8d 0a 7c 0a 6b 0a 5a 0a 4a 0a 3b 0a 2c 0a     ....|.k.Z.J.;.,.
     2df:	1d 0a 0f 0a 01 0a f3 09 e6 09 d9 09 cc 09 c0 09     ................
     2ef:	b4 09 a8 09 9d 09 92 09 87 09 7c 09 71 09 67 09     ..........|.q.g.
     2ff:	5d 09 53 09 49 09 40 09 36 09 2d 09 24 09 1b 09     ].S.I.@.6.-.$...
     30f:	12 09 0a 09 01 09 f9 08 f1 08 e9 08 e1 08 d9 08     ................
     31f:	d2 08 ca 08 c3 08 bc 08 b4 08 ad 08 a6 08 a0 08     ................
     32f:	99 08 92 08 8b 08 85 08 7f 08 78 08 72 08 6c 08     ..........x.r.l.
     33f:	66 08 60 08 5a 08 54 08 4e 08 48 08 43 08 3d 08     f.`.Z.T.N.H.C.=.
     34f:	38 08 32 08 2d 08 28 08 22 08 1d 08 18 08 13 08     8.2.-.(.".......
     35f:	0e 08 09 08 04 08 ff 07 fa 07 f5 07 f1 07 ec 07     ................
     36f:	e7 07 e3 07 de 07 da 07 d5 07 d1 07 cd 07 c8 07     ................
     37f:	c4 07 c0 07 bc 07 b7 07 b3 07 af 07 ab 07 a7 07     ................
     38f:	a3 07 9f 07 9b 07 97 07 94 07 90 07 8c 07 88 07     ................
     39f:	84 07 81 07 7d 07 7a 07 76 07 72 07 6f 07 6b 07     ....}.z.v.r.o.k.
     3af:	68 07 64 07 61 07 5e 07 5a 07 57 07 53 07 50 07     h.d.a.^.Z.W.S.P.
     3bf:	4d 07 4a 07 46 07 43 07 40 07 3d 07 3a 07 37 07     M.J.F.C.@.=.:.7.
     3cf:	33 07 30 07 2d 07 2a 07 27 07 24 07 21 07 1e 07     3.0.-.*.'.$.!...
     3df:	1b 07 19 07 16 07 13 07 10 07 0d 07 0a 07 08 07     ................
     3ef:	05 07 02 07 ff 06 fd 06 fa 06 f7 06 f4 06 f2 06     ................
     3ff:	ef 06 ed 06 ea 06 e7 06 e5 06 e2 06 e0 06 dd 06     ................
     40f:	db 06 d8 06 d6 06 d3 06 d1 06 ce 06 cc 06 c9 06     ................
     41f:	c7 06 c4 06 c2 06 c0 06 bd 06 bb 06 b9 06 b6 06     ................
     42f:	b4 06 b2 06 b0 06 ad 06 ab 06 a9 06 a7 06 a4 06     ................
     43f:	a2 06 a0 06 9e 06 9c 06 99 06 97 06 95 06 93 06     ................
     44f:	91 06 8f 06 8d 06 8a 06 88 06 86 06 84 06 82 06     ................
     45f:	80 06 7e 06 7c 06 7a 06 78 06 76 06 74 06 72 06     ..~.|.z.x.v.t.r.
     46f:	70 06 6e 06 6c 06 6a 06 68 06 67 06 65 06 63 06     p.n.l.j.h.g.e.c.
     47f:	61 06 5f 06 5d 06 5b 06 59 06 57 06 56 06 54 06     a._.].[.Y.W.V.T.
     48f:	52 06 50 06 4e 06 4c 06 4b 06 49 06 47 06 45 06     R.P.N.L.K.I.G.E.
     49f:	44 06 42 06 40 06 3e 06 3d 06 3b 06 39 06 37 06     D.B.@.>.=.;.9.7.
     4af:	36 06 34 06 32 06 31 06 2f 06 2d 06 2c 06 2a 06     6.4.2.1./.-.,.*.
     4bf:	28 06 27 06 25 06 23 06 22 06 20 06 1e 06 1d 06     (.'.%.#.". .....
     4cf:	1b 06 1a 06 18 06 16 06 15 06 13 06 12 06 10 06     ................
     4df:	0f 06 0d 06 0b 06 0a 06 08 06 07 06 05 06 04 06     ................
     4ef:	02 06 01 06 ff 05 fe 05 fc 05 fb 05 f9 05 f8 05     ................
     4ff:	f6 05 f5 05 f3 05 f2 05 f1 05 ef 05 ee 05 ec 05     ................
     50f:	eb 05 e9 05 e8 05 e7 05 e5 05 e4 05 e2 05 e1 05     ................
     51f:	df 05 de 05 dd 05 db 05 da 05 d9 05 d7 05 d6 05     ................
     52f:	d4 05 d3 05 d2 05 d0 05 cf 05 ce 05 cc 05 cb 05     ................
     53f:	ca 05 c8 05 c7 05 c6 05 c5 05 c3 05 c2 05 c1 05     ................
     54f:	bf 05 be 05 bd 05 bb 05 ba 05 b9 05 b8 05 b6 05     ................
     55f:	b5 05 b4 05 b3 05 b1 05 b0 05 af 05 ae 05 ac 05     ................
     56f:	ab 05 aa 05 a9 05 a8 05 a6 05 a5 05 a4 05 a3 05     ................
     57f:	a1 05 a0 05 9f 05 9e 05 9d 05 9c 05 9a 05 99 05     ................
     58f:	98 05 97 05 96 05 94 05 93 05 92 05 91 05 90 05     ................
     59f:	8f 05 8e 05 8c 05 8b 05 8a 05 89 05 88 05 87 05     ................
     5af:	86 05 84 05 83 05 82 05 81 05 80 05 7f 05 7e 05     ..............~.
     5bf:	7d 05 7c 05 7b 05 79 05 78 05 77 05 76 05 75 05     }.|.{.y.x.w.v.u.
     5cf:	74 05 73 05 72 05 71 05 70 05 6f 05 6e 05 6d 05     t.s.r.q.p.o.n.m.
     5df:	6b 05 6a 05 69 05 68 05 67 05 66 05 65 05 64 05     k.j.i.h.g.f.e.d.
     5ef:	63 05 62 05 61 05 60 05 5f 05 5e 05 5d 05 5c 05     c.b.a.`._.^.].\.
     5ff:	5b 05 5a 05 59 05 58 05 57 05 56 05 55 05 54 05     [.Z.Y.X.W.V.U.T.
     60f:	53 05 52 05 51 05 50 05 4f 05 4e 05 4d 05 4c 05     S.R.Q.P.O.N.M.L.
     61f:	4b 05 4a 05 49 05 48 05 47 05 46 05 45 05 44 05     K.J.I.H.G.F.E.D.
     62f:	43 05 42 05 41 05 40 05 3f 05 3e 05 3d 05 3c 05     C.B.A.@.?.>.=.<.
     63f:	3c 05 3b 05 3a 05 39 05 38 05 37 05 36 05 35 05     <.;.:.9.8.7.6.5.
     64f:	34 05 33 05 32 05 31 05 30 05 2f 05 2f 05 2e 05     4.3.2.1.0././...
     65f:	2d 05 2c 05 2b 05 2a 05 29 05 28 05 27 05 26 05     -.,.+.*.).(.'.&.
     66f:	25 05 25 05 24 05 23 05 22 05 21 05 20 05 1f 05     %.%.$.#.".!. ...
     67f:	1e 05 1d 05 1d 05 1c 05 1b 05 1a 05 19 05 18 05     ................
     68f:	17 05 17 05 16 05 15 05 14 05 13 05 12 05 11 05     ................
     69f:	10 05 10 05 0f 05 0e 05 0d 05 0c 05 0b 05 0b 05     ................
     6af:	0a 05 09 05 08 05 07 05 06 05 06 05 05 05 04 05     ................
     6bf:	03 05 02 05 01 05 01 05 00 05 ff 04 fe 04 fd 04     ................
     6cf:	fc 04 fc 04 fb 04 fa 04 f9 04 f8 04 f8 04 f7 04     ................
     6df:	f6 04 f5 04 f4 04 f4 04 f3 04 f2 04 f1 04 f0 04     ................
     6ef:	f0 04 ef 04 ee 04 ed 04 ec 04 ec 04 eb 04 ea 04     ................
     6ff:	e9 04 e9 04 e8 04 e7 04 e6 04 e5 04 e5 04 e4 04     ................
     70f:	e3 04 e2 04 e2 04 e1 04 e0 04 df 04 df 04 de 04     ................
     71f:	dd 04 dc 04 dc 04 db 04 da 04 d9 04 d9 04 d8 04     ................
     72f:	d7 04 d6 04 d6 04 d5 04 d4 04 d3 04 d3 04 d2 04     ................
     73f:	d1 04 d0 04 d0 04 cf 04 ce 04 cd 04 cd 04 cc 04     ................
     74f:	cb 04 cb 04 ca 04 c9 04 c8 04 c8 04 c7 04 c6 04     ................
     75f:	c5 04 c5 04 c4 04 c3 04 c3 04 c2 04 c1 04 c0 04     ................
     76f:	c0 04 bf 04 be 04 be 04 bd 04 bc 04 bc 04 bb 04     ................
     77f:	ba 04 b9 04 b9 04 b8 04 b7 04 b7 04 b6 04 b5 04     ................
     78f:	b5 04 b4 04 b3 04 b2 04 b2 04 b1 04 b0 04 b0 04     ................
     79f:	af 04 ae 04 ae 04 ad 04 ac 04 ac 04 ab 04 aa 04     ................
     7af:	aa 04 a9 04 a8 04 a8 04 a7 04 a6 04 a6 04 a5 04     ................
     7bf:	a4 04 a4 04 a3 04 a2 04 a2 04 a1 04 a0 04 a0 04     ................
     7cf:	9f 04 9e 04 9e 04 9d 04 9c 04 9c 04 9b 04 9a 04     ................
     7df:	9a 04 99 04 98 04 98 04 97 04 96 04 96 04 95 04     ................
     7ef:	95 04 94 04 93 04 93 04 92 04 91 04 91 04 90 04     ................
     7ff:	8f 04 8f 04 8e 04 8e 04 8d 04 8c 04 8c 04 8b 04     ................
     80f:	8a 04 8a 04 89 04 88 04 88 04 87 04 87 04 86 04     ................
     81f:	85 04 85 04 84 04 83 04 83 04 82 04 82 04 81 04     ................
     82f:	80 04 80 04 7f 04 7f 04 7e 04 7d 04 7d 04 7c 04     ........~.}.}.|.
     83f:	7b 04 7b 04 7a 04 7a 04 79 04 78 04 78 04 77 04     {.{.z.z.y.x.x.w.
     84f:	77 04 76 04 75 04 75 04 74 04 74 04 73 04 72 04     w.v.u.u.t.t.s.r.
     85f:	72 04 71 04 71 04 70 04 6f 04 6f 04 6e 04 6e 04     r.q.q.p.o.o.n.n.
     86f:	6d 04 6c 04 6c 04 6b 04 6b 04 6a 04 6a 04 69 04     m.l.l.k.k.j.j.i.
     87f:	68 04 68 04 67 04 67 04 66 04 65 04 65 04 64 04     h.h.g.g.f.e.e.d.
     88f:	64 04 63 04 63 04 62 04 61 04 61 04 60 04 60 04     d.c.c.b.a.a.`.`.
     89f:	5f 04 5f 04 5e 04 5d 04 5d 04 5c 04 5c 04 5b 04     _._.^.].].\.\.[.
     8af:	5b 04 5a 04 59 04 59 04 58 04 58 04 57 04 57 04     [.Z.Y.Y.X.X.W.W.
     8bf:	56 04 55 04 55 04 54 04 54 04 53 04 53 04 52 04     V.U.U.T.T.S.S.R.
     8cf:	52 04 51 04 50 04 50 04 4f 04 4f 04 4e 04 4e 04     R.Q.P.P.O.O.N.N.
     8df:	4d 04 4d 04 4c 04 4b 04 4b 04 4a 04 4a 04 49 04     M.M.L.K.K.J.J.I.
     8ef:	49 04 48 04 48 04 47 04 47 04 46 04 45 04 45 04     I.H.H.G.G.F.E.E.
     8ff:	44 04 44 04 43 04 43 04 42 04 42 04 41 04 41 04     D.D.C.C.B.B.A.A.
     90f:	40 04 40 04 3f 04 3e 04 3e 04 3d 04 3d 04 3c 04     @.@.?.>.>.=.=.<.
     91f:	3c 04 3b 04 3b 04 3a 04 3a 04 39 04 39 04 38 04     <.;.;.:.:.9.9.8.
     92f:	38 04 37 04 36 04 36 04 35 04 35 04 34 04 34 04     8.7.6.6.5.5.4.4.
     93f:	33 04 33 04 32 04 32 04 31 04 31 04 30 04 30 04     3.3.2.2.1.1.0.0.
     94f:	2f 04 2f 04 2e 04 2e 04 2d 04 2d 04 2c 04 2c 04     /./.....-.-.,.,.
     95f:	2b 04 2b 04 2a 04 2a 04 29 04 28 04 28 04 27 04     +.+.*.*.).(.(.'.
     96f:	27 04 26 04 26 04 25 04 25 04 24 04 24 04 23 04     '.&.&.%.%.$.$.#.
     97f:	23 04 22 04 22 04 21 04 21 04 20 04 20 04 1f 04     #.".".!.!. . ...
     98f:	1f 04 1e 04 1e 04 1d 04 1d 04 1c 04 1c 04 1b 04     ................
     99f:	1b 04 1a 04 1a 04 19 04 19 04 18 04 18 04 17 04     ................
     9af:	17 04 16 04 16 04 15 04 15 04 14 04 14 04 13 04     ................
     9bf:	13 04 12 04 12 04 11 04 11 04 11 04 10 04 10 04     ................
     9cf:	0f 04 0f 04 0e 04 0e 04 0d 04 0d 04 0c 04 0c 04     ................
     9df:	0b 04 0b 04 0a 04 0a 04 09 04 09 04 08 04 08 04     ................
     9ef:	07 04 07 04 06 04 06 04 05 04 05 04 04 04 04 04     ................
     9ff:	04 04 03 04 03 04 02 04 02 04 01 04 01 04 00 04     ................
     a0f:	00 04 ff 03 ff 03 fe 03 fe 03 fd 03 fd 03 fc 03     ................
     a1f:	fc 03 fb 03 fb 03 fb 03 fa 03 fa 03 f9 03 f9 03     ................
     a2f:	f8 03 f8 03 f7 03 f7 03 f6 03 f6 03 f5 03 f5 03     ................
     a3f:	f5 03 f4 03 f4 03 f3 03 f3 03 f2 03 f2 03 f1 03     ................
     a4f:	f1 03 f0 03 f0 03 ef 03 ef 03 ef 03 ee 03 ee 03     ................
     a5f:	ed 03 ed 03 ec 03 ec 03 eb 03 eb 03 ea 03 ea 03     ................
     a6f:	ea 03 e9 03 e9 03 e8 03 e8 03 e7 03 e7 03 e6 03     ................
     a7f:	e6 03 e6 03 e5 03 e5 03 e4 03 e4 03 e3 03 e3 03     ................
     a8f:	e2 03 e2 03 e1 03 e1 03 e1 03 e0 03 e0 03 df 03     ................
     a9f:	df 03 de 03 de 03 dd 03 dd 03 dd 03 dc 03 dc 03     ................
     aaf:	db 03 db 03 da 03 da 03 da 03 d9 03 d9 03 d8 03     ................
     abf:	d8 03 d7 03 d7 03 d6 03 d6 03 d6 03 d5 03 d5 03     ................
     acf:	d4 03 d4 03 d3 03 d3 03 d3 03 d2 03 d2 03 d1 03     ................
     adf:	d1 03 d0 03 d0 03 d0 03 cf 03 cf 03 ce 03 ce 03     ................
     aef:	cd 03 cd 03 cd 03 cc 03 cc 03 cb 03 cb 03 ca 03     ................
     aff:	ca 03 ca 03 c9 03 c9 03 c8 03 c8 03 c7 03 c7 03     ................
     b0f:	c7 03 c6 03 c6 03 c5 03 c5 03 c4 03 c4 03 c4 03     ................
     b1f:	c3 03 c3 03 c2 03 c2 03 c1 03 c1 03 c1 03 c0 03     ................
     b2f:	c0 03 bf 03 bf 03 bf 03 be 03 be 03 bd 03 bd 03     ................
     b3f:	bc 03 bc 03 bc 03 bb 03 bb 03 ba 03 ba 03 ba 03     ................
     b4f:	b9 03 b9 03 b8 03 b8 03 b7 03 b7 03 b7 03 b6 03     ................
     b5f:	b6 03 b5 03 b5 03 b5 03 b4 03 b4 03 b3 03 b3 03     ................
     b6f:	b3 03 b2 03 b2 03 b1 03 b1 03 b0 03 b0 03 b0 03     ................
     b7f:	af 03 af 03 ae 03 ae 03 ae 03 ad 03 ad 03 ac 03     ................
     b8f:	ac 03 ac 03 ab 03 ab 03 aa 03 aa 03 aa 03 a9 03     ................
     b9f:	a9 03 a8 03 a8 03 a8 03 a7 03 a7 03 a6 03 a6 03     ................
     baf:	a6 03 a5 03 a5 03 a4 03 a4 03 a4 03 a3 03 a3 03     ................
     bbf:	a2 03 a2 03 a2 03 a1 03 a1 03 a0 03 a0 03 a0 03     ................
     bcf:	9f 03 9f 03 9e 03 9e 03 9e 03 9d 03 9d 03 9c 03     ................
     bdf:	9c 03 9c 03 9b 03 9b 03 9a 03 9a 03 9a 03 99 03     ................
     bef:	99 03 99 03 98 03 98 03 97 03 97 03 97 03 96 03     ................
     bff:	96 03 95 03 95 03 95 03 94 03 94 03 93 03 93 03     ................
     c0f:	93 03 92 03 92 03 92 03 91 03 91 03 90 03 90 03     ................
     c1f:	90 03 8f 03 8f 03 8e 03 8e 03 8e 03 8d 03 8d 03     ................
     c2f:	8c 03 8c 03 8c 03 8b 03 8b 03 8b 03 8a 03 8a 03     ................
     c3f:	89 03 89 03 89 03 88 03 88 03 88 03 87 03 87 03     ................
     c4f:	86 03 86 03 86 03 85 03 85 03 84 03 84 03 84 03     ................
     c5f:	83 03 83 03 83 03 82 03 82 03 81 03 81 03 81 03     ................
     c6f:	80 03 80 03 80 03 7f 03 7f 03 7e 03 7e 03 7e 03     ..........~.~.~.
     c7f:	7d 03 7d 03 7d 03 7c 03 7c 03 7b 03 7b 03 7b 03     }.}.}.|.|.{.{.{.
     c8f:	7a 03 7a 03 7a 03 79 03 79 03 78 03 78 03 78 03     z.z.z.y.y.x.x.x.
     c9f:	77 03 77 03 77 03 76 03 76 03 75 03 75 03 75 03     w.w.w.v.v.u.u.u.
     caf:	74 03 74 03 74 03 73 03 73 03 73 03 72 03 72 03     t.t.t.s.s.s.r.r.
     cbf:	71 03 71 03 71 03 70 03 70 03 70 03 6f 03 6f 03     q.q.q.p.p.p.o.o.
     ccf:	6e 03 6e 03 6e 03 6d 03 6d 03 6d 03 6c 03 6c 03     n.n.n.m.m.m.l.l.
     cdf:	6c 03 6b 03 6b 03 6a 03 6a 03 6a 03 69 03 69 03     l.k.k.j.j.j.i.i.
     cef:	69 03 68 03 68 03 68 03 67 03 67 03 66 03 66 03     i.h.h.h.g.g.f.f.
     cff:	66 03 65 03 65 03 65 03 64 03 64 03 64 03 63 03     f.e.e.e.d.d.d.c.
     d0f:	63 03 62 03 62 03 62 03 61 03 61 03 61 03 60 03     c.b.b.b.a.a.a.`.
     d1f:	60 03 60 03 5f 03 5f 03 5f 03 5e 03 5e 03 5d 03     `.`._._._.^.^.].
     d2f:	5d 03 5d 03 5c 03 5c 03 5c 03 5b 03 5b 03 5b 03     ].].\.\.\.[.[.[.
     d3f:	5a 03 5a 03 5a 03 59 03 59 03 58 03 58 03 58 03     Z.Z.Z.Y.Y.X.X.X.
     d4f:	57 03 57 03 57 03 56 03 56 03 56 03 55 03 55 03     W.W.W.V.V.V.U.U.
     d5f:	55 03 54 03 54 03 54 03 53 03 53 03 52 03 52 03     U.T.T.T.S.S.R.R.
     d6f:	52 03 51 03 51 03 51 03 50 03 50 03 50 03 4f 03     R.Q.Q.Q.P.P.P.O.
     d7f:	4f 03 4f 03 4e 03 4e 03 4e 03 4d 03 4d 03 4c 03     O.O.N.N.N.M.M.L.
     d8f:	4c 03 4c 03 4b 03 4b 03 4b 03 4a 03 4a 03 4a 03     L.L.K.K.K.J.J.J.
     d9f:	49 03 49 03 49 03 48 03 48 03 48 03 47 03 47 03     I.I.I.H.H.H.G.G.
     daf:	47 03 46 03 46 03 46 03 45 03 45 03 44 03 44 03     G.F.F.F.E.E.D.D.
     dbf:	44 03 43 03 43 03 43 03 42 03 42 03 42 03 41 03     D.C.C.C.B.B.B.A.
     dcf:	41 03 41 03 40 03 40 03 40 03 3f 03 3f 03 3f 03     A.A.@.@.@.?.?.?.
     ddf:	3e 03 3e 03 3e 03 3d 03 3d 03 3d 03 3c 03 3c 03     >.>.>.=.=.=.<.<.
     def:	3c 03 3b 03 3b 03 3b 03 3a 03 3a 03 3a 03 39 03     <.;.;.;.:.:.:.9.
     dff:	39 03 38 03 38 03 38 03 37 03 37 03 37 03 36 03     9.8.8.8.7.7.7.6.
     e0f:	36 03 36 03 35 03 35 03 35 03 34 03 34 03 34 03     6.6.5.5.5.4.4.4.
     e1f:	33 03 33 03 33 03 32 03 32 03 32 03 31 03 31 03     3.3.3.2.2.2.1.1.
     e2f:	31 03 30 03 30 03 30 03 2f 03 2f 03 2f 03 2e 03     1.0.0.0./././...
     e3f:	2e 03 2e 03 2d 03 2d 03 2d 03 2c 03 2c 03 2c 03     ....-.-.-.,.,.,.
     e4f:	2b 03 2b 03 2b 03 2a 03 2a 03 2a 03 29 03 29 03     +.+.+.*.*.*.).).
     e5f:	29 03 28 03 28 03 28 03 27 03 27 03 27 03 26 03     ).(.(.(.'.'.'.&.
     e6f:	26 03 26 03 25 03 25 03 25 03 24 03 24 03 24 03     &.&.%.%.%.$.$.$.
     e7f:	23 03 23 03 23 03 22 03 22 03 22 03 21 03 21 03     #.#.#.".".".!.!.
     e8f:	21 03 20 03 20 03 20 03 1f 03 1f 03 1f 03 1e 03     !. . . .........
     e9f:	1e 03 1e 03 1d 03 1d 03 1d 03 1c 03 1c 03 1c 03     ................
     eaf:	1b 03 1b 03 1b 03 1a 03 1a 03 1a 03 19 03 19 03     ................
     ebf:	19 03 18 03 18 03 18 03 17 03 17 03 17 03 16 03     ................
     ecf:	16 03 16 03 16 03 15 03 15 03 15 03 14 03 14 03     ................
     edf:	14 03 13 03 13 03 13 03 12 03 12 03 12 03 11 03     ................
     eef:	11 03 11 03 10 03 10 03 10 03 0f 03 0f 03 0f 03     ................
     eff:	0e 03 0e 03 0e 03 0d 03 0d 03 0d 03 0c 03 0c 03     ................
     f0f:	0c 03 0b 03 0b 03 0b 03 0a 03 0a 03 0a 03 0a 03     ................
     f1f:	09 03 09 03 09 03 08 03 08 03 08 03 07 03 07 03     ................
     f2f:	07 03 06 03 06 03 06 03 05 03 05 03 05 03 04 03     ................
     f3f:	04 03 04 03 03 03 03 03 03 03 02 03 02 03 02 03     ................
     f4f:	02 03 01 03 01 03 01 03 00 03 00 03 00 03 ff 02     ................
     f5f:	ff 02 ff 02 fe 02 fe 02 fe 02 fd 02 fd 02 fd 02     ................
     f6f:	fc 02 fc 02 fc 02 fb 02 fb 02 fb 02 fa 02 fa 02     ................
     f7f:	fa 02 fa 02 f9 02 f9 02 f9 02 f8 02 f8 02 f8 02     ................
     f8f:	f7 02 f7 02 f7 02 f6 02 f6 02 f6 02 f5 02 f5 02     ................
     f9f:	f5 02 f4 02 f4 02 f4 02 f4 02 f3 02 f3 02 f3 02     ................
     faf:	f2 02 f2 02 f2 02 f1 02 f1 02 f1 02 f0 02 f0 02     ................
     fbf:	f0 02 ef 02 ef 02 ef 02 ef 02 ee 02 ee 02 ee 02     ................
     fcf:	ed 02 ed 02 ed 02 ec 02 ec 02 ec 02 eb 02 eb 02     ................
     fdf:	eb 02 ea 02 ea 02 ea 02 ea 02 e9 02 e9 02 e9 02     ................
     fef:	e8 02 e8 02 e8 02 e7 02 e7 02 e7 02 e6 02 e6 02     ................
     fff:	e6 02 e5 02 e5 02 e5 02 e5 02 e4 02 e4 02 e4 02     ................
    100f:	e3 02 e3 02 e3 02 e2 02 e2 02 e2 02 e1 02 e1 02     ................
    101f:	e1 02 e0 02 e0 02 e0 02 e0 02 df 02 df 02 df 02     ................
    102f:	de 02 de 02 de 02 dd 02 dd 02 dd 02 dc 02 dc 02     ................
    103f:	dc 02 dc 02 db 02 db 02 db 02 da 02 da 02 da 02     ................
    104f:	d9 02 d9 02 d9 02 d8 02 d8 02 d8 02 d8 02 d7 02     ................
    105f:	d7 02 d7 02 d6 02 d6 02 d6 02 d5 02 d5 02 d5 02     ................
    106f:	d4 02 d4 02 d4 02 d4 02 d3 02 d3 02 d3 02 d2 02     ................
    107f:	d2 02 d2 02 d1 02 d1 02 d1 02 d0 02 d0 02 d0 02     ................
    108f:	d0 02 cf 02 cf 02 cf 02 ce 02 ce 02 ce 02 cd 02     ................
    109f:	cd 02 cd 02 cd 02 cc 02 cc 02 cc 02 cb 02 cb 02     ................
    10af:	cb 02 ca 02 ca 02 ca 02 c9 02 c9 02 c9 02 c9 02     ................
    10bf:	c8 02 c8 02 c8 02 c7 02 c7 02 c7 02 c6 02 c6 02     ................
    10cf:	c6 02 c6 02 c5 02 c5 02 c5 02 c4 02 c4 02 c4 02     ................
    10df:	c3 02 c3 02 c3 02 c2 02 c2 02 c2 02 c2 02 c1 02     ................
    10ef:	c1 02 c1 02 c0 02 c0 02 c0 02 bf 02 bf 02 bf 02     ................
    10ff:	bf 02 be 02 be 02 be 02 bd 02 bd 02 bd 02 bc 02     ................
    110f:	bc 02 bc 02 bc 02 bb 02 bb 02 bb 02 ba 02 ba 02     ................
    111f:	ba 02 b9 02 b9 02 b9 02 b9 02 b8 02 b8 02 b8 02     ................
    112f:	b7 02 b7 02 b7 02 b6 02 b6 02 b6 02 b6 02 b5 02     ................
    113f:	b5 02 b5 02 b4 02 b4 02 b4 02 b3 02 b3 02 b3 02     ................
    114f:	b3 02 b2 02 b2 02 b2 02 b1 02 b1 02 b1 02 b0 02     ................
    115f:	b0 02 b0 02 b0 02 af 02 af 02 af 02 ae 02 ae 02     ................
    116f:	ae 02 ad 02 ad 02 ad 02 ad 02 ac 02 ac 02 ac 02     ................
    117f:	ab 02 ab 02 ab 02 aa 02 aa 02 aa 02 aa 02 a9 02     ................
    118f:	a9 02 a9 02 a8 02 a8 02 a8 02 a7 02 a7 02 a7 02     ................
    119f:	a7 02 a6 02 a6 02 a6 02 a5 02 a5 02 a5 02 a5 02     ................
    11af:	a4 02 a4 02 a4 02 a3 02 a3 02 a3 02 a2 02 a2 02     ................
    11bf:	a2 02 a2 02 a1 02 a1 02 a1 02 a0 02 a0 02 a0 02     ................
    11cf:	9f 02 9f 02 9f 02 9f 02 9e 02 9e 02 9e 02 9d 02     ................
    11df:	9d 02 9d 02 9d 02 9c 02 9c 02 9c 02 9b 02 9b 02     ................
    11ef:	9b 02 9a 02 9a 02 9a 02 9a 02 99 02 99 02 99 02     ................
    11ff:	98 02 98 02 98 02 97 02 97 02 97 02 97 02 96 02     ................
    120f:	96 02 96 02 95 02 95 02 95 02 95 02 94 02 94 02     ................
    121f:	94 02 93 02 93 02 93 02 92 02 92 02 92 02 92 02     ................
    122f:	91 02 91 02 91 02 90 02 90 02 90 02 90 02 8f 02     ................
    123f:	8f 02 8f 02 8e 02 8e 02 8e 02 8d 02 8d 02 8d 02     ................
    124f:	8d 02 8c 02 8c 02 8c 02 8b 02 8b 02 8b 02 8b 02     ................
    125f:	8a 02 8a 02 8a 02 89 02 89 02 89 02 88 02 88 02     ................
    126f:	88 02 88 02 87 02 87 02 87 02 86 02 86 02 86 02     ................
    127f:	86 02 85 02 85 02 85 02 84 02 84 02 84 02 83 02     ................
    128f:	83 02 83 02 83 02 82 02 82 02 82 02 81 02 81 02     ................
    129f:	81 02 81 02 80 02 80 02 80 02 7f 02 7f 02 7f 02     ................
    12af:	7e 02 7e 02 7e 02 7e 02 7d 02 7d 02 7d 02 7c 02     ~.~.~.~.}.}.}.|.
    12bf:	7c 02 7c 02 7c 02 7b 02 7b 02 7b 02 7a 02 7a 02     |.|.|.{.{.{.z.z.
    12cf:	7a 02 7a 02 79 02 79 02 79 02 78 02 78 02 78 02     z.z.y.y.y.x.x.x.
    12df:	77 02 77 02 77 02 77 02 76 02 76 02 76 02 75 02     w.w.w.w.v.v.v.u.
    12ef:	75 02 75 02 75 02 74 02 74 02 74 02 73 02 73 02     u.u.u.t.t.t.s.s.
    12ff:	73 02 73 02 72 02 72 02 72 02 71 02 71 02 71 02     s.s.r.r.r.q.q.q.
    130f:	70 02 70 02 70 02 70 02 6f 02 6f 02 6f 02 6e 02     p.p.p.p.o.o.o.n.
    131f:	6e 02 6e 02 6e 02 6d 02 6d 02 6d 02 6c 02 6c 02     n.n.n.m.m.m.l.l.
    132f:	6c 02 6c 02 6b 02 6b 02 6b 02 6a 02 6a 02 6a 02     l.l.k.k.k.j.j.j.
    133f:	69 02 69 02 69 02 69 02 68 02 68 02 68 02 67 02     i.i.i.i.h.h.h.g.
    134f:	67 02 67 02 67 02 66 02 66 02 66 02 65 02 65 02     g.g.g.f.f.f.e.e.
    135f:	65 02 65 02 64 02 64 02 64 02 63 02 63 02 63 02     e.e.d.d.d.c.c.c.
    136f:	62 02 62 02 62 02 62 02 61 02 61 02 61 02 60 02     b.b.b.b.a.a.a.`.
    137f:	60 02 60 02 60 02 5f 02 5f 02 5f 02 5e 02 5e 02     `.`.`._._._.^.^.
    138f:	5e 02 5e 02 5d 02 5d 02 5d 02 5c 02 5c 02 5c 02     ^.^.].].].\.\.\.
    139f:	5b 02 5b 02 5b 02 5b 02 5a 02 5a 02 5a 02 59 02     [.[.[.[.Z.Z.Z.Y.
    13af:	59 02 59 02 59 02 58 02 58 02 58 02 57 02 57 02     Y.Y.Y.X.X.X.W.W.
    13bf:	57 02 57 02 56 02 56 02 56 02 55 02 55 02 55 02     W.W.V.V.V.U.U.U.
    13cf:	55 02 54 02 54 02 54 02 53 02 53 02 53 02 52 02     U.T.T.T.S.S.S.R.
    13df:	52 02 52 02 52 02 51 02 51 02 51 02 50 02 50 02     R.R.R.Q.Q.Q.P.P.
    13ef:	50 02 50 02 4f 02 4f 02 4f 02 4e 02 4e 02 4e 02     P.P.O.O.O.N.N.N.
    13ff:	4e 02 4d 02 4d 02 4d 02 4c 02 4c 02 4c 02 4b 02     N.M.M.M.L.L.L.K.
    140f:	4b 02 4b 02 4b 02 4a 02 4a 02 4a 02 49 02 49 02     K.K.K.J.J.J.I.I.
    141f:	49 02 49 02 48 02 48 02 48 02 47 02 47 02 47 02     I.I.H.H.H.G.G.G.
    142f:	47 02 46 02 46 02 46 02 45 02 45 02 45 02 45 02     G.F.F.F.E.E.E.E.
    143f:	44 02 44 02 44 02 43 02 43 02 43 02 42 02 42 02     D.D.D.C.C.C.B.B.
    144f:	42 02 42 02 41 02 41 02 41 02 40 02 40 02 40 02     B.B.A.A.A.@.@.@.
    145f:	40 02 3f 02 3f 02 3f 02 3e 02 3e 02 3e 02 3e 02     @.?.?.?.>.>.>.>.
    146f:	3d 02 3d 02 3d 02 3c 02 3c 02 3c 02 3b 02 3b 02     =.=.=.<.<.<.;.;.
    147f:	3b 02 3b 02 3a 02 3a 02 3a 02 39 02 39 02 39 02     ;.;.:.:.:.9.9.9.
    148f:	39 02 38 02 38 02 38 02 37 02 37 02 37 02 37 02     9.8.8.8.7.7.7.7.
    149f:	36 02 36 02 36 02 35 02 35 02 35 02 34 02 34 02     6.6.6.5.5.5.4.4.
    14af:	34 02 34 02 33 02 33 02 33 02 32 02 32 02 32 02     4.4.3.3.3.2.2.2.
    14bf:	32 02 31 02 31 02 31 02 30 02 30 02 30 02 30 02     2.1.1.1.0.0.0.0.
    14cf:	2f 02 2f 02 2f 02 2e 02 2e 02 2e 02 2d 02 2d 02     /././.......-.-.
    14df:	2d 02 2d 02 2c 02 2c 02 2c 02 2b 02 2b 02 2b 02     -.-.,.,.,.+.+.+.
    14ef:	2b 02 2a 02 2a 02 2a 02 29 02 29 02 29 02 29 02     +.*.*.*.).).).).
    14ff:	28 02 28 02 28 02 27 02 27 02 27 02 26 02 26 02     (.(.(.'.'.'.&.&.
    150f:	26 02 26 02 25 02 25 02 25 02 24 02 24 02 24 02     &.&.%.%.%.$.$.$.
    151f:	24 02 23 02 23 02 23 02 22 02 22 02 22 02 21 02     $.#.#.#.".".".!.
    152f:	21 02 21 02 21 02 20 02 20 02 20 02 1f 02 1f 02     !.!.!. . . .....
    153f:	1f 02 1f 02 1e 02 1e 02 1e 02 1d 02 1d 02 1d 02     ................
    154f:	1c 02 1c 02 1c 02 1c 02 1b 02 1b 02 1b 02 1a 02     ................
    155f:	1a 02 1a 02 1a 02 19 02 19 02 19 02 18 02 18 02     ................
    156f:	18 02 17 02 17 02 17 02 17 02 16 02 16 02 16 02     ................
    157f:	15 02 15 02 15 02 15 02 14 02 14 02 14 02 13 02     ................
    158f:	13 02 13 02 12 02 12 02 12 02 12 02 11 02 11 02     ................
    159f:	11 02 10 02 10 02 10 02 10 02 0f 02 0f 02 0f 02     ................
    15af:	0e 02 0e 02 0e 02 0d 02 0d 02 0d 02 0d 02 0c 02     ................
    15bf:	0c 02 0c 02 0b 02 0b 02 0b 02 0b 02 0a 02 0a 02     ................
    15cf:	0a 02 09 02 09 02 09 02 08 02 08 02 08 02 08 02     ................
    15df:	07 02 07 02 07 02 06 02 06 02 06 02 05 02 05 02     ................
    15ef:	05 02 05 02 04 02 04 02 04 02 03 02 03 02 03 02     ................
    15ff:	03 02 02 02 02 02 02 02 01 02 01 02 01 02 00 02     ................
    160f:	00 02 00 02 00 02 ff 01 ff 01 ff 01 fe 01 fe 01     ................
    161f:	fe 01 fd 01 fd 01 fd 01 fd 01 fc 01 fc 01 fc 01     ................
    162f:	fb 01 fb 01 fb 01 fa 01 fa 01 fa 01 fa 01 f9 01     ................
    163f:	f9 01 f9 01 f8 01 f8 01 f8 01 f7 01 f7 01 f7 01     ................
    164f:	f7 01 f6 01 f6 01 f6 01 f5 01 f5 01 f5 01 f4 01     ................
    165f:	f4 01 f4 01 f4 01 f3 01 f3 01 f3 01 f2 01 f2 01     ................
    166f:	f2 01 f2 01 f1 01 f1 01 f1 01 f0 01 f0 01 f0 01     ................
    167f:	ef 01 ef 01 ef 01 ee 01 ee 01 ee 01 ee 01 ed 01     ................
    168f:	ed 01 ed 01 ec 01 ec 01 ec 01 eb 01 eb 01 eb 01     ................
    169f:	eb 01 ea 01 ea 01 ea 01 e9 01 e9 01 e9 01 e8 01     ................
    16af:	e8 01 e8 01 e8 01 e7 01 e7 01 e7 01 e6 01 e6 01     ................
    16bf:	e6 01 e5 01 e5 01 e5 01 e5 01 e4 01 e4 01 e4 01     ................
    16cf:	e3 01 e3 01 e3 01 e2 01 e2 01 e2 01 e2 01 e1 01     ................
    16df:	e1 01 e1 01 e0 01 e0 01 e0 01 df 01 df 01 df 01     ................
    16ef:	de 01 de 01 de 01 de 01 dd 01 dd 01 dd 01 dc 01     ................
    16ff:	dc 01 dc 01 db 01 db 01 db 01 db 01 da 01 da 01     ................
    170f:	da 01 d9 01 d9 01 d9 01 d8 01 d8 01 d8 01 d7 01     ................
    171f:	d7 01 d7 01 d7 01 d6 01 d6 01 d6 01 d5 01 d5 01     ................
    172f:	d5 01 d4 01 d4 01 d4 01 d3 01 d3 01 d3 01 d3 01     ................
    173f:	d2 01 d2 01 d2 01 d1 01 d1 01 d1 01 d0 01 d0 01     ................
    174f:	d0 01 cf 01 cf 01 cf 01 cf 01 ce 01 ce 01 ce 01     ................
    175f:	cd 01 cd 01 cd 01 cc 01 cc 01 cc 01 cb 01 cb 01     ................
    176f:	cb 01 cb 01 ca 01 ca 01 ca 01 c9 01 c9 01 c9 01     ................
    177f:	c8 01 c8 01 c8 01 c7 01 c7 01 c7 01 c6 01 c6 01     ................
    178f:	c6 01 c6 01 c5 01 c5 01 c5 01 c4 01 c4 01 c4 01     ................
    179f:	c3 01 c3 01 c3 01 c2 01 c2 01 c2 01 c2 01 c1 01     ................
    17af:	c1 01 c1 01 c0 01 c0 01 c0 01 bf 01 bf 01 bf 01     ................
    17bf:	be 01 be 01 be 01 bd 01 bd 01 bd 01 bd 01 bc 01     ................
    17cf:	bc 01 bc 01 bb 01 bb 01 bb 01 ba 01 ba 01 ba 01     ................
    17df:	b9 01 b9 01 b9 01 b8 01 b8 01 b8 01 b7 01 b7 01     ................
    17ef:	b7 01 b7 01 b6 01 b6 01 b6 01 b5 01 b5 01 b5 01     ................
    17ff:	b4 01 b4 01 b4 01 b3 01 b3 01 b3 01 b2 01 b2 01     ................
    180f:	b2 01 b1 01 b1 01 b1 01 b1 01 b0 01 b0 01 b0 01     ................
    181f:	af 01 af 01 af 01 ae 01 ae 01 ae 01 ad 01 ad 01     ................
    182f:	ad 01 ac 01 ac 01 ac 01 ab 01 ab 01 ab 01 aa 01     ................
    183f:	aa 01 aa 01 a9 01 a9 01 a9 01 a9 01 a8 01 a8 01     ................
    184f:	a8 01 a7 01 a7 01 a7 01 a6 01 a6 01 a6 01 a5 01     ................
    185f:	a5 01 a5 01 a4 01 a4 01 a4 01 a3 01 a3 01 a3 01     ................
    186f:	a2 01 a2 01 a2 01 a1 01 a1 01 a1 01 a0 01 a0 01     ................
    187f:	a0 01 9f 01 9f 01 9f 01 9f 01 9e 01 9e 01 9e 01     ................
    188f:	9d 01 9d 01 9d 01 9c 01 9c 01 9c 01 9b 01 9b 01     ................
    189f:	9b 01 9a 01 9a 01 9a 01 99 01 99 01 99 01 98 01     ................
    18af:	98 01 98 01 97 01 97 01 97 01 96 01 96 01 96 01     ................
    18bf:	95 01 95 01 95 01 94 01 94 01 94 01 93 01 93 01     ................
    18cf:	93 01 92 01 92 01 92 01 91 01 91 01 91 01 90 01     ................
    18df:	90 01 90 01 8f 01 8f 01 8f 01 8e 01 8e 01 8e 01     ................
    18ef:	8d 01 8d 01 8d 01 8c 01 8c 01 8c 01 8b 01 8b 01     ................
    18ff:	8b 01 8a 01 8a 01 8a 01 89 01 89 01 89 01 88 01     ................
    190f:	88 01 88 01 87 01 87 01 87 01 86 01 86 01 86 01     ................
    191f:	85 01 85 01 85 01 84 01 84 01 84 01 83 01 83 01     ................
    192f:	83 01 82 01 82 01 82 01 81 01 81 01 81 01 80 01     ................
    193f:	80 01 80 01 7f 01 7f 01 7f 01 7e 01 7e 01 7e 01     ..........~.~.~.
    194f:	7d 01 7d 01 7d 01 7c 01 7c 01 7c 01 7b 01 7b 01     }.}.}.|.|.|.{.{.
    195f:	7b 01 7a 01 7a 01 7a 01 79 01 79 01 79 01 78 01     {.z.z.z.y.y.y.x.
    196f:	78 01 78 01 77 01 77 01 76 01 76 01 76 01 75 01     x.x.w.w.v.v.v.u.
    197f:	75 01 75 01 74 01 74 01 74 01 73 01 73 01 73 01     u.u.t.t.t.s.s.s.
    198f:	72 01 72 01 72 01 71 01 71 01 71 01 70 01 70 01     r.r.r.q.q.q.p.p.
    199f:	70 01 6f 01 6f 01 6f 01 6e 01 6e 01 6d 01 6d 01     p.o.o.o.n.n.m.m.
    19af:	6d 01 6c 01 6c 01 6c 01 6b 01 6b 01 6b 01 6a 01     m.l.l.l.k.k.k.j.
    19bf:	6a 01 6a 01 69 01 69 01 69 01 68 01 68 01 68 01     j.j.i.i.i.h.h.h.
    19cf:	67 01 67 01 66 01 66 01 66 01 65 01 65 01 65 01     g.g.f.f.f.e.e.e.
    19df:	64 01 64 01 64 01 63 01 63 01 63 01 62 01 62 01     d.d.d.c.c.c.b.b.
    19ef:	62 01 61 01 61 01 60 01 60 01 60 01 5f 01 5f 01     b.a.a.`.`.`._._.
    19ff:	5f 01 5e 01 5e 01 5e 01 5d 01 5d 01 5d 01 5c 01     _.^.^.^.].].].\.
    1a0f:	5c 01 5b 01 5b 01 5b 01 5a 01 5a 01 5a 01 59 01     \.[.[.[.Z.Z.Z.Y.
    1a1f:	59 01 59 01 58 01 58 01 58 01 57 01 57 01 56 01     Y.Y.X.X.X.W.W.V.
    1a2f:	56 01 56 01 55 01 55 01 55 01 54 01 54 01 54 01     V.V.U.U.U.T.T.T.
    1a3f:	53 01 53 01 52 01 52 01 52 01 51 01 51 01 51 01     S.S.R.R.R.Q.Q.Q.
    1a4f:	50 01 50 01 50 01 4f 01 4f 01 4e 01 4e 01 4e 01     P.P.P.O.O.N.N.N.
    1a5f:	4d 01 4d 01 4d 01 4c 01 4c 01 4b 01 4b 01 4b 01     M.M.M.L.L.K.K.K.
    1a6f:	4a 01 4a 01 4a 01 49 01 49 01 49 01 48 01 48 01     J.J.J.I.I.I.H.H.
    1a7f:	47 01 47 01 47 01 46 01 46 01 46 01 45 01 45 01     G.G.G.F.F.F.E.E.
    1a8f:	44 01 44 01 44 01 43 01 43 01 43 01 42 01 42 01     D.D.D.C.C.C.B.B.
    1a9f:	41 01 41 01 41 01 40 01 40 01 40 01 3f 01 3f 01     A.A.A.@.@.@.?.?.
    1aaf:	3e 01 3e 01 3e 01 3d 01 3d 01 3c 01 3c 01 3c 01     >.>.>.=.=.<.<.<.
    1abf:	3b 01 3b 01 3b 01 3a 01 3a 01 39 01 39 01 39 01     ;.;.;.:.:.9.9.9.
    1acf:	38 01 38 01 38 01 37 01 37 01 36 01 36 01 36 01     8.8.8.7.7.6.6.6.
    1adf:	35 01 35 01 34 01 34 01 34 01 33 01 33 01 33 01     5.5.4.4.4.3.3.3.
    1aef:	32 01 32 01 31 01 31 01 31 01 30 01 30 01 2f 01     2.2.1.1.1.0.0./.
    1aff:	2f 01 2f 01 2e 01 2e 01 2d 01 2d 01 2d 01 2c 01     /./.....-.-.-.,.
    1b0f:	2c 01 2b 01 2b 01 2b 01 2a 01 2a 01 2a 01 29 01     ,.+.+.+.*.*.*.).
    1b1f:	29 01 28 01 28 01 28 01 27 01 27 01 26 01 26 01     ).(.(.(.'.'.&.&.
    1b2f:	26 01 25 01 25 01 24 01 24 01 24 01 23 01 23 01     &.%.%.$.$.$.#.#.
    1b3f:	22 01 22 01 22 01 21 01 21 01 20 01 20 01 20 01     ".".".!.!. . . .
    1b4f:	1f 01 1f 01 1e 01 1e 01 1e 01 1d 01 1d 01 1c 01     ................
    1b5f:	1c 01 1c 01 1b 01 1b 01 1a 01 1a 01 19 01 19 01     ................
    1b6f:	19 01 18 01 18 01 17 01 17 01 17 01 16 01 16 01     ................
    1b7f:	15 01 15 01 15 01 14 01 14 01 13 01 13 01 12 01     ................
    1b8f:	12 01 12 01 11 01 11 01 10 01 10 01 10 01 0f 01     ................
    1b9f:	0f 01 0e 01 0e 01 0d 01 0d 01 0d 01 0c 01 0c 01     ................
    1baf:	0b 01 0b 01 0b 01 0a 01 0a 01 09 01 09 01 08 01     ................
    1bbf:	08 01 08 01 07 01 07 01 06 01 06 01 05 01 05 01     ................
    1bcf:	05 01 04 01 04 01 03 01 03 01 02 01 02 01 02 01     ................
    1bdf:	01 01 01 01 00 01 00 01 ff 00 ff 00 ff 00 fe 00     ................
    1bef:	fe 00 fd 00 fd 00 fc 00 fc 00 fc 00 fb 00 fb 00     ................
    1bff:	fa 00 fa 00 f9 00 f9 00 f8 00 f8 00 f8 00 f7 00     ................
    1c0f:	f7 00 f6 00 f6 00 f5 00 f5 00 f4 00 f4 00 f4 00     ................
    1c1f:	f3 00 f3 00 f2 00 f2 00 f1 00 f1 00 f0 00 f0 00     ................
    1c2f:	f0 00 ef 00 ef 00 ee 00 ee 00 ed 00 ed 00 ec 00     ................
    1c3f:	ec 00 eb 00 eb 00 eb 00 ea 00 ea 00 e9 00 e9 00     ................
    1c4f:	e8 00 e8 00 e7 00 e7 00 e6 00 e6 00 e6 00 e5 00     ................
    1c5f:	e5 00 e4 00 e4 00 e3 00 e3 00 e2 00 e2 00 e1 00     ................
    1c6f:	e1 00 e0 00 e0 00 df 00 df 00 df 00 de 00 de 00     ................
    1c7f:	dd 00 dd 00 dc 00 dc 00 db 00 db 00 da 00 da 00     ................
    1c8f:	d9 00 d9 00 d8 00 d8 00 d7 00 d7 00 d6 00 d6 00     ................
    1c9f:	d5 00 d5 00 d5 00 d4 00 d4 00 d3 00 d3 00 d2 00     ................
    1caf:	d2 00 d1 00 d1 00 d0 00 d0 00 cf 00 cf 00 ce 00     ................
    1cbf:	ce 00 cd 00 cd 00 cc 00 cc 00 cb 00 cb 00 ca 00     ................
    1ccf:	ca 00 c9 00 c9 00 c8 00 c8 00 c7 00 c7 00 c6 00     ................
    1cdf:	c6 00 c5 00 c5 00 c4 00 c4 00 c3 00 c3 00 c2 00     ................
    1cef:	c2 00 c1 00 c1 00 c0 00 c0 00 bf 00 bf 00 be 00     ................
    1cff:	be 00 bd 00 bd 00 bc 00 bc 00 bb 00 bb 00 ba 00     ................
    1d0f:	ba 00 b9 00 b8 00 b8 00 b7 00 b7 00 b6 00 b6 00     ................
    1d1f:	b5 00 b5 00 b4 00 b4 00 b3 00 b3 00 b2 00 b2 00     ................
    1d2f:	b1 00 b1 00 b0 00 b0 00 af 00 ae 00 ae 00 ad 00     ................
    1d3f:	ad 00 ac 00 ac 00 ab 00 ab 00 aa 00 aa 00 a9 00     ................
    1d4f:	a8 00 a8 00 a7 00 a7 00 a6 00 a6 00 a5 00 a5 00     ................
    1d5f:	a4 00 a4 00 a3 00 a2 00 a2 00 a1 00 a1 00 a0 00     ................
    1d6f:	a0 00 9f 00 9f 00 9e 00 9d 00 9d 00 9c 00 9c 00     ................
    1d7f:	9b 00 9b 00 9a 00 99 00 99 00 98 00 98 00 97 00     ................
    1d8f:	97 00 96 00 95 00 95 00 94 00 94 00 93 00 93 00     ................
    1d9f:	92 00 91 00 91 00 90 00 90 00 8f 00 8e 00 8e 00     ................
    1daf:	8d 00 8d 00 8c 00 8b 00 8b 00 8a 00 8a 00 89 00     ................
    1dbf:	88 00 88 00 87 00 87 00 86 00 85 00 85 00 84 00     ................
    1dcf:	84 00 83 00 82 00 82 00 81 00 81 00 80 00 7f 00     ................
    1ddf:	7f 00 7e 00 7d 00 7d 00 7c 00 7c 00 7b 00 7a 00     ..~.}.}.|.|.{.z.
    1def:	7a 00 79 00 78 00 78 00 77 00 77 00 76 00 75 00     z.y.x.x.w.w.v.u.
    1dff:	75 00 74 00 73 00 73 00 72 00 71 00 71 00 70 00     u.t.s.s.r.q.q.p.
    1e0f:	6f 00 6f 00 6e 00 6e 00 6d 00 6c 00 6c 00 6b 00     o.o.n.n.m.l.l.k.
    1e1f:	6a 00 6a 00 69 00 68 00 68 00 67 00 66 00 66 00     j.j.i.h.h.g.f.f.
    1e2f:	65 00 64 00 64 00 63 00 62 00 62 00 61 00 60 00     e.d.d.c.b.b.a.`.
    1e3f:	5f 00 5f 00 5e 00 5d 00 5d 00 5c 00 5b 00 5b 00     _._.^.].].\.[.[.
    1e4f:	5a 00 59 00 59 00 58 00 57 00 56 00 56 00 55 00     Z.Y.Y.X.W.V.V.U.
    1e5f:	54 00 54 00 53 00 52 00 51 00 51 00 50 00 4f 00     T.T.S.R.Q.Q.P.O.
    1e6f:	4f 00 4e 00 4d 00 4c 00 4c 00 4b 00 4a 00 49 00     O.N.M.L.L.K.J.I.
    1e7f:	49 00 48 00 47 00 46 00 46 00 45 00 44 00 43 00     I.H.G.F.F.E.D.C.
    1e8f:	43 00 42 00 41 00 40 00 40 00 3f 00 3e 00 3d 00     C.B.A.@.@.?.>.=.
    1e9f:	3c 00 3c 00 3b 00 3a 00 39 00 39 00 38 00 37 00     <.<.;.:.9.9.8.7.
    1eaf:	36 00 35 00 35 00 34 00 33 00 32 00 31 00 31 00     6.5.5.4.3.2.1.1.
    1ebf:	30 00 2f 00 2e 00 2d 00 2d 00 2c 00 2b 00 2a 00     0./...-.-.,.+.*.
    1ecf:	29 00 28 00 28 00 27 00 26 00 25 00 24 00 23 00     ).(.(.'.&.%.$.#.
    1edf:	23 00 22 00 21 00 20 00 1f 00 1e 00 1d 00 1c 00     #.".!. .........
    1eef:	1c 00 1b 00 1a 00 19 00 18 00 17 00 16 00 15 00     ................
    1eff:	15 00 14 00 13 00 12 00 11 00 10 00 0f 00 0e 00     ................
    1f0f:	0d 00 0c 00 0b 00 0a 00 0a 00 09 00 08 00 07 00     ................
    1f1f:	06 00 05 00 04 00 03 00 02 00 01 00 00 00 ff ff     ................
    1f2f:	fe ff fd ff fc ff fb ff fa ff f9 ff f8 ff f7 ff     ................
    1f3f:	f6 ff f5 ff f4 ff f3 ff f2 ff f1 ff f0 ff ef ff     ................
    1f4f:	ee ff ed ff ec ff eb ff ea ff e9 ff e8 ff e6 ff     ................
    1f5f:	e5 ff e4 ff e3 ff e2 ff e1 ff e0 ff df ff de ff     ................
    1f6f:	dd ff dc ff da ff d9 ff d8 ff d7 ff d6 ff d5 ff     ................
    1f7f:	d4 ff d2 ff d1 ff d0 ff cf ff ce ff cc ff cb ff     ................
    1f8f:	ca ff c9 ff c8 ff c6 ff c5 ff c4 ff c3 ff c1 ff     ................
    1f9f:	c0 ff bf ff be ff bc ff bb ff ba ff b8 ff b7 ff     ................
    1faf:	b6 ff b5 ff b3 ff b2 ff b1 ff af ff ae ff ac ff     ................
    1fbf:	ab ff aa ff a8 ff a7 ff a6 ff a4 ff a3 ff a1 ff     ................
    1fcf:	a0 ff 9e ff 9d ff 9b ff 9a ff 98 ff 97 ff 95 ff     ................
    1fdf:	94 ff 92 ff 91 ff 8f ff 8e ff 8c ff 8b ff 89 ff     ................
    1fef:	87 ff 86 ff 84 ff 82 ff 81 ff 7f ff 7d ff 7c ff     ............}.|.
    1fff:	7a ff 78 ff 77 ff 75 ff 73 ff 71 ff 70 ff 6e ff     z.x.w.u.s.q.p.n.
    200f:	6c ff 6a ff 68 ff 66 ff 64 ff 63 ff 61 ff 5f ff     l.j.h.f.d.c.a._.
    201f:	5d ff 5b ff 59 ff 57 ff 55 ff 53 ff 51 ff 4e ff     ].[.Y.W.U.S.Q.N.
    202f:	4c ff 4a ff 48 ff 46 ff 44 ff 41 ff 3f ff 3d ff     L.J.H.F.D.A.?.=.
    203f:	3b ff 38 ff 36 ff 34 ff 31 ff 2f ff 2c ff 2a ff     ;.8.6.4.1./.,.*.
    204f:	27 ff 25 ff 22 ff 1f ff 1d ff 1a ff 17 ff 14 ff     '.%."...........
    205f:	12 ff 0f ff 0c ff 09 ff 06 ff 03 ff 00 ff fd fe     ................
    206f:	f9 fe f6 fe f3 fe f0 fe ec fe e9 fe e5 fe e2 fe     ................
    207f:	de fe da fe d6 fe d2 fe ce fe ca fe c6 fe c2 fe     ................
    208f:	bd fe b9 fe b4 fe b0 fe ab fe a6 fe a1 fe 9b fe     ................
    209f:	96 fe 90 fe 8a fe 84 fe 7e fe 78 fe 71 fe 6a fe     ........~.x.q.j.
    20af:	63 fe 5b fe 53 fe 4b fe 42 fe 39 fe 2f fe 24 fe     c.[.S.K.B.9./.$.
    20bf:	19 fe 0d fe ff fd f1 fd e1 fd cf fd bb fd a3 fd     ................
    20cf:	87 fd 63 fd 33 fd e5 fc                             ..c.3...

000020d7 <RTDSensorLUT>:
    20d7:	00 00 03 00 06 00 09 00 0c 00 10 00 13 00 16 00     ................
    20e7:	19 00 1c 00 1f 00 22 00 25 00 28 00 2b 00 2f 00     ......".%.(.+./.
    20f7:	32 00 35 00 38 00 3b 00 3e 00 41 00 44 00 47 00     2.5.8.;.>.A.D.G.
    2107:	4a 00 4e 00 51 00 54 00 57 00 5a 00 5d 00 60 00     J.N.Q.T.W.Z.].`.
    2117:	63 00 66 00 69 00 6d 00 70 00 73 00 76 00 79 00     c.f.i.m.p.s.v.y.
    2127:	7c 00 7f 00 82 00 85 00 88 00 8c 00 8f 00 92 00     |...............
    2137:	95 00 98 00 9b 00 9e 00 a1 00 a4 00 a7 00 ab 00     ................
    2147:	ae 00 b1 00 b4 00 b7 00 ba 00 bd 00 c0 00 c3 00     ................
    2157:	ca 00 cd 00 d0 00 d3 00 d6 00 d9 00 dc 00 df 00     ................
    2167:	e2 00 e5 00 e9 00 ec 00 ef 00 f2 00 f5 00 f8 00     ................
    2177:	fb 00 fe 00 01 01 04 01 08 01 0b 01 0e 01 11 01     ................
    2187:	14 01 17 01 1a 01 1d 01 20 01 23 01 27 01 2a 01     ........ .#.'.*.
    2197:	2d 01 30 01 33 01 36 01 39 01 3c 01 3f 01 42 01     -.0.3.6.9.<.?.B.
    21a7:	46 01 49 01 4c 01 4f 01 52 01 55 01 58 01 5b 01     F.I.L.O.R.U.X.[.
    21b7:	5e 01 61 01 65 01 68 01 6b 01 6e 01 71 01 74 01     ^.a.e.h.k.n.q.t.
    21c7:	77 01 7a 01 7d 01 80 01 84 01 87 01 8a 01 8d 01     w.z.}...........
    21d7:	90 01 93 01 96 01 99 01 9c 01 9f 01 a3 01 a6 01     ................
    21e7:	a9 01 ac 01 af 01 b2 01 b5 01 b8 01 bb 01 be 01     ................
    21f7:	c2 01 c5 01 c8 01 cb 01 ce 01 d1 01 d4 01 d7 01     ................
    2207:	da 01 dd 01 e1 01 e4 01 e7 01 ea 01 ed 01 f0 01     ................
    2217:	f3 01 f6 01 f9 01 fc 01 00 02 03 02 06 02 09 02     ................
    2227:	0c 02 0f 02 12 02 15 02 18 02 1b 02 1f 02 22 02     ..............".
    2237:	25 02 28 02 2b 02 31 02 34 02 37 02 3a 02 3e 02     %.(.+.1.4.7.:.>.
    2247:	41 02 44 02 47 02 4a 02 4d 02 50 02 53 02 56 02     A.D.G.J.M.P.S.V.
    2257:	59 02 5d 02 60 02 63 02 66 02 69 02 6c 02 6f 02     Y.].`.c.f.i.l.o.
    2267:	72 02 75 02 78 02 7c 02 7f 02 82 02 85 02 88 02     r.u.x.|.........
    2277:	8b 02 8e 02 91 02 94 02 97 02 9b 02 9e 02 a1 02     ................
    2287:	a4 02 a7 02 aa 02 ad 02 b0 02 b3 02 b6 02 ba 02     ................
    2297:	bd 02 c0 02 c3 02 c6 02 c9 02 cc 02 cf 02 d2 02     ................
    22a7:	d5 02 d9 02 dc 02 df 02 e2 02 e5 02 e8 02 eb 02     ................
    22b7:	ee 02 f1 02 f4 02 f8 02 fb 02 fe 02 01 03 04 03     ................
    22c7:	07 03 0a 03 0d 03 10 03 13 03 17 03 1a 03 1d 03     ................
    22d7:	20 03 23 03 26 03 29 03 2c 03 2f 03 32 03 36 03      .#.&.).,./.2.6.
    22e7:	39 03 3c 03 3f 03 42 03 45 03 48 03 4b 03 4e 03     9.<.?.B.E.H.K.N.
    22f7:	51 03 55 03 58 03 5b 03 5e 03 61 03 64 03 67 03     Q.U.X.[.^.a.d.g.
    2307:	6a 03 6d 03 74 03 77 03 7a 03 7d 03 80 03 83 03     j.m.t.w.z.}.....
    2317:	86 03 89 03 8c 03 8f 03 93 03 96 03 99 03 9c 03     ................
    2327:	9f 03 a2 03 a5 03 a8 03 ab 03 ae 03 b2 03 b5 03     ................
    2337:	b8 03 bb 03 be 03 c1 03 c4 03 c7 03 ca 03 cd 03     ................
    2347:	d1 03 d4 03 d7 03 da 03 dd 03 e0 03 e3 03 e6 03     ................
    2357:	e9 03 ec 03 f0 03 f3 03 f6 03 f9 03 fc 03 ff 03     ................
    2367:	02 04 05 04 08 04 0b 04 0f 04 12 04 15 04 18 04     ................
    2377:	1b 04 1e 04 21 04 24 04 27 04 2a 04 2e 04 31 04     ....!.$.'.*...1.
    2387:	34 04 37 04 3a 04 3d 04 40 04 43 04 46 04 49 04     4.7.:.=.@.C.F.I.
    2397:	4d 04 50 04 53 04 56 04 59 04 5c 04 5f 04 62 04     M.P.S.V.Y.\._.b.
    23a7:	65 04 68 04 6c 04 6f 04 72 04 75 04 78 04 7b 04     e.h.l.o.r.u.x.{.
    23b7:	7e 04 81 04 84 04 87 04 8b 04 8e 04 91 04 94 04     ~...............
    23c7:	97 04 9d 04 a0 04 a3 04 a6 04 aa 04 ad 04 b0 04     ................
    23d7:	b3 04 b6 04 b9 04 bc 04 bf 04 c2 04 c5 04 c9 04     ................
    23e7:	cc 04 cf 04 d2 04 d5 04 d8 04 db 04 de 04 e1 04     ................
    23f7:	e4 04 e8 04 eb 04 ee 04 f1 04 f4 04 f7 04 fa 04     ................
    2407:	fd 04 00 05 03 05 07 05 0a 05 0d 05 10 05 13 05     ................
    2417:	16 05 19 05 1c 05 1f 05 22 05 26 05 29 05 2c 05     ........".&.).,.
    2427:	2f 05 32 05 35 05 38 05 3b 05 3e 05 41 05 45 05     /.2.5.8.;.>.A.E.
    2437:	48 05 4b 05 4e 05 51 05 54 05 57 05 5a 05 5d 05     H.K.N.Q.T.W.Z.].
    2447:	60 05 64 05 67 05 6a 05 6d 05 70 05 73 05 76 05     `.d.g.j.m.p.s.v.
    2457:	79 05 7c 05 7f 05 83 05 86 05 89 05 8c 05 8f 05     y.|.............
    2467:	92 05 95 05 98 05 9b 05 9e 05 a2 05 a5 05 a8 05     ................
    2477:	ae 05 b1 05 b4 05 b7 05 ba 05 bd 05 c1 05 c4 05     ................
    2487:	c7 05 ca 05 cd 05 d0 05 d3 05 d6 05 d9 05 dc 05     ................
    2497:	e0 05 e3 05 e6 05 e9 05 ec 05 ef 05 f2 05 f5 05     ................
    24a7:	f8 05 fb 05 ff 05 02 06 05 06 08 06 0b 06 0e 06     ................
    24b7:	11 06 14 06 17 06 1a 06 1e 06 21 06 24 06 27 06     ..........!.$.'.
    24c7:	2a 06 2d 06 30 06 33 06 36 06 39 06 3d 06 40 06     *.-.0.3.6.9.=.@.
    24d7:	43 06 46 06 49 06 4c 06 4f 06 52 06 55 06 58 06     C.F.I.L.O.R.U.X.
    24e7:	5c 06 5f 06 62 06 65 06 68 06 6b 06 6e 06 71 06     \._.b.e.h.k.n.q.
    24f7:	74 06 77 06 7b 06 7e 06 81 06 84 06 87 06 8a 06     t.w.{.~.........
    2507:	8d 06 90 06 93 06 96 06 9a 06 9d 06 a0 06 a3 06     ................
    2517:	a6 06 ac 06 af 06 b2 06 b5 06 b9 06 bc 06 bf 06     ................
    2527:	c2 06 c5 06 c8 06 cb 06 ce 06 d1 06 d4 06 d8 06     ................
    2537:	db 06 de 06 e1 06 e4 06 e7 06 ea 06 ed 06 f0 06     ................
    2547:	f3 06 f7 06 fa 06 fd 06 00 07 03 07 06 07 09 07     ................
    2557:	0c 07 0f 07 12 07 16 07 19 07 1c 07 1f 07 22 07     ..............".
    2567:	25 07 28 07 2b 07 2e 07 31 07 35 07 38 07 3b 07     %.(.+...1.5.8.;.
    2577:	3e 07 41 07 44 07 47 07 4a 07 4d 07 50 07 54 07     >.A.D.G.J.M.P.T.
    2587:	57 07 5a 07 5d 07 60 07 63 07 66 07 69 07 6c 07     W.Z.].`.c.f.i.l.
    2597:	6f 07 73 07 76 07 79 07 7c 07 7f 07 82 07 85 07     o.s.v.y.|.......
    25a7:	88 07 8b 07 8e 07 92 07 95 07 98 07 9e 07 a1 07     ................
    25b7:	a4 07 a7 07 aa 07 ad 07 b1 07 b4 07 b7 07 ba 07     ................
    25c7:	bd 07 c0 07 c3 07 c6 07 c9 07 cc 07 d0 07 d3 07     ................
    25d7:	d6 07 d9 07 dc 07 df 07 e2 07 e5 07 e8 07 eb 07     ................
    25e7:	ef 07 f2 07 f5 07 f8 07 fb 07 fe 07 01 08 04 08     ................
    25f7:	07 08 0a 08 0e 08 11 08 14 08 17 08 1a 08 1d 08     ................
    2607:	20 08 23 08 26 08 29 08 2d 08 30 08 33 08 36 08      .#.&.).-.0.3.6.
    2617:	39 08 3c 08 3f 08 42 08 45 08 48 08 4c 08 4f 08     9.<.?.B.E.H.L.O.
    2627:	52 08 55 08 58 08 5b 08 5e 08 61 08 64 08 67 08     R.U.X.[.^.a.d.g.
    2637:	6b 08 6e 08 71 08 74 08 77 08 7a 08 7d 08 83 08     k.n.q.t.w.z.}...
    2647:	86 08 8a 08 8d 08 90 08 93 08 96 08 99 08 9c 08     ................
    2657:	9f 08 a2 08 a5 08 a9 08 ac 08 af 08 b2 08 b5 08     ................
    2667:	b8 08 bb 08 be 08 c1 08 c4 08 c8 08 cb 08 ce 08     ................
    2677:	d1 08 d4 08 d7 08 da 08 dd 08 e0 08 e3 08 e7 08     ................
    2687:	ea 08 ed 08 f0 08 f3 08 f6 08 f9 08 fc 08 ff 08     ................
    2697:	02 09 06 09 09 09 0c 09 0f 09 12 09 15 09 18 09     ................
    26a7:	1b 09 1e 09 21 09 25 09 28 09 2b 09 2e 09 31 09     ....!.%.(.+...1.
    26b7:	34 09 37 09 3a 09 3d 09 40 09 44 09 47 09 4a 09     4.7.:.=.@.D.G.J.
    26c7:	4d 09 50 09 53 09 56 09 59 09 5f 09 63 09 66 09     M.P.S.V.Y._.c.f.
    26d7:	69 09 6c 09 6f 09 72 09 75 09 78 09 7b 09 7e 09     i.l.o.r.u.x.{.~.
    26e7:	82 09 85 09 88 09 8b 09 8e 09 91 09 94 09 97 09     ................
    26f7:	9a 09 9d 09 a1 09 a4 09 a7 09 aa 09 ad 09 b0 09     ................
    2707:	b3 09 b6 09 b9 09 bc 09 c0 09 c3 09 c6 09 c9 09     ................
    2717:	cc 09 cf 09 d2 09 d5 09 d8 09 db 09 df 09 e2 09     ................
    2727:	e5 09 e8 09 eb 09 ee 09 f1 09 f4 09 f7 09 fa 09     ................
    2737:	fe 09 01 0a 04 0a 07 0a 0a 0a 0d 0a 10 0a 13 0a     ................
    2747:	16 0a 19 0a 1d 0a 20 0a 23 0a 26 0a 29 0a 2f 0a     ...... .#.&.)./.
    2757:	32 0a 35 0a 38 0a 3c 0a 3f 0a 42 0a 45 0a 48 0a     2.5.8.<.?.B.E.H.
    2767:	4b 0a 4e 0a 51 0a 54 0a 57 0a 5b 0a 5e 0a 61 0a     K.N.Q.T.W.[.^.a.
    2777:	64 0a 67 0a 6a 0a 6d 0a 70 0a 73 0a 76 0a 7a 0a     d.g.j.m.p.s.v.z.
    2787:	7d 0a 80 0a 83 0a 86 0a 89 0a 8c 0a 8f 0a 92 0a     }...............
    2797:	95 0a 99 0a 9c 0a 9f 0a a2 0a a5 0a a8 0a ab 0a     ................
    27a7:	ae 0a b1 0a b4 0a b8 0a bb 0a be 0a c1 0a c4 0a     ................
    27b7:	c7 0a ca 0a cd 0a d0 0a d3 0a d7 0a da 0a dd 0a     ................
    27c7:	e0 0a e3 0a e6 0a e9 0a ec 0a ef 0a f2 0a f9 0a     ................
    27d7:	fc 0a ff 0a 02 0b 05 0b 08 0b 0b 0b 0e 0b 11 0b     ................
    27e7:	15 0b 18 0b 1b 0b 1e 0b 21 0b 24 0b 27 0b 2a 0b     ........!.$.'.*.
    27f7:	2d 0b 30 0b 34 0b 37 0b 3a 0b 3d 0b 40 0b 43 0b     -.0.4.7.:.=.@.C.
    2807:	46 0b 49 0b 4c 0b 4f 0b 53 0b 56 0b 59 0b 5c 0b     F.I.L.O.S.V.Y.\.
    2817:	5f 0b 62 0b 65 0b 68 0b 6b 0b 6e 0b 72 0b 75 0b     _.b.e.h.k.n.r.u.
    2827:	78 0b 7b 0b 7e 0b 81 0b 84 0b 87 0b 8a 0b 8d 0b     x.{.~...........
    2837:	91 0b 94 0b 97 0b 9a 0b 9d 0b a0 0b a3 0b a6 0b     ................
    2847:	a9 0b ac 0b b0 0b b3 0b b9 0b bc 0b bf 0b c2 0b     ................
    2857:	c5 0b c8 0b cb 0b cf 0b d2 0b d5 0b d8 0b db 0b     ................
    2867:	de 0b e1 0b e4 0b e7 0b ea 0b ee 0b f1 0b f4 0b     ................
    2877:	f7 0b fa 0b fd 0b 00 0c 03 0c 06 0c 09 0c 0d 0c     ................
    2887:	10 0c 13 0c 16 0c 19 0c 1c 0c 1f 0c 22 0c 25 0c     ............".%.
    2897:	28 0c 2c 0c 2f 0c 32 0c 35 0c 38 0c 3b 0c 3e 0c     (.,./.2.5.8.;.>.
    28a7:	41 0c 44 0c 47 0c 4b 0c 4e 0c 51 0c 54 0c 57 0c     A.D.G.K.N.Q.T.W.
    28b7:	5a 0c 5d 0c 60 0c 63 0c 66 0c 6a 0c 6d 0c 70 0c     Z.].`.c.f.j.m.p.
    28c7:	76 0c 79 0c 7c 0c 7f 0c 82 0c 85 0c 89 0c 8c 0c     v.y.|...........
    28d7:	8f 0c 92 0c 95 0c 98 0c 9b 0c 9e 0c a1 0c a4 0c     ................
    28e7:	a8 0c ab 0c ae 0c b1 0c b4 0c b7 0c ba 0c bd 0c     ................
    28f7:	c0 0c c3 0c c7 0c ca 0c cd 0c d0 0c d3 0c d6 0c     ................
    2907:	d9 0c dc 0c df 0c e2 0c e6 0c e9 0c ec 0c ef 0c     ................
    2917:	f2 0c f5 0c f8 0c fb 0c fe 0c 01 0d 05 0d 08 0d     ................
    2927:	0b 0d 0e 0d 11 0d 14 0d 17 0d 1a 0d 1d 0d 20 0d     .............. .
    2937:	24 0d 2a 0d 2d 0d 30 0d 33 0d 36 0d 39 0d 3c 0d     $.*.-.0.3.6.9.<.
    2947:	3f 0d 43 0d 46 0d 49 0d 4c 0d 4f 0d 52 0d 55 0d     ?.C.F.I.L.O.R.U.
    2957:	58 0d 5b 0d 5e 0d 62 0d 65 0d 68 0d 6b 0d 6e 0d     X.[.^.b.e.h.k.n.
    2967:	71 0d 74 0d 77 0d 7a 0d 7d 0d 81 0d 84 0d 87 0d     q.t.w.z.}.......
    2977:	8a 0d 8d 0d 90 0d 93 0d 96 0d 99 0d 9c 0d a0 0d     ................
    2987:	a3 0d a6 0d a9 0d ac 0d af 0d b2 0d b5 0d b8 0d     ................
    2997:	bb 0d bf 0d c2 0d c5 0d c8 0d cb 0d ce 0d d1 0d     ................
    29a7:	d4 0d da 0d de 0d e1 0d e4 0d e7 0d ea 0d ed 0d     ................
    29b7:	f0 0d f3 0d f6 0d f9 0d fd 0d 00 0e 03 0e 06 0e     ................
    29c7:	09 0e 0c 0e 0f 0e 12 0e 15 0e 18 0e 1c 0e 1f 0e     ................
    29d7:	22 0e 25 0e 28 0e 2b 0e 2e 0e 31 0e 34 0e 37 0e     ".%.(.+...1.4.7.
    29e7:	3b 0e 3e 0e 41 0e 44 0e 47 0e 4a 0e 4d 0e 50 0e     ;.>.A.D.G.J.M.P.
    29f7:	53 0e 56 0e 5a 0e 5d 0e 60 0e 63 0e 66 0e 69 0e     S.V.Z.].`.c.f.i.
    2a07:	6c 0e 6f 0e 72 0e 75 0e 79 0e 7c 0e 7f 0e 85 0e     l.o.r.u.y.|.....
    2a17:	88 0e 8b 0e 8e 0e 91 0e 94 0e 98 0e 9b 0e 9e 0e     ................
    2a27:	a1 0e a4 0e a7 0e aa 0e ad 0e b0 0e b3 0e b7 0e     ................
    2a37:	ba 0e bd 0e c0 0e c3 0e c6 0e c9 0e cc 0e cf 0e     ................
    2a47:	d2 0e d6 0e d9 0e dc 0e df 0e e2 0e e5 0e e8 0e     ................
    2a57:	eb 0e ee 0e f1 0e f5 0e f8 0e fb 0e fe 0e 01 0f     ................
    2a67:	04 0f 07 0f 0a 0f 0d 0f 10 0f 14 0f 17 0f 1a 0f     ................
    2a77:	1d 0f 20 0f 23 0f 26 0f 2c 0f 2f 0f 33 0f 36 0f     .. .#.&.,./.3.6.
    2a87:	39 0f 3c 0f 3f 0f 42 0f 45 0f 48 0f 4b 0f 4e 0f     9.<.?.B.E.H.K.N.
    2a97:	52 0f 55 0f 58 0f 5b 0f 5e 0f 61 0f 64 0f 67 0f     R.U.X.[.^.a.d.g.
    2aa7:	6a 0f 6d 0f 71 0f 74 0f 77 0f 7a 0f 7d 0f 80 0f     j.m.q.t.w.z.}...
    2ab7:	83 0f 86 0f 89 0f 8c 0f 90 0f 93 0f 96 0f 99 0f     ................
    2ac7:	9c 0f 9f 0f a2 0f a5 0f a8 0f ab 0f af 0f b2 0f     ................
    2ad7:	b5 0f b8 0f bb 0f be 0f c1 0f c4 0f c7 0f ce 0f     ................
    2ae7:	d1 0f d4 0f d7 0f da 0f dd 0f e0 0f e3 0f e6 0f     ................
    2af7:	e9 0f ed 0f f0 0f f3 0f f6 0f f9 0f fc 0f ff 0f     ................
    2b07:	02 10 05 10 08 10 0c 10 0f 10 12 10 15 10 18 10     ................
    2b17:	1b 10 1e 10 21 10 24 10 27 10 2b 10 2e 10 31 10     ....!.$.'.+...1.
    2b27:	34 10 37 10 3a 10 3d 10 40 10 43 10 46 10 4a 10     4.7.:.=.@.C.F.J.
    2b37:	4d 10 50 10 53 10 56 10 59 10 5c 10 5f 10 62 10     M.P.S.V.Y.\._.b.
    2b47:	65 10 6c 10 6f 10 72 10 75 10 78 10 7b 10 7e 10     e.l.o.r.u.x.{.~.
    2b57:	81 10 84 10 88 10 8b 10 8e 10 91 10 94 10 97 10     ................
    2b67:	9a 10 9d 10 a0 10 a3 10 a7 10 aa 10 ad 10 b0 10     ................
    2b77:	b3 10 b6 10 b9 10 bc 10 bf 10 c2 10 c6 10 c9 10     ................
    2b87:	cc 10 cf 10 d2 10 d5 10 d8 10 db 10 de 10 e1 10     ................
    2b97:	e5 10 e8 10 eb 10 ee 10 f1 10 f4 10 f7 10 fa 10     ................
    2ba7:	fd 10 00 11 07 11 0a 11 0d 11 10 11 13 11 16 11     ................
    2bb7:	19 11 1c 11 1f 11 23 11 26 11 29 11 2c 11 2f 11     ......#.&.).,./.
    2bc7:	32 11 35 11 38 11 3b 11 3e 11 42 11 45 11 48 11     2.5.8.;.>.B.E.H.
    2bd7:	4b 11 4e 11 51 11 54 11 57 11 5a 11 5d 11 61 11     K.N.Q.T.W.Z.].a.
    2be7:	64 11 67 11 6a 11 6d 11 70 11 73 11 76 11 79 11     d.g.j.m.p.s.v.y.
    2bf7:	7c 11 80 11 83 11 86 11 89 11 8c 11 8f 11 92 11     |...............
    2c07:	95 11 98 11 9f 11 a2 11 a5 11 a8 11 ab 11 ae 11     ................
    2c17:	b1 11 b4 11 b7 11 ba 11 be 11 c1 11 c4 11 c7 11     ................
    2c27:	ca 11 cd 11 d0 11 d3 11 d6 11 d9 11 dd 11 e0 11     ................
    2c37:	e3 11 e6 11 e9 11 ec 11 ef 11 f2 11 f5 11 f8 11     ................
    2c47:	fc 11 ff 11 02 12 05 12 08 12 0b 12 0e 12 11 12     ................
    2c57:	14 12 17 12 1b 12 1e 12 21 12 24 12 27 12 2a 12     ........!.$.'.*.
    2c67:	2d 12 33 12 36 12 3a 12 3d 12 40 12 43 12 46 12     -.3.6.:.=.@.C.F.
    2c77:	49 12 4c 12 4f 12 52 12 55 12 59 12 5c 12 5f 12     I.L.O.R.U.Y.\._.
    2c87:	62 12 65 12 68 12 6b 12 6e 12 71 12 74 12 78 12     b.e.h.k.n.q.t.x.
    2c97:	7b 12 7e 12 81 12 84 12 87 12 8a 12 8d 12 90 12     {.~.............
    2ca7:	93 12 97 12 9a 12 9d 12 a0 12 a3 12 a6 12 a9 12     ................
    2cb7:	ac 12 af 12 b2 12 b6 12 b9 12 bc 12 bf 12 c5 12     ................
    2cc7:	c8 12 cb 12 ce 12 d1 12 d5 12 d8 12 db 12 de 12     ................
    2cd7:	e1 12 e4 12 e7 12 ea 12 ed 12 f0 12 f4 12 f7 12     ................
    2ce7:	fa 12 fd 12 00 13 03 13 06 13 09 13 0c 13 0f 13     ................
    2cf7:	13 13 16 13 19 13 1c 13 1f 13 22 13 25 13 28 13     ..........".%.(.
    2d07:	2b 13 2e 13 32 13 35 13 38 13 3b 13 3e 13 41 13     +...2.5.8.;.>.A.
    2d17:	44 13 47 13 4a 13 4d 13 54 13 57 13 5a 13 5d 13     D.G.J.M.T.W.Z.].
    2d27:	60 13 63 13 66 13 69 13 6c 13 70 13 73 13 76 13     `.c.f.i.l.p.s.v.
    2d37:	79 13 7c 13 7f 13 82 13 85 13 88 13 8b 13 8f 13     y.|.............
    2d47:	92 13 95 13 98 13 9b 13 9e 13 a1 13 a4 13 a7 13     ................
    2d57:	aa 13 ae 13 b1 13 b4 13 b7 13 ba 13 bd 13 c0 13     ................
    2d67:	c3 13 c6 13 c9 13 cd 13 d0 13 d3 13 d6 13 d9 13     ................
    2d77:	df 13 e2 13 e5 13 e8 13 ec 13 ef 13 f2 13 f5 13     ................
    2d87:	f8 13 fb 13 fe 13 01 14 04 14 07 14 0b 14 0e 14     ................
    2d97:	11 14 14 14 17 14 1a 14 1d 14 20 14 23 14 26 14     .......... .#.&.
    2da7:	2a 14 2d 14 30 14 33 14 36 14 39 14 3c 14 3f 14     *.-.0.3.6.9.<.?.
    2db7:	42 14 45 14 49 14 4c 14 4f 14 52 14 55 14 58 14     B.E.I.L.O.R.U.X.
    2dc7:	5b 14 5e 14 61 14 68 14 6b 14 6e 14 71 14 74 14     [.^.a.h.k.n.q.t.
    2dd7:	77 14 7a 14 7d 14 80 14 83 14 87 14 8a 14 8d 14     w.z.}...........
    2de7:	90 14 93 14 96 14 99 14 9c 14 9f 14 a2 14 a6 14     ................
    2df7:	a9 14 ac 14 af 14 b2 14 b5 14 b8 14 bb 14 be 14     ................
    2e07:	c1 14 c5 14 c8 14 cb 14 ce 14 d1 14 d4 14 d7 14     ................
    2e17:	da 14 dd 14 e0 14 e4 14 e7 14 ea 14 f0 14 f3 14     ................
    2e27:	f6 14 f9 14 fc 14 ff 14 03 15 06 15 09 15 0c 15     ................
    2e37:	0f 15 12 15 15 15 18 15 1b 15 1e 15 22 15 25 15     ............".%.
    2e47:	28 15 2b 15 2e 15 31 15 34 15 37 15 3a 15 3d 15     (.+...1.4.7.:.=.
    2e57:	41 15 44 15 47 15 4a 15 4d 15 50 15 53 15 56 15     A.D.G.J.M.P.S.V.
    2e67:	59 15 5c 15 60 15 63 15 66 15 69 15 6c 15 72 15     Y.\.`.c.f.i.l.r.
    2e77:	75 15 78 15 7b 15 7f 15 82 15 85 15 88 15 8b 15     u.x.{...........
    2e87:	8e 15 91 15 94 15 97 15 9a 15 9e 15 a1 15 a4 15     ................
    2e97:	a7 15 aa 15 ad 15 b0 15 b3 15 b6 15 b9 15 bd 15     ................
    2ea7:	c0 15 c3 15 c6 15 c9 15 cc 15 cf 15 d2 15 d5 15     ................
    2eb7:	d8 15 dc 15 df 15 e2 15 e5 15 e8 15 eb 15 ee 15     ................
    2ec7:	f4 15 f7 15 fb 15 fe 15 01 16 04 16 07 16 0a 16     ................
    2ed7:	0d 16 10 16 13 16 16 16 1a 16 1d 16 20 16 23 16     ............ .#.
    2ee7:	26 16 29 16 2c 16 2f 16 32 16 35 16 39 16 3c 16     &.).,./.2.5.9.<.
    2ef7:	3f 16 42 16 45 16 48 16 4b 16 4e 16 51 16 54 16     ?.B.E.H.K.N.Q.T.
    2f07:	58 16 5b 16 5e 16 61 16 64 16 67 16 6a 16 6d 16     X.[.^.a.d.g.j.m.
    2f17:	70 16 77 16 7a 16 7d 16 80 16 83 16 86 16 89 16     p.w.z.}.........
    2f27:	8c 16 8f 16 92 16 96 16 99 16 9c 16 9f 16 a2 16     ................
    2f37:	a5 16 a8 16 ab 16 ae 16 b1 16 b5 16 b8 16 bb 16     ................
    2f47:	be 16 c1 16 c4 16 c7 16 ca 16 cd 16 d0 16 d4 16     ................
    2f57:	d7 16 da 16 dd 16 e0 16 e3 16 e6 16 e9 16 ec 16     ................
    2f67:	ef 16 f6 16 f9 16 fc 16 ff 16 02 17 05 17 08 17     ................
    2f77:	0b 17 0e 17 12 17 15 17 18 17 1b 17 1e 17 21 17     ..............!.
    2f87:	24 17 27 17 2a 17 2d 17 31 17 34 17 37 17 3a 17     $.'.*.-.1.4.7.:.
    2f97:	3d 17 40 17 43 17 46 17 49 17 4c 17 50 17 53 17     =.@.C.F.I.L.P.S.
    2fa7:	56 17 59 17 5c 17 5f 17 62 17 65 17 68 17 6b 17     V.Y.\._.b.e.h.k.
    2fb7:	72 17 75 17 78 17 7b 17 7e 17 81 17 84 17 87 17     r.u.x.{.~.......
    2fc7:	8a 17 8e 17 91 17 94 17 97 17 9a 17 9d 17 a0 17     ................
    2fd7:	a3 17 a6 17 a9 17 ad 17 b0 17 b3 17 b6 17 b9 17     ................
    2fe7:	bc 17 bf 17 c2 17 c5 17 c8 17 cc 17 cf 17 d2 17     ................
    2ff7:	d5 17 d8 17 db 17 de 17 e1 17 e4 17 eb 17 ee 17     ................
    3007:	f1 17 f4 17 f7 17 fa 17 fd 17 00 18 03 18 06 18     ................
    3017:	0a 18 0d 18 10 18 13 18 16 18 19 18 1c 18 1f 18     ................
    3027:	22 18 25 18 29 18 2c 18 2f 18 32 18 35 18 38 18     ".%.).,./.2.5.8.
    3037:	3b 18 3e 18 41 18 44 18 48 18 4b 18 4e 18 51 18     ;.>.A.D.H.K.N.Q.
    3047:	54 18 57 18 5a 18 5d 18 63 18 67 18 6a 18 6d 18     T.W.Z.].c.g.j.m.
    3057:	70 18 73 18 76 18 79 18 7c 18 7f 18 82 18 86 18     p.s.v.y.|.......
    3067:	89 18 8c 18 8f 18 92 18 95 18 98 18 9b 18 9e 18     ................
    3077:	a1 18 a5 18 a8 18 ab 18 ae 18 b1 18 b4 18 b7 18     ................
    3087:	ba 18 bd 18 c0 18 c4 18 c7 18 ca 18 cd 18 d0 18     ................
    3097:	d3 18 d6 18 dc 18 df 18 e3 18 e6 18 e9 18 ec 18     ................
    30a7:	ef 18 f2 18 f5 18 f8 18 fb 18 fe 18 02 19 05 19     ................
    30b7:	08 19 0b 19 0e 19 11 19 14 19 17 19 1a 19 1d 19     ................
    30c7:	21 19 24 19 27 19 2a 19 2d 19 30 19 33 19 36 19     !.$.'.*.-.0.3.6.
    30d7:	39 19 3c 19 40 19 43 19 46 19 49 19 4c 19 52 19     9.<.@.C.F.I.L.R.
    30e7:	55 19 58 19 5b 19 5f 19 62 19 65 19 68 19 6b 19     U.X.[._.b.e.h.k.
    30f7:	6e 19 71 19 74 19 77 19 7a 19 7e 19 81 19 84 19     n.q.t.w.z.~.....
    3107:	87 19 8a 19 8d 19 90 19 93 19 96 19 99 19 9d 19     ................
    3117:	a0 19 a3 19 a6 19 a9 19 ac 19 af 19 b2 19 b5 19     ................
    3127:	b8 19 bc 19 bf 19 c5 19 c8 19 cb 19 ce 19 d1 19     ................
    3137:	d4 19 d7 19 db 19 de 19 e1 19 e4 19 e7 19 ea 19     ................
    3147:	ed 19 f0 19 f3 19 f6 19 fa 19 fd 19 00 1a 03 1a     ................
    3157:	06 1a 09 1a 0c 1a 0f 1a 12 1a 15 1a 19 1a 1c 1a     ................
    3167:	1f 1a 22 1a 25 1a 28 1a 2b 1a 2e 1a 31 1a 38 1a     ..".%.(.+...1.8.
    3177:	3b 1a 3e 1a 41 1a 44 1a 47 1a 4a 1a 4d 1a 50 1a     ;.>.A.D.G.J.M.P.
    3187:	53 1a 57 1a 5a 1a 5d 1a 60 1a 63 1a 66 1a 69 1a     S.W.Z.].`.c.f.i.
    3197:	6c 1a 6f 1a 72 1a 76 1a 79 1a 7c 1a 7f 1a 82 1a     l.o.r.v.y.|.....
    31a7:	85 1a 88 1a 8b 1a 8e 1a 91 1a 95 1a 98 1a 9b 1a     ................
    31b7:	9e 1a a1 1a a4 1a aa 1a ad 1a b0 1a b4 1a b7 1a     ................
    31c7:	ba 1a bd 1a c0 1a c3 1a c6 1a c9 1a cc 1a cf 1a     ................
    31d7:	d3 1a d6 1a d9 1a dc 1a df 1a e2 1a e5 1a e8 1a     ................
    31e7:	eb 1a ee 1a f2 1a f5 1a f8 1a fb 1a fe 1a 01 1b     ................
    31f7:	04 1b 07 1b 0a 1b 0d 1b 11 1b 14 1b 1a 1b 1d 1b     ................
    3207:	20 1b 23 1b 26 1b 29 1b 2c 1b 30 1b 33 1b 36 1b      .#.&.).,.0.3.6.
    3217:	39 1b 3c 1b 3f 1b 42 1b 45 1b 48 1b 4b 1b 4f 1b     9.<.?.B.E.H.K.O.
    3227:	52 1b 55 1b 58 1b 5b 1b 5e 1b 61 1b 64 1b 67 1b     R.U.X.[.^.a.d.g.
    3237:	6a 1b 6e 1b 71 1b 74 1b 77 1b 7a 1b 7d 1b 80 1b     j.n.q.t.w.z.}...
    3247:	83 1b 89 1b 8d 1b 90 1b 93 1b 96 1b 99 1b 9c 1b     ................
    3257:	9f 1b a2 1b a5 1b a8 1b ac 1b af 1b b2 1b b5 1b     ................
    3267:	b8 1b bb 1b be 1b c1 1b c4 1b c7 1b cb 1b ce 1b     ................
    3277:	d1 1b d4 1b d7 1b da 1b dd 1b e0 1b e3 1b e6 1b     ................
    3287:	ea 1b ed 1b f0 1b f6 1b f9 1b fc 1b ff 1b 02 1c     ................
    3297:	05 1c 09 1c 0c 1c 0f 1c 12 1c 15 1c 18 1c 1b 1c     ................
    32a7:	1e 1c 21 1c 24 1c 28 1c 2b 1c 2e 1c 31 1c 34 1c     ..!.$.(.+...1.4.
    32b7:	37 1c 3a 1c 3d 1c 40 1c 43 1c 47 1c 4a 1c 4d 1c     7.:.=.@.C.G.J.M.
    32c7:	50 1c 53 1c 56 1c 59 1c 5c 1c 62 1c 66 1c 69 1c     P.S.V.Y.\.b.f.i.
    32d7:	6c 1c 6f 1c 72 1c 75 1c 78 1c 7b 1c 7e 1c 81 1c     l.o.r.u.x.{.~...
    32e7:	85 1c 88 1c 8b 1c 8e 1c 91 1c 94 1c 97 1c 9a 1c     ................
    32f7:	9d 1c a0 1c a4 1c a7 1c aa 1c ad 1c b0 1c b3 1c     ................
    3307:	b6 1c b9 1c bc 1c bf 1c c3 1c c6 1c c9 1c cf 1c     ................
    3317:	d2 1c d5 1c d8 1c db 1c de 1c e2 1c e5 1c e8 1c     ................
    3327:	eb 1c ee 1c f1 1c f4 1c f7 1c fa 1c fd 1c 01 1d     ................
    3337:	04 1d 07 1d 0a 1d 0d 1d 10 1d 13 1d 16 1d 19 1d     ................
    3347:	1c 1d 20 1d 23 1d 26 1d 29 1d 2c 1d 2f 1d 32 1d     .. .#.&.).,./.2.
    3357:	38 1d 3b 1d 3f 1d 42 1d 45 1d 48 1d 4b 1d 4e 1d     8.;.?.B.E.H.K.N.
    3367:	51 1d 54 1d 57 1d 5a 1d 5e 1d 61 1d 64 1d 67 1d     Q.T.W.Z.^.a.d.g.
    3377:	6a 1d 6d 1d 70 1d 73 1d 76 1d 79 1d 7d 1d 80 1d     j.m.p.s.v.y.}...
    3387:	83 1d 86 1d 89 1d 8c 1d 8f 1d 92 1d 95 1d 98 1d     ................
    3397:	9c 1d a2 1d a5 1d a8 1d ab 1d ae 1d b1 1d b4 1d     ................
    33a7:	b7 1d bb 1d be 1d c1 1d c4 1d c7 1d ca 1d cd 1d     ................
    33b7:	d0 1d d3 1d d6 1d da 1d dd 1d e0 1d e3 1d e6 1d     ................
    33c7:	e9 1d ec 1d ef 1d f2 1d f5 1d f9 1d fc 1d ff 1d     ................
    33d7:	02 1e 08 1e 0b 1e 0e 1e 11 1e 14 1e 18 1e 1b 1e     ................
    33e7:	1e 1e 21 1e 24 1e 27 1e 2a 1e 2d 1e 30 1e 33 1e     ..!.$.'.*.-.0.3.
    33f7:	37 1e 3a 1e 3d 1e 40 1e 43 1e 46 1e 49 1e 4c 1e     7.:.=.@.C.F.I.L.
    3407:	4f 1e 52 1e 56 1e 59 1e 5c 1e 5f 1e 62 1e 65 1e     O.R.V.Y.\._.b.e.
    3417:	68 1e 6e 1e 71 1e 75 1e 78 1e 7b 1e 7e 1e 81 1e     h.n.q.u.x.{.~...
    3427:	84 1e 87 1e 8a 1e 8d 1e 90 1e 94 1e 97 1e 9a 1e     ................
    3437:	9d 1e a0 1e a3 1e a6 1e a9 1e ac 1e af 1e b3 1e     ................
    3447:	b6 1e b9 1e bc 1e bf 1e c2 1e c5 1e c8 1e cb 1e     ................
    3457:	ce 1e d5 1e d8 1e db 1e de 1e e1 1e e4 1e e7 1e     ................
    3467:	ea 1e ed 1e f1 1e f4 1e f7 1e fa 1e fd 1e 00 1f     ................
    3477:	03 1f 06 1f 09 1f 0c 1f 10 1f 13 1f 16 1f 19 1f     ................
    3487:	1c 1f 1f 1f 22 1f 25 1f 28 1f 2b 1f 2f 1f 32 1f     ....".%.(.+./.2.
    3497:	35 1f 3b 1f 3e 1f 41 1f 44 1f 47 1f 4a 1f 4e 1f     5.;.>.A.D.G.J.N.
    34a7:	51 1f 54 1f 57 1f 5a 1f 5d 1f 60 1f 63 1f 66 1f     Q.T.W.Z.].`.c.f.
    34b7:	69 1f 6d 1f 70 1f 73 1f 76 1f 79 1f 7c 1f 7f 1f     i.m.p.s.v.y.|...
    34c7:	82 1f 85 1f 88 1f 8c 1f 8f 1f 92 1f 95 1f 98 1f     ................
    34d7:	9e 1f a1 1f a4 1f a7 1f ab 1f ae 1f b1 1f b4 1f     ................
    34e7:	b7 1f ba 1f bd 1f c0 1f c3 1f c6 1f ca 1f cd 1f     ................
    34f7:	d0 1f d3 1f d6 1f d9 1f dc 1f df 1f e2 1f e5 1f     ................
    3507:	e9 1f ec 1f ef 1f f2 1f f5 1f f8 1f fb 1f 01 20     ............... 
    3517:	04 20 08 20 0b 20 0e 20 11 20 14 20 17 20 1a 20     . . . . . . . . 
    3527:	1d 20 20 20 23 20 27 20 2a 20 2d 20 30 20 33 20     .   # ' * - 0 3 
    3537:	36 20 39 20 3c 20 3f 20 42 20 46 20 49 20 4c 20     6 9 < ? B F I L 
    3547:	4f 20 52 20 55 20 58 20 5b 20 61 20 65 20 68 20     O R U X [ a e h 
    3557:	6b 20 6e 20 71 20 74 20 77 20 7a 20 7d 20 80 20     k n q t w z } . 
    3567:	84 20 87 20 8a 20 8d 20 90 20 93 20 96 20 99 20     . . . . . . . . 
    3577:	9c 20 9f 20 a3 20 a6 20 a9 20 ac 20 af 20 b2 20     . . . . . . . . 
    3587:	b5 20 b8 20 bb 20 be 20 c5 20 c8 20 cb 20 ce 20     . . . . . . . . 
    3597:	d1 20 d4 20 d7 20 da 20 dd 20 e1 20 e4 20 e7 20     . . . . . . . . 
    35a7:	ea 20 ed 20 f0 20 f3 20 f6 20 f9 20 fc 20 00 21     . . . . . . . .!
    35b7:	03 21 06 21 09 21 0c 21 0f 21 12 21 15 21 18 21     .!.!.!.!.!.!.!.!
    35c7:	1b 21 1f 21 25 21 28 21 2b 21 2e 21 31 21 34 21     .!.!%!(!+!.!1!4!
    35d7:	37 21 3a 21 3e 21 41 21 44 21 47 21 4a 21 4d 21     7!:!>!A!D!G!J!M!
    35e7:	50 21 53 21 56 21 59 21 5d 21 60 21 63 21 66 21     P!S!V!Y!]!`!c!f!
    35f7:	69 21 6c 21 6f 21 72 21 75 21 78 21 7c 21 82 21     i!l!o!r!u!x!|!.!
    3607:	85 21 88 21 8b 21 8e 21 91 21 94 21 97 21 9b 21     .!.!.!.!.!.!.!.!
    3617:	9e 21 a1 21 a4 21 a7 21 aa 21 ad 21 b0 21 b3 21     .!.!.!.!.!.!.!.!
    3627:	b6 21 ba 21 bd 21 c0 21 c3 21 c6 21 c9 21 cc 21     .!.!.!.!.!.!.!.!
    3637:	cf 21 d2 21 d5 21 d9 21 dc 21 e2 21 e5 21 e8 21     .!.!.!.!.!.!.!.!
    3647:	eb 21 ee 21 f1 21 f4 21 f8 21 fb 21 fe 21 01 22     .!.!.!.!.!.!.!."
    3657:	04 22 07 22 0a 22 0d 22 10 22 13 22 17 22 1a 22     ."."."."."."."."
    3667:	1d 22 20 22 23 22 26 22 29 22 2c 22 2f 22 32 22     ." "#"&")","/"2"
    3677:	36 22 39 22 3f 22 42 22 45 22 48 22 4b 22 4e 22     6"9"?"B"E"H"K"N"
    3687:	51 22 55 22 58 22 5b 22 5e 22 61 22 64 22 67 22     Q"U"X"["^"a"d"g"
    3697:	6a 22 6d 22 70 22 74 22 77 22 7a 22 7d 22 80 22     j"m"p"t"w"z"}"."
    36a7:	83 22 86 22 89 22 8c 22 8f 22 93 22 96 22 9c 22     ."."."."."."."."
    36b7:	9f 22 a2 22 a5 22 a8 22 ab 22 ae 22 b2 22 b5 22     ."."."."."."."."
    36c7:	b8 22 bb 22 be 22 c1 22 c4 22 c7 22 ca 22 cd 22     ."."."."."."."."
    36d7:	d1 22 d4 22 d7 22 da 22 dd 22 e0 22 e3 22 e6 22     ."."."."."."."."
    36e7:	e9 22 ec 22 f0 22 f3 22 f9 22 fc 22 ff 22 02 23     .".".".".".".".#
    36f7:	05 23 08 23 0b 23 0f 23 12 23 15 23 18 23 1b 23     .#.#.#.#.#.#.#.#
    3707:	1e 23 21 23 24 23 27 23 2a 23 2e 23 31 23 34 23     .#!#$#'#*#.#1#4#
    3717:	37 23 3a 23 3d 23 40 23 43 23 46 23 49 23 4d 23     7#:#=#@#C#F#I#M#
    3727:	53 23 56 23 59 23 5c 23 5f 23 62 23 65 23 68 23     S#V#Y#\#_#b#e#h#
    3737:	6c 23 6f 23 72 23 75 23 78 23 7b 23 7e 23 81 23     l#o#r#u#x#{#~#.#
    3747:	84 23 87 23 8b 23 8e 23 91 23 94 23 97 23 9a 23     .#.#.#.#.#.#.#.#
    3757:	9d 23 a0 23 a3 23 a6 23 aa 23 b0 23 b3 23 b6 23     .#.#.#.#.#.#.#.#
    3767:	b9 23 bc 23 bf 23 c2 23 c5 23 c9 23 cc 23 cf 23     .#.#.#.#.#.#.#.#
    3777:	d2 23 d5 23 d8 23 db 23 de 23 e1 23 e4 23 e8 23     .#.#.#.#.#.#.#.#
    3787:	eb 23 ee 23 f1 23 f4 23 f7 23 fa 23 fd 23 00 24     .#.#.#.#.#.#.#.$
    3797:	03 24 0a 24 0d 24 10 24 13 24 16 24 19 24 1c 24     .$.$.$.$.$.$.$.$
    37a7:	1f 24 22 24 26 24 29 24 2c 24 2f 24 32 24 35 24     .$"$&$)$,$/$2$5$
    37b7:	38 24 3b 24 3e 24 41 24 45 24 48 24 4b 24 4e 24     8$;$>$A$E$H$K$N$
    37c7:	51 24 54 24 57 24 5a 24 5d 24 64 24 67 24 6a 24     Q$T$W$Z$]$d$g$j$
    37d7:	6d 24 70 24 73 24 76 24 79 24 7c 24 7f 24 83 24     m$p$s$v$y$|$.$.$
    37e7:	86 24 89 24 8c 24 8f 24 92 24 95 24 98 24 9b 24     .$.$.$.$.$.$.$.$
    37f7:	9e 24 a2 24 a5 24 a8 24 ab 24 ae 24 b1 24 b4 24     .$.$.$.$.$.$.$.$
    3807:	ba 24 bd 24 c1 24 c4 24 c7 24 ca 24 cd 24 d0 24     .$.$.$.$.$.$.$.$
    3817:	d3 24 d6 24 d9 24 dc 24 e0 24 e3 24 e6 24 e9 24     .$.$.$.$.$.$.$.$
    3827:	ec 24 ef 24 f2 24 f5 24 f8 24 fb 24 ff 24 02 25     .$.$.$.$.$.$.$.%
    3837:	05 25 08 25 0b 25 0e 25 14 25 17 25 1a 25 1e 25     .%.%.%.%.%.%.%.%
    3847:	21 25 24 25 27 25 2a 25 2d 25 30 25 33 25 36 25     !%$%'%*%-%0%3%6%
    3857:	39 25 3d 25 40 25 43 25 46 25 49 25 4c 25 4f 25     9%=%@%C%F%I%L%O%
    3867:	52 25 55 25 58 25 5c 25 5f 25 62 25 65 25 6b 25     R%U%X%\%_%b%e%k%
    3877:	6e 25 71 25 74 25 77 25 7b 25 7e 25 81 25 84 25     n%q%t%w%{%~%.%.%
    3887:	87 25 8a 25 8d 25 90 25 93 25 96 25 9a 25 9d 25     .%.%.%.%.%.%.%.%
    3897:	a0 25 a3 25 a6 25 a9 25 ac 25 af 25 b2 25 b5 25     .%.%.%.%.%.%.%.%
    38a7:	b9 25 bc 25 c2 25 c5 25 c8 25 cb 25 ce 25 d1 25     .%.%.%.%.%.%.%.%
    38b7:	d4 25 d8 25 db 25 de 25 e1 25 e4 25 e7 25 ea 25     .%.%.%.%.%.%.%.%
    38c7:	ed 25 f0 25 f3 25 f7 25 fa 25 fd 25 00 26 03 26     .%.%.%.%.%.%.&.&
    38d7:	06 26 09 26 0c 26 0f 26 12 26 19 26 1c 26 1f 26     .&.&.&.&.&.&.&.&
    38e7:	22 26 25 26 28 26 2b 26 2e 26 31 26 35 26 38 26     "&%&(&+&.&1&5&8&
    38f7:	3b 26 3e 26 41 26 44 26 47 26 4a 26 4d 26 50 26     ;&>&A&D&G&J&M&P&
    3907:	54 26 57 26 5a 26 5d 26 60 26 63 26 66 26 6c 26     T&W&Z&]&`&c&f&l&
    3917:	6f 26 73 26 76 26 79 26 7c 26 7f 26 82 26 85 26     o&s&v&y&|&.&.&.&
    3927:	88 26 8b 26 8e 26 92 26 95 26 98 26 9b 26 9e 26     .&.&.&.&.&.&.&.&
    3937:	a1 26 a4 26 a7 26 aa 26 ad 26 b1 26 b4 26 b7 26     .&.&.&.&.&.&.&.&
    3947:	ba 26 bd 26 c3 26 c6 26 c9 26 cc 26 d0 26 d3 26     .&.&.&.&.&.&.&.&
    3957:	d6 26 d9 26 dc 26 df 26 e2 26 e5 26 e8 26 eb 26     .&.&.&.&.&.&.&.&
    3967:	ef 26 f2 26 f5 26 f8 26 fb 26 fe 26 01 27 04 27     .&.&.&.&.&.&.'.'
    3977:	07 27 0a 27 0e 27 11 27 17 27 1a 27 1d 27 20 27     .'.'.'.'.'.'.' '
    3987:	23 27 26 27 29 27 2d 27 30 27 33 27 36 27 39 27     #'&')'-'0'3'6'9'
    3997:	3c 27 3f 27 42 27 45 27 48 27 4c 27 4f 27 52 27     <'?'B'E'H'L'O'R'
    39a7:	55 27 58 27 5b 27 5e 27 61 27 64 27 6b 27 6e 27     U'X'['^'a'd'k'n'
    39b7:	71 27 74 27 77 27 7a 27 7d 27 80 27 83 27 86 27     q't'w'z'}'.'.'.'
    39c7:	8a 27 8d 27 90 27 93 27 96 27 99 27 9c 27 9f 27     .'.'.'.'.'.'.'.'
    39d7:	a2 27 a5 27 a9 27 ac 27 af 27 b2 27 b5 27 b8 27     .'.'.'.'.'.'.'.'
    39e7:	be 27 c1 27 c4 27 c8 27 cb 27 ce 27 d1 27 d4 27     .'.'.'.'.'.'.'.'
    39f7:	d7 27 da 27 dd 27 e0 27 e3 27 e7 27 ea 27 ed 27     .'.'.'.'.'.'.'.'
    3a07:	f0 27 f3 27 f6 27 f9 27 fc 27 ff 27 02 28 06 28     .'.'.'.'.'.'.(.(
    3a17:	09 28 0c 28 12 28 15 28 18 28 1b 28 1e 28 21 28     .(.(.(.(.(.(.(!(
    3a27:	25 28 28 28 2b 28 2e 28 31 28 34 28 37 28 3a 28     %(((+(.(1(4(7(:(
    3a37:	3d 28 40 28 44 28 47 28 4a 28 4d 28 50 28 53 28     =(@(D(G(J(M(P(S(
    3a47:	56 28 59 28 5c 28 63 28 66 28 69 28 6c 28 6f 28     V(Y(\(c(f(i(l(o(
    3a57:	72 28 75 28 78 28 7b 28 7e 28 82 28 85 28 88 28     r(u(x({(~(.(.(.(
    3a67:	8b 28 8e 28 91 28 94 28 97 28 9a 28 9d 28 a1 28     .(.(.(.(.(.(.(.(
    3a77:	a4 28 a7 28 aa 28 ad 28 b0 28 b6 28 b9 28 bc 28     .(.(.(.(.(.(.(.(
    3a87:	c0 28 c3 28 c6 28 c9 28 cc 28 cf 28 d2 28 d5 28     .(.(.(.(.(.(.(.(
    3a97:	d8 28 db 28 df 28 e2 28 e5 28 e8 28 eb 28 ee 28     .(.(.(.(.(.(.(.(
    3aa7:	f1 28 f4 28 f7 28 fa 28 fe 28 01 29 07 29 0a 29     .(.(.(.(.(.).).)
    3ab7:	0d 29 10 29 13 29 16 29 19 29 1d 29 20 29 23 29     .).).).).).) )#)
    3ac7:	26 29 29 29 2c 29 2f 29 32 29 35 29 38 29 3c 29     &))),)/)2)5)8)<)
    3ad7:	3f 29 42 29 45 29 48 29 4b 29 4e 29 51 29 57 29     ?)B)E)H)K)N)Q)W)
    3ae7:	5b 29 5e 29 61 29 64 29 67 29 6a 29 6d 29 70 29     [)^)a)d)g)j)m)p)
    3af7:	73 29 76 29 7a 29 7d 29 80 29 83 29 86 29 89 29     s)v)z)}).).).).)
    3b07:	8c 29 8f 29 92 29 95 29 99 29 9c 29 9f 29 a2 29     .).).).).).).).)
    3b17:	a8 29 ab 29 ae 29 b1 29 b4 29 b8 29 bb 29 be 29     .).).).).).).).)
    3b27:	c1 29 c4 29 c7 29 ca 29 cd 29 d0 29 d3 29 d7 29     .).).).).).).).)
    3b37:	da 29 dd 29 e0 29 e3 29 e6 29 e9 29 ec 29 ef 29     .).).).).).).).)
    3b47:	f6 29 f9 29 fc 29 ff 29 02 2a 05 2a 08 2a 0b 2a     .).).).).*.*.*.*
    3b57:	0e 2a 11 2a 15 2a 18 2a 1b 2a 1e 2a 21 2a 24 2a     .*.*.*.*.*.*!*$*
    3b67:	27 2a 2a 2a 2d 2a 30 2a 34 2a 37 2a 3a 2a 3d 2a     '***-*0*4*7*:*=*
    3b77:	40 2a 46 2a 49 2a 4c 2a 4f 2a 53 2a 56 2a 59 2a     @*F*I*L*O*S*V*Y*
    3b87:	5c 2a 5f 2a 62 2a 65 2a 68 2a 6b 2a 6e 2a 72 2a     \*_*b*e*h*k*n*r*
    3b97:	75 2a 78 2a 7b 2a 7e 2a 81 2a 84 2a 87 2a 8a 2a     u*x*{*~*.*.*.*.*
    3ba7:	8d 2a 94 2a 97 2a 9a 2a 9d 2a a0 2a a3 2a a6 2a     .*.*.*.*.*.*.*.*
    3bb7:	a9 2a ac 2a b0 2a b3 2a b6 2a b9 2a bc 2a bf 2a     .*.*.*.*.*.*.*.*
    3bc7:	c2 2a c5 2a c8 2a cb 2a cf 2a d2 2a d5 2a d8 2a     .*.*.*.*.*.*.*.*
    3bd7:	db 2a de 2a e4 2a e7 2a ea 2a ee 2a f1 2a f4 2a     .*.*.*.*.*.*.*.*
    3be7:	f7 2a fa 2a fd 2a 00 2b 03 2b 06 2b 09 2b 0d 2b     .*.*.*.+.+.+.+.+
    3bf7:	10 2b 13 2b 16 2b 19 2b 1c 2b 1f 2b 22 2b 25 2b     .+.+.+.+.+.+"+%+
    3c07:	28 2b 2c 2b 32 2b 35 2b 38 2b 3b 2b 3e 2b 41 2b     (+,+2+5+8+;+>+A+
    3c17:	44 2b 47 2b 4b 2b 4e 2b 51 2b 54 2b 57 2b 5a 2b     D+G+K+N+Q+T+W+Z+
    3c27:	5d 2b 60 2b 63 2b 66 2b 6a 2b 6d 2b 70 2b 73 2b     ]+`+c+f+j+m+p+s+
    3c37:	76 2b 79 2b 7f 2b 82 2b 85 2b 89 2b 8c 2b 8f 2b     v+y+.+.+.+.+.+.+
    3c47:	92 2b 95 2b 98 2b 9b 2b 9e 2b a1 2b a4 2b a8 2b     .+.+.+.+.+.+.+.+
    3c57:	ab 2b ae 2b b1 2b b4 2b b7 2b ba 2b bd 2b c0 2b     .+.+.+.+.+.+.+.+
    3c67:	c3 2b c7 2b cd 2b d0 2b d3 2b d6 2b d9 2b dc 2b     .+.+.+.+.+.+.+.+
    3c77:	df 2b e2 2b e6 2b e9 2b ec 2b ef 2b f2 2b f5 2b     .+.+.+.+.+.+.+.+
    3c87:	f8 2b fb 2b fe 2b 01 2c 05 2c 08 2c 0b 2c 0e 2c     .+.+.+.,.,.,.,.,
    3c97:	11 2c 17 2c 1a 2c 1d 2c 20 2c 24 2c 27 2c 2a 2c     .,.,.,., ,$,',*,
    3ca7:	2d 2c 30 2c 33 2c 36 2c 39 2c 3c 2c 3f 2c 43 2c     -,0,3,6,9,<,?,C,
    3cb7:	46 2c 49 2c 4c 2c 4f 2c 52 2c 55 2c 58 2c 5b 2c     F,I,L,O,R,U,X,[,
    3cc7:	5e 2c 65 2c 68 2c 6b 2c 6e 2c 71 2c 74 2c 77 2c     ^,e,h,k,n,q,t,w,
    3cd7:	7a 2c 7d 2c 81 2c 84 2c 87 2c 8a 2c 8d 2c 90 2c     z,},.,.,.,.,.,.,
    3ce7:	93 2c 96 2c 99 2c 9c 2c a0 2c a3 2c a6 2c a9 2c     .,.,.,.,.,.,.,.,
    3cf7:	af 2c b2 2c b5 2c b8 2c bb 2c bf 2c c2 2c c5 2c     .,.,.,.,.,.,.,.,
    3d07:	c8 2c cb 2c ce 2c d1 2c d4 2c d7 2c da 2c de 2c     .,.,.,.,.,.,.,.,
    3d17:	e1 2c e4 2c e7 2c ea 2c ed 2c f0 2c f3 2c f6 2c     .,.,.,.,.,.,.,.,
    3d27:	fd 2c 00 2d 03 2d 06 2d 09 2d 0c 2d 0f 2d 12 2d     .,.-.-.-.-.-.-.-
    3d37:	15 2d 18 2d 1c 2d 1f 2d 22 2d 25 2d 28 2d 2b 2d     .-.-.-.-"-%-(-+-
    3d47:	2e 2d 31 2d 34 2d 37 2d 3b 2d 3e 2d 41 2d 47 2d     .-1-4-7-;->-A-G-
    3d57:	4a 2d 4d 2d 50 2d 53 2d 56 2d 5a 2d 5d 2d 60 2d     J-M-P-S-V-Z-]-`-
    3d67:	63 2d 66 2d 69 2d 6c 2d 6f 2d 72 2d 75 2d 79 2d     c-f-i-l-o-r-u-y-
    3d77:	7c 2d 7f 2d 82 2d 85 2d 88 2d 8b 2d 91 2d 94 2d     |-.-.-.-.-.-.-.-
    3d87:	98 2d 9b 2d 9e 2d a1 2d a4 2d a7 2d aa 2d ad 2d     .-.-.-.-.-.-.-.-
    3d97:	b0 2d b3 2d b7 2d ba 2d bd 2d c0 2d c3 2d c6 2d     .-.-.-.-.-.-.-.-
    3da7:	c9 2d cc 2d cf 2d d2 2d d6 2d dc 2d df 2d e2 2d     .-.-.-.-.-.-.-.-
    3db7:	e5 2d e8 2d eb 2d ee 2d f1 2d f5 2d f8 2d fb 2d     .-.-.-.-.-.-.-.-
    3dc7:	fe 2d 01 2e 04 2e 07 2e 0a 2e 0d 2e 10 2e 14 2e     .-..............
    3dd7:	17 2e 1a 2e 1d 2e 20 2e 26 2e 29 2e 2c 2e 2f 2e     ...... .&.).,./.
    3de7:	33 2e 36 2e 39 2e 3c 2e 3f 2e 42 2e 45 2e 48 2e     3.6.9.<.?.B.E.H.
    3df7:	4b 2e 4e 2e 52 2e 55 2e 58 2e 5b 2e 5e 2e 61 2e     K.N.R.U.X.[.^.a.
    3e07:	64 2e 67 2e 6d 2e 71 2e 74 2e 77 2e 7a 2e 7d 2e     d.g.m.q.t.w.z.}.
    3e17:	80 2e 83 2e 86 2e 89 2e 8c 2e 90 2e 93 2e 96 2e     ................
    3e27:	99 2e 9c 2e 9f 2e a2 2e a5 2e a8 2e ab 2e af 2e     ................
    3e37:	b2 2e b8 2e bb 2e be 2e c1 2e c4 2e c7 2e ca 2e     ................
    3e47:	ce 2e d1 2e d4 2e d7 2e da 2e dd 2e e0 2e e3 2e     ................
    3e57:	e6 2e e9 2e ed 2e f0 2e f3 2e f6 2e f9 2e ff 2e     ................
    3e67:	02 2f 05 2f 08 2f 0c 2f 0f 2f 12 2f 15 2f 18 2f     ././././././././
    3e77:	1b 2f 1e 2f 21 2f 24 2f 27 2f 2b 2f 2e 2f 31 2f     ././!/$/'/+/./1/
    3e87:	34 2f 37 2f 3a 2f 3d 2f 40 2f 43 2f 4a 2f 4d 2f     4/7/:/=/@/C/J/M/
    3e97:	50 2f 53 2f 56 2f 59 2f 5c 2f 5f 2f 62 2f 65 2f     P/S/V/Y/\/_/b/e/
    3ea7:	69 2f 6c 2f 6f 2f 72 2f 75 2f 78 2f 7b 2f 7e 2f     i/l/o/r/u/x/{/~/
    3eb7:	81 2f 84 2f 88 2f 8b 2f 91 2f 94 2f 97 2f 9a 2f     ././././././././
    3ec7:	9d 2f a0 2f a3 2f a7 2f aa 2f ad 2f b0 2f b3 2f     ././././././././
    3ed7:	b6 2f b9 2f bc 2f bf 2f c2 2f c6 2f c9 2f cc 2f     ././././././././
    3ee7:	cf 2f d2 2f d8 2f db 2f de 2f e1 2f e5 2f e8 2f     ././././././././
    3ef7:	eb 2f ee 2f f1 2f f4 2f f7 2f fa 2f fd 2f 00 30     ./././././././.0
    3f07:	04 30 07 30 0a 30 0d 30 10 30 13 30 16 30 19 30     .0.0.0.0.0.0.0.0
    3f17:	1f 30 23 30 26 30 29 30 2c 30 2f 30 32 30 35 30     .0#0&0)0,0/02050
    3f27:	38 30 3b 30 3e 30 42 30 45 30 48 30 4b 30 4e 30     80;0>0B0E0H0K0N0
    3f37:	51 30 54 30 57 30 5a 30 5d 30 61 30 67 30 6a 30     Q0T0W0Z0]0a0g0j0
    3f47:	6d 30 70 30 73 30 76 30 79 30 7c 30 80 30 83 30     m0p0s0v0y0|0.0.0
    3f57:	86 30 89 30 8c 30 8f 30 92 30 95 30 98 30 9b 30     .0.0.0.0.0.0.0.0
    3f67:	9f 30 a2 30 a5 30 a8 30 ae 30 b1 30 b4 30 b7 30     .0.0.0.0.0.0.0.0
    3f77:	ba 30 be 30 c1 30 c4 30 c7 30 ca 30 cd 30 d0 30     .0.0.0.0.0.0.0.0
    3f87:	d3 30 d6 30 d9 30 dd 30 e0 30 e3 30 e6 30 e9 30     .0.0.0.0.0.0.0.0
    3f97:	ec 30 f2 30 f5 30 f8 30 fc 30 ff 30 02 31 05 31     .0.0.0.0.0.0.1.1
    3fa7:	08 31 0b 31 0e 31 11 31 14 31 17 31 1b 31 1e 31     .1.1.1.1.1.1.1.1
    3fb7:	21 31 24 31 27 31 2a 31 2d 31 30 31 33 31 3a 31     !1$1'1*1-10131:1
    3fc7:	3d 31 40 31 43 31 46 31 49 31 4c 31 4f 31 52 31     =1@1C1F1I1L1O1R1
    3fd7:	55 31 59 31 5c 31 5f 31 62 31 65 31 68 31 6b 31     U1Y1\1_1b1e1h1k1
    3fe7:	6e 31 71 31 74 31 78 31 7e 31 81 31 84 31 87 31     n1q1t1x1~1.1.1.1
    3ff7:	8a 31 8d 31 90 31 93 31 96 31 9a 31 9d 31 a0 31     .1.1.1.1.1.1.1.1
    4007:	a3 31 a6 31 a9 31 ac 31 af 31 b2 31 b5 31 b9 31     .1.1.1.1.1.1.1.1
    4017:	bc 31 bf 31 c5 31 c8 31 cb 31 ce 31 d1 31 d4 31     .1.1.1.1.1.1.1.1
    4027:	d8 31 db 31 de 31 e1 31 e4 31 e7 31 ea 31 ed 31     .1.1.1.1.1.1.1.1
    4037:	f0 31 f3 31 f7 31 fa 31 fd 31 00 32 03 32 09 32     .1.1.1.1.1.2.2.2
    4047:	0c 32 0f 32 12 32 16 32 19 32 1c 32 1f 32 22 32     .2.2.2.2.2.2.2"2
    4057:	25 32 28 32 2b 32 2e 32 31 32 35 32 38 32 3b 32     %2(2+2.2125282;2
    4067:	3e 32 41 32 44 32 47 32 4d 32 50 32 54 32 57 32     >2A2D2G2M2P2T2W2
    4077:	5a 32 5d 32 60 32 63 32 66 32 69 32 6c 32 6f 32     Z2]2`2c2f2i2l2o2
    4087:	73 32 76 32 79 32 7c 32 7f 32 82 32 85 32 88 32     s2v2y2|2.2.2.2.2
    4097:	8b 32 92 32 95 32 98 32 9b 32 9e 32 a1 32 a4 32     .2.2.2.2.2.2.2.2
    40a7:	a7 32 aa 32 ad 32 b1 32 b4 32 b7 32 ba 32 bd 32     .2.2.2.2.2.2.2.2
    40b7:	c0 32 c3 32 c6 32 c9 32 cc 32 d0 32 d6 32 d9 32     .2.2.2.2.2.2.2.2
    40c7:	dc 32 df 32 e2 32 e5 32 e8 32 eb 32 ef 32 f2 32     .2.2.2.2.2.2.2.2
    40d7:	f5 32 f8 32 fb 32 fe 32 01 33 04 33 07 33 0a 33     .2.2.2.2.3.3.3.3
    40e7:	0e 33 11 33 14 33 1a 33 1d 33 20 33 23 33 26 33     .3.3.3.3.3 3#3&3
    40f7:	29 33 2d 33 30 33 33 33 36 33 39 33 3c 33 3f 33     )3-303336393<3?3
    4107:	42 33 45 33 48 33 4c 33 4f 33 52 33 55 33 58 33     B3E3H3L3O3R3U3X3
    4117:	5e 33 61 33 64 33 67 33 6b 33 6e 33 71 33 74 33     ^3a3d3g3k3n3q3t3
    4127:	77 33 7a 33 7d 33 80 33 83 33 86 33 8a 33 8d 33     w3z3}3.3.3.3.3.3
    4137:	90 33 93 33 96 33 99 33 9f 33 a2 33 a5 33 a9 33     .3.3.3.3.3.3.3.3
    4147:	ac 33 af 33 b2 33 b5 33 b8 33 bb 33 be 33 c1 33     .3.3.3.3.3.3.3.3
    4157:	c4 33 c8 33 cb 33 ce 33 d1 33 d4 33 d7 33 da 33     .3.3.3.3.3.3.3.3
    4167:	dd 33 e3 33 e7 33 ea 33 ed 33 f0 33 f3 33 f6 33     .3.3.3.3.3.3.3.3
    4177:	f9 33 fc 33 ff 33 02 34 06 34 09 34 0c 34 0f 34     .3.3.3.4.4.4.4.4
    4187:	12 34 15 34 18 34 1b 34 1e 34 25 34 28 34 2b 34     .4.4.4.4.4%4(4+4
    4197:	2e 34 31 34 34 34 37 34 3a 34 3d 34 40 34 44 34     .4144474:4=4@4D4
    41a7:	47 34 4a 34 4d 34 50 34 53 34 56 34 59 34 5c 34     G4J4M4P4S4V4Y4\4
    41b7:	5f 34 63 34 69 34 6c 34 6f 34 72 34 75 34 78 34     _4c4i4l4o4r4u4x4
    41c7:	7b 34 7e 34 82 34 85 34 88 34 8b 34 8e 34 91 34     {4~4.4.4.4.4.4.4
    41d7:	94 34 97 34 9a 34 9d 34 a1 34 a4 34 aa 34 ad 34     .4.4.4.4.4.4.4.4
    41e7:	b0 34 b3 34 b6 34 b9 34 bc 34 c0 34 c3 34 c6 34     .4.4.4.4.4.4.4.4
    41f7:	c9 34 cc 34 cf 34 d2 34 d5 34 d8 34 db 34 df 34     .4.4.4.4.4.4.4.4
    4207:	e2 34 e5 34 eb 34 ee 34 f1 34 f4 34 f7 34 fa 34     .4.4.4.4.4.4.4.4
    4217:	fe 34 01 35 04 35 07 35 0a 35 0d 35 10 35 13 35     .4.5.5.5.5.5.5.5
    4227:	16 35 19 35 1d 35 20 35 23 35 26 35 2c 35 2f 35     .5.5.5 5#5&5,5/5
    4237:	32 35 35 35 38 35 3c 35 3f 35 42 35 45 35 48 35     255585<5?5B5E5H5
    4247:	4b 35 4e 35 51 35 54 35 57 35 5b 35 5e 35 61 35     K5N5Q5T5W5[5^5a5
    4257:	64 35 67 35 6a 35 70 35 73 35 76 35 7a 35 7d 35     d5g5j5p5s5v5z5}5
    4267:	80 35 83 35 86 35 89 35 8c 35 8f 35 92 35 95 35     .5.5.5.5.5.5.5.5
    4277:	99 35 9c 35 9f 35 a2 35 a5 35 a8 35 ab 35 b1 35     .5.5.5.5.5.5.5.5
    4287:	b4 35 b8 35 bb 35 be 35 c1 35 c4 35 c7 35 ca 35     .5.5.5.5.5.5.5.5
    4297:	cd 35 d0 35 d3 35 d7 35 da 35 dd 35 e0 35 e3 35     .5.5.5.5.5.5.5.5
    42a7:	e6 35 e9 35 ef 35 f2 35 f6 35 f9 35 fc 35 ff 35     .5.5.5.5.5.5.5.5
    42b7:	02 36 05 36 08 36 0b 36 0e 36 11 36 15 36 18 36     .6.6.6.6.6.6.6.6
    42c7:	1b 36 1e 36 21 36 24 36 27 36 2a 36 30 36 34 36     .6.6!6$6'6*60646
    42d7:	37 36 3a 36 3d 36 40 36 43 36 46 36 49 36 4c 36     76:6=6@6C6F6I6L6
    42e7:	4f 36 53 36 56 36 59 36 5c 36 5f 36 62 36 65 36     O6S6V6Y6\6_6b6e6
    42f7:	68 36 6b 36 72 36 75 36 78 36 7b 36 7e 36 81 36     h6k6r6u6x6{6~6.6
    4307:	84 36 87 36 8a 36 8d 36 91 36 94 36 97 36 9a 36     .6.6.6.6.6.6.6.6
    4317:	9d 36 a0 36 a3 36 a6 36 a9 36 ac 36 b3 36 b6 36     .6.6.6.6.6.6.6.6
    4327:	b9 36 bc 36 bf 36 c2 36 c5 36 c8 36 cb 36 cf 36     .6.6.6.6.6.6.6.6
    4337:	d2 36 d5 36 d8 36 db 36 de 36 e1 36 e4 36 e7 36     .6.6.6.6.6.6.6.6
    4347:	ea 36 f1 36 f4 36 f7 36 fa 36 fd 36 00 37 03 37     .6.6.6.6.6.6.7.7
    4357:	06 37 09 37 0d 37 10 37 13 37 16 37 19 37 1c 37     .7.7.7.7.7.7.7.7
    4367:	1f 37 22 37 25 37 28 37 2c 37 32 37 35 37 38 37     .7"7%7(7,7275787
    4377:	3b 37 3e 37 41 37 44 37 47 37 4b 37 4e 37 51 37     ;7>7A7D7G7K7N7Q7
    4387:	54 37 57 37 5a 37 5d 37 60 37 63 37 66 37 6a 37     T7W7Z7]7`7c7f7j7
    4397:	70 37 73 37 76 37 79 37 7c 37 7f 37 82 37 85 37     p7s7v7y7|7.7.7.7
    43a7:	89 37 8c 37 8f 37 92 37 95 37 98 37 9b 37 9e 37     .7.7.7.7.7.7.7.7
    43b7:	a1 37 a4 37 a8 37 ae 37 b1 37 b4 37 b7 37 ba 37     .7.7.7.7.7.7.7.7
    43c7:	bd 37 c0 37 c3 37 c7 37 ca 37 cd 37 d0 37 d3 37     .7.7.7.7.7.7.7.7
    43d7:	d6 37 d9 37 dc 37 df 37 e2 37 e6 37 e9 37 ef 37     .7.7.7.7.7.7.7.7
    43e7:	f2 37 f5 37 f8 37 fb 37 fe 37 01 38 05 38 08 38     .7.7.7.7.7.8.8.8
    43f7:	0b 38 0e 38 11 38 14 38 17 38 1a 38 1d 38 20 38     .8.8.8.8.8.8.8 8
    4407:	24 38 27 38 2d 38 30 38 33 38 36 38 39 38 3c 38     $8'8-808386898<8
    4417:	3f 38 43 38 46 38 49 38 4c 38 4f 38 52 38 55 38     ?8C8F8I8L8O8R8U8
    4427:	58 38 5b 38 5e 38 62 38 65 38 6b 38 6e 38 71 38     X8[8^8b8e8k8n8q8
    4437:	74 38 77 38 7a 38 7d 38 81 38 84 38 87 38 8a 38     t8w8z8}8.8.8.8.8
    4447:	8d 38 90 38 93 38 96 38 99 38 9c 38 a0 38 a3 38     .8.8.8.8.8.8.8.8
    4457:	a9 38 ac 38 af 38 b2 38 b5 38 b8 38 bb 38 bf 38     .8.8.8.8.8.8.8.8
    4467:	c2 38 c5 38 c8 38 cb 38 ce 38 d1 38 d4 38 d7 38     .8.8.8.8.8.8.8.8
    4477:	da 38 de 38 e1 38 e7 38 ea 38 ed 38 f0 38 f3 38     .8.8.8.8.8.8.8.8
    4487:	f6 38 f9 38 fd 38 00 39 03 39 06 39 09 39 0c 39     .8.8.8.9.9.9.9.9
    4497:	0f 39 12 39 15 39 18 39 1c 39 1f 39 25 39 28 39     .9.9.9.9.9.9%9(9
    44a7:	2b 39 2e 39 31 39 34 39 37 39 3b 39 3e 39 41 39     +9.9194979;9>9A9
    44b7:	44 39 47 39 4a 39 4d 39 50 39 53 39 56 39 5a 39     D9G9J9M9P9S9V9Z9
    44c7:	5d 39 63 39 66 39 69 39 6c 39 6f 39 72 39 75 39     ]9c9f9i9l9o9r9u9
    44d7:	79 39 7c 39 7f 39 82 39 85 39 88 39 8b 39 8e 39     y9|9.9.9.9.9.9.9
    44e7:	91 39 94 39 98 39 9e 39 a1 39 a4 39 a7 39 aa 39     .9.9.9.9.9.9.9.9
    44f7:	ad 39 b0 39 b3 39 b7 39 ba 39 bd 39 c0 39 c3 39     .9.9.9.9.9.9.9.9
    4507:	c6 39 c9 39 cc 39 cf 39 d2 39 d6 39 dc 39 df 39     .9.9.9.9.9.9.9.9
    4517:	e2 39 e5 39 e8 39 eb 39 ee 39 f1 39 f5 39 f8 39     .9.9.9.9.9.9.9.9
    4527:	fb 39 fe 39 01 3a 04 3a 07 3a 0a 3a 0d 3a 10 3a     .9.9.:.:.:.:.:.:
    4537:	14 3a 1a 3a 1d 3a 20 3a 23 3a 26 3a 29 3a 2c 3a     .:.:.: :#:&:):,:
    4547:	2f 3a 33 3a 36 3a 39 3a 3c 3a 3f 3a 42 3a 45 3a     /:3:6:9:<:?:B:E:
    4557:	48 3a 4b 3a 4e 3a 55 3a 58 3a 5b 3a 5e 3a 61 3a     H:K:N:U:X:[:^:a:
    4567:	64 3a 67 3a 6a 3a 6d 3a 71 3a 74 3a 77 3a 7a 3a     d:g:j:m:q:t:w:z:
    4577:	7d 3a 80 3a 83 3a 86 3a 89 3a 8c 3a 93 3a 96 3a     }:.:.:.:.:.:.:.:
    4587:	99 3a 9c 3a 9f 3a a2 3a a5 3a a8 3a ab 3a af 3a     .:.:.:.:.:.:.:.:
    4597:	b2 3a b5 3a b8 3a bb 3a be 3a c1 3a c4 3a c7 3a     .:.:.:.:.:.:.:.:
    45a7:	ce 3a d1 3a d4 3a d7 3a da 3a dd 3a e0 3a e3 3a     .:.:.:.:.:.:.:.:
    45b7:	e6 3a e9 3a ed 3a f0 3a f3 3a f6 3a f9 3a fc 3a     .:.:.:.:.:.:.:.:
    45c7:	ff 3a 02 3b 08 3b 0c 3b 0f 3b 12 3b 15 3b 18 3b     .:.;.;.;.;.;.;.;
    45d7:	1b 3b 1e 3b 21 3b 24 3b 27 3b 2b 3b 2e 3b 31 3b     .;.;!;$;';+;.;1;
    45e7:	34 3b 37 3b 3a 3b 3d 3b 40 3b 46 3b 4a 3b 4d 3b     4;7;:;=;@;F;J;M;
    45f7:	50 3b 53 3b 56 3b 59 3b 5c 3b 5f 3b 62 3b 65 3b     P;S;V;Y;\;_;b;e;
    4607:	69 3b 6c 3b 6f 3b 72 3b 75 3b 78 3b 7b 3b 81 3b     i;l;o;r;u;x;{;.;
    4617:	84 3b 88 3b 8b 3b 8e 3b 91 3b 94 3b 97 3b 9a 3b     .;.;.;.;.;.;.;.;
    4627:	9d 3b a0 3b a3 3b a7 3b aa 3b ad 3b b0 3b b3 3b     .;.;.;.;.;.;.;.;
    4637:	b6 3b bc 3b bf 3b c2 3b c6 3b c9 3b cc 3b cf 3b     .;.;.;.;.;.;.;.;
    4647:	d2 3b d5 3b d8 3b db 3b de 3b e1 3b e5 3b e8 3b     .;.;.;.;.;.;.;.;
    4657:	eb 3b ee 3b f1 3b f7 3b fa 3b fd 3b 00 3c 04 3c     .;.;.;.;.;.;.<.<
    4667:	07 3c 0a 3c 0d 3c 10 3c 13 3c 16 3c 19 3c 1c 3c     .<.<.<.<.<.<.<.<
    4677:	1f 3c 23 3c 26 3c 29 3c 2c 3c 32 3c 35 3c 38 3c     .<#<&<)<,<2<5<8<
    4687:	3b 3c 3e 3c 42 3c 45 3c 48 3c 4b 3c 4e 3c 51 3c     ;<><B<E<H<K<N<Q<
    4697:	54 3c 57 3c 5a 3c 5d 3c 61 3c 64 3c 67 3c 6d 3c     T<W<Z<]<a<d<g<m<
    46a7:	70 3c 73 3c 76 3c 79 3c 7c 3c 80 3c 83 3c 86 3c     p<s<v<y<|<.<.<.<
    46b7:	89 3c 8c 3c 8f 3c 92 3c 95 3c 98 3c 9b 3c 9f 3c     .<.<.<.<.<.<.<.<
    46c7:	a2 3c a8 3c ab 3c ae 3c b1 3c b4 3c b7 3c ba 3c     .<.<.<.<.<.<.<.<
    46d7:	be 3c c1 3c c4 3c c7 3c ca 3c cd 3c d0 3c d3 3c     .<.<.<.<.<.<.<.<
    46e7:	d6 3c d9 3c dd 3c e3 3c e6 3c e9 3c ec 3c ef 3c     .<.<.<.<.<.<.<.<
    46f7:	f2 3c f5 3c f8 3c fc 3c ff 3c 02 3d 05 3d 08 3d     .<.<.<.<.<.=.=.=
    4707:	0b 3d 0e 3d 11 3d 14 3d 1b 3d 1e 3d 21 3d 24 3d     .=.=.=.=.=.=!=$=
    4717:	27 3d 2a 3d 2d 3d 30 3d 33 3d 36 3d 3a 3d 3d 3d     '=*=-=0=3=6=:===
    4727:	40 3d 43 3d 46 3d 49 3d 4c 3d 4f 3d 55 3d 59 3d     @=C=F=I=L=O=U=Y=
    4737:	5c 3d 5f 3d 62 3d 65 3d 68 3d 6b 3d 6e 3d 71 3d     \=_=b=e=h=k=n=q=
    4747:	74 3d 78 3d 7b 3d 7e 3d 81 3d 84 3d 87 3d 8a 3d     t=x={=~=.=.=.=.=
    4757:	90 3d 93 3d 97 3d 9a 3d 9d 3d a0 3d a3 3d a6 3d     .=.=.=.=.=.=.=.=
    4767:	a9 3d ac 3d af 3d b2 3d b6 3d b9 3d bc 3d bf 3d     .=.=.=.=.=.=.=.=
    4777:	c2 3d c8 3d cb 3d ce 3d d1 3d d5 3d d8 3d db 3d     .=.=.=.=.=.=.=.=
    4787:	de 3d e1 3d e4 3d e7 3d ea 3d ed 3d f0 3d f4 3d     .=.=.=.=.=.=.=.=
    4797:	f7 3d fa 3d fd 3d 03 3e 06 3e 09 3e 0c 3e 0f 3e     .=.=.=.>.>.>.>.>
    47a7:	13 3e 16 3e 19 3e 1c 3e 1f 3e 22 3e 25 3e 28 3e     .>.>.>.>.>">%>(>
    47b7:	2b 3e 2e 3e 32 3e 35 3e 3b 3e 3e 3e 41 3e 44 3e     +>.>2>5>;>>>A>D>
    47c7:	47 3e 4a 3e 4d 3e 51 3e 54 3e 57 3e 5a 3e 5d 3e     G>J>M>Q>T>W>Z>]>
    47d7:	60 3e 63 3e 66 3e 69 3e 6c 3e 70 3e 76 3e 79 3e     `>c>f>i>l>p>v>y>
    47e7:	7c 3e 7f 3e 82 3e 85 3e 88 3e 8b 3e 8f 3e 92 3e     |>.>.>.>.>.>.>.>
    47f7:	95 3e 98 3e 9b 3e 9e 3e a1 3e a4 3e a7 3e ae 3e     .>.>.>.>.>.>.>.>
    4807:	b1 3e b4 3e b7 3e ba 3e bd 3e c0 3e c3 3e c6 3e     .>.>.>.>.>.>.>.>
    4817:	c9 3e cd 3e d0 3e d3 3e d6 3e d9 3e dc 3e df 3e     .>.>.>.>.>.>.>.>
    4827:	e2 3e e8 3e ec 3e ef 3e f2 3e f5 3e f8 3e fb 3e     .>.>.>.>.>.>.>.>
    4837:	fe 3e 01 3f 04 3f 07 3f 0b 3f 0e 3f 11 3f 14 3f     .>.?.?.?.?.?.?.?
    4847:	17 3f 1a 3f 20 3f 23 3f 26 3f 2a 3f 2d 3f 30 3f     .?.? ?#?&?*?-?0?
    4857:	33 3f 36 3f 39 3f 3c 3f 3f 3f 42 3f 45 3f 49 3f     3?6?9?<???B?E?I?
    4867:	4c 3f 4f 3f 52 3f 58 3f 5b 3f 5e 3f 61 3f 64 3f     L?O?R?X?[?^?a?d?
    4877:	68 3f 6b 3f 6e 3f 71 3f 74 3f 77 3f 7a 3f 7d 3f     h?k?n?q?t?w?z?}?
    4887:	80 3f 83 3f 87 3f 8a 3f 90 3f 93 3f 96 3f 99 3f     .?.?.?.?.?.?.?.?
    4897:	9c 3f 9f 3f a2 3f a6 3f a9 3f ac 3f af 3f b2 3f     .?.?.?.?.?.?.?.?
    48a7:	b5 3f b8 3f bb 3f be 3f c1 3f c8 3f cb 3f ce 3f     .?.?.?.?.?.?.?.?
    48b7:	d1 3f d4 3f d7 3f da 3f dd 3f e0 3f e4 3f e7 3f     .?.?.?.?.?.?.?.?
    48c7:	ea 3f ed 3f f0 3f f3 3f f6 3f f9 3f ff 3f 03 40     .?.?.?.?.?.?.?.@
    48d7:	06 40 09 40 0c 40 0f 40 12 40 15 40 18 40 1b 40     .@.@.@.@.@.@.@.@
    48e7:	1e 40 22 40 25 40 28 40 2b 40 2e 40 31 40 37 40     .@"@%@(@+@.@1@7@
    48f7:	3a 40 3d 40 41 40 44 40 47 40 4a 40 4d 40 50 40     :@=@A@D@G@J@M@P@
    4907:	53 40 56 40 59 40 5c 40 60 40 63 40 66 40 69 40     S@V@Y@\@`@c@f@i@
    4917:	6f 40 72 40 75 40 78 40 7b 40 7f 40 82 40 85 40     o@r@u@x@{@.@.@.@
    4927:	88 40 8b 40 8e 40 91 40 94 40 97 40 9a 40 9e 40     .@.@.@.@.@.@.@.@
    4937:	a1 40 a7 40 aa 40 ad 40 b0 40 b3 40 b6 40 b9 40     .@.@.@.@.@.@.@.@
    4947:	bd 40 c0 40 c3 40 c6 40 c9 40 cc 40 cf 40 d2 40     .@.@.@.@.@.@.@.@
    4957:	d5 40 d8 40 df 40 e2 40 e5 40 e8 40 eb 40 ee 40     .@.@.@.@.@.@.@.@
    4967:	f1 40 f4 40 f7 40 fb 40 fe 40 01 41 04 41 07 41     .@.@.@.@.@.A.A.A
    4977:	0a 41 0d 41 10 41 16 41 1a 41 1d 41 20 41 23 41     .A.A.A.A.A.A A#A
    4987:	26 41 29 41 2c 41 2f 41 32 41 35 41 39 41 3c 41     &A)A,A/A2A5A9A<A
    4997:	3f 41 42 41 45 41 4b 41 4e 41 51 41 54 41 58 41     ?ABAEAKANAQATAXA
    49a7:	5b 41 5e 41 61 41 64 41 67 41 6a 41 6d 41 70 41     [A^AaAdAgAjAmApA
    49b7:	73 41 77 41 7a 41 7d 41 83 41 86 41 89 41 8c 41     sAwAzA}A.A.A.A.A
    49c7:	8f 41 92 41 96 41 99 41 9c 41 9f 41 a2 41 a5 41     .A.A.A.A.A.A.A.A
    49d7:	a8 41 ab 41 ae 41 b1 41 b5 41 bb 41 be 41 c1 41     .A.A.A.A.A.A.A.A
    49e7:	c4 41 c7 41 ca 41 cd 41 d0 41 d4 41 d7 41 da 41     .A.A.A.A.A.A.A.A
    49f7:	dd 41 e0 41 e3 41 e6 41 e9 41 ef 41 f3 41 f6 41     .A.A.A.A.A.A.A.A
    4a07:	f9 41 fc 41 ff 41 02 42 05 42 08 42 0b 42 0e 42     .A.A.A.B.B.B.B.B
    4a17:	12 42 15 42 18 42 1b 42 1e 42 21 42 27 42 2a 42     .B.B.B.B.B!B'B*B
    4a27:	2d 42 31 42 34 42 37 42 3a 42 3d 42 40 42 43 42     -B1B4B7B:B=B@BCB
    4a37:	46 42 49 42 4c 42 50 42 53 42 56 42 5c 42 5f 42     FBIBLBPBSBVB\B_B
    4a47:	62 42 65 42 68 42 6b 42 6f 42 72 42 75 42 78 42     bBeBhBkBoBrBuBxB
    4a57:	7b 42 7e 42 81 42 84 42 87 42 8a 42 8e 42 94 42     {B~B.B.B.B.B.B.B
    4a67:	97 42 9a 42 9d 42 a0 42 a3 42 a6 42 a9 42 ad 42     .B.B.B.B.B.B.B.B
    4a77:	b0 42 b3 42 b6 42 b9 42 bc 42 bf 42 c2 42 c8 42     .B.B.B.B.B.B.B.B
    4a87:	cc 42 cf 42 d2 42 d5 42 d8 42 db 42 de 42 e1 42     .B.B.B.B.B.B.B.B
    4a97:	e4 42 e7 42 eb 42 ee 42 f1 42 f4 42 f7 42 fd 42     .B.B.B.B.B.B.B.B
    4aa7:	00 43 03 43 06 43 0a 43 0d 43 10 43 13 43 16 43     .C.C.C.C.C.C.C.C
    4ab7:	19 43 1c 43 1f 43 22 43 25 43 29 43 2c 43 2f 43     .C.C.C"C%C)C,C/C
    4ac7:	35 43 38 43 3b 43 3e 43 41 43 44 43 48 43 4b 43     5C8C;C>CACDCHCKC
    4ad7:	4e 43 51 43 54 43 57 43 5a 43 5d 43 60 43 63 43     NCQCTCWCZC]C`CcC
    4ae7:	6a 43 6d 43 70 43 73 43 76 43 79 43 7c 43 7f 43     jCmCpCsCvCyC|C.C
    4af7:	82 43 86 43 89 43 8c 43 8f 43 92 43 95 43 98 43     .C.C.C.C.C.C.C.C
    4b07:	9e 43 a1 43 a5 43 a8 43 ab 43 ae 43 b1 43 b4 43     .C.C.C.C.C.C.C.C
    4b17:	b7 43 ba 43 bd 43 c0 43 c4 43 c7 43 ca 43 cd 43     .C.C.C.C.C.C.C.C
    4b27:	d3 43 d6 43 d9 43 dc 43 df 43 e3 43 e6 43 e9 43     .C.C.C.C.C.C.C.C
    4b37:	ec 43 ef 43 f2 43 f5 43 f8 43 fb 43 fe 43 02 44     .C.C.C.C.C.C.C.D
    4b47:	08 44 0b 44 0e 44 11 44 14 44 17 44 1a 44 1d 44     .D.D.D.D.D.D.D.D
    4b57:	21 44 24 44 27 44 2a 44 2d 44 30 44 33 44 36 44     !D$D'D*D-D0D3D6D
    4b67:	3c 44 40 44 43 44 46 44 49 44 4c 44 4f 44 52 44     <D@DCDFDIDLDODRD
    4b77:	55 44 58 44 5b 44 5f 44 62 44 65 44 68 44 6b 44     UDXD[D_DbDeDhDkD
    4b87:	71 44 74 44 77 44 7a 44 7e 44 81 44 84 44 87 44     qDtDwDzD~D.D.D.D
    4b97:	8a 44 8d 44 90 44 93 44 96 44 99 44 9d 44 a0 44     .D.D.D.D.D.D.D.D
    4ba7:	a6 44 a9 44 ac 44 af 44 b2 44 b5 44 b8 44 bc 44     .D.D.D.D.D.D.D.D
    4bb7:	bf 44 c2 44 c5 44 c8 44 cb 44 ce 44 d1 44 d4 44     .D.D.D.D.D.D.D.D
    4bc7:	db 44 de 44 e1 44 e4 44 e7 44 ea 44 ed 44 f0 44     .D.D.D.D.D.D.D.D
    4bd7:	f3 44 f6 44 fa 44 fd 44 00 45 03 45 06 45 09 45     .D.D.D.D.E.E.E.E
    4be7:	0f 45 12 45 15 45 19 45 1c 45 1f 45 22 45 25 45     .E.E.E.E.E.E"E%E
    4bf7:	28 45 2b 45 2e 45 31 45 34 45 38 45 3b 45 3e 45     (E+E.E1E4E8E;E>E
    4c07:	44 45 47 45 4a 45 4d 45 50 45 53 45 57 45 5a 45     DEGEJEMEPESEWEZE
    4c17:	5d 45 60 45 63 45 66 45 69 45 6c 45 6f 45 72 45     ]E`EcEfEiElEoErE
    4c27:	79 45 7c 45 7f 45 82 45 85 45 88 45 8b 45 8e 45     yE|E.E.E.E.E.E.E
    4c37:	91 45 95 45 98 45 9b 45 9e 45 a1 45 a4 45 aa 45     .E.E.E.E.E.E.E.E
    4c47:	ad 45 b0 45 b4 45 b7 45 ba 45 bd 45 c0 45 c3 45     .E.E.E.E.E.E.E.E
    4c57:	c6 45 c9 45 cc 45 cf 45 d3 45 d6 45 d9 45 df 45     .E.E.E.E.E.E.E.E
    4c67:	e2 45 e5 45 e8 45 eb 45 ee 45 f2 45 f5 45 f8 45     .E.E.E.E.E.E.E.E
    4c77:	fb 45 fe 45 01 46 04 46 07 46 0a 46 0d 46 14 46     .E.E.F.F.F.F.F.F
    4c87:	17 46 1a 46 1d 46 20 46 23 46 26 46 29 46 2c 46     .F.F.F F#F&F)F,F
    4c97:	30 46 33 46 36 46 39 46 3c 46 3f 46 45 46 48 46     0F3F6F9F<F?FEFHF
    4ca7:	4b 46 4f 46 52 46 55 46 58 46 5b 46 5e 46 61 46     KFOFRFUFXF[F^FaF
    4cb7:	64 46 67 46 6a 46 6e 46 71 46 74 46 7a 46 7d 46     dFgFjFnFqFtFzF}F
    4cc7:	80 46 83 46 86 46 89 46 8d 46 90 46 93 46 96 46     .F.F.F.F.F.F.F.F
    4cd7:	99 46 9c 46 9f 46 a2 46 a5 46 a8 46 af 46 b2 46     .F.F.F.F.F.F.F.F
    4ce7:	b5 46 b8 46 bb 46 be 46 c1 46 c4 46 c7 46 cb 46     .F.F.F.F.F.F.F.F
    4cf7:	ce 46 d1 46 d4 46 d7 46 da 46 e0 46 e3 46 e6 46     .F.F.F.F.F.F.F.F
    4d07:	ea 46 ed 46 f0 46 f3 46 f6 46 f9 46 fc 46 ff 46     .F.F.F.F.F.F.F.F
    4d17:	02 47 05 47 09 47 0c 47 0f 47 15 47 18 47 1b 47     .G.G.G.G.G.G.G.G
    4d27:	1e 47 21 47 24 47 28 47 2b 47 2e 47 31 47 34 47     .G!G$G(G+G.G1G4G
    4d37:	37 47 3a 47 3d 47 40 47 47 47 4a 47 4d 47 50 47     7G:G=G@GGGJGMGPG
    4d47:	53 47 56 47 59 47 5c 47 5f 47 62 47 66 47 69 47     SGVGYG\G_GbGfGiG
    4d57:	6c 47 6f 47 72 47 78 47 7b 47 7e 47 81 47 85 47     lGoGrGxG{G~G.G.G
    4d67:	88 47 8b 47 8e 47 91 47 94 47 97 47 9a 47 9d 47     .G.G.G.G.G.G.G.G
    4d77:	a0 47 a4 47 a7 47 ad 47 b0 47 b3 47 b6 47 b9 47     .G.G.G.G.G.G.G.G
    4d87:	bc 47 bf 47 c3 47 c6 47 c9 47 cc 47 cf 47 d2 47     .G.G.G.G.G.G.G.G
    4d97:	d5 47 d8 47 de 47 e2 47 e5 47 e8 47 eb 47 ee 47     .G.G.G.G.G.G.G.G
    4da7:	f1 47 f4 47 f7 47 fa 47 fd 47 01 48 04 48 07 48     .G.G.G.G.G.H.H.H
    4db7:	0a 48 10 48 13 48 16 48 19 48 1c 48 20 48 23 48     .H.H.H.H.H.H H#H
    4dc7:	26 48 29 48 2c 48 2f 48 32 48 35 48 38 48 3b 48     &H)H,H/H2H5H8H;H
    4dd7:	42 48 45 48 48 48 4b 48 4e 48 51 48 54 48 57 48     BHEHHHKHNHQHTHWH
    4de7:	5a 48 5e 48 61 48 64 48 67 48 6a 48 6d 48 70 48     ZH^HaHdHgHjHmHpH
    4df7:	76 48 79 48 7d 48 80 48 83 48 86 48 89 48 8c 48     vHyH}H.H.H.H.H.H
    4e07:	8f 48 92 48 95 48 98 48 9c 48 9f 48 a2 48 a8 48     .H.H.H.H.H.H.H.H
    4e17:	ab 48 ae 48 b1 48 b4 48 b7 48 bb 48 be 48 c1 48     .H.H.H.H.H.H.H.H
    4e27:	c4 48 c7 48 ca 48 cd 48 d0 48 d3 48 da 48 dd 48     .H.H.H.H.H.H.H.H
    4e37:	e0 48 e3 48 e6 48 e9 48 ec 48 ef 48 f2 48 f5 48     .H.H.H.H.H.H.H.H
    4e47:	f9 48 fc 48 ff 48 02 49 05 49 0b 49 0e 49 11 49     .H.H.H.I.I.I.I.I
    4e57:	14 49 18 49 1b 49 1e 49 21 49 24 49 27 49 2a 49     .I.I.I.I!I$I'I*I
    4e67:	2d 49 30 49 33 49 37 49 3d 49 40 49 43 49 46 49     -I0I3I7I=I@ICIFI
    4e77:	49 49 4c 49 4f 49 52 49 56 49 59 49 5c 49 5f 49     IILIOIRIVIYI\I_I
    4e87:	62 49 65 49 68 49 6e 49 71 49 75 49 78 49 7b 49     bIeIhInIqIuIxI{I
    4e97:	7e 49 81 49 84 49 87 49 8a 49 8d 49 90 49 94 49     ~I.I.I.I.I.I.I.I
    4ea7:	97 49 9a 49 a0 49 a3 49 a6 49 a9 49 ac 49 af 49     .I.I.I.I.I.I.I.I
    4eb7:	b3 49 b6 49 b9 49 bc 49 bf 49 c2 49 c5 49 c8 49     .I.I.I.I.I.I.I.I
    4ec7:	cb 49 d2 49 d5 49 d8 49 db 49 de 49 e1 49 e4 49     .I.I.I.I.I.I.I.I
    4ed7:	e7 49 ea 49 ed 49 f1 49 f4 49 f7 49 fa 49 fd 49     .I.I.I.I.I.I.I.I
    4ee7:	03 4a 06 4a 09 4a 0c 4a 10 4a 13 4a 16 4a 19 4a     .J.J.J.J.J.J.J.J
    4ef7:	1c 4a 1f 4a 22 4a 25 4a 28 4a 2b 4a 2f 4a 35 4a     .J.J"J%J(J+J/J5J
    4f07:	38 4a 3b 4a 3e 4a 41 4a 44 4a 47 4a 4a 4a 4e 4a     8J;J>JAJDJGJJJNJ
    4f17:	51 4a 54 4a 57 4a 5a 4a 5d 4a 63 4a 66 4a 69 4a     QJTJWJZJ]JcJfJiJ
    4f27:	6d 4a 70 4a 73 4a 76 4a 79 4a 7c 4a 7f 4a 82 4a     mJpJsJvJyJ|J.J.J
    4f37:	85 4a 88 4a 8c 4a 8f 4a 95 4a 98 4a 9b 4a 9e 4a     .J.J.J.J.J.J.J.J
    4f47:	a1 4a a4 4a a7 4a ab 4a ae 4a b1 4a b4 4a b7 4a     .J.J.J.J.J.J.J.J
    4f57:	ba 4a bd 4a c0 4a c6 4a ca 4a cd 4a d0 4a d3 4a     .J.J.J.J.J.J.J.J
    4f67:	d6 4a d9 4a dc 4a df 4a e2 4a e5 4a e9 4a ec 4a     .J.J.J.J.J.J.J.J
    4f77:	ef 4a f2 4a f8 4a fb 4a fe 4a 01 4b 04 4b 08 4b     .J.J.J.J.J.K.K.K
    4f87:	0b 4b 0e 4b 11 4b 14 4b 17 4b 1a 4b 1d 4b 20 4b     .K.K.K.K.K.K.K K
    4f97:	27 4b 2a 4b 2d 4b 30 4b 33 4b 36 4b 39 4b 3c 4b     'K*K-K0K3K6K9K<K
    4fa7:	3f 4b 42 4b 46 4b 49 4b 4c 4b 4f 4b 52 4b 58 4b     ?KBKFKIKLKOKRKXK
    4fb7:	5b 4b 5e 4b 61 4b 65 4b 68 4b 6b 4b 6e 4b 71 4b     [K^KaKeKhKkKnKqK
    4fc7:	74 4b 77 4b 7a 4b 7d 4b 80 4b 87 4b 8a 4b 8d 4b     tKwKzK}K.K.K.K.K
    4fd7:	90 4b 93 4b 96 4b 99 4b 9c 4b 9f 4b a3 4b a6 4b     .K.K.K.K.K.K.K.K
    4fe7:	a9 4b ac 4b af 4b b2 4b b8 4b bb 4b be 4b c2 4b     .K.K.K.K.K.K.K.K
    4ff7:	c5 4b c8 4b cb 4b ce 4b d1 4b d4 4b d7 4b da 4b     .K.K.K.K.K.K.K.K
    5007:	dd 4b e1 4b e4 4b ea 4b ed 4b f0 4b f3 4b f6 4b     .K.K.K.K.K.K.K.K
    5017:	f9 4b fc 4b 00 4c 03 4c 06 4c 09 4c 0c 4c 0f 4c     .K.K.L.L.L.L.L.L
    5027:	12 4c 18 4c 1b 4c 1f 4c 22 4c 25 4c 28 4c 2b 4c     .L.L.L.L"L%L(L+L
    5037:	2e 4c 31 4c 34 4c 37 4c 3a 4c 3e 4c 41 4c 47 4c     .L1L4L7L:L>LALGL
    5047:	4a 4c 4d 4c 50 4c 53 4c 56 4c 59 4c 5d 4c 60 4c     JLMLPLSLVLYL]L`L
    5057:	63 4c 66 4c 69 4c 6c 4c 6f 4c 72 4c 78 4c 7c 4c     cLfLiLlLoLrLxL|L
    5067:	7f 4c 82 4c 85 4c 88 4c 8b 4c 8e 4c 91 4c 94 4c     .L.L.L.L.L.L.L.L
    5077:	97 4c 9b 4c 9e 4c a1 4c a7 4c aa 4c ad 4c b0 4c     .L.L.L.L.L.L.L.L
    5087:	b3 4c b6 4c ba 4c bd 4c c0 4c c3 4c c6 4c c9 4c     .L.L.L.L.L.L.L.L
    5097:	cc 4c cf 4c d2 4c d9 4c dc 4c df 4c e2 4c e5 4c     .L.L.L.L.L.L.L.L
    50a7:	e8 4c eb 4c ee 4c f1 4c f4 4c f8 4c fb 4c fe 4c     .L.L.L.L.L.L.L.L
    50b7:	01 4d 07 4d 0a 4d 0d 4d 10 4d 13 4d 17 4d 1a 4d     .M.M.M.M.M.M.M.M
    50c7:	1d 4d 20 4d 23 4d 26 4d 29 4d 2c 4d 2f 4d 36 4d     .M M#M&M)M,M/M6M
    50d7:	39 4d 3c 4d 3f 4d 42 4d 45 4d 48 4d 4b 4d 4e 4d     9M<M?MBMEMHMKMNM
    50e7:	51 4d 55 4d 58 4d 5b 4d 5e 4d 61 4d 67 4d 6a 4d     QMUMXM[M^MaMgMjM
    50f7:	6d 4d 70 4d 74 4d 77 4d 7a 4d 7d 4d 80 4d 83 4d     mMpMtMwMzM}M.M.M
    5107:	86 4d 89 4d 8c 4d 8f 4d 96 4d 99 4d 9c 4d 9f 4d     .M.M.M.M.M.M.M.M
    5117:	a2 4d a5 4d a8 4d ab 4d ae 4d b2 4d b5 4d b8 4d     .M.M.M.M.M.M.M.M
    5127:	bb 4d be 4d c4 4d c7 4d ca 4d cd 4d d1 4d d4 4d     .M.M.M.M.M.M.M.M
    5137:	d7 4d da 4d dd 4d e0 4d e3 4d e6 4d e9 4d ec 4d     .M.M.M.M.M.M.M.M
    5147:	f3 4d f6 4d f9 4d fc 4d ff 4d 02 4e 05 4e 08 4e     .M.M.M.M.M.N.N.N
    5157:	0b 4e 0f 4e 12 4e 15 4e 18 4e 1b 4e 21 4e 24 4e     .N.N.N.N.N.N!N$N
    5167:	27 4e 2a 4e 2e 4e 31 4e 34 4e 37 4e 3a 4e 3d 4e     'N*N.N1N4N7N:N=N
    5177:	40 4e 43 4e 46 4e 49 4e 50 4e 53 4e 56 4e 59 4e     @NCNFNINPNSNVNYN
    5187:	5c 4e 5f 4e 62 4e 65 4e 68 4e 6c 4e 6f 4e 72 4e     \N_NbNeNhNlNoNrN
    5197:	75 4e 78 4e 7e 4e 81 4e 84 4e 87 4e 8b 4e 8e 4e     uNxN~N.N.N.N.N.N
    51a7:	91 4e 94 4e 97 4e 9a 4e 9d 4e a0 4e a3 4e a6 4e     .N.N.N.N.N.N.N.N
    51b7:	ad 4e b0 4e b3 4e b6 4e b9 4e bc 4e bf 4e c2 4e     .N.N.N.N.N.N.N.N
    51c7:	c5 4e c9 4e cc 4e cf 4e d2 4e d5 4e db 4e de 4e     .N.N.N.N.N.N.N.N
    51d7:	e1 4e e4 4e e8 4e eb 4e ee 4e f1 4e f4 4e f7 4e     .N.N.N.N.N.N.N.N
    51e7:	fa 4e fd 4e 00 4f 03 4f 0a 4f 0d 4f 10 4f 13 4f     .N.N.O.O.O.O.O.O
    51f7:	16 4f 19 4f 1c 4f 1f 4f 22 4f 26 4f 29 4f 2c 4f     .O.O.O.O"O&O)O,O
    5207:	2f 4f 32 4f 38 4f 3b 4f 3e 4f 41 4f 45 4f 48 4f     /O2O8O;O>OAOEOHO
    5217:	4b 4f 4e 4f 51 4f 54 4f 57 4f 5a 4f 5d 4f 60 4f     KONOQOTOWOZO]O`O
    5227:	67 4f 6a 4f 6d 4f 70 4f 73 4f 76 4f 79 4f 7c 4f     gOjOmOpOsOvOyO|O
    5237:	7f 4f 83 4f 86 4f 89 4f 8c 4f 8f 4f 95 4f 98 4f     .O.O.O.O.O.O.O.O
    5247:	9b 4f 9e 4f a2 4f a5 4f a8 4f ab 4f ae 4f b1 4f     .O.O.O.O.O.O.O.O
    5257:	b4 4f b7 4f ba 4f bd 4f c4 4f c7 4f ca 4f cd 4f     .O.O.O.O.O.O.O.O
    5267:	d0 4f d3 4f d6 4f d9 4f dc 4f e0 4f e3 4f e6 4f     .O.O.O.O.O.O.O.O
    5277:	e9 4f ec 4f f2 4f f5 4f f8 4f fb 4f ff 4f 02 50     .O.O.O.O.O.O.O.P
    5287:	05 50 08 50 0b 50 0e 50 11 50 14 50 00              .P.P.P.P.P.P.

00005294 <__ctors_end>:
    5294:	11 24       	eor	r1, r1
    5296:	1f be       	out	0x3f, r1	; 63
    5298:	cf ef       	ldi	r28, 0xFF	; 255
    529a:	cd bf       	out	0x3d, r28	; 61
    529c:	df e3       	ldi	r29, 0x3F	; 63
    529e:	de bf       	out	0x3e, r29	; 62
    52a0:	00 e0       	ldi	r16, 0x00	; 0
    52a2:	0c bf       	out	0x3c, r16	; 60
    52a4:	18 be       	out	0x38, r1	; 56
    52a6:	19 be       	out	0x39, r1	; 57
    52a8:	1a be       	out	0x3a, r1	; 58
    52aa:	1b be       	out	0x3b, r1	; 59

000052ac <__do_copy_data>:
    52ac:	11 e2       	ldi	r17, 0x21	; 33
    52ae:	a0 e0       	ldi	r26, 0x00	; 0
    52b0:	b0 e2       	ldi	r27, 0x20	; 32
    52b2:	e8 eb       	ldi	r30, 0xB8	; 184
    52b4:	f3 e7       	ldi	r31, 0x73	; 115
    52b6:	01 e0       	ldi	r16, 0x01	; 1
    52b8:	0b bf       	out	0x3b, r16	; 59
    52ba:	02 c0       	rjmp	.+4      	; 0x52c0 <__do_copy_data+0x14>
    52bc:	07 90       	elpm	r0, Z+
    52be:	0d 92       	st	X+, r0
    52c0:	ac 38       	cpi	r26, 0x8C	; 140
    52c2:	b1 07       	cpc	r27, r17
    52c4:	d9 f7       	brne	.-10     	; 0x52bc <__do_copy_data+0x10>
    52c6:	1b be       	out	0x3b, r1	; 59

000052c8 <__do_clear_bss>:
    52c8:	29 e2       	ldi	r18, 0x29	; 41
    52ca:	ac e8       	ldi	r26, 0x8C	; 140
    52cc:	b1 e2       	ldi	r27, 0x21	; 33
    52ce:	01 c0       	rjmp	.+2      	; 0x52d2 <.do_clear_bss_start>

000052d0 <.do_clear_bss_loop>:
    52d0:	1d 92       	st	X+, r1

000052d2 <.do_clear_bss_start>:
    52d2:	af 3b       	cpi	r26, 0xBF	; 191
    52d4:	b2 07       	cpc	r27, r18
    52d6:	e1 f7       	brne	.-8      	; 0x52d0 <.do_clear_bss_loop>
    52d8:	0e 94 0a b4 	call	0x16814	; 0x16814 <main>
    52dc:	0c 94 b8 b9 	jmp	0x17370	; 0x17370 <_exit>

000052e0 <__bad_interrupt>:
    52e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000052e4 <osc_get_rate>:
	}
}
//@}

static inline uint32_t osc_get_rate(uint8_t id)
{
    52e4:	cf 93       	push	r28
    52e6:	df 93       	push	r29
    52e8:	1f 92       	push	r1
    52ea:	cd b7       	in	r28, 0x3d	; 61
    52ec:	de b7       	in	r29, 0x3e	; 62
    52ee:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	switch (id) {
    52f0:	89 81       	ldd	r24, Y+1	; 0x01
    52f2:	88 2f       	mov	r24, r24
    52f4:	90 e0       	ldi	r25, 0x00	; 0
    52f6:	82 30       	cpi	r24, 0x02	; 2
    52f8:	91 05       	cpc	r25, r1
    52fa:	89 f0       	breq	.+34     	; 0x531e <osc_get_rate+0x3a>
    52fc:	83 30       	cpi	r24, 0x03	; 3
    52fe:	91 05       	cpc	r25, r1
    5300:	1c f4       	brge	.+6      	; 0x5308 <osc_get_rate+0x24>
    5302:	01 97       	sbiw	r24, 0x01	; 1
    5304:	39 f0       	breq	.+14     	; 0x5314 <osc_get_rate+0x30>
    5306:	1a c0       	rjmp	.+52     	; 0x533c <osc_get_rate+0x58>
    5308:	84 30       	cpi	r24, 0x04	; 4
    530a:	91 05       	cpc	r25, r1
    530c:	69 f0       	breq	.+26     	; 0x5328 <osc_get_rate+0x44>
    530e:	08 97       	sbiw	r24, 0x08	; 8
    5310:	81 f0       	breq	.+32     	; 0x5332 <osc_get_rate+0x4e>
    5312:	14 c0       	rjmp	.+40     	; 0x533c <osc_get_rate+0x58>
	case OSC_ID_RC2MHZ:
		return 2000000UL;
    5314:	80 e8       	ldi	r24, 0x80	; 128
    5316:	94 e8       	ldi	r25, 0x84	; 132
    5318:	ae e1       	ldi	r26, 0x1E	; 30
    531a:	b0 e0       	ldi	r27, 0x00	; 0
    531c:	12 c0       	rjmp	.+36     	; 0x5342 <osc_get_rate+0x5e>

	case OSC_ID_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	9c e6       	ldi	r25, 0x6C	; 108
    5322:	ac ed       	ldi	r26, 0xDC	; 220
    5324:	b2 e0       	ldi	r27, 0x02	; 2
    5326:	0d c0       	rjmp	.+26     	; 0x5342 <osc_get_rate+0x5e>
#else
		return 32000000UL;
#endif

	case OSC_ID_RC32KHZ:
		return 32768UL;
    5328:	80 e0       	ldi	r24, 0x00	; 0
    532a:	90 e8       	ldi	r25, 0x80	; 128
    532c:	a0 e0       	ldi	r26, 0x00	; 0
    532e:	b0 e0       	ldi	r27, 0x00	; 0
    5330:	08 c0       	rjmp	.+16     	; 0x5342 <osc_get_rate+0x5e>

#ifdef BOARD_XOSC_HZ
	case OSC_ID_XOSC:
		return BOARD_XOSC_HZ;
    5332:	80 e0       	ldi	r24, 0x00	; 0
    5334:	94 e2       	ldi	r25, 0x24	; 36
    5336:	a4 ef       	ldi	r26, 0xF4	; 244
    5338:	b0 e0       	ldi	r27, 0x00	; 0
    533a:	03 c0       	rjmp	.+6      	; 0x5342 <osc_get_rate+0x5e>
#endif

	default:
		Assert(false);
		return 0;
    533c:	80 e0       	ldi	r24, 0x00	; 0
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	dc 01       	movw	r26, r24
	}
}
    5342:	bc 01       	movw	r22, r24
    5344:	cd 01       	movw	r24, r26
    5346:	0f 90       	pop	r0
    5348:	df 91       	pop	r29
    534a:	cf 91       	pop	r28
    534c:	08 95       	ret

0000534e <pll_get_default_rate_priv>:
 *
 * \retval Output clock rate from PLL.
 */
static inline uint32_t pll_get_default_rate_priv(enum pll_source src,
		unsigned int mul, unsigned int div)
{
    534e:	cf 93       	push	r28
    5350:	df 93       	push	r29
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
    5356:	29 97       	sbiw	r28, 0x09	; 9
    5358:	cd bf       	out	0x3d, r28	; 61
    535a:	de bf       	out	0x3e, r29	; 62
    535c:	8d 83       	std	Y+5, r24	; 0x05
    535e:	6e 83       	std	Y+6, r22	; 0x06
    5360:	7f 83       	std	Y+7, r23	; 0x07
    5362:	48 87       	std	Y+8, r20	; 0x08
    5364:	59 87       	std	Y+9, r21	; 0x09
	uint32_t rate;

	switch (src) {
    5366:	8d 81       	ldd	r24, Y+5	; 0x05
    5368:	88 2f       	mov	r24, r24
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	80 38       	cpi	r24, 0x80	; 128
    536e:	91 05       	cpc	r25, r1
    5370:	79 f0       	breq	.+30     	; 0x5390 <pll_get_default_rate_priv+0x42>
    5372:	80 3c       	cpi	r24, 0xC0	; 192
    5374:	91 05       	cpc	r25, r1
    5376:	a9 f0       	breq	.+42     	; 0x53a2 <pll_get_default_rate_priv+0x54>
    5378:	89 2b       	or	r24, r25
    537a:	09 f0       	breq	.+2      	; 0x537e <pll_get_default_rate_priv+0x30>
		rate = osc_get_rate(OSC_ID_XOSC);
		Assert(div == 1);
		break;

	default:
		break;
    537c:	1b c0       	rjmp	.+54     	; 0x53b4 <pll_get_default_rate_priv+0x66>
{
	uint32_t rate;

	switch (src) {
	case PLL_SRC_RC2MHZ:
		rate = 2000000UL;
    537e:	80 e8       	ldi	r24, 0x80	; 128
    5380:	94 e8       	ldi	r25, 0x84	; 132
    5382:	ae e1       	ldi	r26, 0x1E	; 30
    5384:	b0 e0       	ldi	r27, 0x00	; 0
    5386:	89 83       	std	Y+1, r24	; 0x01
    5388:	9a 83       	std	Y+2, r25	; 0x02
    538a:	ab 83       	std	Y+3, r26	; 0x03
    538c:	bc 83       	std	Y+4, r27	; 0x04
		Assert(div == 1);
		break;
    538e:	12 c0       	rjmp	.+36     	; 0x53b4 <pll_get_default_rate_priv+0x66>

	case PLL_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL //32MHz oscillator is calibrated to another frequency
		rate = CONFIG_OSC_RC32_CAL / 4;
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	9b e1       	ldi	r25, 0x1B	; 27
    5394:	a7 eb       	ldi	r26, 0xB7	; 183
    5396:	b0 e0       	ldi	r27, 0x00	; 0
    5398:	89 83       	std	Y+1, r24	; 0x01
    539a:	9a 83       	std	Y+2, r25	; 0x02
    539c:	ab 83       	std	Y+3, r26	; 0x03
    539e:	bc 83       	std	Y+4, r27	; 0x04
#else
		rate = 8000000UL;
 #endif
		Assert(div == 4);
		break;
    53a0:	09 c0       	rjmp	.+18     	; 0x53b4 <pll_get_default_rate_priv+0x66>

	case PLL_SRC_XOSC:
		rate = osc_get_rate(OSC_ID_XOSC);
    53a2:	88 e0       	ldi	r24, 0x08	; 8
    53a4:	9f df       	rcall	.-194    	; 0x52e4 <osc_get_rate>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	89 83       	std	Y+1, r24	; 0x01
    53ac:	9a 83       	std	Y+2, r25	; 0x02
    53ae:	ab 83       	std	Y+3, r26	; 0x03
    53b0:	bc 83       	std	Y+4, r27	; 0x04
		Assert(div == 1);
		break;
    53b2:	00 00       	nop
		break;
	}

	Assert(rate >= 440000UL);

	rate *= mul;
    53b4:	8e 81       	ldd	r24, Y+6	; 0x06
    53b6:	9f 81       	ldd	r25, Y+7	; 0x07
    53b8:	cc 01       	movw	r24, r24
    53ba:	a0 e0       	ldi	r26, 0x00	; 0
    53bc:	b0 e0       	ldi	r27, 0x00	; 0
    53be:	29 81       	ldd	r18, Y+1	; 0x01
    53c0:	3a 81       	ldd	r19, Y+2	; 0x02
    53c2:	4b 81       	ldd	r20, Y+3	; 0x03
    53c4:	5c 81       	ldd	r21, Y+4	; 0x04
    53c6:	bc 01       	movw	r22, r24
    53c8:	cd 01       	movw	r24, r26
    53ca:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <__mulsi3>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	89 83       	std	Y+1, r24	; 0x01
    53d4:	9a 83       	std	Y+2, r25	; 0x02
    53d6:	ab 83       	std	Y+3, r26	; 0x03
    53d8:	bc 83       	std	Y+4, r27	; 0x04

	Assert(rate >= PLL_MIN_HZ);
	Assert(rate <= PLL_MAX_HZ);

	return rate;
    53da:	89 81       	ldd	r24, Y+1	; 0x01
    53dc:	9a 81       	ldd	r25, Y+2	; 0x02
    53de:	ab 81       	ldd	r26, Y+3	; 0x03
    53e0:	bc 81       	ldd	r27, Y+4	; 0x04
}
    53e2:	bc 01       	movw	r22, r24
    53e4:	cd 01       	movw	r24, r26
    53e6:	29 96       	adiw	r28, 0x09	; 9
    53e8:	cd bf       	out	0x3d, r28	; 61
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	df 91       	pop	r29
    53ee:	cf 91       	pop	r28
    53f0:	08 95       	ret

000053f2 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
		return BOARD_XOSC_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL:
		return pll_get_default_rate(0);
    53fa:	41 e0       	ldi	r20, 0x01	; 1
    53fc:	50 e0       	ldi	r21, 0x00	; 0
    53fe:	62 e0       	ldi	r22, 0x02	; 2
    5400:	70 e0       	ldi	r23, 0x00	; 0
    5402:	80 ec       	ldi	r24, 0xC0	; 192
    5404:	a4 df       	rcall	.-184    	; 0x534e <pll_get_default_rate_priv>
    5406:	dc 01       	movw	r26, r24
    5408:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    540a:	bc 01       	movw	r22, r24
    540c:	cd 01       	movw	r24, r26
    540e:	df 91       	pop	r29
    5410:	cf 91       	pop	r28
    5412:	08 95       	ret

00005414 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    5414:	cf 93       	push	r28
    5416:	df 93       	push	r29
    5418:	1f 92       	push	r1
    541a:	cd b7       	in	r28, 0x3d	; 61
    541c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    541e:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
    5420:	e8 df       	rcall	.-48     	; 0x53f2 <sysclk_get_main_hz>
    5422:	dc 01       	movw	r26, r24
    5424:	cb 01       	movw	r24, r22
    5426:	29 81       	ldd	r18, Y+1	; 0x01
    5428:	22 2f       	mov	r18, r18
    542a:	30 e0       	ldi	r19, 0x00	; 0
    542c:	04 c0       	rjmp	.+8      	; 0x5436 <sysclk_get_per4_hz+0x22>
    542e:	b6 95       	lsr	r27
    5430:	a7 95       	ror	r26
    5432:	97 95       	ror	r25
    5434:	87 95       	ror	r24
    5436:	2a 95       	dec	r18
    5438:	d2 f7       	brpl	.-12     	; 0x542e <sysclk_get_per4_hz+0x1a>
}
    543a:	bc 01       	movw	r22, r24
    543c:	cd 01       	movw	r24, r26
    543e:	0f 90       	pop	r0
    5440:	df 91       	pop	r29
    5442:	cf 91       	pop	r28
    5444:	08 95       	ret

00005446 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    5446:	cf 93       	push	r28
    5448:	df 93       	push	r29
    544a:	cd b7       	in	r28, 0x3d	; 61
    544c:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    544e:	e2 df       	rcall	.-60     	; 0x5414 <sysclk_get_per4_hz>
    5450:	dc 01       	movw	r26, r24
    5452:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    5454:	bc 01       	movw	r22, r24
    5456:	cd 01       	movw	r24, r26
    5458:	df 91       	pop	r29
    545a:	cf 91       	pop	r28
    545c:	08 95       	ret

0000545e <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    545e:	cf 93       	push	r28
    5460:	df 93       	push	r29
    5462:	cd b7       	in	r28, 0x3d	; 61
    5464:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    5466:	ef df       	rcall	.-34     	; 0x5446 <sysclk_get_per2_hz>
    5468:	dc 01       	movw	r26, r24
    546a:	cb 01       	movw	r24, r22
}
    546c:	bc 01       	movw	r22, r24
    546e:	cd 01       	movw	r24, r26
    5470:	df 91       	pop	r29
    5472:	cf 91       	pop	r28
    5474:	08 95       	ret

00005476 <adc_set_clock_rate>:
 * devices. Setting the current limit mode on some devices will also affect the
 * maximum ADC sampling rate. Refer to the device manual for detailed
 * information on conversion timing and/or the current limitation mode.
 */
static inline void adc_set_clock_rate(struct adc_config *conf, uint32_t clk_adc)
{
    5476:	cf 93       	push	r28
    5478:	df 93       	push	r29
    547a:	cd b7       	in	r28, 0x3d	; 61
    547c:	de b7       	in	r29, 0x3e	; 62
    547e:	2d 97       	sbiw	r28, 0x0d	; 13
    5480:	cd bf       	out	0x3d, r28	; 61
    5482:	de bf       	out	0x3e, r29	; 62
    5484:	88 87       	std	Y+8, r24	; 0x08
    5486:	99 87       	std	Y+9, r25	; 0x09
    5488:	4a 87       	std	Y+10, r20	; 0x0a
    548a:	5b 87       	std	Y+11, r21	; 0x0b
    548c:	6c 87       	std	Y+12, r22	; 0x0c
    548e:	7d 87       	std	Y+13, r23	; 0x0d
	Assert(clk_adc <= 1400000UL);
#elif XMEGA_B || XMEGA_C || XMEGA_E
	Assert(clk_adc <= 1800000UL);
#endif

	clk_per = sysclk_get_per_hz();
    5490:	e6 df       	rcall	.-52     	; 0x545e <sysclk_get_per_hz>
    5492:	dc 01       	movw	r26, r24
    5494:	cb 01       	movw	r24, r22
    5496:	8a 83       	std	Y+2, r24	; 0x02
    5498:	9b 83       	std	Y+3, r25	; 0x03
    549a:	ac 83       	std	Y+4, r26	; 0x04
    549c:	bd 83       	std	Y+5, r27	; 0x05
	ratio = clk_per / clk_adc;
    549e:	8a 81       	ldd	r24, Y+2	; 0x02
    54a0:	9b 81       	ldd	r25, Y+3	; 0x03
    54a2:	ac 81       	ldd	r26, Y+4	; 0x04
    54a4:	bd 81       	ldd	r27, Y+5	; 0x05
    54a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    54a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    54aa:	4c 85       	ldd	r20, Y+12	; 0x0c
    54ac:	5d 85       	ldd	r21, Y+13	; 0x0d
    54ae:	bc 01       	movw	r22, r24
    54b0:	cd 01       	movw	r24, r26
    54b2:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
    54b6:	da 01       	movw	r26, r20
    54b8:	c9 01       	movw	r24, r18
    54ba:	8e 83       	std	Y+6, r24	; 0x06
    54bc:	9f 83       	std	Y+7, r25	; 0x07

	/* Round ratio up to the nearest prescaling factor. */
	if (ratio <= 4) {
    54be:	8e 81       	ldd	r24, Y+6	; 0x06
    54c0:	9f 81       	ldd	r25, Y+7	; 0x07
    54c2:	05 97       	sbiw	r24, 0x05	; 5
    54c4:	10 f4       	brcc	.+4      	; 0x54ca <adc_set_clock_rate+0x54>
		psc = ADC_PRESCALER_DIV4_gc;
    54c6:	19 82       	std	Y+1, r1	; 0x01
    54c8:	2f c0       	rjmp	.+94     	; 0x5528 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 8) {
    54ca:	8e 81       	ldd	r24, Y+6	; 0x06
    54cc:	9f 81       	ldd	r25, Y+7	; 0x07
    54ce:	09 97       	sbiw	r24, 0x09	; 9
    54d0:	18 f4       	brcc	.+6      	; 0x54d8 <adc_set_clock_rate+0x62>
		psc = ADC_PRESCALER_DIV8_gc;
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	89 83       	std	Y+1, r24	; 0x01
    54d6:	28 c0       	rjmp	.+80     	; 0x5528 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 16) {
    54d8:	8e 81       	ldd	r24, Y+6	; 0x06
    54da:	9f 81       	ldd	r25, Y+7	; 0x07
    54dc:	41 97       	sbiw	r24, 0x11	; 17
    54de:	18 f4       	brcc	.+6      	; 0x54e6 <adc_set_clock_rate+0x70>
		psc = ADC_PRESCALER_DIV16_gc;
    54e0:	82 e0       	ldi	r24, 0x02	; 2
    54e2:	89 83       	std	Y+1, r24	; 0x01
    54e4:	21 c0       	rjmp	.+66     	; 0x5528 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 32) {
    54e6:	8e 81       	ldd	r24, Y+6	; 0x06
    54e8:	9f 81       	ldd	r25, Y+7	; 0x07
    54ea:	81 97       	sbiw	r24, 0x21	; 33
    54ec:	18 f4       	brcc	.+6      	; 0x54f4 <adc_set_clock_rate+0x7e>
		psc = ADC_PRESCALER_DIV32_gc;
    54ee:	83 e0       	ldi	r24, 0x03	; 3
    54f0:	89 83       	std	Y+1, r24	; 0x01
    54f2:	1a c0       	rjmp	.+52     	; 0x5528 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 64) {
    54f4:	8e 81       	ldd	r24, Y+6	; 0x06
    54f6:	9f 81       	ldd	r25, Y+7	; 0x07
    54f8:	81 34       	cpi	r24, 0x41	; 65
    54fa:	91 05       	cpc	r25, r1
    54fc:	18 f4       	brcc	.+6      	; 0x5504 <adc_set_clock_rate+0x8e>
		psc = ADC_PRESCALER_DIV64_gc;
    54fe:	84 e0       	ldi	r24, 0x04	; 4
    5500:	89 83       	std	Y+1, r24	; 0x01
    5502:	12 c0       	rjmp	.+36     	; 0x5528 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 128) {
    5504:	8e 81       	ldd	r24, Y+6	; 0x06
    5506:	9f 81       	ldd	r25, Y+7	; 0x07
    5508:	81 38       	cpi	r24, 0x81	; 129
    550a:	91 05       	cpc	r25, r1
    550c:	18 f4       	brcc	.+6      	; 0x5514 <adc_set_clock_rate+0x9e>
		psc = ADC_PRESCALER_DIV128_gc;
    550e:	85 e0       	ldi	r24, 0x05	; 5
    5510:	89 83       	std	Y+1, r24	; 0x01
    5512:	0a c0       	rjmp	.+20     	; 0x5528 <adc_set_clock_rate+0xb2>
	} else if (ratio <= 256) {
    5514:	8e 81       	ldd	r24, Y+6	; 0x06
    5516:	9f 81       	ldd	r25, Y+7	; 0x07
    5518:	81 30       	cpi	r24, 0x01	; 1
    551a:	91 40       	sbci	r25, 0x01	; 1
    551c:	18 f4       	brcc	.+6      	; 0x5524 <adc_set_clock_rate+0xae>
		psc = ADC_PRESCALER_DIV256_gc;
    551e:	86 e0       	ldi	r24, 0x06	; 6
    5520:	89 83       	std	Y+1, r24	; 0x01
    5522:	02 c0       	rjmp	.+4      	; 0x5528 <adc_set_clock_rate+0xb2>
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
    5524:	87 e0       	ldi	r24, 0x07	; 7
    5526:	89 83       	std	Y+1, r24	; 0x01
	}

	conf->prescaler = psc;
    5528:	88 85       	ldd	r24, Y+8	; 0x08
    552a:	99 85       	ldd	r25, Y+9	; 0x09
    552c:	29 81       	ldd	r18, Y+1	; 0x01
    552e:	fc 01       	movw	r30, r24
    5530:	24 83       	std	Z+4, r18	; 0x04
}
    5532:	00 00       	nop
    5534:	2d 96       	adiw	r28, 0x0d	; 13
    5536:	cd bf       	out	0x3d, r28	; 61
    5538:	de bf       	out	0x3e, r29	; 62
    553a:	df 91       	pop	r29
    553c:	cf 91       	pop	r28
    553e:	08 95       	ret

00005540 <adc_set_conversion_parameters>:
 * \param ref Voltage reference to use.
 */
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
    5540:	cf 93       	push	r28
    5542:	df 93       	push	r29
    5544:	cd b7       	in	r28, 0x3d	; 61
    5546:	de b7       	in	r29, 0x3e	; 62
    5548:	25 97       	sbiw	r28, 0x05	; 5
    554a:	cd bf       	out	0x3d, r28	; 61
    554c:	de bf       	out	0x3e, r29	; 62
    554e:	89 83       	std	Y+1, r24	; 0x01
    5550:	9a 83       	std	Y+2, r25	; 0x02
    5552:	6b 83       	std	Y+3, r22	; 0x03
    5554:	4c 83       	std	Y+4, r20	; 0x04
    5556:	2d 83       	std	Y+5, r18	; 0x05
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    5558:	89 81       	ldd	r24, Y+1	; 0x01
    555a:	9a 81       	ldd	r25, Y+2	; 0x02
    555c:	fc 01       	movw	r30, r24
    555e:	81 81       	ldd	r24, Z+1	; 0x01
    5560:	28 2f       	mov	r18, r24
    5562:	29 7e       	andi	r18, 0xE9	; 233
    5564:	89 81       	ldd	r24, Y+1	; 0x01
    5566:	9a 81       	ldd	r25, Y+2	; 0x02
    5568:	fc 01       	movw	r30, r24
    556a:	21 83       	std	Z+1, r18	; 0x01
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;
    556c:	89 81       	ldd	r24, Y+1	; 0x01
    556e:	9a 81       	ldd	r25, Y+2	; 0x02
    5570:	fc 01       	movw	r30, r24
    5572:	91 81       	ldd	r25, Z+1	; 0x01
    5574:	2c 81       	ldd	r18, Y+4	; 0x04
    5576:	8b 81       	ldd	r24, Y+3	; 0x03
    5578:	82 2b       	or	r24, r18
    557a:	29 2f       	mov	r18, r25
    557c:	28 2b       	or	r18, r24
    557e:	89 81       	ldd	r24, Y+1	; 0x01
    5580:	9a 81       	ldd	r25, Y+2	; 0x02
    5582:	fc 01       	movw	r30, r24
    5584:	21 83       	std	Z+1, r18	; 0x01

	conf->refctrl &= ~ADC_REFSEL_gm;
    5586:	89 81       	ldd	r24, Y+1	; 0x01
    5588:	9a 81       	ldd	r25, Y+2	; 0x02
    558a:	fc 01       	movw	r30, r24
    558c:	82 81       	ldd	r24, Z+2	; 0x02
    558e:	28 2f       	mov	r18, r24
    5590:	2f 78       	andi	r18, 0x8F	; 143
    5592:	89 81       	ldd	r24, Y+1	; 0x01
    5594:	9a 81       	ldd	r25, Y+2	; 0x02
    5596:	fc 01       	movw	r30, r24
    5598:	22 83       	std	Z+2, r18	; 0x02
	conf->refctrl |= ref;
    559a:	89 81       	ldd	r24, Y+1	; 0x01
    559c:	9a 81       	ldd	r25, Y+2	; 0x02
    559e:	fc 01       	movw	r30, r24
    55a0:	92 81       	ldd	r25, Z+2	; 0x02
    55a2:	8d 81       	ldd	r24, Y+5	; 0x05
    55a4:	29 2f       	mov	r18, r25
    55a6:	28 2b       	or	r18, r24
    55a8:	89 81       	ldd	r24, Y+1	; 0x01
    55aa:	9a 81       	ldd	r25, Y+2	; 0x02
    55ac:	fc 01       	movw	r30, r24
    55ae:	22 83       	std	Z+2, r18	; 0x02
}
    55b0:	00 00       	nop
    55b2:	25 96       	adiw	r28, 0x05	; 5
    55b4:	cd bf       	out	0x3d, r28	; 61
    55b6:	de bf       	out	0x3e, r29	; 62
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	08 95       	ret

000055be <adc_set_conversion_trigger>:
 * \arg \c 1 - \c ADC_NR_OF_CHANNELS (must be non-zero).
 * \param base_ev_ch Base event channel, if used.
 */
static inline void adc_set_conversion_trigger(struct adc_config *conf,
		enum adc_trigger trig, uint8_t nr_of_ch, uint8_t base_ev_ch)
{
    55be:	cf 93       	push	r28
    55c0:	df 93       	push	r29
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
    55c6:	25 97       	sbiw	r28, 0x05	; 5
    55c8:	cd bf       	out	0x3d, r28	; 61
    55ca:	de bf       	out	0x3e, r29	; 62
    55cc:	89 83       	std	Y+1, r24	; 0x01
    55ce:	9a 83       	std	Y+2, r25	; 0x02
    55d0:	6b 83       	std	Y+3, r22	; 0x03
    55d2:	4c 83       	std	Y+4, r20	; 0x04
    55d4:	2d 83       	std	Y+5, r18	; 0x05
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    55d6:	8b 81       	ldd	r24, Y+3	; 0x03
    55d8:	88 2f       	mov	r24, r24
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	82 30       	cpi	r24, 0x02	; 2
    55de:	91 05       	cpc	r25, r1
    55e0:	11 f1       	breq	.+68     	; 0x5626 <adc_set_conversion_trigger+0x68>
    55e2:	83 30       	cpi	r24, 0x03	; 3
    55e4:	91 05       	cpc	r25, r1
    55e6:	2c f4       	brge	.+10     	; 0x55f2 <adc_set_conversion_trigger+0x34>
    55e8:	00 97       	sbiw	r24, 0x00	; 0
    55ea:	71 f0       	breq	.+28     	; 0x5608 <adc_set_conversion_trigger+0x4a>
    55ec:	01 97       	sbiw	r24, 0x01	; 1
    55ee:	b9 f1       	breq	.+110    	; 0x565e <adc_set_conversion_trigger+0xa0>
		break;

	default:
		Assert(0);
	}
}
    55f0:	a9 c0       	rjmp	.+338    	; 0x5744 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 7);
#elif XMEGA_B || XMEGA_C || XMEGA_D
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
    55f2:	84 30       	cpi	r24, 0x04	; 4
    55f4:	91 05       	cpc	r25, r1
    55f6:	09 f4       	brne	.+2      	; 0x55fa <adc_set_conversion_trigger+0x3c>
    55f8:	53 c0       	rjmp	.+166    	; 0x56a0 <adc_set_conversion_trigger+0xe2>
    55fa:	84 30       	cpi	r24, 0x04	; 4
    55fc:	91 05       	cpc	r25, r1
    55fe:	d4 f1       	brlt	.+116    	; 0x5674 <adc_set_conversion_trigger+0xb6>
    5600:	05 97       	sbiw	r24, 0x05	; 5
    5602:	09 f4       	brne	.+2      	; 0x5606 <adc_set_conversion_trigger+0x48>
    5604:	76 c0       	rjmp	.+236    	; 0x56f2 <adc_set_conversion_trigger+0x134>
		break;

	default:
		Assert(0);
	}
}
    5606:	9e c0       	rjmp	.+316    	; 0x5744 <adc_set_conversion_trigger+0x186>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	fc 01       	movw	r30, r24
    560e:	81 81       	ldd	r24, Z+1	; 0x01
    5610:	28 2f       	mov	r18, r24
    5612:	27 7f       	andi	r18, 0xF7	; 247
    5614:	89 81       	ldd	r24, Y+1	; 0x01
    5616:	9a 81       	ldd	r25, Y+2	; 0x02
    5618:	fc 01       	movw	r30, r24
    561a:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = ADC_EVACT_NONE_gc;
    561c:	89 81       	ldd	r24, Y+1	; 0x01
    561e:	9a 81       	ldd	r25, Y+2	; 0x02
    5620:	fc 01       	movw	r30, r24
    5622:	13 82       	std	Z+3, r1	; 0x03
		break;
    5624:	8f c0       	rjmp	.+286    	; 0x5744 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    5626:	89 81       	ldd	r24, Y+1	; 0x01
    5628:	9a 81       	ldd	r25, Y+2	; 0x02
    562a:	fc 01       	movw	r30, r24
    562c:	81 81       	ldd	r24, Z+1	; 0x01
    562e:	28 2f       	mov	r18, r24
    5630:	27 7f       	andi	r18, 0xF7	; 247
    5632:	89 81       	ldd	r24, Y+1	; 0x01
    5634:	9a 81       	ldd	r25, Y+2	; 0x02
    5636:	fc 01       	movw	r30, r24
    5638:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    563a:	8d 81       	ldd	r24, Y+5	; 0x05
    563c:	88 2f       	mov	r24, r24
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25
    5644:	88 0f       	add	r24, r24
    5646:	99 1f       	adc	r25, r25
    5648:	88 0f       	add	r24, r24
    564a:	99 1f       	adc	r25, r25
    564c:	98 2f       	mov	r25, r24
    564e:	8c 81       	ldd	r24, Y+4	; 0x04
    5650:	89 2b       	or	r24, r25
    5652:	28 2f       	mov	r18, r24
    5654:	89 81       	ldd	r24, Y+1	; 0x01
    5656:	9a 81       	ldd	r25, Y+2	; 0x02
    5658:	fc 01       	movw	r30, r24
    565a:	23 83       	std	Z+3, r18	; 0x03
				(nr_of_ch << ADC_EVACT_gp);
		break;
    565c:	73 c0       	rjmp	.+230    	; 0x5744 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    565e:	89 81       	ldd	r24, Y+1	; 0x01
    5660:	9a 81       	ldd	r25, Y+2	; 0x02
    5662:	fc 01       	movw	r30, r24
    5664:	81 81       	ldd	r24, Z+1	; 0x01
    5666:	28 2f       	mov	r18, r24
    5668:	28 60       	ori	r18, 0x08	; 8
    566a:	89 81       	ldd	r24, Y+1	; 0x01
    566c:	9a 81       	ldd	r25, Y+2	; 0x02
    566e:	fc 01       	movw	r30, r24
    5670:	21 83       	std	Z+1, r18	; 0x01
		break;
    5672:	68 c0       	rjmp	.+208    	; 0x5744 <adc_set_conversion_trigger+0x186>

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    5674:	89 81       	ldd	r24, Y+1	; 0x01
    5676:	9a 81       	ldd	r25, Y+2	; 0x02
    5678:	fc 01       	movw	r30, r24
    567a:	81 81       	ldd	r24, Z+1	; 0x01
    567c:	28 2f       	mov	r18, r24
    567e:	28 60       	ori	r18, 0x08	; 8
    5680:	89 81       	ldd	r24, Y+1	; 0x01
    5682:	9a 81       	ldd	r25, Y+2	; 0x02
    5684:	fc 01       	movw	r30, r24
    5686:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    5688:	8c 81       	ldd	r24, Y+4	; 0x04
    568a:	81 50       	subi	r24, 0x01	; 1
    568c:	28 2f       	mov	r18, r24
    568e:	22 95       	swap	r18
    5690:	22 0f       	add	r18, r18
    5692:	22 0f       	add	r18, r18
    5694:	20 7c       	andi	r18, 0xC0	; 192
    5696:	89 81       	ldd	r24, Y+1	; 0x01
    5698:	9a 81       	ldd	r25, Y+2	; 0x02
    569a:	fc 01       	movw	r30, r24
    569c:	23 83       	std	Z+3, r18	; 0x03
		break;
    569e:	52 c0       	rjmp	.+164    	; 0x5744 <adc_set_conversion_trigger+0x186>

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    56a0:	89 81       	ldd	r24, Y+1	; 0x01
    56a2:	9a 81       	ldd	r25, Y+2	; 0x02
    56a4:	fc 01       	movw	r30, r24
    56a6:	81 81       	ldd	r24, Z+1	; 0x01
    56a8:	28 2f       	mov	r18, r24
    56aa:	27 7f       	andi	r18, 0xF7	; 247
    56ac:	89 81       	ldd	r24, Y+1	; 0x01
    56ae:	9a 81       	ldd	r25, Y+2	; 0x02
    56b0:	fc 01       	movw	r30, r24
    56b2:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    56b4:	8c 81       	ldd	r24, Y+4	; 0x04
    56b6:	88 2f       	mov	r24, r24
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	01 97       	sbiw	r24, 0x01	; 1
    56bc:	00 24       	eor	r0, r0
    56be:	96 95       	lsr	r25
    56c0:	87 95       	ror	r24
    56c2:	07 94       	ror	r0
    56c4:	96 95       	lsr	r25
    56c6:	87 95       	ror	r24
    56c8:	07 94       	ror	r0
    56ca:	98 2f       	mov	r25, r24
    56cc:	80 2d       	mov	r24, r0
    56ce:	28 2f       	mov	r18, r24
				(base_ev_ch << ADC_EVSEL_gp) |
    56d0:	8d 81       	ldd	r24, Y+5	; 0x05
    56d2:	88 2f       	mov	r24, r24
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	88 0f       	add	r24, r24
    56d8:	99 1f       	adc	r25, r25
    56da:	88 0f       	add	r24, r24
    56dc:	99 1f       	adc	r25, r25
    56de:	88 0f       	add	r24, r24
    56e0:	99 1f       	adc	r25, r25
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
    56e2:	82 2b       	or	r24, r18
    56e4:	85 60       	ori	r24, 0x05	; 5
    56e6:	28 2f       	mov	r18, r24
    56e8:	89 81       	ldd	r24, Y+1	; 0x01
    56ea:	9a 81       	ldd	r25, Y+2	; 0x02
    56ec:	fc 01       	movw	r30, r24
    56ee:	23 83       	std	Z+3, r18	; 0x03
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SWEEP_gc;
		break;
    56f0:	29 c0       	rjmp	.+82     	; 0x5744 <adc_set_conversion_trigger+0x186>
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	9a 81       	ldd	r25, Y+2	; 0x02
    56f6:	fc 01       	movw	r30, r24
    56f8:	81 81       	ldd	r24, Z+1	; 0x01
    56fa:	28 2f       	mov	r18, r24
    56fc:	27 7f       	andi	r18, 0xF7	; 247
    56fe:	89 81       	ldd	r24, Y+1	; 0x01
    5700:	9a 81       	ldd	r25, Y+2	; 0x02
    5702:	fc 01       	movw	r30, r24
    5704:	21 83       	std	Z+1, r18	; 0x01
		conf->evctrl =
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
    5706:	8c 81       	ldd	r24, Y+4	; 0x04
    5708:	88 2f       	mov	r24, r24
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	01 97       	sbiw	r24, 0x01	; 1
    570e:	00 24       	eor	r0, r0
    5710:	96 95       	lsr	r25
    5712:	87 95       	ror	r24
    5714:	07 94       	ror	r0
    5716:	96 95       	lsr	r25
    5718:	87 95       	ror	r24
    571a:	07 94       	ror	r0
    571c:	98 2f       	mov	r25, r24
    571e:	80 2d       	mov	r24, r0
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    5720:	28 2f       	mov	r18, r24
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
    5722:	8d 81       	ldd	r24, Y+5	; 0x05
    5724:	88 2f       	mov	r24, r24
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	88 0f       	add	r24, r24
    572a:	99 1f       	adc	r25, r25
    572c:	88 0f       	add	r24, r24
    572e:	99 1f       	adc	r25, r25
    5730:	88 0f       	add	r24, r24
    5732:	99 1f       	adc	r25, r25
		break;
#endif

	case ADC_TRIG_EVENT_SYNCSWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl =
    5734:	82 2b       	or	r24, r18
    5736:	86 60       	ori	r24, 0x06	; 6
    5738:	28 2f       	mov	r18, r24
    573a:	89 81       	ldd	r24, Y+1	; 0x01
    573c:	9a 81       	ldd	r25, Y+2	; 0x02
    573e:	fc 01       	movw	r30, r24
    5740:	23 83       	std	Z+3, r18	; 0x03
#if ADC_NR_OF_CHANNELS > 1
				((nr_of_ch - 1) << ADC_SWEEP_gp) |
#endif
				(base_ev_ch << ADC_EVSEL_gp) |
				ADC_EVACT_SYNCSWEEP_gc;
		break;
    5742:	00 00       	nop

	default:
		Assert(0);
	}
}
    5744:	00 00       	nop
    5746:	25 96       	adiw	r28, 0x05	; 5
    5748:	cd bf       	out	0x3d, r28	; 61
    574a:	de bf       	out	0x3e, r29	; 62
    574c:	df 91       	pop	r29
    574e:	cf 91       	pop	r28
    5750:	08 95       	ret

00005752 <adcch_get_gain_setting>:
 * \param gain Valid gain factor for the measurement.
 *
 * \return Gain setting of type ADC_CH_GAIN_t.
 */
static inline uint8_t adcch_get_gain_setting(uint8_t gain)
{
    5752:	cf 93       	push	r28
    5754:	df 93       	push	r29
    5756:	1f 92       	push	r1
    5758:	cd b7       	in	r28, 0x3d	; 61
    575a:	de b7       	in	r29, 0x3e	; 62
    575c:	89 83       	std	Y+1, r24	; 0x01
	switch (gain) {
    575e:	89 81       	ldd	r24, Y+1	; 0x01
    5760:	88 2f       	mov	r24, r24
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	88 30       	cpi	r24, 0x08	; 8
    5766:	91 05       	cpc	r25, r1
    5768:	51 f1       	breq	.+84     	; 0x57be <adcch_get_gain_setting+0x6c>
    576a:	89 30       	cpi	r24, 0x09	; 9
    576c:	91 05       	cpc	r25, r1
    576e:	7c f4       	brge	.+30     	; 0x578e <adcch_get_gain_setting+0x3c>
    5770:	81 30       	cpi	r24, 0x01	; 1
    5772:	91 05       	cpc	r25, r1
    5774:	f1 f0       	breq	.+60     	; 0x57b2 <adcch_get_gain_setting+0x60>
    5776:	82 30       	cpi	r24, 0x02	; 2
    5778:	91 05       	cpc	r25, r1
    577a:	1c f4       	brge	.+6      	; 0x5782 <adcch_get_gain_setting+0x30>
    577c:	89 2b       	or	r24, r25
    577e:	b9 f0       	breq	.+46     	; 0x57ae <adcch_get_gain_setting+0x5c>
    5780:	28 c0       	rjmp	.+80     	; 0x57d2 <adcch_get_gain_setting+0x80>
    5782:	82 30       	cpi	r24, 0x02	; 2
    5784:	91 05       	cpc	r25, r1
    5786:	b9 f0       	breq	.+46     	; 0x57b6 <adcch_get_gain_setting+0x64>
    5788:	04 97       	sbiw	r24, 0x04	; 4
    578a:	b9 f0       	breq	.+46     	; 0x57ba <adcch_get_gain_setting+0x68>
    578c:	22 c0       	rjmp	.+68     	; 0x57d2 <adcch_get_gain_setting+0x80>
    578e:	80 32       	cpi	r24, 0x20	; 32
    5790:	91 05       	cpc	r25, r1
    5792:	c9 f0       	breq	.+50     	; 0x57c6 <adcch_get_gain_setting+0x74>
    5794:	81 32       	cpi	r24, 0x21	; 33
    5796:	91 05       	cpc	r25, r1
    5798:	1c f4       	brge	.+6      	; 0x57a0 <adcch_get_gain_setting+0x4e>
    579a:	40 97       	sbiw	r24, 0x10	; 16
    579c:	91 f0       	breq	.+36     	; 0x57c2 <adcch_get_gain_setting+0x70>
    579e:	19 c0       	rjmp	.+50     	; 0x57d2 <adcch_get_gain_setting+0x80>
    57a0:	80 34       	cpi	r24, 0x40	; 64
    57a2:	91 05       	cpc	r25, r1
    57a4:	91 f0       	breq	.+36     	; 0x57ca <adcch_get_gain_setting+0x78>
    57a6:	8f 3f       	cpi	r24, 0xFF	; 255
    57a8:	91 05       	cpc	r25, r1
    57aa:	89 f0       	breq	.+34     	; 0x57ce <adcch_get_gain_setting+0x7c>
    57ac:	12 c0       	rjmp	.+36     	; 0x57d2 <adcch_get_gain_setting+0x80>
	case 0:
		return ADC_CH_GAIN_DIV2_gc;
    57ae:	8c e1       	ldi	r24, 0x1C	; 28
    57b0:	11 c0       	rjmp	.+34     	; 0x57d4 <adcch_get_gain_setting+0x82>

	case 1:
		return ADC_CH_GAIN_1X_gc;
    57b2:	80 e0       	ldi	r24, 0x00	; 0
    57b4:	0f c0       	rjmp	.+30     	; 0x57d4 <adcch_get_gain_setting+0x82>

	case 2:
		return ADC_CH_GAIN_2X_gc;
    57b6:	84 e0       	ldi	r24, 0x04	; 4
    57b8:	0d c0       	rjmp	.+26     	; 0x57d4 <adcch_get_gain_setting+0x82>

	case 4:
		return ADC_CH_GAIN_4X_gc;
    57ba:	88 e0       	ldi	r24, 0x08	; 8
    57bc:	0b c0       	rjmp	.+22     	; 0x57d4 <adcch_get_gain_setting+0x82>

	case 8:
		return ADC_CH_GAIN_8X_gc;
    57be:	8c e0       	ldi	r24, 0x0C	; 12
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <adcch_get_gain_setting+0x82>

	case 16:
		return ADC_CH_GAIN_16X_gc;
    57c2:	80 e1       	ldi	r24, 0x10	; 16
    57c4:	07 c0       	rjmp	.+14     	; 0x57d4 <adcch_get_gain_setting+0x82>

	case 32:
		return ADC_CH_GAIN_32X_gc;
    57c6:	84 e1       	ldi	r24, 0x14	; 20
    57c8:	05 c0       	rjmp	.+10     	; 0x57d4 <adcch_get_gain_setting+0x82>

	case 64:
		return ADC_CH_GAIN_64X_gc;
    57ca:	88 e1       	ldi	r24, 0x18	; 24
    57cc:	03 c0       	rjmp	.+6      	; 0x57d4 <adcch_get_gain_setting+0x82>

	case ADCCH_FORCE_1X_GAINSTAGE:
		return ADC_CH_GAIN_1X_gc;
    57ce:	80 e0       	ldi	r24, 0x00	; 0
    57d0:	01 c0       	rjmp	.+2      	; 0x57d4 <adcch_get_gain_setting+0x82>

	default:
		Assert(0);
		return 0;
    57d2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    57d4:	0f 90       	pop	r0
    57d6:	df 91       	pop	r29
    57d8:	cf 91       	pop	r28
    57da:	08 95       	ret

000057dc <adcch_set_input>:
 * possible unless the user specifies \ref ADCCH_FORCE_1X_GAINSTAGE as \a gain.
 */
static inline void adcch_set_input(struct adc_channel_config *ch_conf,
		enum adcch_positive_input pos, enum adcch_negative_input neg,
		uint8_t gain)
{
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
    57e4:	25 97       	sbiw	r28, 0x05	; 5
    57e6:	cd bf       	out	0x3d, r28	; 61
    57e8:	de bf       	out	0x3e, r29	; 62
    57ea:	89 83       	std	Y+1, r24	; 0x01
    57ec:	9a 83       	std	Y+2, r25	; 0x02
    57ee:	6b 83       	std	Y+3, r22	; 0x03
    57f0:	4c 83       	std	Y+4, r20	; 0x04
    57f2:	2d 83       	std	Y+5, r18	; 0x05
	if (pos >= ADCCH_POS_TEMPSENSE) {
    57f4:	8b 81       	ldd	r24, Y+3	; 0x03
    57f6:	80 31       	cpi	r24, 0x10	; 16
    57f8:	78 f0       	brcs	.+30     	; 0x5818 <adcch_set_input+0x3c>
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    57fa:	89 81       	ldd	r24, Y+1	; 0x01
    57fc:	9a 81       	ldd	r25, Y+2	; 0x02
    57fe:	fc 01       	movw	r30, r24
    5800:	10 82       	st	Z, r1
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    5802:	8b 81       	ldd	r24, Y+3	; 0x03
    5804:	80 51       	subi	r24, 0x10	; 16
    5806:	28 2f       	mov	r18, r24
    5808:	22 0f       	add	r18, r18
    580a:	22 0f       	add	r18, r18
    580c:	22 0f       	add	r18, r18
    580e:	89 81       	ldd	r24, Y+1	; 0x01
    5810:	9a 81       	ldd	r25, Y+2	; 0x02
    5812:	fc 01       	movw	r30, r24
    5814:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    5816:	87 c0       	rjmp	.+270    	; 0x5926 <adcch_set_input+0x14a>
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
    5818:	8c 81       	ldd	r24, Y+4	; 0x04
    581a:	8a 30       	cpi	r24, 0x0A	; 10
    581c:	79 f4       	brne	.+30     	; 0x583c <adcch_set_input+0x60>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    581e:	89 81       	ldd	r24, Y+1	; 0x01
    5820:	9a 81       	ldd	r25, Y+2	; 0x02
    5822:	21 e0       	ldi	r18, 0x01	; 1
    5824:	fc 01       	movw	r30, r24
    5826:	20 83       	st	Z, r18
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    5828:	8b 81       	ldd	r24, Y+3	; 0x03
    582a:	28 2f       	mov	r18, r24
    582c:	22 0f       	add	r18, r18
    582e:	22 0f       	add	r18, r18
    5830:	22 0f       	add	r18, r18
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	9a 81       	ldd	r25, Y+2	; 0x02
    5836:	fc 01       	movw	r30, r24
    5838:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    583a:	75 c0       	rjmp	.+234    	; 0x5926 <adcch_set_input+0x14a>
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
	} else if (neg <= ADCCH_NEG_PIN3) {
    583c:	8c 81       	ldd	r24, Y+4	; 0x04
    583e:	84 30       	cpi	r24, 0x04	; 4
    5840:	b8 f4       	brcc	.+46     	; 0x5870 <adcch_set_input+0x94>
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINL_gc;
#else
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    5842:	89 81       	ldd	r24, Y+1	; 0x01
    5844:	9a 81       	ldd	r25, Y+2	; 0x02
    5846:	22 e0       	ldi	r18, 0x02	; 2
    5848:	fc 01       	movw	r30, r24
    584a:	20 83       	st	Z, r18
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    584c:	8b 81       	ldd	r24, Y+3	; 0x03
    584e:	88 2f       	mov	r24, r24
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	88 0f       	add	r24, r24
    5854:	99 1f       	adc	r25, r25
    5856:	88 0f       	add	r24, r24
    5858:	99 1f       	adc	r25, r25
    585a:	88 0f       	add	r24, r24
    585c:	99 1f       	adc	r25, r25
    585e:	98 2f       	mov	r25, r24
    5860:	8c 81       	ldd	r24, Y+4	; 0x04
    5862:	89 2b       	or	r24, r25
    5864:	28 2f       	mov	r18, r24
    5866:	89 81       	ldd	r24, Y+1	; 0x01
    5868:	9a 81       	ldd	r25, Y+2	; 0x02
    586a:	fc 01       	movw	r30, r24
    586c:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    586e:	5b c0       	rjmp	.+182    	; 0x5926 <adcch_set_input+0x14a>
		Assert(gain == 1);
		ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
				(neg << ADC_CH_MUXNEG_gp);
	} else if (neg <= ADCCH_NEG_PIN7) {
    5870:	8c 81       	ldd	r24, Y+4	; 0x04
    5872:	88 30       	cpi	r24, 0x08	; 8
    5874:	d8 f4       	brcc	.+54     	; 0x58ac <adcch_set_input+0xd0>
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    5876:	8d 81       	ldd	r24, Y+5	; 0x05
    5878:	6c df       	rcall	.-296    	; 0x5752 <adcch_get_gain_setting>
    587a:	28 2f       	mov	r18, r24
    587c:	23 60       	ori	r18, 0x03	; 3
    587e:	89 81       	ldd	r24, Y+1	; 0x01
    5880:	9a 81       	ldd	r25, Y+2	; 0x02
    5882:	fc 01       	movw	r30, r24
    5884:	20 83       	st	Z, r18
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    5886:	8b 81       	ldd	r24, Y+3	; 0x03
    5888:	88 2f       	mov	r24, r24
    588a:	90 e0       	ldi	r25, 0x00	; 0
    588c:	88 0f       	add	r24, r24
    588e:	99 1f       	adc	r25, r25
    5890:	88 0f       	add	r24, r24
    5892:	99 1f       	adc	r25, r25
    5894:	88 0f       	add	r24, r24
    5896:	99 1f       	adc	r25, r25
    5898:	98 2f       	mov	r25, r24
    589a:	8c 81       	ldd	r24, Y+4	; 0x04
    589c:	84 50       	subi	r24, 0x04	; 4
    589e:	89 2b       	or	r24, r25
    58a0:	28 2f       	mov	r18, r24
    58a2:	89 81       	ldd	r24, Y+1	; 0x01
    58a4:	9a 81       	ldd	r25, Y+2	; 0x02
    58a6:	fc 01       	movw	r30, r24
    58a8:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    58aa:	3d c0       	rjmp	.+122    	; 0x5926 <adcch_set_input+0x14a>
		 * The bitmasks for the on-chip GND signals change when
		 * gain is enabled. To avoid unnecessary current consumption,
		 * do not enable gainstage for unity gain unless user explicitly
		 * specifies it with the ADCCH_FORCE_1X_GAINSTAGE macro.
		 */
		if (gain == 1) {
    58ac:	8d 81       	ldd	r24, Y+5	; 0x05
    58ae:	81 30       	cpi	r24, 0x01	; 1
    58b0:	e1 f4       	brne	.+56     	; 0x58ea <adcch_set_input+0x10e>
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
    58b2:	89 81       	ldd	r24, Y+1	; 0x01
    58b4:	9a 81       	ldd	r25, Y+2	; 0x02
    58b6:	22 e0       	ldi	r18, 0x02	; 2
    58b8:	fc 01       	movw	r30, r24
    58ba:	20 83       	st	Z, r18
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    58bc:	8b 81       	ldd	r24, Y+3	; 0x03
    58be:	88 2f       	mov	r24, r24
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	88 0f       	add	r24, r24
    58c4:	99 1f       	adc	r25, r25
    58c6:	88 0f       	add	r24, r24
    58c8:	99 1f       	adc	r25, r25
    58ca:	88 0f       	add	r24, r24
    58cc:	99 1f       	adc	r25, r25
    58ce:	98 2f       	mov	r25, r24
    58d0:	8c 81       	ldd	r24, Y+4	; 0x04
    58d2:	88 30       	cpi	r24, 0x08	; 8
    58d4:	11 f4       	brne	.+4      	; 0x58da <adcch_set_input+0xfe>
    58d6:	85 e0       	ldi	r24, 0x05	; 5
    58d8:	01 c0       	rjmp	.+2      	; 0x58dc <adcch_set_input+0x100>
    58da:	87 e0       	ldi	r24, 0x07	; 7
    58dc:	89 2b       	or	r24, r25
    58de:	28 2f       	mov	r18, r24
    58e0:	89 81       	ldd	r24, Y+1	; 0x01
    58e2:	9a 81       	ldd	r25, Y+2	; 0x02
    58e4:	fc 01       	movw	r30, r24
    58e6:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    58e8:	1e c0       	rjmp	.+60     	; 0x5926 <adcch_set_input+0x14a>
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
					adcch_get_gain_setting(gain);
    58ea:	8d 81       	ldd	r24, Y+5	; 0x05
    58ec:	32 df       	rcall	.-412    	; 0x5752 <adcch_get_gain_setting>
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
					((neg == ADCCH_NEG_PAD_GND) ?
					ADC_CH_MUXNEG_MODE10_GND_gc
					: ADC_CH_MUXNEG_MODE10_INTGND_gc);
		} else {
			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFFWGAIN_gc |
    58ee:	28 2f       	mov	r18, r24
    58f0:	23 60       	ori	r18, 0x03	; 3
    58f2:	89 81       	ldd	r24, Y+1	; 0x01
    58f4:	9a 81       	ldd	r25, Y+2	; 0x02
    58f6:	fc 01       	movw	r30, r24
    58f8:	20 83       	st	Z, r18
					adcch_get_gain_setting(gain);
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    58fa:	8b 81       	ldd	r24, Y+3	; 0x03
    58fc:	88 2f       	mov	r24, r24
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	88 0f       	add	r24, r24
    5902:	99 1f       	adc	r25, r25
    5904:	88 0f       	add	r24, r24
    5906:	99 1f       	adc	r25, r25
    5908:	88 0f       	add	r24, r24
    590a:	99 1f       	adc	r25, r25
    590c:	98 2f       	mov	r25, r24
    590e:	8c 81       	ldd	r24, Y+4	; 0x04
    5910:	89 30       	cpi	r24, 0x09	; 9
    5912:	11 f4       	brne	.+4      	; 0x5918 <adcch_set_input+0x13c>
    5914:	84 e0       	ldi	r24, 0x04	; 4
    5916:	01 c0       	rjmp	.+2      	; 0x591a <adcch_set_input+0x13e>
    5918:	87 e0       	ldi	r24, 0x07	; 7
    591a:	89 2b       	or	r24, r25
    591c:	28 2f       	mov	r18, r24
    591e:	89 81       	ldd	r24, Y+1	; 0x01
    5920:	9a 81       	ldd	r25, Y+2	; 0x02
    5922:	fc 01       	movw	r30, r24
    5924:	21 83       	std	Z+1, r18	; 0x01
					: ADC_CH_MUXNEG_MODE11_GND_gc);
		}

#endif
	}
}
    5926:	00 00       	nop
    5928:	25 96       	adiw	r28, 0x05	; 5
    592a:	cd bf       	out	0x3d, r28	; 61
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	df 91       	pop	r29
    5930:	cf 91       	pop	r28
    5932:	08 95       	ret

00005934 <init_ADC>:

#include "adc.h"
#include "ADC_Wrapper.h"

void init_ADC(void)
{
    5934:	cf 93       	push	r28
    5936:	df 93       	push	r29
    5938:	cd b7       	in	r28, 0x3d	; 61
    593a:	de b7       	in	r29, 0x3e	; 62
    593c:	2b 97       	sbiw	r28, 0x0b	; 11
    593e:	cd bf       	out	0x3d, r28	; 61
    5940:	de bf       	out	0x3e, r29	; 62
	//TODO - WILL NEED TO CHANGE THIS LATER TO FOR ACTUAL NEEDS
	struct adc_config ADCConfig;
	struct adc_channel_config ADCChanConfig;
	
	//Initialize ADC configuration and read channel configuration
	adc_read_configuration(&SYSTEM_ADC, &ADCConfig);
    5942:	ce 01       	movw	r24, r28
    5944:	01 96       	adiw	r24, 0x01	; 1
    5946:	bc 01       	movw	r22, r24
    5948:	80 e0       	ldi	r24, 0x00	; 0
    594a:	92 e0       	ldi	r25, 0x02	; 2
    594c:	0e 94 49 96 	call	0x12c92	; 0x12c92 <adc_read_configuration>
	adcch_read_configuration(&SYSTEM_ADC, TEMP_SENSE_ADC_CHAN, &ADCChanConfig);
    5950:	ce 01       	movw	r24, r28
    5952:	08 96       	adiw	r24, 0x08	; 8
    5954:	ac 01       	movw	r20, r24
    5956:	62 e0       	ldi	r22, 0x02	; 2
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	92 e0       	ldi	r25, 0x02	; 2
    595c:	0e 94 12 97 	call	0x12e24	; 0x12e24 <adcch_read_configuration>
	
	//Setup unsigned, 12-bit, VCC referenced, freerunning channel sweep at 62.5kHz max freq
	adc_set_conversion_parameters(&ADCConfig, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_AREFA); //Setup unsigned 12-bit read using AVCC (AREFA = 3.3V) as reference
    5960:	20 e2       	ldi	r18, 0x20	; 32
    5962:	40 e0       	ldi	r20, 0x00	; 0
    5964:	60 e0       	ldi	r22, 0x00	; 0
    5966:	ce 01       	movw	r24, r28
    5968:	01 96       	adiw	r24, 0x01	; 1
    596a:	ea dd       	rcall	.-1068   	; 0x5540 <adc_set_conversion_parameters>
	
	//adc_set_conversion_parameters(&ADCConfig, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC); //Setup unsigned 12-bit read using AVCC (VCC / 1.6 = 2) as reference
	adc_set_conversion_trigger(&ADCConfig, ADC_TRIG_FREERUN_SWEEP, 4, 0); //Configure ADC as freerunning sweeping channels
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	44 e0       	ldi	r20, 0x04	; 4
    5970:	63 e0       	ldi	r22, 0x03	; 3
    5972:	ce 01       	movw	r24, r28
    5974:	01 96       	adiw	r24, 0x01	; 1
    5976:	23 de       	rcall	.-954    	; 0x55be <adc_set_conversion_trigger>
	adc_set_clock_rate(&ADCConfig, 62500UL); //Sets ADC prescaler to be 512 -> 32MHz sysclk / 62500 = 512
    5978:	44 e2       	ldi	r20, 0x24	; 36
    597a:	54 ef       	ldi	r21, 0xF4	; 244
    597c:	60 e0       	ldi	r22, 0x00	; 0
    597e:	70 e0       	ldi	r23, 0x00	; 0
    5980:	ce 01       	movw	r24, r28
    5982:	01 96       	adiw	r24, 0x01	; 1
    5984:	78 dd       	rcall	.-1296   	; 0x5476 <adc_set_clock_rate>
	adc_write_configuration(&SYSTEM_ADC, &ADCConfig);
    5986:	ce 01       	movw	r24, r28
    5988:	01 96       	adiw	r24, 0x01	; 1
    598a:	bc 01       	movw	r22, r24
    598c:	80 e0       	ldi	r24, 0x00	; 0
    598e:	92 e0       	ldi	r25, 0x02	; 2
    5990:	0e 94 cf 95 	call	0x12b9e	; 0x12b9e <adc_write_configuration>
	
	//Fan current sense (PA0) on ADC channel 0
	adcch_set_input(&ADCChanConfig, FAN_CS_ADC_POS_PIN, FAN_CS_ADC_NEG_PIN, 1);
    5994:	ce 01       	movw	r24, r28
    5996:	08 96       	adiw	r24, 0x08	; 8
    5998:	21 e0       	ldi	r18, 0x01	; 1
    599a:	4a e0       	ldi	r20, 0x0A	; 10
    599c:	60 e0       	ldi	r22, 0x00	; 0
    599e:	1e df       	rcall	.-452    	; 0x57dc <adcch_set_input>
	adcch_write_configuration(&SYSTEM_ADC, FAN_CS_ADC_CHAN, &ADCChanConfig);
    59a0:	ce 01       	movw	r24, r28
    59a2:	08 96       	adiw	r24, 0x08	; 8
    59a4:	ac 01       	movw	r20, r24
    59a6:	61 e0       	ldi	r22, 0x01	; 1
    59a8:	80 e0       	ldi	r24, 0x00	; 0
    59aa:	92 e0       	ldi	r25, 0x02	; 2
    59ac:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <adcch_write_configuration>
	
	//Thermistor (PA1) on ADC channel 1
	adcch_set_input(&ADCChanConfig, TEMP_SENSE_ADC_POS_PIN, TEMP_SENSE_ADC_NEG_PIN, 1);
    59b0:	ce 01       	movw	r24, r28
    59b2:	08 96       	adiw	r24, 0x08	; 8
    59b4:	21 e0       	ldi	r18, 0x01	; 1
    59b6:	4a e0       	ldi	r20, 0x0A	; 10
    59b8:	61 e0       	ldi	r22, 0x01	; 1
    59ba:	10 df       	rcall	.-480    	; 0x57dc <adcch_set_input>
	adcch_write_configuration(&SYSTEM_ADC, TEMP_SENSE_ADC_CHAN, &ADCChanConfig);
    59bc:	ce 01       	movw	r24, r28
    59be:	08 96       	adiw	r24, 0x08	; 8
    59c0:	ac 01       	movw	r20, r24
    59c2:	62 e0       	ldi	r22, 0x02	; 2
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	92 e0       	ldi	r25, 0x02	; 2
    59c8:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <adcch_write_configuration>
	
	//adcch_set_input(&ADCChanConfig, ADCCH_POS_PIN2, ADCCH_NEG_NONE, 1); //Only have 4 adc channels so will skip USB VCC for now
	//adcch_write_configuration(&TEMP_SENSE_ADC, VCC_ADC_CHAN, &ADCChanConfig);
	
	//Pump current sense (PA6) on ADC channel 2
	adcch_set_input(&ADCChanConfig, PUMP_SENSE_ADC_POS_PIN, PUMP_SENSE_ADC_NEG_PIN, 1);
    59cc:	ce 01       	movw	r24, r28
    59ce:	08 96       	adiw	r24, 0x08	; 8
    59d0:	21 e0       	ldi	r18, 0x01	; 1
    59d2:	4a e0       	ldi	r20, 0x0A	; 10
    59d4:	66 e0       	ldi	r22, 0x06	; 6
    59d6:	02 df       	rcall	.-508    	; 0x57dc <adcch_set_input>
	adcch_write_configuration(&SYSTEM_ADC, PUMP_SENSE_ADC_CHAN, &ADCChanConfig);
    59d8:	ce 01       	movw	r24, r28
    59da:	08 96       	adiw	r24, 0x08	; 8
    59dc:	ac 01       	movw	r20, r24
    59de:	64 e0       	ldi	r22, 0x04	; 4
    59e0:	80 e0       	ldi	r24, 0x00	; 0
    59e2:	92 e0       	ldi	r25, 0x02	; 2
    59e4:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <adcch_write_configuration>
	
	//Heater current sense (PA7) on ADC channel 3
	adcch_set_input(&ADCChanConfig, HEATER_SENSE_ADC_POS_PIN, HEATER_SENSE_ADC_NEG_PIN, 1);
    59e8:	ce 01       	movw	r24, r28
    59ea:	08 96       	adiw	r24, 0x08	; 8
    59ec:	21 e0       	ldi	r18, 0x01	; 1
    59ee:	4a e0       	ldi	r20, 0x0A	; 10
    59f0:	67 e0       	ldi	r22, 0x07	; 7
    59f2:	f4 de       	rcall	.-536    	; 0x57dc <adcch_set_input>
	adcch_write_configuration(&SYSTEM_ADC, HEATER_SENSE_ADC_CHAN, &ADCChanConfig);
    59f4:	ce 01       	movw	r24, r28
    59f6:	08 96       	adiw	r24, 0x08	; 8
    59f8:	ac 01       	movw	r20, r24
    59fa:	68 e0       	ldi	r22, 0x08	; 8
    59fc:	80 e0       	ldi	r24, 0x00	; 0
    59fe:	92 e0       	ldi	r25, 0x02	; 2
    5a00:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <adcch_write_configuration>
	
	//Enable ADC
	adc_enable(&SYSTEM_ADC);
    5a04:	80 e0       	ldi	r24, 0x00	; 0
    5a06:	92 e0       	ldi	r25, 0x02	; 2
    5a08:	0e 94 28 87 	call	0x10e50	; 0x10e50 <adc_enable>
}
    5a0c:	00 00       	nop
    5a0e:	2b 96       	adiw	r28, 0x0b	; 11
    5a10:	cd bf       	out	0x3d, r28	; 61
    5a12:	de bf       	out	0x3e, r29	; 62
    5a14:	df 91       	pop	r29
    5a16:	cf 91       	pop	r28
    5a18:	08 95       	ret

00005a1a <init_NVM>:
#include "nvm.h"
#include "common_nvm.h"
#include "NVM_wrapper.h"

void init_NVM(void)
{
    5a1a:	cf 93       	push	r28
    5a1c:	df 93       	push	r29
    5a1e:	cd b7       	in	r28, 0x3d	; 61
    5a20:	de b7       	in	r29, 0x3e	; 62
	nvm_init(INT_EEPROM);
    5a22:	82 e0       	ldi	r24, 0x02	; 2
    5a24:	0e 94 15 5e 	call	0xbc2a	; 0xbc2a <nvm_init>
}
    5a28:	00 00       	nop
    5a2a:	df 91       	pop	r29
    5a2c:	cf 91       	pop	r28
    5a2e:	08 95       	ret

00005a30 <write_PID_to_NVM>:

void write_PID_to_NVM(uint32_t memAdr, uint32_t *data, uint32_t dataLen)
{
    5a30:	ef 92       	push	r14
    5a32:	ff 92       	push	r15
    5a34:	0f 93       	push	r16
    5a36:	1f 93       	push	r17
    5a38:	cf 93       	push	r28
    5a3a:	df 93       	push	r29
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
    5a40:	2a 97       	sbiw	r28, 0x0a	; 10
    5a42:	cd bf       	out	0x3d, r28	; 61
    5a44:	de bf       	out	0x3e, r29	; 62
    5a46:	69 83       	std	Y+1, r22	; 0x01
    5a48:	7a 83       	std	Y+2, r23	; 0x02
    5a4a:	8b 83       	std	Y+3, r24	; 0x03
    5a4c:	9c 83       	std	Y+4, r25	; 0x04
    5a4e:	4d 83       	std	Y+5, r20	; 0x05
    5a50:	5e 83       	std	Y+6, r21	; 0x06
    5a52:	0f 83       	std	Y+7, r16	; 0x07
    5a54:	18 87       	std	Y+8, r17	; 0x08
    5a56:	29 87       	std	Y+9, r18	; 0x09
    5a58:	3a 87       	std	Y+10, r19	; 0x0a
	nvm_write(INT_EEPROM, memAdr, data, dataLen);
    5a5a:	2f 81       	ldd	r18, Y+7	; 0x07
    5a5c:	38 85       	ldd	r19, Y+8	; 0x08
    5a5e:	49 85       	ldd	r20, Y+9	; 0x09
    5a60:	5a 85       	ldd	r21, Y+10	; 0x0a
    5a62:	6d 81       	ldd	r22, Y+5	; 0x05
    5a64:	7e 81       	ldd	r23, Y+6	; 0x06
    5a66:	89 81       	ldd	r24, Y+1	; 0x01
    5a68:	9a 81       	ldd	r25, Y+2	; 0x02
    5a6a:	ab 81       	ldd	r26, Y+3	; 0x03
    5a6c:	bc 81       	ldd	r27, Y+4	; 0x04
    5a6e:	79 01       	movw	r14, r18
    5a70:	8a 01       	movw	r16, r20
    5a72:	9b 01       	movw	r18, r22
    5a74:	ac 01       	movw	r20, r24
    5a76:	bd 01       	movw	r22, r26
    5a78:	82 e0       	ldi	r24, 0x02	; 2
    5a7a:	0e 94 7a 5e 	call	0xbcf4	; 0xbcf4 <nvm_write>
}
    5a7e:	00 00       	nop
    5a80:	2a 96       	adiw	r28, 0x0a	; 10
    5a82:	cd bf       	out	0x3d, r28	; 61
    5a84:	de bf       	out	0x3e, r29	; 62
    5a86:	df 91       	pop	r29
    5a88:	cf 91       	pop	r28
    5a8a:	1f 91       	pop	r17
    5a8c:	0f 91       	pop	r16
    5a8e:	ff 90       	pop	r15
    5a90:	ef 90       	pop	r14
    5a92:	08 95       	ret

00005a94 <read_PID_from_NVM>:

void read_PID_from_NVM(uint32_t memAdr, uint32_t *data, uint32_t dataLen)
{
    5a94:	ef 92       	push	r14
    5a96:	ff 92       	push	r15
    5a98:	0f 93       	push	r16
    5a9a:	1f 93       	push	r17
    5a9c:	cf 93       	push	r28
    5a9e:	df 93       	push	r29
    5aa0:	cd b7       	in	r28, 0x3d	; 61
    5aa2:	de b7       	in	r29, 0x3e	; 62
    5aa4:	2a 97       	sbiw	r28, 0x0a	; 10
    5aa6:	cd bf       	out	0x3d, r28	; 61
    5aa8:	de bf       	out	0x3e, r29	; 62
    5aaa:	69 83       	std	Y+1, r22	; 0x01
    5aac:	7a 83       	std	Y+2, r23	; 0x02
    5aae:	8b 83       	std	Y+3, r24	; 0x03
    5ab0:	9c 83       	std	Y+4, r25	; 0x04
    5ab2:	4d 83       	std	Y+5, r20	; 0x05
    5ab4:	5e 83       	std	Y+6, r21	; 0x06
    5ab6:	0f 83       	std	Y+7, r16	; 0x07
    5ab8:	18 87       	std	Y+8, r17	; 0x08
    5aba:	29 87       	std	Y+9, r18	; 0x09
    5abc:	3a 87       	std	Y+10, r19	; 0x0a
	nvm_read(INT_EEPROM, memAdr, data, dataLen);
    5abe:	2f 81       	ldd	r18, Y+7	; 0x07
    5ac0:	38 85       	ldd	r19, Y+8	; 0x08
    5ac2:	49 85       	ldd	r20, Y+9	; 0x09
    5ac4:	5a 85       	ldd	r21, Y+10	; 0x0a
    5ac6:	6d 81       	ldd	r22, Y+5	; 0x05
    5ac8:	7e 81       	ldd	r23, Y+6	; 0x06
    5aca:	89 81       	ldd	r24, Y+1	; 0x01
    5acc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ace:	ab 81       	ldd	r26, Y+3	; 0x03
    5ad0:	bc 81       	ldd	r27, Y+4	; 0x04
    5ad2:	79 01       	movw	r14, r18
    5ad4:	8a 01       	movw	r16, r20
    5ad6:	9b 01       	movw	r18, r22
    5ad8:	ac 01       	movw	r20, r24
    5ada:	bd 01       	movw	r22, r26
    5adc:	82 e0       	ldi	r24, 0x02	; 2
    5ade:	0e 94 28 5e 	call	0xbc50	; 0xbc50 <nvm_read>
}
    5ae2:	00 00       	nop
    5ae4:	2a 96       	adiw	r28, 0x0a	; 10
    5ae6:	cd bf       	out	0x3d, r28	; 61
    5ae8:	de bf       	out	0x3e, r29	; 62
    5aea:	df 91       	pop	r29
    5aec:	cf 91       	pop	r28
    5aee:	1f 91       	pop	r17
    5af0:	0f 91       	pop	r16
    5af2:	ff 90       	pop	r15
    5af4:	ef 90       	pop	r14
    5af6:	08 95       	ret

00005af8 <write_to_NVM>:

void write_to_NVM(uint32_t memAdr, uint8_t data[], uint32_t dataLen)
{
    5af8:	ef 92       	push	r14
    5afa:	ff 92       	push	r15
    5afc:	0f 93       	push	r16
    5afe:	1f 93       	push	r17
    5b00:	cf 93       	push	r28
    5b02:	df 93       	push	r29
    5b04:	cd b7       	in	r28, 0x3d	; 61
    5b06:	de b7       	in	r29, 0x3e	; 62
    5b08:	2a 97       	sbiw	r28, 0x0a	; 10
    5b0a:	cd bf       	out	0x3d, r28	; 61
    5b0c:	de bf       	out	0x3e, r29	; 62
    5b0e:	69 83       	std	Y+1, r22	; 0x01
    5b10:	7a 83       	std	Y+2, r23	; 0x02
    5b12:	8b 83       	std	Y+3, r24	; 0x03
    5b14:	9c 83       	std	Y+4, r25	; 0x04
    5b16:	4d 83       	std	Y+5, r20	; 0x05
    5b18:	5e 83       	std	Y+6, r21	; 0x06
    5b1a:	0f 83       	std	Y+7, r16	; 0x07
    5b1c:	18 87       	std	Y+8, r17	; 0x08
    5b1e:	29 87       	std	Y+9, r18	; 0x09
    5b20:	3a 87       	std	Y+10, r19	; 0x0a
	nvm_write(INT_EEPROM, memAdr, data, dataLen);
    5b22:	2f 81       	ldd	r18, Y+7	; 0x07
    5b24:	38 85       	ldd	r19, Y+8	; 0x08
    5b26:	49 85       	ldd	r20, Y+9	; 0x09
    5b28:	5a 85       	ldd	r21, Y+10	; 0x0a
    5b2a:	6d 81       	ldd	r22, Y+5	; 0x05
    5b2c:	7e 81       	ldd	r23, Y+6	; 0x06
    5b2e:	89 81       	ldd	r24, Y+1	; 0x01
    5b30:	9a 81       	ldd	r25, Y+2	; 0x02
    5b32:	ab 81       	ldd	r26, Y+3	; 0x03
    5b34:	bc 81       	ldd	r27, Y+4	; 0x04
    5b36:	79 01       	movw	r14, r18
    5b38:	8a 01       	movw	r16, r20
    5b3a:	9b 01       	movw	r18, r22
    5b3c:	ac 01       	movw	r20, r24
    5b3e:	bd 01       	movw	r22, r26
    5b40:	82 e0       	ldi	r24, 0x02	; 2
    5b42:	0e 94 7a 5e 	call	0xbcf4	; 0xbcf4 <nvm_write>
}
    5b46:	00 00       	nop
    5b48:	2a 96       	adiw	r28, 0x0a	; 10
    5b4a:	cd bf       	out	0x3d, r28	; 61
    5b4c:	de bf       	out	0x3e, r29	; 62
    5b4e:	df 91       	pop	r29
    5b50:	cf 91       	pop	r28
    5b52:	1f 91       	pop	r17
    5b54:	0f 91       	pop	r16
    5b56:	ff 90       	pop	r15
    5b58:	ef 90       	pop	r14
    5b5a:	08 95       	ret

00005b5c <read_from_NVM>:

void read_from_NVM(uint32_t memAdr, uint8_t data[], uint32_t dataLen)
{
    5b5c:	ef 92       	push	r14
    5b5e:	ff 92       	push	r15
    5b60:	0f 93       	push	r16
    5b62:	1f 93       	push	r17
    5b64:	cf 93       	push	r28
    5b66:	df 93       	push	r29
    5b68:	cd b7       	in	r28, 0x3d	; 61
    5b6a:	de b7       	in	r29, 0x3e	; 62
    5b6c:	2a 97       	sbiw	r28, 0x0a	; 10
    5b6e:	cd bf       	out	0x3d, r28	; 61
    5b70:	de bf       	out	0x3e, r29	; 62
    5b72:	69 83       	std	Y+1, r22	; 0x01
    5b74:	7a 83       	std	Y+2, r23	; 0x02
    5b76:	8b 83       	std	Y+3, r24	; 0x03
    5b78:	9c 83       	std	Y+4, r25	; 0x04
    5b7a:	4d 83       	std	Y+5, r20	; 0x05
    5b7c:	5e 83       	std	Y+6, r21	; 0x06
    5b7e:	0f 83       	std	Y+7, r16	; 0x07
    5b80:	18 87       	std	Y+8, r17	; 0x08
    5b82:	29 87       	std	Y+9, r18	; 0x09
    5b84:	3a 87       	std	Y+10, r19	; 0x0a
	nvm_read(INT_EEPROM, memAdr, data, dataLen);
    5b86:	2f 81       	ldd	r18, Y+7	; 0x07
    5b88:	38 85       	ldd	r19, Y+8	; 0x08
    5b8a:	49 85       	ldd	r20, Y+9	; 0x09
    5b8c:	5a 85       	ldd	r21, Y+10	; 0x0a
    5b8e:	6d 81       	ldd	r22, Y+5	; 0x05
    5b90:	7e 81       	ldd	r23, Y+6	; 0x06
    5b92:	89 81       	ldd	r24, Y+1	; 0x01
    5b94:	9a 81       	ldd	r25, Y+2	; 0x02
    5b96:	ab 81       	ldd	r26, Y+3	; 0x03
    5b98:	bc 81       	ldd	r27, Y+4	; 0x04
    5b9a:	79 01       	movw	r14, r18
    5b9c:	8a 01       	movw	r16, r20
    5b9e:	9b 01       	movw	r18, r22
    5ba0:	ac 01       	movw	r20, r24
    5ba2:	bd 01       	movw	r22, r26
    5ba4:	82 e0       	ldi	r24, 0x02	; 2
    5ba6:	0e 94 28 5e 	call	0xbc50	; 0xbc50 <nvm_read>
    5baa:	00 00       	nop
    5bac:	2a 96       	adiw	r28, 0x0a	; 10
    5bae:	cd bf       	out	0x3d, r28	; 61
    5bb0:	de bf       	out	0x3e, r29	; 62
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	1f 91       	pop	r17
    5bb8:	0f 91       	pop	r16
    5bba:	ff 90       	pop	r15
    5bbc:	ef 90       	pop	r14
    5bbe:	08 95       	ret

00005bc0 <cpu_irq_save>:
void clear_pump_heat_fault(void)
{
	//ioport_set_pin_low(_PUMP_HEAT_FR_STDBY);
	//delay_ms(50);
	//ioport_set_pin_high(_PUMP_HEAT_FR_STDBY);
}
    5bc0:	cf 93       	push	r28
    5bc2:	df 93       	push	r29
    5bc4:	1f 92       	push	r1
    5bc6:	cd b7       	in	r28, 0x3d	; 61
    5bc8:	de b7       	in	r29, 0x3e	; 62
    5bca:	8f e3       	ldi	r24, 0x3F	; 63
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	fc 01       	movw	r30, r24
    5bd0:	80 81       	ld	r24, Z
    5bd2:	89 83       	std	Y+1, r24	; 0x01
    5bd4:	f8 94       	cli
    5bd6:	89 81       	ldd	r24, Y+1	; 0x01
    5bd8:	0f 90       	pop	r0
    5bda:	df 91       	pop	r29
    5bdc:	cf 91       	pop	r28
    5bde:	08 95       	ret

00005be0 <cpu_irq_restore>:
    5be0:	cf 93       	push	r28
    5be2:	df 93       	push	r29
    5be4:	1f 92       	push	r1
    5be6:	cd b7       	in	r28, 0x3d	; 61
    5be8:	de b7       	in	r29, 0x3e	; 62
    5bea:	89 83       	std	Y+1, r24	; 0x01
    5bec:	8f e3       	ldi	r24, 0x3F	; 63
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	29 81       	ldd	r18, Y+1	; 0x01
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	20 83       	st	Z, r18
    5bf6:	00 00       	nop
    5bf8:	0f 90       	pop	r0
    5bfa:	df 91       	pop	r29
    5bfc:	cf 91       	pop	r28
    5bfe:	08 95       	ret

00005c00 <pmic_init>:
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	cd b7       	in	r28, 0x3d	; 61
    5c06:	de b7       	in	r29, 0x3e	; 62
    5c08:	80 ea       	ldi	r24, 0xA0	; 160
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	27 e0       	ldi	r18, 0x07	; 7
    5c0e:	fc 01       	movw	r30, r24
    5c10:	22 83       	std	Z+2, r18	; 0x02
    5c12:	00 00       	nop
    5c14:	df 91       	pop	r29
    5c16:	cf 91       	pop	r28
    5c18:	08 95       	ret

00005c1a <dma_channel_enable>:
    5c1a:	cf 93       	push	r28
    5c1c:	df 93       	push	r29
    5c1e:	00 d0       	rcall	.+0      	; 0x5c20 <dma_channel_enable+0x6>
    5c20:	1f 92       	push	r1
    5c22:	cd b7       	in	r28, 0x3d	; 61
    5c24:	de b7       	in	r29, 0x3e	; 62
    5c26:	8c 83       	std	Y+4, r24	; 0x04
    5c28:	cb df       	rcall	.-106    	; 0x5bc0 <cpu_irq_save>
    5c2a:	89 83       	std	Y+1, r24	; 0x01
    5c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    5c2e:	88 2f       	mov	r24, r24
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	41 96       	adiw	r24, 0x11	; 17
    5c34:	82 95       	swap	r24
    5c36:	92 95       	swap	r25
    5c38:	90 7f       	andi	r25, 0xF0	; 240
    5c3a:	98 27       	eor	r25, r24
    5c3c:	80 7f       	andi	r24, 0xF0	; 240
    5c3e:	98 27       	eor	r25, r24
    5c40:	8a 83       	std	Y+2, r24	; 0x02
    5c42:	9b 83       	std	Y+3, r25	; 0x03
    5c44:	8a 81       	ldd	r24, Y+2	; 0x02
    5c46:	9b 81       	ldd	r25, Y+3	; 0x03
    5c48:	fc 01       	movw	r30, r24
    5c4a:	80 81       	ld	r24, Z
    5c4c:	28 2f       	mov	r18, r24
    5c4e:	20 68       	ori	r18, 0x80	; 128
    5c50:	8a 81       	ldd	r24, Y+2	; 0x02
    5c52:	9b 81       	ldd	r25, Y+3	; 0x03
    5c54:	fc 01       	movw	r30, r24
    5c56:	20 83       	st	Z, r18
    5c58:	89 81       	ldd	r24, Y+1	; 0x01
    5c5a:	c2 df       	rcall	.-124    	; 0x5be0 <cpu_irq_restore>
    5c5c:	00 00       	nop
    5c5e:	24 96       	adiw	r28, 0x04	; 4
    5c60:	cd bf       	out	0x3d, r28	; 61
    5c62:	de bf       	out	0x3e, r29	; 62
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	08 95       	ret

00005c6a <dma_channel_set_burst_length>:
    5c6a:	cf 93       	push	r28
    5c6c:	df 93       	push	r29
    5c6e:	00 d0       	rcall	.+0      	; 0x5c70 <dma_channel_set_burst_length+0x6>
    5c70:	cd b7       	in	r28, 0x3d	; 61
    5c72:	de b7       	in	r29, 0x3e	; 62
    5c74:	89 83       	std	Y+1, r24	; 0x01
    5c76:	9a 83       	std	Y+2, r25	; 0x02
    5c78:	6b 83       	std	Y+3, r22	; 0x03
    5c7a:	89 81       	ldd	r24, Y+1	; 0x01
    5c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c7e:	fc 01       	movw	r30, r24
    5c80:	80 81       	ld	r24, Z
    5c82:	28 2f       	mov	r18, r24
    5c84:	2c 7f       	andi	r18, 0xFC	; 252
    5c86:	89 81       	ldd	r24, Y+1	; 0x01
    5c88:	9a 81       	ldd	r25, Y+2	; 0x02
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	20 83       	st	Z, r18
    5c8e:	89 81       	ldd	r24, Y+1	; 0x01
    5c90:	9a 81       	ldd	r25, Y+2	; 0x02
    5c92:	fc 01       	movw	r30, r24
    5c94:	90 81       	ld	r25, Z
    5c96:	8b 81       	ldd	r24, Y+3	; 0x03
    5c98:	29 2f       	mov	r18, r25
    5c9a:	28 2b       	or	r18, r24
    5c9c:	89 81       	ldd	r24, Y+1	; 0x01
    5c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca0:	fc 01       	movw	r30, r24
    5ca2:	20 83       	st	Z, r18
    5ca4:	00 00       	nop
    5ca6:	23 96       	adiw	r28, 0x03	; 3
    5ca8:	cd bf       	out	0x3d, r28	; 61
    5caa:	de bf       	out	0x3e, r29	; 62
    5cac:	df 91       	pop	r29
    5cae:	cf 91       	pop	r28
    5cb0:	08 95       	ret

00005cb2 <dma_channel_set_src_reload_mode>:
    5cb2:	cf 93       	push	r28
    5cb4:	df 93       	push	r29
    5cb6:	00 d0       	rcall	.+0      	; 0x5cb8 <dma_channel_set_src_reload_mode+0x6>
    5cb8:	cd b7       	in	r28, 0x3d	; 61
    5cba:	de b7       	in	r29, 0x3e	; 62
    5cbc:	89 83       	std	Y+1, r24	; 0x01
    5cbe:	9a 83       	std	Y+2, r25	; 0x02
    5cc0:	6b 83       	std	Y+3, r22	; 0x03
    5cc2:	89 81       	ldd	r24, Y+1	; 0x01
    5cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc6:	fc 01       	movw	r30, r24
    5cc8:	82 81       	ldd	r24, Z+2	; 0x02
    5cca:	28 2f       	mov	r18, r24
    5ccc:	2f 73       	andi	r18, 0x3F	; 63
    5cce:	89 81       	ldd	r24, Y+1	; 0x01
    5cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd2:	fc 01       	movw	r30, r24
    5cd4:	22 83       	std	Z+2, r18	; 0x02
    5cd6:	89 81       	ldd	r24, Y+1	; 0x01
    5cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cda:	fc 01       	movw	r30, r24
    5cdc:	92 81       	ldd	r25, Z+2	; 0x02
    5cde:	8b 81       	ldd	r24, Y+3	; 0x03
    5ce0:	29 2f       	mov	r18, r25
    5ce2:	28 2b       	or	r18, r24
    5ce4:	89 81       	ldd	r24, Y+1	; 0x01
    5ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce8:	fc 01       	movw	r30, r24
    5cea:	22 83       	std	Z+2, r18	; 0x02
    5cec:	00 00       	nop
    5cee:	23 96       	adiw	r28, 0x03	; 3
    5cf0:	cd bf       	out	0x3d, r28	; 61
    5cf2:	de bf       	out	0x3e, r29	; 62
    5cf4:	df 91       	pop	r29
    5cf6:	cf 91       	pop	r28
    5cf8:	08 95       	ret

00005cfa <dma_channel_set_dest_reload_mode>:
    5cfa:	cf 93       	push	r28
    5cfc:	df 93       	push	r29
    5cfe:	00 d0       	rcall	.+0      	; 0x5d00 <dma_channel_set_dest_reload_mode+0x6>
    5d00:	cd b7       	in	r28, 0x3d	; 61
    5d02:	de b7       	in	r29, 0x3e	; 62
    5d04:	89 83       	std	Y+1, r24	; 0x01
    5d06:	9a 83       	std	Y+2, r25	; 0x02
    5d08:	6b 83       	std	Y+3, r22	; 0x03
    5d0a:	89 81       	ldd	r24, Y+1	; 0x01
    5d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d0e:	fc 01       	movw	r30, r24
    5d10:	82 81       	ldd	r24, Z+2	; 0x02
    5d12:	28 2f       	mov	r18, r24
    5d14:	23 7f       	andi	r18, 0xF3	; 243
    5d16:	89 81       	ldd	r24, Y+1	; 0x01
    5d18:	9a 81       	ldd	r25, Y+2	; 0x02
    5d1a:	fc 01       	movw	r30, r24
    5d1c:	22 83       	std	Z+2, r18	; 0x02
    5d1e:	89 81       	ldd	r24, Y+1	; 0x01
    5d20:	9a 81       	ldd	r25, Y+2	; 0x02
    5d22:	fc 01       	movw	r30, r24
    5d24:	92 81       	ldd	r25, Z+2	; 0x02
    5d26:	8b 81       	ldd	r24, Y+3	; 0x03
    5d28:	29 2f       	mov	r18, r25
    5d2a:	28 2b       	or	r18, r24
    5d2c:	89 81       	ldd	r24, Y+1	; 0x01
    5d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d30:	fc 01       	movw	r30, r24
    5d32:	22 83       	std	Z+2, r18	; 0x02
    5d34:	00 00       	nop
    5d36:	23 96       	adiw	r28, 0x03	; 3
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	de bf       	out	0x3e, r29	; 62
    5d3c:	df 91       	pop	r29
    5d3e:	cf 91       	pop	r28
    5d40:	08 95       	ret

00005d42 <dma_channel_set_src_dir_mode>:
    5d42:	cf 93       	push	r28
    5d44:	df 93       	push	r29
    5d46:	00 d0       	rcall	.+0      	; 0x5d48 <dma_channel_set_src_dir_mode+0x6>
    5d48:	cd b7       	in	r28, 0x3d	; 61
    5d4a:	de b7       	in	r29, 0x3e	; 62
    5d4c:	89 83       	std	Y+1, r24	; 0x01
    5d4e:	9a 83       	std	Y+2, r25	; 0x02
    5d50:	6b 83       	std	Y+3, r22	; 0x03
    5d52:	89 81       	ldd	r24, Y+1	; 0x01
    5d54:	9a 81       	ldd	r25, Y+2	; 0x02
    5d56:	fc 01       	movw	r30, r24
    5d58:	82 81       	ldd	r24, Z+2	; 0x02
    5d5a:	28 2f       	mov	r18, r24
    5d5c:	2f 7c       	andi	r18, 0xCF	; 207
    5d5e:	89 81       	ldd	r24, Y+1	; 0x01
    5d60:	9a 81       	ldd	r25, Y+2	; 0x02
    5d62:	fc 01       	movw	r30, r24
    5d64:	22 83       	std	Z+2, r18	; 0x02
    5d66:	89 81       	ldd	r24, Y+1	; 0x01
    5d68:	9a 81       	ldd	r25, Y+2	; 0x02
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	92 81       	ldd	r25, Z+2	; 0x02
    5d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d70:	29 2f       	mov	r18, r25
    5d72:	28 2b       	or	r18, r24
    5d74:	89 81       	ldd	r24, Y+1	; 0x01
    5d76:	9a 81       	ldd	r25, Y+2	; 0x02
    5d78:	fc 01       	movw	r30, r24
    5d7a:	22 83       	std	Z+2, r18	; 0x02
    5d7c:	00 00       	nop
    5d7e:	23 96       	adiw	r28, 0x03	; 3
    5d80:	cd bf       	out	0x3d, r28	; 61
    5d82:	de bf       	out	0x3e, r29	; 62
    5d84:	df 91       	pop	r29
    5d86:	cf 91       	pop	r28
    5d88:	08 95       	ret

00005d8a <dma_channel_set_dest_dir_mode>:
    5d8a:	cf 93       	push	r28
    5d8c:	df 93       	push	r29
    5d8e:	00 d0       	rcall	.+0      	; 0x5d90 <dma_channel_set_dest_dir_mode+0x6>
    5d90:	cd b7       	in	r28, 0x3d	; 61
    5d92:	de b7       	in	r29, 0x3e	; 62
    5d94:	89 83       	std	Y+1, r24	; 0x01
    5d96:	9a 83       	std	Y+2, r25	; 0x02
    5d98:	6b 83       	std	Y+3, r22	; 0x03
    5d9a:	89 81       	ldd	r24, Y+1	; 0x01
    5d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d9e:	fc 01       	movw	r30, r24
    5da0:	82 81       	ldd	r24, Z+2	; 0x02
    5da2:	28 2f       	mov	r18, r24
    5da4:	2c 7f       	andi	r18, 0xFC	; 252
    5da6:	89 81       	ldd	r24, Y+1	; 0x01
    5da8:	9a 81       	ldd	r25, Y+2	; 0x02
    5daa:	fc 01       	movw	r30, r24
    5dac:	22 83       	std	Z+2, r18	; 0x02
    5dae:	89 81       	ldd	r24, Y+1	; 0x01
    5db0:	9a 81       	ldd	r25, Y+2	; 0x02
    5db2:	fc 01       	movw	r30, r24
    5db4:	92 81       	ldd	r25, Z+2	; 0x02
    5db6:	8b 81       	ldd	r24, Y+3	; 0x03
    5db8:	29 2f       	mov	r18, r25
    5dba:	28 2b       	or	r18, r24
    5dbc:	89 81       	ldd	r24, Y+1	; 0x01
    5dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5dc0:	fc 01       	movw	r30, r24
    5dc2:	22 83       	std	Z+2, r18	; 0x02
    5dc4:	00 00       	nop
    5dc6:	23 96       	adiw	r28, 0x03	; 3
    5dc8:	cd bf       	out	0x3d, r28	; 61
    5dca:	de bf       	out	0x3e, r29	; 62
    5dcc:	df 91       	pop	r29
    5dce:	cf 91       	pop	r28
    5dd0:	08 95       	ret

00005dd2 <dma_channel_set_trigger_source>:
    5dd2:	cf 93       	push	r28
    5dd4:	df 93       	push	r29
    5dd6:	00 d0       	rcall	.+0      	; 0x5dd8 <dma_channel_set_trigger_source+0x6>
    5dd8:	cd b7       	in	r28, 0x3d	; 61
    5dda:	de b7       	in	r29, 0x3e	; 62
    5ddc:	89 83       	std	Y+1, r24	; 0x01
    5dde:	9a 83       	std	Y+2, r25	; 0x02
    5de0:	6b 83       	std	Y+3, r22	; 0x03
    5de2:	89 81       	ldd	r24, Y+1	; 0x01
    5de4:	9a 81       	ldd	r25, Y+2	; 0x02
    5de6:	2b 81       	ldd	r18, Y+3	; 0x03
    5de8:	fc 01       	movw	r30, r24
    5dea:	23 83       	std	Z+3, r18	; 0x03
    5dec:	00 00       	nop
    5dee:	23 96       	adiw	r28, 0x03	; 3
    5df0:	cd bf       	out	0x3d, r28	; 61
    5df2:	de bf       	out	0x3e, r29	; 62
    5df4:	df 91       	pop	r29
    5df6:	cf 91       	pop	r28
    5df8:	08 95       	ret

00005dfa <dma_channel_set_transfer_count>:
    5dfa:	cf 93       	push	r28
    5dfc:	df 93       	push	r29
    5dfe:	00 d0       	rcall	.+0      	; 0x5e00 <dma_channel_set_transfer_count+0x6>
    5e00:	1f 92       	push	r1
    5e02:	cd b7       	in	r28, 0x3d	; 61
    5e04:	de b7       	in	r29, 0x3e	; 62
    5e06:	89 83       	std	Y+1, r24	; 0x01
    5e08:	9a 83       	std	Y+2, r25	; 0x02
    5e0a:	6b 83       	std	Y+3, r22	; 0x03
    5e0c:	7c 83       	std	Y+4, r23	; 0x04
    5e0e:	89 81       	ldd	r24, Y+1	; 0x01
    5e10:	9a 81       	ldd	r25, Y+2	; 0x02
    5e12:	2b 81       	ldd	r18, Y+3	; 0x03
    5e14:	3c 81       	ldd	r19, Y+4	; 0x04
    5e16:	fc 01       	movw	r30, r24
    5e18:	24 83       	std	Z+4, r18	; 0x04
    5e1a:	35 83       	std	Z+5, r19	; 0x05
    5e1c:	00 00       	nop
    5e1e:	24 96       	adiw	r28, 0x04	; 4
    5e20:	cd bf       	out	0x3d, r28	; 61
    5e22:	de bf       	out	0x3e, r29	; 62
    5e24:	df 91       	pop	r29
    5e26:	cf 91       	pop	r28
    5e28:	08 95       	ret

00005e2a <dma_channel_set_repeats>:
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	00 d0       	rcall	.+0      	; 0x5e30 <dma_channel_set_repeats+0x6>
    5e30:	cd b7       	in	r28, 0x3d	; 61
    5e32:	de b7       	in	r29, 0x3e	; 62
    5e34:	89 83       	std	Y+1, r24	; 0x01
    5e36:	9a 83       	std	Y+2, r25	; 0x02
    5e38:	6b 83       	std	Y+3, r22	; 0x03
    5e3a:	89 81       	ldd	r24, Y+1	; 0x01
    5e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e3e:	fc 01       	movw	r30, r24
    5e40:	80 81       	ld	r24, Z
    5e42:	28 2f       	mov	r18, r24
    5e44:	20 62       	ori	r18, 0x20	; 32
    5e46:	89 81       	ldd	r24, Y+1	; 0x01
    5e48:	9a 81       	ldd	r25, Y+2	; 0x02
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	20 83       	st	Z, r18
    5e4e:	89 81       	ldd	r24, Y+1	; 0x01
    5e50:	9a 81       	ldd	r25, Y+2	; 0x02
    5e52:	2b 81       	ldd	r18, Y+3	; 0x03
    5e54:	fc 01       	movw	r30, r24
    5e56:	26 83       	std	Z+6, r18	; 0x06
    5e58:	00 00       	nop
    5e5a:	23 96       	adiw	r28, 0x03	; 3
    5e5c:	cd bf       	out	0x3d, r28	; 61
    5e5e:	de bf       	out	0x3e, r29	; 62
    5e60:	df 91       	pop	r29
    5e62:	cf 91       	pop	r28
    5e64:	08 95       	ret

00005e66 <dma_channel_set_destination_address>:
    5e66:	cf 93       	push	r28
    5e68:	df 93       	push	r29
    5e6a:	00 d0       	rcall	.+0      	; 0x5e6c <dma_channel_set_destination_address+0x6>
    5e6c:	1f 92       	push	r1
    5e6e:	cd b7       	in	r28, 0x3d	; 61
    5e70:	de b7       	in	r29, 0x3e	; 62
    5e72:	89 83       	std	Y+1, r24	; 0x01
    5e74:	9a 83       	std	Y+2, r25	; 0x02
    5e76:	6b 83       	std	Y+3, r22	; 0x03
    5e78:	7c 83       	std	Y+4, r23	; 0x04
    5e7a:	89 81       	ldd	r24, Y+1	; 0x01
    5e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    5e80:	3c 81       	ldd	r19, Y+4	; 0x04
    5e82:	fc 01       	movw	r30, r24
    5e84:	21 87       	std	Z+9, r18	; 0x09
    5e86:	32 87       	std	Z+10, r19	; 0x0a
    5e88:	00 00       	nop
    5e8a:	24 96       	adiw	r28, 0x04	; 4
    5e8c:	cd bf       	out	0x3d, r28	; 61
    5e8e:	de bf       	out	0x3e, r29	; 62
    5e90:	df 91       	pop	r29
    5e92:	cf 91       	pop	r28
    5e94:	08 95       	ret

00005e96 <dma_channel_set_source_address>:
    5e96:	cf 93       	push	r28
    5e98:	df 93       	push	r29
    5e9a:	00 d0       	rcall	.+0      	; 0x5e9c <dma_channel_set_source_address+0x6>
    5e9c:	1f 92       	push	r1
    5e9e:	cd b7       	in	r28, 0x3d	; 61
    5ea0:	de b7       	in	r29, 0x3e	; 62
    5ea2:	89 83       	std	Y+1, r24	; 0x01
    5ea4:	9a 83       	std	Y+2, r25	; 0x02
    5ea6:	6b 83       	std	Y+3, r22	; 0x03
    5ea8:	7c 83       	std	Y+4, r23	; 0x04
    5eaa:	89 81       	ldd	r24, Y+1	; 0x01
    5eac:	9a 81       	ldd	r25, Y+2	; 0x02
    5eae:	2b 81       	ldd	r18, Y+3	; 0x03
    5eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    5eb2:	fc 01       	movw	r30, r24
    5eb4:	27 83       	std	Z+7, r18	; 0x07
    5eb6:	30 87       	std	Z+8, r19	; 0x08
    5eb8:	00 00       	nop
    5eba:	24 96       	adiw	r28, 0x04	; 4
    5ebc:	cd bf       	out	0x3d, r28	; 61
    5ebe:	de bf       	out	0x3e, r29	; 62
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	08 95       	ret

00005ec6 <ioport_configure_pin>:
    5ec6:	cf 93       	push	r28
    5ec8:	df 93       	push	r29
    5eca:	cd b7       	in	r28, 0x3d	; 61
    5ecc:	de b7       	in	r29, 0x3e	; 62
    5ece:	27 97       	sbiw	r28, 0x07	; 7
    5ed0:	cd bf       	out	0x3d, r28	; 61
    5ed2:	de bf       	out	0x3e, r29	; 62
    5ed4:	8d 83       	std	Y+5, r24	; 0x05
    5ed6:	6e 83       	std	Y+6, r22	; 0x06
    5ed8:	7f 83       	std	Y+7, r23	; 0x07
    5eda:	8d 81       	ldd	r24, Y+5	; 0x05
    5edc:	89 83       	std	Y+1, r24	; 0x01
    5ede:	89 81       	ldd	r24, Y+1	; 0x01
    5ee0:	88 2f       	mov	r24, r24
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	9c 01       	movw	r18, r24
    5ee6:	27 70       	andi	r18, 0x07	; 7
    5ee8:	33 27       	eor	r19, r19
    5eea:	81 e0       	ldi	r24, 0x01	; 1
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	02 c0       	rjmp	.+4      	; 0x5ef4 <ioport_configure_pin+0x2e>
    5ef0:	88 0f       	add	r24, r24
    5ef2:	99 1f       	adc	r25, r25
    5ef4:	2a 95       	dec	r18
    5ef6:	e2 f7       	brpl	.-8      	; 0x5ef0 <ioport_configure_pin+0x2a>
    5ef8:	68 2f       	mov	r22, r24
    5efa:	8d 81       	ldd	r24, Y+5	; 0x05
    5efc:	8a 83       	std	Y+2, r24	; 0x02
    5efe:	8a 81       	ldd	r24, Y+2	; 0x02
    5f00:	8b 83       	std	Y+3, r24	; 0x03
    5f02:	8b 81       	ldd	r24, Y+3	; 0x03
    5f04:	86 95       	lsr	r24
    5f06:	86 95       	lsr	r24
    5f08:	86 95       	lsr	r24
    5f0a:	8c 83       	std	Y+4, r24	; 0x04
    5f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    5f0e:	88 2f       	mov	r24, r24
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	88 0f       	add	r24, r24
    5f14:	99 1f       	adc	r25, r25
    5f16:	82 95       	swap	r24
    5f18:	92 95       	swap	r25
    5f1a:	90 7f       	andi	r25, 0xF0	; 240
    5f1c:	98 27       	eor	r25, r24
    5f1e:	80 7f       	andi	r24, 0xF0	; 240
    5f20:	98 27       	eor	r25, r24
    5f22:	9a 5f       	subi	r25, 0xFA	; 250
    5f24:	9c 01       	movw	r18, r24
    5f26:	8e 81       	ldd	r24, Y+6	; 0x06
    5f28:	9f 81       	ldd	r25, Y+7	; 0x07
    5f2a:	ac 01       	movw	r20, r24
    5f2c:	c9 01       	movw	r24, r18
    5f2e:	0e 94 89 97 	call	0x12f12	; 0x12f12 <ioport_configure_port_pin>
    5f32:	00 00       	nop
    5f34:	27 96       	adiw	r28, 0x07	; 7
    5f36:	cd bf       	out	0x3d, r28	; 61
    5f38:	de bf       	out	0x3e, r29	; 62
    5f3a:	df 91       	pop	r29
    5f3c:	cf 91       	pop	r28
    5f3e:	08 95       	ret

00005f40 <ioport_set_pin_low>:
    5f40:	cf 93       	push	r28
    5f42:	df 93       	push	r29
    5f44:	cd b7       	in	r28, 0x3d	; 61
    5f46:	de b7       	in	r29, 0x3e	; 62
    5f48:	2a 97       	sbiw	r28, 0x0a	; 10
    5f4a:	cd bf       	out	0x3d, r28	; 61
    5f4c:	de bf       	out	0x3e, r29	; 62
    5f4e:	8a 87       	std	Y+10, r24	; 0x0a
    5f50:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f52:	89 83       	std	Y+1, r24	; 0x01
    5f54:	1a 82       	std	Y+2, r1	; 0x02
    5f56:	89 81       	ldd	r24, Y+1	; 0x01
    5f58:	8b 83       	std	Y+3, r24	; 0x03
    5f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f5c:	8c 83       	std	Y+4, r24	; 0x04
    5f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f60:	86 95       	lsr	r24
    5f62:	86 95       	lsr	r24
    5f64:	86 95       	lsr	r24
    5f66:	8d 83       	std	Y+5, r24	; 0x05
    5f68:	8d 81       	ldd	r24, Y+5	; 0x05
    5f6a:	88 2f       	mov	r24, r24
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	88 0f       	add	r24, r24
    5f70:	99 1f       	adc	r25, r25
    5f72:	82 95       	swap	r24
    5f74:	92 95       	swap	r25
    5f76:	90 7f       	andi	r25, 0xF0	; 240
    5f78:	98 27       	eor	r25, r24
    5f7a:	80 7f       	andi	r24, 0xF0	; 240
    5f7c:	98 27       	eor	r25, r24
    5f7e:	9a 5f       	subi	r25, 0xFA	; 250
    5f80:	8e 83       	std	Y+6, r24	; 0x06
    5f82:	9f 83       	std	Y+7, r25	; 0x07
    5f84:	8a 81       	ldd	r24, Y+2	; 0x02
    5f86:	88 23       	and	r24, r24
    5f88:	a9 f0       	breq	.+42     	; 0x5fb4 <ioport_set_pin_low+0x74>
    5f8a:	89 81       	ldd	r24, Y+1	; 0x01
    5f8c:	88 87       	std	Y+8, r24	; 0x08
    5f8e:	88 85       	ldd	r24, Y+8	; 0x08
    5f90:	88 2f       	mov	r24, r24
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	9c 01       	movw	r18, r24
    5f96:	27 70       	andi	r18, 0x07	; 7
    5f98:	33 27       	eor	r19, r19
    5f9a:	81 e0       	ldi	r24, 0x01	; 1
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	02 c0       	rjmp	.+4      	; 0x5fa4 <ioport_set_pin_low+0x64>
    5fa0:	88 0f       	add	r24, r24
    5fa2:	99 1f       	adc	r25, r25
    5fa4:	2a 95       	dec	r18
    5fa6:	e2 f7       	brpl	.-8      	; 0x5fa0 <ioport_set_pin_low+0x60>
    5fa8:	28 2f       	mov	r18, r24
    5faa:	8e 81       	ldd	r24, Y+6	; 0x06
    5fac:	9f 81       	ldd	r25, Y+7	; 0x07
    5fae:	fc 01       	movw	r30, r24
    5fb0:	25 83       	std	Z+5, r18	; 0x05
    5fb2:	14 c0       	rjmp	.+40     	; 0x5fdc <ioport_set_pin_low+0x9c>
    5fb4:	89 81       	ldd	r24, Y+1	; 0x01
    5fb6:	89 87       	std	Y+9, r24	; 0x09
    5fb8:	89 85       	ldd	r24, Y+9	; 0x09
    5fba:	88 2f       	mov	r24, r24
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	9c 01       	movw	r18, r24
    5fc0:	27 70       	andi	r18, 0x07	; 7
    5fc2:	33 27       	eor	r19, r19
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	02 c0       	rjmp	.+4      	; 0x5fce <ioport_set_pin_low+0x8e>
    5fca:	88 0f       	add	r24, r24
    5fcc:	99 1f       	adc	r25, r25
    5fce:	2a 95       	dec	r18
    5fd0:	e2 f7       	brpl	.-8      	; 0x5fca <ioport_set_pin_low+0x8a>
    5fd2:	28 2f       	mov	r18, r24
    5fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    5fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    5fd8:	fc 01       	movw	r30, r24
    5fda:	26 83       	std	Z+6, r18	; 0x06
    5fdc:	00 00       	nop
    5fde:	2a 96       	adiw	r28, 0x0a	; 10
    5fe0:	cd bf       	out	0x3d, r28	; 61
    5fe2:	de bf       	out	0x3e, r29	; 62
    5fe4:	df 91       	pop	r29
    5fe6:	cf 91       	pop	r28
    5fe8:	08 95       	ret

00005fea <ioport_set_pin_high>:
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	cd b7       	in	r28, 0x3d	; 61
    5ff0:	de b7       	in	r29, 0x3e	; 62
    5ff2:	2a 97       	sbiw	r28, 0x0a	; 10
    5ff4:	cd bf       	out	0x3d, r28	; 61
    5ff6:	de bf       	out	0x3e, r29	; 62
    5ff8:	8a 87       	std	Y+10, r24	; 0x0a
    5ffa:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ffc:	89 83       	std	Y+1, r24	; 0x01
    5ffe:	81 e0       	ldi	r24, 0x01	; 1
    6000:	8a 83       	std	Y+2, r24	; 0x02
    6002:	89 81       	ldd	r24, Y+1	; 0x01
    6004:	8b 83       	std	Y+3, r24	; 0x03
    6006:	8b 81       	ldd	r24, Y+3	; 0x03
    6008:	8c 83       	std	Y+4, r24	; 0x04
    600a:	8c 81       	ldd	r24, Y+4	; 0x04
    600c:	86 95       	lsr	r24
    600e:	86 95       	lsr	r24
    6010:	86 95       	lsr	r24
    6012:	8d 83       	std	Y+5, r24	; 0x05
    6014:	8d 81       	ldd	r24, Y+5	; 0x05
    6016:	88 2f       	mov	r24, r24
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	88 0f       	add	r24, r24
    601c:	99 1f       	adc	r25, r25
    601e:	82 95       	swap	r24
    6020:	92 95       	swap	r25
    6022:	90 7f       	andi	r25, 0xF0	; 240
    6024:	98 27       	eor	r25, r24
    6026:	80 7f       	andi	r24, 0xF0	; 240
    6028:	98 27       	eor	r25, r24
    602a:	9a 5f       	subi	r25, 0xFA	; 250
    602c:	8e 83       	std	Y+6, r24	; 0x06
    602e:	9f 83       	std	Y+7, r25	; 0x07
    6030:	8a 81       	ldd	r24, Y+2	; 0x02
    6032:	88 23       	and	r24, r24
    6034:	a9 f0       	breq	.+42     	; 0x6060 <ioport_set_pin_high+0x76>
    6036:	89 81       	ldd	r24, Y+1	; 0x01
    6038:	88 87       	std	Y+8, r24	; 0x08
    603a:	88 85       	ldd	r24, Y+8	; 0x08
    603c:	88 2f       	mov	r24, r24
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	9c 01       	movw	r18, r24
    6042:	27 70       	andi	r18, 0x07	; 7
    6044:	33 27       	eor	r19, r19
    6046:	81 e0       	ldi	r24, 0x01	; 1
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	02 c0       	rjmp	.+4      	; 0x6050 <ioport_set_pin_high+0x66>
    604c:	88 0f       	add	r24, r24
    604e:	99 1f       	adc	r25, r25
    6050:	2a 95       	dec	r18
    6052:	e2 f7       	brpl	.-8      	; 0x604c <ioport_set_pin_high+0x62>
    6054:	28 2f       	mov	r18, r24
    6056:	8e 81       	ldd	r24, Y+6	; 0x06
    6058:	9f 81       	ldd	r25, Y+7	; 0x07
    605a:	fc 01       	movw	r30, r24
    605c:	25 83       	std	Z+5, r18	; 0x05
    605e:	14 c0       	rjmp	.+40     	; 0x6088 <ioport_set_pin_high+0x9e>
    6060:	89 81       	ldd	r24, Y+1	; 0x01
    6062:	89 87       	std	Y+9, r24	; 0x09
    6064:	89 85       	ldd	r24, Y+9	; 0x09
    6066:	88 2f       	mov	r24, r24
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	9c 01       	movw	r18, r24
    606c:	27 70       	andi	r18, 0x07	; 7
    606e:	33 27       	eor	r19, r19
    6070:	81 e0       	ldi	r24, 0x01	; 1
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	02 c0       	rjmp	.+4      	; 0x607a <ioport_set_pin_high+0x90>
    6076:	88 0f       	add	r24, r24
    6078:	99 1f       	adc	r25, r25
    607a:	2a 95       	dec	r18
    607c:	e2 f7       	brpl	.-8      	; 0x6076 <ioport_set_pin_high+0x8c>
    607e:	28 2f       	mov	r18, r24
    6080:	8e 81       	ldd	r24, Y+6	; 0x06
    6082:	9f 81       	ldd	r25, Y+7	; 0x07
    6084:	fc 01       	movw	r30, r24
    6086:	26 83       	std	Z+6, r18	; 0x06
    6088:	00 00       	nop
    608a:	2a 96       	adiw	r28, 0x0a	; 10
    608c:	cd bf       	out	0x3d, r28	; 61
    608e:	de bf       	out	0x3e, r29	; 62
    6090:	df 91       	pop	r29
    6092:	cf 91       	pop	r28
    6094:	08 95       	ret

00006096 <ioport_init>:
    6096:	cf 93       	push	r28
    6098:	df 93       	push	r29
    609a:	cd b7       	in	r28, 0x3d	; 61
    609c:	de b7       	in	r29, 0x3e	; 62
    609e:	00 00       	nop
    60a0:	df 91       	pop	r29
    60a2:	cf 91       	pop	r28
    60a4:	08 95       	ret

000060a6 <ioport_set_pin_dir>:
    60a6:	cf 93       	push	r28
    60a8:	df 93       	push	r29
    60aa:	cd b7       	in	r28, 0x3d	; 61
    60ac:	de b7       	in	r29, 0x3e	; 62
    60ae:	2b 97       	sbiw	r28, 0x0b	; 11
    60b0:	cd bf       	out	0x3d, r28	; 61
    60b2:	de bf       	out	0x3e, r29	; 62
    60b4:	8a 87       	std	Y+10, r24	; 0x0a
    60b6:	6b 87       	std	Y+11, r22	; 0x0b
    60b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    60ba:	89 83       	std	Y+1, r24	; 0x01
    60bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    60be:	8a 83       	std	Y+2, r24	; 0x02
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
    60c2:	8b 83       	std	Y+3, r24	; 0x03
    60c4:	8b 81       	ldd	r24, Y+3	; 0x03
    60c6:	8c 83       	std	Y+4, r24	; 0x04
    60c8:	8c 81       	ldd	r24, Y+4	; 0x04
    60ca:	86 95       	lsr	r24
    60cc:	86 95       	lsr	r24
    60ce:	86 95       	lsr	r24
    60d0:	8d 83       	std	Y+5, r24	; 0x05
    60d2:	8d 81       	ldd	r24, Y+5	; 0x05
    60d4:	88 2f       	mov	r24, r24
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	88 0f       	add	r24, r24
    60da:	99 1f       	adc	r25, r25
    60dc:	82 95       	swap	r24
    60de:	92 95       	swap	r25
    60e0:	90 7f       	andi	r25, 0xF0	; 240
    60e2:	98 27       	eor	r25, r24
    60e4:	80 7f       	andi	r24, 0xF0	; 240
    60e6:	98 27       	eor	r25, r24
    60e8:	9a 5f       	subi	r25, 0xFA	; 250
    60ea:	8e 83       	std	Y+6, r24	; 0x06
    60ec:	9f 83       	std	Y+7, r25	; 0x07
    60ee:	8a 81       	ldd	r24, Y+2	; 0x02
    60f0:	81 30       	cpi	r24, 0x01	; 1
    60f2:	a9 f4       	brne	.+42     	; 0x611e <ioport_set_pin_dir+0x78>
    60f4:	89 81       	ldd	r24, Y+1	; 0x01
    60f6:	88 87       	std	Y+8, r24	; 0x08
    60f8:	88 85       	ldd	r24, Y+8	; 0x08
    60fa:	88 2f       	mov	r24, r24
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	9c 01       	movw	r18, r24
    6100:	27 70       	andi	r18, 0x07	; 7
    6102:	33 27       	eor	r19, r19
    6104:	81 e0       	ldi	r24, 0x01	; 1
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	02 c0       	rjmp	.+4      	; 0x610e <ioport_set_pin_dir+0x68>
    610a:	88 0f       	add	r24, r24
    610c:	99 1f       	adc	r25, r25
    610e:	2a 95       	dec	r18
    6110:	e2 f7       	brpl	.-8      	; 0x610a <ioport_set_pin_dir+0x64>
    6112:	28 2f       	mov	r18, r24
    6114:	8e 81       	ldd	r24, Y+6	; 0x06
    6116:	9f 81       	ldd	r25, Y+7	; 0x07
    6118:	fc 01       	movw	r30, r24
    611a:	21 83       	std	Z+1, r18	; 0x01
    611c:	17 c0       	rjmp	.+46     	; 0x614c <ioport_set_pin_dir+0xa6>
    611e:	8a 81       	ldd	r24, Y+2	; 0x02
    6120:	88 23       	and	r24, r24
    6122:	a1 f4       	brne	.+40     	; 0x614c <ioport_set_pin_dir+0xa6>
    6124:	89 81       	ldd	r24, Y+1	; 0x01
    6126:	89 87       	std	Y+9, r24	; 0x09
    6128:	89 85       	ldd	r24, Y+9	; 0x09
    612a:	88 2f       	mov	r24, r24
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	9c 01       	movw	r18, r24
    6130:	27 70       	andi	r18, 0x07	; 7
    6132:	33 27       	eor	r19, r19
    6134:	81 e0       	ldi	r24, 0x01	; 1
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	02 c0       	rjmp	.+4      	; 0x613e <ioport_set_pin_dir+0x98>
    613a:	88 0f       	add	r24, r24
    613c:	99 1f       	adc	r25, r25
    613e:	2a 95       	dec	r18
    6140:	e2 f7       	brpl	.-8      	; 0x613a <ioport_set_pin_dir+0x94>
    6142:	28 2f       	mov	r18, r24
    6144:	8e 81       	ldd	r24, Y+6	; 0x06
    6146:	9f 81       	ldd	r25, Y+7	; 0x07
    6148:	fc 01       	movw	r30, r24
    614a:	22 83       	std	Z+2, r18	; 0x02
    614c:	00 00       	nop
    614e:	2b 96       	adiw	r28, 0x0b	; 11
    6150:	cd bf       	out	0x3d, r28	; 61
    6152:	de bf       	out	0x3e, r29	; 62
    6154:	df 91       	pop	r29
    6156:	cf 91       	pop	r28
    6158:	08 95       	ret

0000615a <ioport_get_pin_level>:
    615a:	cf 93       	push	r28
    615c:	df 93       	push	r29
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62
    6162:	28 97       	sbiw	r28, 0x08	; 8
    6164:	cd bf       	out	0x3d, r28	; 61
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	88 87       	std	Y+8, r24	; 0x08
    616a:	88 85       	ldd	r24, Y+8	; 0x08
    616c:	89 83       	std	Y+1, r24	; 0x01
    616e:	89 81       	ldd	r24, Y+1	; 0x01
    6170:	8a 83       	std	Y+2, r24	; 0x02
    6172:	8a 81       	ldd	r24, Y+2	; 0x02
    6174:	8b 83       	std	Y+3, r24	; 0x03
    6176:	8b 81       	ldd	r24, Y+3	; 0x03
    6178:	86 95       	lsr	r24
    617a:	86 95       	lsr	r24
    617c:	86 95       	lsr	r24
    617e:	8c 83       	std	Y+4, r24	; 0x04
    6180:	8c 81       	ldd	r24, Y+4	; 0x04
    6182:	88 2f       	mov	r24, r24
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	88 0f       	add	r24, r24
    6188:	99 1f       	adc	r25, r25
    618a:	82 95       	swap	r24
    618c:	92 95       	swap	r25
    618e:	90 7f       	andi	r25, 0xF0	; 240
    6190:	98 27       	eor	r25, r24
    6192:	80 7f       	andi	r24, 0xF0	; 240
    6194:	98 27       	eor	r25, r24
    6196:	9a 5f       	subi	r25, 0xFA	; 250
    6198:	8d 83       	std	Y+5, r24	; 0x05
    619a:	9e 83       	std	Y+6, r25	; 0x06
    619c:	8d 81       	ldd	r24, Y+5	; 0x05
    619e:	9e 81       	ldd	r25, Y+6	; 0x06
    61a0:	fc 01       	movw	r30, r24
    61a2:	40 85       	ldd	r20, Z+8	; 0x08
    61a4:	89 81       	ldd	r24, Y+1	; 0x01
    61a6:	8f 83       	std	Y+7, r24	; 0x07
    61a8:	8f 81       	ldd	r24, Y+7	; 0x07
    61aa:	88 2f       	mov	r24, r24
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	9c 01       	movw	r18, r24
    61b0:	27 70       	andi	r18, 0x07	; 7
    61b2:	33 27       	eor	r19, r19
    61b4:	81 e0       	ldi	r24, 0x01	; 1
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	02 c0       	rjmp	.+4      	; 0x61be <ioport_get_pin_level+0x64>
    61ba:	88 0f       	add	r24, r24
    61bc:	99 1f       	adc	r25, r25
    61be:	2a 95       	dec	r18
    61c0:	e2 f7       	brpl	.-8      	; 0x61ba <ioport_get_pin_level+0x60>
    61c2:	94 2f       	mov	r25, r20
    61c4:	98 23       	and	r25, r24
    61c6:	81 e0       	ldi	r24, 0x01	; 1
    61c8:	99 23       	and	r25, r25
    61ca:	09 f4       	brne	.+2      	; 0x61ce <ioport_get_pin_level+0x74>
    61cc:	80 e0       	ldi	r24, 0x00	; 0
    61ce:	28 96       	adiw	r28, 0x08	; 8
    61d0:	cd bf       	out	0x3d, r28	; 61
    61d2:	de bf       	out	0x3e, r29	; 62
    61d4:	df 91       	pop	r29
    61d6:	cf 91       	pop	r28
    61d8:	08 95       	ret

000061da <tc_set_overflow_interrupt_level>:
    61da:	cf 93       	push	r28
    61dc:	df 93       	push	r29
    61de:	00 d0       	rcall	.+0      	; 0x61e0 <tc_set_overflow_interrupt_level+0x6>
    61e0:	cd b7       	in	r28, 0x3d	; 61
    61e2:	de b7       	in	r29, 0x3e	; 62
    61e4:	89 83       	std	Y+1, r24	; 0x01
    61e6:	9a 83       	std	Y+2, r25	; 0x02
    61e8:	6b 83       	std	Y+3, r22	; 0x03
    61ea:	89 81       	ldd	r24, Y+1	; 0x01
    61ec:	9a 81       	ldd	r25, Y+2	; 0x02
    61ee:	fc 01       	movw	r30, r24
    61f0:	86 81       	ldd	r24, Z+6	; 0x06
    61f2:	28 2f       	mov	r18, r24
    61f4:	2c 7f       	andi	r18, 0xFC	; 252
    61f6:	89 81       	ldd	r24, Y+1	; 0x01
    61f8:	9a 81       	ldd	r25, Y+2	; 0x02
    61fa:	fc 01       	movw	r30, r24
    61fc:	26 83       	std	Z+6, r18	; 0x06
    61fe:	89 81       	ldd	r24, Y+1	; 0x01
    6200:	9a 81       	ldd	r25, Y+2	; 0x02
    6202:	fc 01       	movw	r30, r24
    6204:	96 81       	ldd	r25, Z+6	; 0x06
    6206:	8b 81       	ldd	r24, Y+3	; 0x03
    6208:	29 2f       	mov	r18, r25
    620a:	28 2b       	or	r18, r24
    620c:	89 81       	ldd	r24, Y+1	; 0x01
    620e:	9a 81       	ldd	r25, Y+2	; 0x02
    6210:	fc 01       	movw	r30, r24
    6212:	26 83       	std	Z+6, r18	; 0x06
    6214:	00 00       	nop
    6216:	23 96       	adiw	r28, 0x03	; 3
    6218:	cd bf       	out	0x3d, r28	; 61
    621a:	de bf       	out	0x3e, r29	; 62
    621c:	df 91       	pop	r29
    621e:	cf 91       	pop	r28
    6220:	08 95       	ret

00006222 <tc_set_cca_interrupt_level>:
    6222:	cf 93       	push	r28
    6224:	df 93       	push	r29
    6226:	00 d0       	rcall	.+0      	; 0x6228 <tc_set_cca_interrupt_level+0x6>
    6228:	cd b7       	in	r28, 0x3d	; 61
    622a:	de b7       	in	r29, 0x3e	; 62
    622c:	89 83       	std	Y+1, r24	; 0x01
    622e:	9a 83       	std	Y+2, r25	; 0x02
    6230:	6b 83       	std	Y+3, r22	; 0x03
    6232:	89 81       	ldd	r24, Y+1	; 0x01
    6234:	9a 81       	ldd	r25, Y+2	; 0x02
    6236:	fc 01       	movw	r30, r24
    6238:	87 81       	ldd	r24, Z+7	; 0x07
    623a:	28 2f       	mov	r18, r24
    623c:	2c 7f       	andi	r18, 0xFC	; 252
    623e:	89 81       	ldd	r24, Y+1	; 0x01
    6240:	9a 81       	ldd	r25, Y+2	; 0x02
    6242:	fc 01       	movw	r30, r24
    6244:	27 83       	std	Z+7, r18	; 0x07
    6246:	89 81       	ldd	r24, Y+1	; 0x01
    6248:	9a 81       	ldd	r25, Y+2	; 0x02
    624a:	fc 01       	movw	r30, r24
    624c:	97 81       	ldd	r25, Z+7	; 0x07
    624e:	8b 81       	ldd	r24, Y+3	; 0x03
    6250:	29 2f       	mov	r18, r25
    6252:	28 2b       	or	r18, r24
    6254:	89 81       	ldd	r24, Y+1	; 0x01
    6256:	9a 81       	ldd	r25, Y+2	; 0x02
    6258:	fc 01       	movw	r30, r24
    625a:	27 83       	std	Z+7, r18	; 0x07
    625c:	00 00       	nop
    625e:	23 96       	adiw	r28, 0x03	; 3
    6260:	cd bf       	out	0x3d, r28	; 61
    6262:	de bf       	out	0x3e, r29	; 62
    6264:	df 91       	pop	r29
    6266:	cf 91       	pop	r28
    6268:	08 95       	ret

0000626a <tc_set_ccb_interrupt_level>:
    626a:	cf 93       	push	r28
    626c:	df 93       	push	r29
    626e:	00 d0       	rcall	.+0      	; 0x6270 <tc_set_ccb_interrupt_level+0x6>
    6270:	cd b7       	in	r28, 0x3d	; 61
    6272:	de b7       	in	r29, 0x3e	; 62
    6274:	89 83       	std	Y+1, r24	; 0x01
    6276:	9a 83       	std	Y+2, r25	; 0x02
    6278:	6b 83       	std	Y+3, r22	; 0x03
    627a:	89 81       	ldd	r24, Y+1	; 0x01
    627c:	9a 81       	ldd	r25, Y+2	; 0x02
    627e:	fc 01       	movw	r30, r24
    6280:	87 81       	ldd	r24, Z+7	; 0x07
    6282:	28 2f       	mov	r18, r24
    6284:	23 7f       	andi	r18, 0xF3	; 243
    6286:	89 81       	ldd	r24, Y+1	; 0x01
    6288:	9a 81       	ldd	r25, Y+2	; 0x02
    628a:	fc 01       	movw	r30, r24
    628c:	27 83       	std	Z+7, r18	; 0x07
    628e:	89 81       	ldd	r24, Y+1	; 0x01
    6290:	9a 81       	ldd	r25, Y+2	; 0x02
    6292:	fc 01       	movw	r30, r24
    6294:	87 81       	ldd	r24, Z+7	; 0x07
    6296:	28 2f       	mov	r18, r24
    6298:	8b 81       	ldd	r24, Y+3	; 0x03
    629a:	88 2f       	mov	r24, r24
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	88 0f       	add	r24, r24
    62a0:	99 1f       	adc	r25, r25
    62a2:	88 0f       	add	r24, r24
    62a4:	99 1f       	adc	r25, r25
    62a6:	82 2b       	or	r24, r18
    62a8:	28 2f       	mov	r18, r24
    62aa:	89 81       	ldd	r24, Y+1	; 0x01
    62ac:	9a 81       	ldd	r25, Y+2	; 0x02
    62ae:	fc 01       	movw	r30, r24
    62b0:	27 83       	std	Z+7, r18	; 0x07
    62b2:	00 00       	nop
    62b4:	23 96       	adiw	r28, 0x03	; 3
    62b6:	cd bf       	out	0x3d, r28	; 61
    62b8:	de bf       	out	0x3e, r29	; 62
    62ba:	df 91       	pop	r29
    62bc:	cf 91       	pop	r28
    62be:	08 95       	ret

000062c0 <tc_write_clock_source>:
    62c0:	cf 93       	push	r28
    62c2:	df 93       	push	r29
    62c4:	00 d0       	rcall	.+0      	; 0x62c6 <tc_write_clock_source+0x6>
    62c6:	cd b7       	in	r28, 0x3d	; 61
    62c8:	de b7       	in	r29, 0x3e	; 62
    62ca:	89 83       	std	Y+1, r24	; 0x01
    62cc:	9a 83       	std	Y+2, r25	; 0x02
    62ce:	6b 83       	std	Y+3, r22	; 0x03
    62d0:	89 81       	ldd	r24, Y+1	; 0x01
    62d2:	9a 81       	ldd	r25, Y+2	; 0x02
    62d4:	fc 01       	movw	r30, r24
    62d6:	80 81       	ld	r24, Z
    62d8:	98 2f       	mov	r25, r24
    62da:	90 7f       	andi	r25, 0xF0	; 240
    62dc:	8b 81       	ldd	r24, Y+3	; 0x03
    62de:	89 2b       	or	r24, r25
    62e0:	28 2f       	mov	r18, r24
    62e2:	89 81       	ldd	r24, Y+1	; 0x01
    62e4:	9a 81       	ldd	r25, Y+2	; 0x02
    62e6:	fc 01       	movw	r30, r24
    62e8:	20 83       	st	Z, r18
    62ea:	00 00       	nop
    62ec:	23 96       	adiw	r28, 0x03	; 3
    62ee:	cd bf       	out	0x3d, r28	; 61
    62f0:	de bf       	out	0x3e, r29	; 62
    62f2:	df 91       	pop	r29
    62f4:	cf 91       	pop	r28
    62f6:	08 95       	ret

000062f8 <tc_write_period>:
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	00 d0       	rcall	.+0      	; 0x62fe <tc_write_period+0x6>
    62fe:	1f 92       	push	r1
    6300:	cd b7       	in	r28, 0x3d	; 61
    6302:	de b7       	in	r29, 0x3e	; 62
    6304:	89 83       	std	Y+1, r24	; 0x01
    6306:	9a 83       	std	Y+2, r25	; 0x02
    6308:	6b 83       	std	Y+3, r22	; 0x03
    630a:	7c 83       	std	Y+4, r23	; 0x04
    630c:	89 81       	ldd	r24, Y+1	; 0x01
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	2b 81       	ldd	r18, Y+3	; 0x03
    6312:	3c 81       	ldd	r19, Y+4	; 0x04
    6314:	fc 01       	movw	r30, r24
    6316:	26 a3       	std	Z+38, r18	; 0x26
    6318:	37 a3       	std	Z+39, r19	; 0x27
    631a:	00 00       	nop
    631c:	24 96       	adiw	r28, 0x04	; 4
    631e:	cd bf       	out	0x3d, r28	; 61
    6320:	de bf       	out	0x3e, r29	; 62
    6322:	df 91       	pop	r29
    6324:	cf 91       	pop	r28
    6326:	08 95       	ret

00006328 <tc_clear_overflow>:
    6328:	cf 93       	push	r28
    632a:	df 93       	push	r29
    632c:	1f 92       	push	r1
    632e:	1f 92       	push	r1
    6330:	cd b7       	in	r28, 0x3d	; 61
    6332:	de b7       	in	r29, 0x3e	; 62
    6334:	89 83       	std	Y+1, r24	; 0x01
    6336:	9a 83       	std	Y+2, r25	; 0x02
    6338:	89 81       	ldd	r24, Y+1	; 0x01
    633a:	9a 81       	ldd	r25, Y+2	; 0x02
    633c:	fc 01       	movw	r30, r24
    633e:	84 85       	ldd	r24, Z+12	; 0x0c
    6340:	28 2f       	mov	r18, r24
    6342:	21 60       	ori	r18, 0x01	; 1
    6344:	89 81       	ldd	r24, Y+1	; 0x01
    6346:	9a 81       	ldd	r25, Y+2	; 0x02
    6348:	fc 01       	movw	r30, r24
    634a:	24 87       	std	Z+12, r18	; 0x0c
    634c:	00 00       	nop
    634e:	0f 90       	pop	r0
    6350:	0f 90       	pop	r0
    6352:	df 91       	pop	r29
    6354:	cf 91       	pop	r28
    6356:	08 95       	ret

00006358 <tc_enable_cc_channels>:
    6358:	cf 93       	push	r28
    635a:	df 93       	push	r29
    635c:	00 d0       	rcall	.+0      	; 0x635e <tc_enable_cc_channels+0x6>
    635e:	cd b7       	in	r28, 0x3d	; 61
    6360:	de b7       	in	r29, 0x3e	; 62
    6362:	89 83       	std	Y+1, r24	; 0x01
    6364:	9a 83       	std	Y+2, r25	; 0x02
    6366:	6b 83       	std	Y+3, r22	; 0x03
    6368:	89 81       	ldd	r24, Y+1	; 0x01
    636a:	9a 81       	ldd	r25, Y+2	; 0x02
    636c:	80 74       	andi	r24, 0x40	; 64
    636e:	99 27       	eor	r25, r25
    6370:	89 2b       	or	r24, r25
    6372:	61 f4       	brne	.+24     	; 0x638c <tc_enable_cc_channels+0x34>
    6374:	89 81       	ldd	r24, Y+1	; 0x01
    6376:	9a 81       	ldd	r25, Y+2	; 0x02
    6378:	fc 01       	movw	r30, r24
    637a:	91 81       	ldd	r25, Z+1	; 0x01
    637c:	8b 81       	ldd	r24, Y+3	; 0x03
    637e:	29 2f       	mov	r18, r25
    6380:	28 2b       	or	r18, r24
    6382:	89 81       	ldd	r24, Y+1	; 0x01
    6384:	9a 81       	ldd	r25, Y+2	; 0x02
    6386:	fc 01       	movw	r30, r24
    6388:	21 83       	std	Z+1, r18	; 0x01
    638a:	13 c0       	rjmp	.+38     	; 0x63b2 <tc_enable_cc_channels+0x5a>
    638c:	89 81       	ldd	r24, Y+1	; 0x01
    638e:	9a 81       	ldd	r25, Y+2	; 0x02
    6390:	80 74       	andi	r24, 0x40	; 64
    6392:	99 27       	eor	r25, r25
    6394:	89 2b       	or	r24, r25
    6396:	69 f0       	breq	.+26     	; 0x63b2 <tc_enable_cc_channels+0x5a>
    6398:	89 81       	ldd	r24, Y+1	; 0x01
    639a:	9a 81       	ldd	r25, Y+2	; 0x02
    639c:	fc 01       	movw	r30, r24
    639e:	81 81       	ldd	r24, Z+1	; 0x01
    63a0:	98 2f       	mov	r25, r24
    63a2:	8b 81       	ldd	r24, Y+3	; 0x03
    63a4:	80 73       	andi	r24, 0x30	; 48
    63a6:	89 2b       	or	r24, r25
    63a8:	28 2f       	mov	r18, r24
    63aa:	89 81       	ldd	r24, Y+1	; 0x01
    63ac:	9a 81       	ldd	r25, Y+2	; 0x02
    63ae:	fc 01       	movw	r30, r24
    63b0:	21 83       	std	Z+1, r18	; 0x01
    63b2:	00 00       	nop
    63b4:	23 96       	adiw	r28, 0x03	; 3
    63b6:	cd bf       	out	0x3d, r28	; 61
    63b8:	de bf       	out	0x3e, r29	; 62
    63ba:	df 91       	pop	r29
    63bc:	cf 91       	pop	r28
    63be:	08 95       	ret

000063c0 <tc_read_cc>:
    63c0:	cf 93       	push	r28
    63c2:	df 93       	push	r29
    63c4:	00 d0       	rcall	.+0      	; 0x63c6 <tc_read_cc+0x6>
    63c6:	cd b7       	in	r28, 0x3d	; 61
    63c8:	de b7       	in	r29, 0x3e	; 62
    63ca:	89 83       	std	Y+1, r24	; 0x01
    63cc:	9a 83       	std	Y+2, r25	; 0x02
    63ce:	6b 83       	std	Y+3, r22	; 0x03
    63d0:	89 81       	ldd	r24, Y+1	; 0x01
    63d2:	9a 81       	ldd	r25, Y+2	; 0x02
    63d4:	80 74       	andi	r24, 0x40	; 64
    63d6:	99 27       	eor	r25, r25
    63d8:	89 2b       	or	r24, r25
    63da:	51 f5       	brne	.+84     	; 0x6430 <tc_read_cc+0x70>
    63dc:	8b 81       	ldd	r24, Y+3	; 0x03
    63de:	88 2f       	mov	r24, r24
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	82 30       	cpi	r24, 0x02	; 2
    63e4:	91 05       	cpc	r25, r1
    63e6:	91 f0       	breq	.+36     	; 0x640c <tc_read_cc+0x4c>
    63e8:	83 30       	cpi	r24, 0x03	; 3
    63ea:	91 05       	cpc	r25, r1
    63ec:	1c f4       	brge	.+6      	; 0x63f4 <tc_read_cc+0x34>
    63ee:	01 97       	sbiw	r24, 0x01	; 1
    63f0:	39 f0       	breq	.+14     	; 0x6400 <tc_read_cc+0x40>
    63f2:	3c c0       	rjmp	.+120    	; 0x646c <tc_read_cc+0xac>
    63f4:	83 30       	cpi	r24, 0x03	; 3
    63f6:	91 05       	cpc	r25, r1
    63f8:	79 f0       	breq	.+30     	; 0x6418 <tc_read_cc+0x58>
    63fa:	04 97       	sbiw	r24, 0x04	; 4
    63fc:	99 f0       	breq	.+38     	; 0x6424 <tc_read_cc+0x64>
    63fe:	36 c0       	rjmp	.+108    	; 0x646c <tc_read_cc+0xac>
    6400:	89 81       	ldd	r24, Y+1	; 0x01
    6402:	9a 81       	ldd	r25, Y+2	; 0x02
    6404:	fc 01       	movw	r30, r24
    6406:	80 a5       	ldd	r24, Z+40	; 0x28
    6408:	91 a5       	ldd	r25, Z+41	; 0x29
    640a:	32 c0       	rjmp	.+100    	; 0x6470 <tc_read_cc+0xb0>
    640c:	89 81       	ldd	r24, Y+1	; 0x01
    640e:	9a 81       	ldd	r25, Y+2	; 0x02
    6410:	fc 01       	movw	r30, r24
    6412:	82 a5       	ldd	r24, Z+42	; 0x2a
    6414:	93 a5       	ldd	r25, Z+43	; 0x2b
    6416:	2c c0       	rjmp	.+88     	; 0x6470 <tc_read_cc+0xb0>
    6418:	89 81       	ldd	r24, Y+1	; 0x01
    641a:	9a 81       	ldd	r25, Y+2	; 0x02
    641c:	fc 01       	movw	r30, r24
    641e:	84 a5       	ldd	r24, Z+44	; 0x2c
    6420:	95 a5       	ldd	r25, Z+45	; 0x2d
    6422:	26 c0       	rjmp	.+76     	; 0x6470 <tc_read_cc+0xb0>
    6424:	89 81       	ldd	r24, Y+1	; 0x01
    6426:	9a 81       	ldd	r25, Y+2	; 0x02
    6428:	fc 01       	movw	r30, r24
    642a:	86 a5       	ldd	r24, Z+46	; 0x2e
    642c:	97 a5       	ldd	r25, Z+47	; 0x2f
    642e:	20 c0       	rjmp	.+64     	; 0x6470 <tc_read_cc+0xb0>
    6430:	89 81       	ldd	r24, Y+1	; 0x01
    6432:	9a 81       	ldd	r25, Y+2	; 0x02
    6434:	80 74       	andi	r24, 0x40	; 64
    6436:	99 27       	eor	r25, r25
    6438:	89 2b       	or	r24, r25
    643a:	c1 f0       	breq	.+48     	; 0x646c <tc_read_cc+0xac>
    643c:	8b 81       	ldd	r24, Y+3	; 0x03
    643e:	88 2f       	mov	r24, r24
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	81 30       	cpi	r24, 0x01	; 1
    6444:	91 05       	cpc	r25, r1
    6446:	19 f0       	breq	.+6      	; 0x644e <tc_read_cc+0x8e>
    6448:	02 97       	sbiw	r24, 0x02	; 2
    644a:	39 f0       	breq	.+14     	; 0x645a <tc_read_cc+0x9a>
    644c:	0c c0       	rjmp	.+24     	; 0x6466 <tc_read_cc+0xa6>
    644e:	89 81       	ldd	r24, Y+1	; 0x01
    6450:	9a 81       	ldd	r25, Y+2	; 0x02
    6452:	fc 01       	movw	r30, r24
    6454:	80 a5       	ldd	r24, Z+40	; 0x28
    6456:	91 a5       	ldd	r25, Z+41	; 0x29
    6458:	0b c0       	rjmp	.+22     	; 0x6470 <tc_read_cc+0xb0>
    645a:	89 81       	ldd	r24, Y+1	; 0x01
    645c:	9a 81       	ldd	r25, Y+2	; 0x02
    645e:	fc 01       	movw	r30, r24
    6460:	82 a5       	ldd	r24, Z+42	; 0x2a
    6462:	93 a5       	ldd	r25, Z+43	; 0x2b
    6464:	05 c0       	rjmp	.+10     	; 0x6470 <tc_read_cc+0xb0>
    6466:	80 e0       	ldi	r24, 0x00	; 0
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	02 c0       	rjmp	.+4      	; 0x6470 <tc_read_cc+0xb0>
    646c:	80 e0       	ldi	r24, 0x00	; 0
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	23 96       	adiw	r28, 0x03	; 3
    6472:	cd bf       	out	0x3d, r28	; 61
    6474:	de bf       	out	0x3e, r29	; 62
    6476:	df 91       	pop	r29
    6478:	cf 91       	pop	r28
    647a:	08 95       	ret

0000647c <tc_write_cc>:
    647c:	cf 93       	push	r28
    647e:	df 93       	push	r29
    6480:	cd b7       	in	r28, 0x3d	; 61
    6482:	de b7       	in	r29, 0x3e	; 62
    6484:	25 97       	sbiw	r28, 0x05	; 5
    6486:	cd bf       	out	0x3d, r28	; 61
    6488:	de bf       	out	0x3e, r29	; 62
    648a:	89 83       	std	Y+1, r24	; 0x01
    648c:	9a 83       	std	Y+2, r25	; 0x02
    648e:	6b 83       	std	Y+3, r22	; 0x03
    6490:	4c 83       	std	Y+4, r20	; 0x04
    6492:	5d 83       	std	Y+5, r21	; 0x05
    6494:	89 81       	ldd	r24, Y+1	; 0x01
    6496:	9a 81       	ldd	r25, Y+2	; 0x02
    6498:	80 74       	andi	r24, 0x40	; 64
    649a:	99 27       	eor	r25, r25
    649c:	89 2b       	or	r24, r25
    649e:	99 f5       	brne	.+102    	; 0x6506 <tc_write_cc+0x8a>
    64a0:	8b 81       	ldd	r24, Y+3	; 0x03
    64a2:	88 2f       	mov	r24, r24
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	82 30       	cpi	r24, 0x02	; 2
    64a8:	91 05       	cpc	r25, r1
    64aa:	a1 f0       	breq	.+40     	; 0x64d4 <tc_write_cc+0x58>
    64ac:	83 30       	cpi	r24, 0x03	; 3
    64ae:	91 05       	cpc	r25, r1
    64b0:	1c f4       	brge	.+6      	; 0x64b8 <tc_write_cc+0x3c>
    64b2:	01 97       	sbiw	r24, 0x01	; 1
    64b4:	39 f0       	breq	.+14     	; 0x64c4 <tc_write_cc+0x48>
    64b6:	46 c0       	rjmp	.+140    	; 0x6544 <tc_write_cc+0xc8>
    64b8:	83 30       	cpi	r24, 0x03	; 3
    64ba:	91 05       	cpc	r25, r1
    64bc:	99 f0       	breq	.+38     	; 0x64e4 <tc_write_cc+0x68>
    64be:	04 97       	sbiw	r24, 0x04	; 4
    64c0:	c9 f0       	breq	.+50     	; 0x64f4 <tc_write_cc+0x78>
    64c2:	40 c0       	rjmp	.+128    	; 0x6544 <tc_write_cc+0xc8>
    64c4:	89 81       	ldd	r24, Y+1	; 0x01
    64c6:	9a 81       	ldd	r25, Y+2	; 0x02
    64c8:	2c 81       	ldd	r18, Y+4	; 0x04
    64ca:	3d 81       	ldd	r19, Y+5	; 0x05
    64cc:	fc 01       	movw	r30, r24
    64ce:	20 a7       	std	Z+40, r18	; 0x28
    64d0:	31 a7       	std	Z+41, r19	; 0x29
    64d2:	38 c0       	rjmp	.+112    	; 0x6544 <tc_write_cc+0xc8>
    64d4:	89 81       	ldd	r24, Y+1	; 0x01
    64d6:	9a 81       	ldd	r25, Y+2	; 0x02
    64d8:	2c 81       	ldd	r18, Y+4	; 0x04
    64da:	3d 81       	ldd	r19, Y+5	; 0x05
    64dc:	fc 01       	movw	r30, r24
    64de:	22 a7       	std	Z+42, r18	; 0x2a
    64e0:	33 a7       	std	Z+43, r19	; 0x2b
    64e2:	30 c0       	rjmp	.+96     	; 0x6544 <tc_write_cc+0xc8>
    64e4:	89 81       	ldd	r24, Y+1	; 0x01
    64e6:	9a 81       	ldd	r25, Y+2	; 0x02
    64e8:	2c 81       	ldd	r18, Y+4	; 0x04
    64ea:	3d 81       	ldd	r19, Y+5	; 0x05
    64ec:	fc 01       	movw	r30, r24
    64ee:	24 a7       	std	Z+44, r18	; 0x2c
    64f0:	35 a7       	std	Z+45, r19	; 0x2d
    64f2:	28 c0       	rjmp	.+80     	; 0x6544 <tc_write_cc+0xc8>
    64f4:	89 81       	ldd	r24, Y+1	; 0x01
    64f6:	9a 81       	ldd	r25, Y+2	; 0x02
    64f8:	2c 81       	ldd	r18, Y+4	; 0x04
    64fa:	3d 81       	ldd	r19, Y+5	; 0x05
    64fc:	fc 01       	movw	r30, r24
    64fe:	26 a7       	std	Z+46, r18	; 0x2e
    6500:	37 a7       	std	Z+47, r19	; 0x2f
    6502:	00 00       	nop
    6504:	1f c0       	rjmp	.+62     	; 0x6544 <tc_write_cc+0xc8>
    6506:	89 81       	ldd	r24, Y+1	; 0x01
    6508:	9a 81       	ldd	r25, Y+2	; 0x02
    650a:	80 74       	andi	r24, 0x40	; 64
    650c:	99 27       	eor	r25, r25
    650e:	89 2b       	or	r24, r25
    6510:	c9 f0       	breq	.+50     	; 0x6544 <tc_write_cc+0xc8>
    6512:	8b 81       	ldd	r24, Y+3	; 0x03
    6514:	88 2f       	mov	r24, r24
    6516:	90 e0       	ldi	r25, 0x00	; 0
    6518:	81 30       	cpi	r24, 0x01	; 1
    651a:	91 05       	cpc	r25, r1
    651c:	19 f0       	breq	.+6      	; 0x6524 <tc_write_cc+0xa8>
    651e:	02 97       	sbiw	r24, 0x02	; 2
    6520:	49 f0       	breq	.+18     	; 0x6534 <tc_write_cc+0xb8>
    6522:	10 c0       	rjmp	.+32     	; 0x6544 <tc_write_cc+0xc8>
    6524:	89 81       	ldd	r24, Y+1	; 0x01
    6526:	9a 81       	ldd	r25, Y+2	; 0x02
    6528:	2c 81       	ldd	r18, Y+4	; 0x04
    652a:	3d 81       	ldd	r19, Y+5	; 0x05
    652c:	fc 01       	movw	r30, r24
    652e:	20 a7       	std	Z+40, r18	; 0x28
    6530:	31 a7       	std	Z+41, r19	; 0x29
    6532:	08 c0       	rjmp	.+16     	; 0x6544 <tc_write_cc+0xc8>
    6534:	89 81       	ldd	r24, Y+1	; 0x01
    6536:	9a 81       	ldd	r25, Y+2	; 0x02
    6538:	2c 81       	ldd	r18, Y+4	; 0x04
    653a:	3d 81       	ldd	r19, Y+5	; 0x05
    653c:	fc 01       	movw	r30, r24
    653e:	22 a7       	std	Z+42, r18	; 0x2a
    6540:	33 a7       	std	Z+43, r19	; 0x2b
    6542:	00 00       	nop
    6544:	25 96       	adiw	r28, 0x05	; 5
    6546:	cd bf       	out	0x3d, r28	; 61
    6548:	de bf       	out	0x3e, r29	; 62
    654a:	df 91       	pop	r29
    654c:	cf 91       	pop	r28
    654e:	08 95       	ret

00006550 <tc_set_wgm>:
    6550:	cf 93       	push	r28
    6552:	df 93       	push	r29
    6554:	00 d0       	rcall	.+0      	; 0x6556 <tc_set_wgm+0x6>
    6556:	cd b7       	in	r28, 0x3d	; 61
    6558:	de b7       	in	r29, 0x3e	; 62
    655a:	89 83       	std	Y+1, r24	; 0x01
    655c:	9a 83       	std	Y+2, r25	; 0x02
    655e:	6b 83       	std	Y+3, r22	; 0x03
    6560:	89 81       	ldd	r24, Y+1	; 0x01
    6562:	9a 81       	ldd	r25, Y+2	; 0x02
    6564:	fc 01       	movw	r30, r24
    6566:	81 81       	ldd	r24, Z+1	; 0x01
    6568:	98 2f       	mov	r25, r24
    656a:	98 7f       	andi	r25, 0xF8	; 248
    656c:	8b 81       	ldd	r24, Y+3	; 0x03
    656e:	89 2b       	or	r24, r25
    6570:	28 2f       	mov	r18, r24
    6572:	89 81       	ldd	r24, Y+1	; 0x01
    6574:	9a 81       	ldd	r25, Y+2	; 0x02
    6576:	fc 01       	movw	r30, r24
    6578:	21 83       	std	Z+1, r18	; 0x01
    657a:	00 00       	nop
    657c:	23 96       	adiw	r28, 0x03	; 3
    657e:	cd bf       	out	0x3d, r28	; 61
    6580:	de bf       	out	0x3e, r29	; 62
    6582:	df 91       	pop	r29
    6584:	cf 91       	pop	r28
    6586:	08 95       	ret

00006588 <__vector_34>:
    6588:	1f 92       	push	r1
    658a:	0f 92       	push	r0
    658c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6590:	0f 92       	push	r0
    6592:	11 24       	eor	r1, r1
    6594:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6598:	0f 92       	push	r0
    659a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    659e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    65a2:	0f 92       	push	r0
    65a4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    65a8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    65ac:	0f 92       	push	r0
    65ae:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    65b2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    65b6:	0f 92       	push	r0
    65b8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    65bc:	2f 93       	push	r18
    65be:	3f 93       	push	r19
    65c0:	4f 93       	push	r20
    65c2:	5f 93       	push	r21
    65c4:	6f 93       	push	r22
    65c6:	7f 93       	push	r23
    65c8:	8f 93       	push	r24
    65ca:	9f 93       	push	r25
    65cc:	af 93       	push	r26
    65ce:	bf 93       	push	r27
    65d0:	ef 93       	push	r30
    65d2:	ff 93       	push	r31
    65d4:	cf 93       	push	r28
    65d6:	df 93       	push	r29
    65d8:	1f 92       	push	r1
    65da:	cd b7       	in	r28, 0x3d	; 61
    65dc:	de b7       	in	r29, 0x3e	; 62
    65de:	19 82       	std	Y+1, r1	; 0x01
    65e0:	8a e0       	ldi	r24, 0x0A	; 10
    65e2:	bb dd       	rcall	.-1162   	; 0x615a <ioport_get_pin_level>
    65e4:	89 83       	std	Y+1, r24	; 0x01
    65e6:	89 81       	ldd	r24, Y+1	; 0x01
    65e8:	88 23       	and	r24, r24
    65ea:	41 f4       	brne	.+16     	; 0x65fc <__vector_34+0x74>
    65ec:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <systemMotors+0x2>
    65f0:	81 30       	cpi	r24, 0x01	; 1
    65f2:	21 f4       	brne	.+8      	; 0x65fc <__vector_34+0x74>
    65f4:	8d e2       	ldi	r24, 0x2D	; 45
    65f6:	98 e2       	ldi	r25, 0x28	; 40
    65f8:	0e 94 3a 8f 	call	0x11e74	; 0x11e74 <stop_motor>
    65fc:	82 e0       	ldi	r24, 0x02	; 2
    65fe:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <LEDState>
    6602:	00 00       	nop
    6604:	0f 90       	pop	r0
    6606:	df 91       	pop	r29
    6608:	cf 91       	pop	r28
    660a:	ff 91       	pop	r31
    660c:	ef 91       	pop	r30
    660e:	bf 91       	pop	r27
    6610:	af 91       	pop	r26
    6612:	9f 91       	pop	r25
    6614:	8f 91       	pop	r24
    6616:	7f 91       	pop	r23
    6618:	6f 91       	pop	r22
    661a:	5f 91       	pop	r21
    661c:	4f 91       	pop	r20
    661e:	3f 91       	pop	r19
    6620:	2f 91       	pop	r18
    6622:	0f 90       	pop	r0
    6624:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    6628:	0f 90       	pop	r0
    662a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    662e:	0f 90       	pop	r0
    6630:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    6634:	0f 90       	pop	r0
    6636:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    663a:	0f 90       	pop	r0
    663c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6640:	0f 90       	pop	r0
    6642:	1f 90       	pop	r1
    6644:	18 95       	reti

00006646 <__vector_2>:
    6646:	1f 92       	push	r1
    6648:	0f 92       	push	r0
    664a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    664e:	0f 92       	push	r0
    6650:	11 24       	eor	r1, r1
    6652:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    6656:	0f 92       	push	r0
    6658:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    665c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6660:	0f 92       	push	r0
    6662:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6666:	8f 93       	push	r24
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	cd b7       	in	r28, 0x3d	; 61
    666e:	de b7       	in	r29, 0x3e	; 62
    6670:	81 e0       	ldi	r24, 0x01	; 1
    6672:	80 93 b8 21 	sts	0x21B8, r24	; 0x8021b8 <RTDMsgAvailable>
    6676:	00 00       	nop
    6678:	df 91       	pop	r29
    667a:	cf 91       	pop	r28
    667c:	8f 91       	pop	r24
    667e:	0f 90       	pop	r0
    6680:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    6684:	0f 90       	pop	r0
    6686:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    668a:	0f 90       	pop	r0
    668c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    6690:	0f 90       	pop	r0
    6692:	1f 90       	pop	r1
    6694:	18 95       	reti

00006696 <sys_clk_overflow_callback>:
    6696:	cf 93       	push	r28
    6698:	df 93       	push	r29
    669a:	1f 92       	push	r1
    669c:	cd b7       	in	r28, 0x3d	; 61
    669e:	de b7       	in	r29, 0x3e	; 62
    66a0:	80 91 8c 21 	lds	r24, 0x218C	; 0x80218c <__data_end>
    66a4:	90 91 8d 21 	lds	r25, 0x218D	; 0x80218d <__data_end+0x1>
    66a8:	a0 91 8e 21 	lds	r26, 0x218E	; 0x80218e <__data_end+0x2>
    66ac:	b0 91 8f 21 	lds	r27, 0x218F	; 0x80218f <__data_end+0x3>
    66b0:	01 96       	adiw	r24, 0x01	; 1
    66b2:	a1 1d       	adc	r26, r1
    66b4:	b1 1d       	adc	r27, r1
    66b6:	80 93 8c 21 	sts	0x218C, r24	; 0x80218c <__data_end>
    66ba:	90 93 8d 21 	sts	0x218D, r25	; 0x80218d <__data_end+0x1>
    66be:	a0 93 8e 21 	sts	0x218E, r26	; 0x80218e <__data_end+0x2>
    66c2:	b0 93 8f 21 	sts	0x218F, r27	; 0x80218f <__data_end+0x3>
    66c6:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    66ca:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    66ce:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    66d2:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    66d6:	01 96       	adiw	r24, 0x01	; 1
    66d8:	a1 1d       	adc	r26, r1
    66da:	b1 1d       	adc	r27, r1
    66dc:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <blinkTimeLED_ms>
    66e0:	90 93 91 21 	sts	0x2191, r25	; 0x802191 <blinkTimeLED_ms+0x1>
    66e4:	a0 93 92 21 	sts	0x2192, r26	; 0x802192 <blinkTimeLED_ms+0x2>
    66e8:	b0 93 93 21 	sts	0x2193, r27	; 0x802193 <blinkTimeLED_ms+0x3>
    66ec:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <pumpTime_ms>
    66f0:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <pumpTime_ms+0x1>
    66f4:	a0 91 96 21 	lds	r26, 0x2196	; 0x802196 <pumpTime_ms+0x2>
    66f8:	b0 91 97 21 	lds	r27, 0x2197	; 0x802197 <pumpTime_ms+0x3>
    66fc:	01 96       	adiw	r24, 0x01	; 1
    66fe:	a1 1d       	adc	r26, r1
    6700:	b1 1d       	adc	r27, r1
    6702:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <pumpTime_ms>
    6706:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <pumpTime_ms+0x1>
    670a:	a0 93 96 21 	sts	0x2196, r26	; 0x802196 <pumpTime_ms+0x2>
    670e:	b0 93 97 21 	sts	0x2197, r27	; 0x802197 <pumpTime_ms+0x3>
    6712:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <tempPIDUpdate_ms>
    6716:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <tempPIDUpdate_ms+0x1>
    671a:	a0 91 9a 21 	lds	r26, 0x219A	; 0x80219a <tempPIDUpdate_ms+0x2>
    671e:	b0 91 9b 21 	lds	r27, 0x219B	; 0x80219b <tempPIDUpdate_ms+0x3>
    6722:	01 96       	adiw	r24, 0x01	; 1
    6724:	a1 1d       	adc	r26, r1
    6726:	b1 1d       	adc	r27, r1
    6728:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <tempPIDUpdate_ms>
    672c:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <tempPIDUpdate_ms+0x1>
    6730:	a0 93 9a 21 	sts	0x219A, r26	; 0x80219a <tempPIDUpdate_ms+0x2>
    6734:	b0 93 9b 21 	sts	0x219B, r27	; 0x80219b <tempPIDUpdate_ms+0x3>
    6738:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <tempUpdate_ms>
    673c:	90 91 9d 21 	lds	r25, 0x219D	; 0x80219d <tempUpdate_ms+0x1>
    6740:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <tempUpdate_ms+0x2>
    6744:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <tempUpdate_ms+0x3>
    6748:	01 96       	adiw	r24, 0x01	; 1
    674a:	a1 1d       	adc	r26, r1
    674c:	b1 1d       	adc	r27, r1
    674e:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <tempUpdate_ms>
    6752:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <tempUpdate_ms+0x1>
    6756:	a0 93 9e 21 	sts	0x219E, r26	; 0x80219e <tempUpdate_ms+0x2>
    675a:	b0 93 9f 21 	sts	0x219F, r27	; 0x80219f <tempUpdate_ms+0x3>
    675e:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <watchdogTime_ms>
    6762:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <watchdogTime_ms+0x1>
    6766:	a0 91 aa 21 	lds	r26, 0x21AA	; 0x8021aa <watchdogTime_ms+0x2>
    676a:	b0 91 ab 21 	lds	r27, 0x21AB	; 0x8021ab <watchdogTime_ms+0x3>
    676e:	01 96       	adiw	r24, 0x01	; 1
    6770:	a1 1d       	adc	r26, r1
    6772:	b1 1d       	adc	r27, r1
    6774:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <watchdogTime_ms>
    6778:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <watchdogTime_ms+0x1>
    677c:	a0 93 aa 21 	sts	0x21AA, r26	; 0x8021aa <watchdogTime_ms+0x2>
    6780:	b0 93 ab 21 	sts	0x21AB, r27	; 0x8021ab <watchdogTime_ms+0x3>
    6784:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <TECTime_ms>
    6788:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <TECTime_ms+0x1>
    678c:	a0 91 a6 21 	lds	r26, 0x21A6	; 0x8021a6 <TECTime_ms+0x2>
    6790:	b0 91 a7 21 	lds	r27, 0x21A7	; 0x8021a7 <TECTime_ms+0x3>
    6794:	01 96       	adiw	r24, 0x01	; 1
    6796:	a1 1d       	adc	r26, r1
    6798:	b1 1d       	adc	r27, r1
    679a:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <TECTime_ms>
    679e:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <TECTime_ms+0x1>
    67a2:	a0 93 a6 21 	sts	0x21A6, r26	; 0x8021a6 <TECTime_ms+0x2>
    67a6:	b0 93 a7 21 	sts	0x21A7, r27	; 0x8021a7 <TECTime_ms+0x3>
    67aa:	19 82       	std	Y+1, r1	; 0x01
    67ac:	33 c0       	rjmp	.+102    	; 0x6814 <sys_clk_overflow_callback+0x17e>
    67ae:	89 81       	ldd	r24, Y+1	; 0x01
    67b0:	28 2f       	mov	r18, r24
    67b2:	30 e0       	ldi	r19, 0x00	; 0
    67b4:	47 e4       	ldi	r20, 0x47	; 71
    67b6:	42 9f       	mul	r20, r18
    67b8:	c0 01       	movw	r24, r0
    67ba:	43 9f       	mul	r20, r19
    67bc:	90 0d       	add	r25, r0
    67be:	11 24       	eor	r1, r1
    67c0:	80 5d       	subi	r24, 0xD0	; 208
    67c2:	97 4d       	sbci	r25, 0xD7	; 215
    67c4:	fc 01       	movw	r30, r24
    67c6:	80 81       	ld	r24, Z
    67c8:	88 23       	and	r24, r24
    67ca:	09 f1       	breq	.+66     	; 0x680e <sys_clk_overflow_callback+0x178>
    67cc:	89 81       	ldd	r24, Y+1	; 0x01
    67ce:	28 2f       	mov	r18, r24
    67d0:	30 e0       	ldi	r19, 0x00	; 0
    67d2:	47 e4       	ldi	r20, 0x47	; 71
    67d4:	42 9f       	mul	r20, r18
    67d6:	c0 01       	movw	r24, r0
    67d8:	43 9f       	mul	r20, r19
    67da:	90 0d       	add	r25, r0
    67dc:	11 24       	eor	r1, r1
    67de:	8f 5c       	subi	r24, 0xCF	; 207
    67e0:	97 4d       	sbci	r25, 0xD7	; 215
    67e2:	fc 01       	movw	r30, r24
    67e4:	80 81       	ld	r24, Z
    67e6:	91 81       	ldd	r25, Z+1	; 0x01
    67e8:	a2 81       	ldd	r26, Z+2	; 0x02
    67ea:	b3 81       	ldd	r27, Z+3	; 0x03
    67ec:	01 96       	adiw	r24, 0x01	; 1
    67ee:	a1 1d       	adc	r26, r1
    67f0:	b1 1d       	adc	r27, r1
    67f2:	67 e4       	ldi	r22, 0x47	; 71
    67f4:	62 9f       	mul	r22, r18
    67f6:	a0 01       	movw	r20, r0
    67f8:	63 9f       	mul	r22, r19
    67fa:	50 0d       	add	r21, r0
    67fc:	11 24       	eor	r1, r1
    67fe:	9a 01       	movw	r18, r20
    6800:	2f 5c       	subi	r18, 0xCF	; 207
    6802:	37 4d       	sbci	r19, 0xD7	; 215
    6804:	f9 01       	movw	r30, r18
    6806:	80 83       	st	Z, r24
    6808:	91 83       	std	Z+1, r25	; 0x01
    680a:	a2 83       	std	Z+2, r26	; 0x02
    680c:	b3 83       	std	Z+3, r27	; 0x03
    680e:	89 81       	ldd	r24, Y+1	; 0x01
    6810:	8f 5f       	subi	r24, 0xFF	; 255
    6812:	89 83       	std	Y+1, r24	; 0x01
    6814:	89 81       	ldd	r24, Y+1	; 0x01
    6816:	84 30       	cpi	r24, 0x04	; 4
    6818:	50 f2       	brcs	.-108    	; 0x67ae <sys_clk_overflow_callback+0x118>
    681a:	80 e4       	ldi	r24, 0x40	; 64
    681c:	98 e0       	ldi	r25, 0x08	; 8
    681e:	84 dd       	rcall	.-1272   	; 0x6328 <tc_clear_overflow>
    6820:	00 00       	nop
    6822:	0f 90       	pop	r0
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	08 95       	ret

0000682a <heater_cc_overflow_callback>:
    682a:	cf 93       	push	r28
    682c:	df 93       	push	r29
    682e:	cd b7       	in	r28, 0x3d	; 61
    6830:	de b7       	in	r29, 0x3e	; 62
    6832:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <heaterEnabled>
    6836:	88 23       	and	r24, r24
    6838:	11 f0       	breq	.+4      	; 0x683e <heater_cc_overflow_callback+0x14>
    683a:	81 e1       	ldi	r24, 0x11	; 17
    683c:	d6 db       	rcall	.-2132   	; 0x5fea <ioport_set_pin_high>
    683e:	00 00       	nop
    6840:	df 91       	pop	r29
    6842:	cf 91       	pop	r28
    6844:	08 95       	ret

00006846 <fan_cc_overflow_callback>:
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
    684a:	cd b7       	in	r28, 0x3d	; 61
    684c:	de b7       	in	r29, 0x3e	; 62
    684e:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <fanEnabled>
    6852:	88 23       	and	r24, r24
    6854:	11 f0       	breq	.+4      	; 0x685a <fan_cc_overflow_callback+0x14>
    6856:	82 e2       	ldi	r24, 0x22	; 34
    6858:	c8 db       	rcall	.-2160   	; 0x5fea <ioport_set_pin_high>
    685a:	00 00       	nop
    685c:	df 91       	pop	r29
    685e:	cf 91       	pop	r28
    6860:	08 95       	ret

00006862 <heater_timer_overflow_callback>:
    6862:	cf 93       	push	r28
    6864:	df 93       	push	r29
    6866:	cd b7       	in	r28, 0x3d	; 61
    6868:	de b7       	in	r29, 0x3e	; 62
    686a:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <heaterEnabled>
    686e:	88 23       	and	r24, r24
    6870:	11 f0       	breq	.+4      	; 0x6876 <heater_timer_overflow_callback+0x14>
    6872:	81 e1       	ldi	r24, 0x11	; 17
    6874:	65 db       	rcall	.-2358   	; 0x5f40 <ioport_set_pin_low>
    6876:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <fanEnabled>
    687a:	88 23       	and	r24, r24
    687c:	11 f0       	breq	.+4      	; 0x6882 <heater_timer_overflow_callback+0x20>
    687e:	82 e2       	ldi	r24, 0x22	; 34
    6880:	5f db       	rcall	.-2370   	; 0x5f40 <ioport_set_pin_low>
    6882:	00 00       	nop
    6884:	df 91       	pop	r29
    6886:	cf 91       	pop	r28
    6888:	08 95       	ret

0000688a <rod_position_timer_overflow_callback>:
    688a:	ef 92       	push	r14
    688c:	ff 92       	push	r15
    688e:	0f 93       	push	r16
    6890:	1f 93       	push	r17
    6892:	cf 93       	push	r28
    6894:	df 93       	push	r29
    6896:	cd b7       	in	r28, 0x3d	; 61
    6898:	de b7       	in	r29, 0x3e	; 62
    689a:	80 91 4b 28 	lds	r24, 0x284B	; 0x80284b <systemMotors+0x1e>
    689e:	88 23       	and	r24, r24
    68a0:	09 f4       	brne	.+2      	; 0x68a4 <rod_position_timer_overflow_callback+0x1a>
    68a2:	3e c0       	rjmp	.+124    	; 0x6920 <rod_position_timer_overflow_callback+0x96>
    68a4:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <systemMotors+0x1c>
    68a8:	90 91 4a 28 	lds	r25, 0x284A	; 0x80284a <systemMotors+0x1d>
    68ac:	cc 01       	movw	r24, r24
    68ae:	a0 e0       	ldi	r26, 0x00	; 0
    68b0:	b0 e0       	ldi	r27, 0x00	; 0
    68b2:	bc 01       	movw	r22, r24
    68b4:	cd 01       	movw	r24, r26
    68b6:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    68ba:	7b 01       	movw	r14, r22
    68bc:	8c 01       	movw	r16, r24
    68be:	80 91 d5 21 	lds	r24, 0x21D5	; 0x8021d5 <adjSteps>
    68c2:	90 91 d6 21 	lds	r25, 0x21D6	; 0x8021d6 <adjSteps+0x1>
    68c6:	a0 91 d7 21 	lds	r26, 0x21D7	; 0x8021d7 <adjSteps+0x2>
    68ca:	b0 91 d8 21 	lds	r27, 0x21D8	; 0x8021d8 <adjSteps+0x3>
    68ce:	9c 01       	movw	r18, r24
    68d0:	ad 01       	movw	r20, r26
    68d2:	c8 01       	movw	r24, r16
    68d4:	b7 01       	movw	r22, r14
    68d6:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
    68da:	18 16       	cp	r1, r24
    68dc:	54 f4       	brge	.+20     	; 0x68f2 <rod_position_timer_overflow_callback+0x68>
    68de:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <systemMotors+0x1c>
    68e2:	90 91 4a 28 	lds	r25, 0x284A	; 0x80284a <systemMotors+0x1d>
    68e6:	01 97       	sbiw	r24, 0x01	; 1
    68e8:	80 93 49 28 	sts	0x2849, r24	; 0x802849 <systemMotors+0x1c>
    68ec:	90 93 4a 28 	sts	0x284A, r25	; 0x80284a <systemMotors+0x1d>
    68f0:	17 c0       	rjmp	.+46     	; 0x6920 <rod_position_timer_overflow_callback+0x96>
    68f2:	80 91 30 28 	lds	r24, 0x2830	; 0x802830 <systemMotors+0x3>
    68f6:	88 23       	and	r24, r24
    68f8:	21 f0       	breq	.+8      	; 0x6902 <rod_position_timer_overflow_callback+0x78>
    68fa:	8d e2       	ldi	r24, 0x2D	; 45
    68fc:	98 e2       	ldi	r25, 0x28	; 40
    68fe:	0e 94 3a 8f 	call	0x11e74	; 0x11e74 <stop_motor>
    6902:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <systemMotors+0x1c>
    6906:	90 91 4a 28 	lds	r25, 0x284A	; 0x80284a <systemMotors+0x1d>
    690a:	89 2b       	or	r24, r25
    690c:	49 f0       	breq	.+18     	; 0x6920 <rod_position_timer_overflow_callback+0x96>
    690e:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <systemMotors+0x1c>
    6912:	90 91 4a 28 	lds	r25, 0x284A	; 0x80284a <systemMotors+0x1d>
    6916:	01 97       	sbiw	r24, 0x01	; 1
    6918:	80 93 49 28 	sts	0x2849, r24	; 0x802849 <systemMotors+0x1c>
    691c:	90 93 4a 28 	sts	0x284A, r25	; 0x80284a <systemMotors+0x1d>
    6920:	00 00       	nop
    6922:	df 91       	pop	r29
    6924:	cf 91       	pop	r28
    6926:	1f 91       	pop	r17
    6928:	0f 91       	pop	r16
    692a:	ff 90       	pop	r15
    692c:	ef 90       	pop	r14
    692e:	08 95       	ret

00006930 <mixer_timer_overflow_callback>:
    6930:	ef 92       	push	r14
    6932:	ff 92       	push	r15
    6934:	0f 93       	push	r16
    6936:	1f 93       	push	r17
    6938:	cf 93       	push	r28
    693a:	df 93       	push	r29
    693c:	cd b7       	in	r28, 0x3d	; 61
    693e:	de b7       	in	r29, 0x3e	; 62
    6940:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <systemMotors+0x65>
    6944:	88 23       	and	r24, r24
    6946:	09 f4       	brne	.+2      	; 0x694a <mixer_timer_overflow_callback+0x1a>
    6948:	3e c0       	rjmp	.+124    	; 0x69c6 <mixer_timer_overflow_callback+0x96>
    694a:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <systemMotors+0x63>
    694e:	90 91 91 28 	lds	r25, 0x2891	; 0x802891 <systemMotors+0x64>
    6952:	cc 01       	movw	r24, r24
    6954:	a0 e0       	ldi	r26, 0x00	; 0
    6956:	b0 e0       	ldi	r27, 0x00	; 0
    6958:	bc 01       	movw	r22, r24
    695a:	cd 01       	movw	r24, r26
    695c:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    6960:	7b 01       	movw	r14, r22
    6962:	8c 01       	movw	r16, r24
    6964:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <adjSteps+0x4>
    6968:	90 91 da 21 	lds	r25, 0x21DA	; 0x8021da <adjSteps+0x5>
    696c:	a0 91 db 21 	lds	r26, 0x21DB	; 0x8021db <adjSteps+0x6>
    6970:	b0 91 dc 21 	lds	r27, 0x21DC	; 0x8021dc <adjSteps+0x7>
    6974:	9c 01       	movw	r18, r24
    6976:	ad 01       	movw	r20, r26
    6978:	c8 01       	movw	r24, r16
    697a:	b7 01       	movw	r22, r14
    697c:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
    6980:	18 16       	cp	r1, r24
    6982:	54 f4       	brge	.+20     	; 0x6998 <mixer_timer_overflow_callback+0x68>
    6984:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <systemMotors+0x63>
    6988:	90 91 91 28 	lds	r25, 0x2891	; 0x802891 <systemMotors+0x64>
    698c:	01 97       	sbiw	r24, 0x01	; 1
    698e:	80 93 90 28 	sts	0x2890, r24	; 0x802890 <systemMotors+0x63>
    6992:	90 93 91 28 	sts	0x2891, r25	; 0x802891 <systemMotors+0x64>
    6996:	17 c0       	rjmp	.+46     	; 0x69c6 <mixer_timer_overflow_callback+0x96>
    6998:	80 91 77 28 	lds	r24, 0x2877	; 0x802877 <systemMotors+0x4a>
    699c:	88 23       	and	r24, r24
    699e:	21 f0       	breq	.+8      	; 0x69a8 <mixer_timer_overflow_callback+0x78>
    69a0:	84 e7       	ldi	r24, 0x74	; 116
    69a2:	98 e2       	ldi	r25, 0x28	; 40
    69a4:	0e 94 3a 8f 	call	0x11e74	; 0x11e74 <stop_motor>
    69a8:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <systemMotors+0x63>
    69ac:	90 91 91 28 	lds	r25, 0x2891	; 0x802891 <systemMotors+0x64>
    69b0:	89 2b       	or	r24, r25
    69b2:	49 f0       	breq	.+18     	; 0x69c6 <mixer_timer_overflow_callback+0x96>
    69b4:	80 91 90 28 	lds	r24, 0x2890	; 0x802890 <systemMotors+0x63>
    69b8:	90 91 91 28 	lds	r25, 0x2891	; 0x802891 <systemMotors+0x64>
    69bc:	01 97       	sbiw	r24, 0x01	; 1
    69be:	80 93 90 28 	sts	0x2890, r24	; 0x802890 <systemMotors+0x63>
    69c2:	90 93 91 28 	sts	0x2891, r25	; 0x802891 <systemMotors+0x64>
    69c6:	00 00       	nop
    69c8:	df 91       	pop	r29
    69ca:	cf 91       	pop	r28
    69cc:	1f 91       	pop	r17
    69ce:	0f 91       	pop	r16
    69d0:	ff 90       	pop	r15
    69d2:	ef 90       	pop	r14
    69d4:	08 95       	ret

000069d6 <lower_mixer_timer_overflow_callback>:
    69d6:	ef 92       	push	r14
    69d8:	ff 92       	push	r15
    69da:	0f 93       	push	r16
    69dc:	1f 93       	push	r17
    69de:	cf 93       	push	r28
    69e0:	df 93       	push	r29
    69e2:	cd b7       	in	r28, 0x3d	; 61
    69e4:	de b7       	in	r29, 0x3e	; 62
    69e6:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <systemMotors+0xac>
    69ea:	88 23       	and	r24, r24
    69ec:	09 f4       	brne	.+2      	; 0x69f0 <lower_mixer_timer_overflow_callback+0x1a>
    69ee:	3e c0       	rjmp	.+124    	; 0x6a6c <lower_mixer_timer_overflow_callback+0x96>
    69f0:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <systemMotors+0xaa>
    69f4:	90 91 d8 28 	lds	r25, 0x28D8	; 0x8028d8 <systemMotors+0xab>
    69f8:	cc 01       	movw	r24, r24
    69fa:	a0 e0       	ldi	r26, 0x00	; 0
    69fc:	b0 e0       	ldi	r27, 0x00	; 0
    69fe:	bc 01       	movw	r22, r24
    6a00:	cd 01       	movw	r24, r26
    6a02:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    6a06:	7b 01       	movw	r14, r22
    6a08:	8c 01       	movw	r16, r24
    6a0a:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <adjSteps+0x8>
    6a0e:	90 91 de 21 	lds	r25, 0x21DE	; 0x8021de <adjSteps+0x9>
    6a12:	a0 91 df 21 	lds	r26, 0x21DF	; 0x8021df <adjSteps+0xa>
    6a16:	b0 91 e0 21 	lds	r27, 0x21E0	; 0x8021e0 <adjSteps+0xb>
    6a1a:	9c 01       	movw	r18, r24
    6a1c:	ad 01       	movw	r20, r26
    6a1e:	c8 01       	movw	r24, r16
    6a20:	b7 01       	movw	r22, r14
    6a22:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
    6a26:	18 16       	cp	r1, r24
    6a28:	54 f4       	brge	.+20     	; 0x6a3e <lower_mixer_timer_overflow_callback+0x68>
    6a2a:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <systemMotors+0xaa>
    6a2e:	90 91 d8 28 	lds	r25, 0x28D8	; 0x8028d8 <systemMotors+0xab>
    6a32:	01 97       	sbiw	r24, 0x01	; 1
    6a34:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <systemMotors+0xaa>
    6a38:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <systemMotors+0xab>
    6a3c:	17 c0       	rjmp	.+46     	; 0x6a6c <lower_mixer_timer_overflow_callback+0x96>
    6a3e:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <systemMotors+0x91>
    6a42:	88 23       	and	r24, r24
    6a44:	21 f0       	breq	.+8      	; 0x6a4e <lower_mixer_timer_overflow_callback+0x78>
    6a46:	8b eb       	ldi	r24, 0xBB	; 187
    6a48:	98 e2       	ldi	r25, 0x28	; 40
    6a4a:	0e 94 3a 8f 	call	0x11e74	; 0x11e74 <stop_motor>
    6a4e:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <systemMotors+0xaa>
    6a52:	90 91 d8 28 	lds	r25, 0x28D8	; 0x8028d8 <systemMotors+0xab>
    6a56:	89 2b       	or	r24, r25
    6a58:	49 f0       	breq	.+18     	; 0x6a6c <lower_mixer_timer_overflow_callback+0x96>
    6a5a:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <systemMotors+0xaa>
    6a5e:	90 91 d8 28 	lds	r25, 0x28D8	; 0x8028d8 <systemMotors+0xab>
    6a62:	01 97       	sbiw	r24, 0x01	; 1
    6a64:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <systemMotors+0xaa>
    6a68:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <systemMotors+0xab>
    6a6c:	00 00       	nop
    6a6e:	df 91       	pop	r29
    6a70:	cf 91       	pop	r28
    6a72:	1f 91       	pop	r17
    6a74:	0f 91       	pop	r16
    6a76:	ff 90       	pop	r15
    6a78:	ef 90       	pop	r14
    6a7a:	08 95       	ret

00006a7c <pump_timer_overflow_callback>:
    6a7c:	ef 92       	push	r14
    6a7e:	ff 92       	push	r15
    6a80:	0f 93       	push	r16
    6a82:	1f 93       	push	r17
    6a84:	cf 93       	push	r28
    6a86:	df 93       	push	r29
    6a88:	cd b7       	in	r28, 0x3d	; 61
    6a8a:	de b7       	in	r29, 0x3e	; 62
    6a8c:	80 91 20 29 	lds	r24, 0x2920	; 0x802920 <systemMotors+0xf3>
    6a90:	88 23       	and	r24, r24
    6a92:	09 f4       	brne	.+2      	; 0x6a96 <pump_timer_overflow_callback+0x1a>
    6a94:	3e c0       	rjmp	.+124    	; 0x6b12 <pump_timer_overflow_callback+0x96>
    6a96:	80 91 1e 29 	lds	r24, 0x291E	; 0x80291e <systemMotors+0xf1>
    6a9a:	90 91 1f 29 	lds	r25, 0x291F	; 0x80291f <systemMotors+0xf2>
    6a9e:	cc 01       	movw	r24, r24
    6aa0:	a0 e0       	ldi	r26, 0x00	; 0
    6aa2:	b0 e0       	ldi	r27, 0x00	; 0
    6aa4:	bc 01       	movw	r22, r24
    6aa6:	cd 01       	movw	r24, r26
    6aa8:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    6aac:	7b 01       	movw	r14, r22
    6aae:	8c 01       	movw	r16, r24
    6ab0:	80 91 e1 21 	lds	r24, 0x21E1	; 0x8021e1 <adjSteps+0xc>
    6ab4:	90 91 e2 21 	lds	r25, 0x21E2	; 0x8021e2 <adjSteps+0xd>
    6ab8:	a0 91 e3 21 	lds	r26, 0x21E3	; 0x8021e3 <adjSteps+0xe>
    6abc:	b0 91 e4 21 	lds	r27, 0x21E4	; 0x8021e4 <adjSteps+0xf>
    6ac0:	9c 01       	movw	r18, r24
    6ac2:	ad 01       	movw	r20, r26
    6ac4:	c8 01       	movw	r24, r16
    6ac6:	b7 01       	movw	r22, r14
    6ac8:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
    6acc:	18 16       	cp	r1, r24
    6ace:	54 f4       	brge	.+20     	; 0x6ae4 <pump_timer_overflow_callback+0x68>
    6ad0:	80 91 1e 29 	lds	r24, 0x291E	; 0x80291e <systemMotors+0xf1>
    6ad4:	90 91 1f 29 	lds	r25, 0x291F	; 0x80291f <systemMotors+0xf2>
    6ad8:	01 97       	sbiw	r24, 0x01	; 1
    6ada:	80 93 1e 29 	sts	0x291E, r24	; 0x80291e <systemMotors+0xf1>
    6ade:	90 93 1f 29 	sts	0x291F, r25	; 0x80291f <systemMotors+0xf2>
    6ae2:	17 c0       	rjmp	.+46     	; 0x6b12 <pump_timer_overflow_callback+0x96>
    6ae4:	80 91 05 29 	lds	r24, 0x2905	; 0x802905 <systemMotors+0xd8>
    6ae8:	88 23       	and	r24, r24
    6aea:	21 f0       	breq	.+8      	; 0x6af4 <pump_timer_overflow_callback+0x78>
    6aec:	82 e0       	ldi	r24, 0x02	; 2
    6aee:	99 e2       	ldi	r25, 0x29	; 41
    6af0:	0e 94 3a 8f 	call	0x11e74	; 0x11e74 <stop_motor>
    6af4:	80 91 1e 29 	lds	r24, 0x291E	; 0x80291e <systemMotors+0xf1>
    6af8:	90 91 1f 29 	lds	r25, 0x291F	; 0x80291f <systemMotors+0xf2>
    6afc:	89 2b       	or	r24, r25
    6afe:	49 f0       	breq	.+18     	; 0x6b12 <pump_timer_overflow_callback+0x96>
    6b00:	80 91 1e 29 	lds	r24, 0x291E	; 0x80291e <systemMotors+0xf1>
    6b04:	90 91 1f 29 	lds	r25, 0x291F	; 0x80291f <systemMotors+0xf2>
    6b08:	01 97       	sbiw	r24, 0x01	; 1
    6b0a:	80 93 1e 29 	sts	0x291E, r24	; 0x80291e <systemMotors+0xf1>
    6b0e:	90 93 1f 29 	sts	0x291F, r25	; 0x80291f <systemMotors+0xf2>
    6b12:	00 00       	nop
    6b14:	df 91       	pop	r29
    6b16:	cf 91       	pop	r28
    6b18:	1f 91       	pop	r17
    6b1a:	0f 91       	pop	r16
    6b1c:	ff 90       	pop	r15
    6b1e:	ef 90       	pop	r14
    6b20:	08 95       	ret

00006b22 <real_main>:
    6b22:	0f 93       	push	r16
    6b24:	1f 93       	push	r17
    6b26:	cf 93       	push	r28
    6b28:	df 93       	push	r29
    6b2a:	cd b7       	in	r28, 0x3d	; 61
    6b2c:	de b7       	in	r29, 0x3e	; 62
    6b2e:	25 97       	sbiw	r28, 0x05	; 5
    6b30:	cd bf       	out	0x3d, r28	; 61
    6b32:	de bf       	out	0x3e, r29	; 62
    6b34:	85 e0       	ldi	r24, 0x05	; 5
    6b36:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <LEDState>
    6b3a:	88 ee       	ldi	r24, 0xE8	; 232
    6b3c:	93 e0       	ldi	r25, 0x03	; 3
    6b3e:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <LEDOnTime>
    6b42:	90 93 ae 21 	sts	0x21AE, r25	; 0x8021ae <LEDOnTime+0x1>
    6b46:	88 ee       	ldi	r24, 0xE8	; 232
    6b48:	93 e0       	ldi	r25, 0x03	; 3
    6b4a:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <LEDOffTime>
    6b4e:	90 93 b0 21 	sts	0x21B0, r25	; 0x8021b0 <LEDOffTime+0x1>
    6b52:	0e 94 f4 5d 	call	0xbbe8	; 0xbbe8 <disable_WDT>
    6b56:	9f da       	rcall	.-2754   	; 0x6096 <ioport_init>
    6b58:	0e 94 3f 9a 	call	0x1347e	; 0x1347e <sysclk_init>
    6b5c:	51 d8       	rcall	.-3934   	; 0x5c00 <pmic_init>
    6b5e:	80 ea       	ldi	r24, 0xA0	; 160
    6b60:	90 e0       	ldi	r25, 0x00	; 0
    6b62:	27 e0       	ldi	r18, 0x07	; 7
    6b64:	fc 01       	movw	r30, r24
    6b66:	22 83       	std	Z+2, r18	; 0x02
    6b68:	78 94       	sei
    6b6a:	62 e0       	ldi	r22, 0x02	; 2
    6b6c:	80 e0       	ldi	r24, 0x00	; 0
    6b6e:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
    6b72:	09 d6       	rcall	.+3090   	; 0x7786 <init_sys_timer>
    6b74:	2f d6       	rcall	.+3166   	; 0x77d4 <init_heater_timer>
    6b76:	6c d6       	rcall	.+3288   	; 0x7850 <init_fan_timer>
    6b78:	0e 94 00 5d 	call	0xba00	; 0xba00 <init_SPI>
    6b7c:	0f d2       	rcall	.+1054   	; 0x6f9c <init_IO>
    6b7e:	6f e6       	ldi	r22, 0x6F	; 111
    6b80:	75 e2       	ldi	r23, 0x25	; 37
    6b82:	86 ec       	ldi	r24, 0xC6	; 198
    6b84:	91 e2       	ldi	r25, 0x21	; 33
    6b86:	0e 94 25 83 	call	0x1064a	; 0x1064a <init_USB>
    6b8a:	06 c0       	rjmp	.+12     	; 0x6b98 <real_main+0x76>
    6b8c:	0e 94 44 83 	call	0x10688	; 0x10688 <check_USB_ready>
    6b90:	80 93 c7 21 	sts	0x21C7, r24	; 0x8021c7 <USBReady>
    6b94:	0e 94 ca 56 	call	0xad94	; 0xad94 <handle_LEDs>
    6b98:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <USBReady>
    6b9c:	88 23       	and	r24, r24
    6b9e:	b1 f3       	breq	.-20     	; 0x6b8c <real_main+0x6a>
    6ba0:	0e 94 e1 5b 	call	0xb7c2	; 0xb7c2 <init_RTD_sensor>
    6ba4:	0e 94 7e 7d 	call	0xfafc	; 0xfafc <init_TEC_controller>
    6ba8:	0e 94 9a 2c 	call	0x5934	; 0x5934 <init_ADC>
    6bac:	0e 94 f8 5a 	call	0xb5f0	; 0xb5f0 <init_DMA>
    6bb0:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <init_NVM>
    6bb4:	1a 82       	std	Y+2, r1	; 0x02
    6bb6:	1b 82       	std	Y+3, r1	; 0x03
    6bb8:	1c 82       	std	Y+4, r1	; 0x04
    6bba:	1d 82       	std	Y+5, r1	; 0x05
    6bbc:	ce 01       	movw	r24, r28
    6bbe:	02 96       	adiw	r24, 0x02	; 2
    6bc0:	04 e0       	ldi	r16, 0x04	; 4
    6bc2:	10 e0       	ldi	r17, 0x00	; 0
    6bc4:	20 e0       	ldi	r18, 0x00	; 0
    6bc6:	30 e0       	ldi	r19, 0x00	; 0
    6bc8:	ac 01       	movw	r20, r24
    6bca:	66 e9       	ldi	r22, 0x96	; 150
    6bcc:	70 e0       	ldi	r23, 0x00	; 0
    6bce:	80 e0       	ldi	r24, 0x00	; 0
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <read_PID_from_NVM>
    6bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    6bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bda:	ac 81       	ldd	r26, Y+4	; 0x04
    6bdc:	bd 81       	ldd	r27, Y+5	; 0x05
    6bde:	bc 01       	movw	r22, r24
    6be0:	cd 01       	movw	r24, r26
    6be2:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    6be6:	dc 01       	movw	r26, r24
    6be8:	cb 01       	movw	r24, r22
    6bea:	20 e0       	ldi	r18, 0x00	; 0
    6bec:	30 e0       	ldi	r19, 0x00	; 0
    6bee:	48 ec       	ldi	r20, 0xC8	; 200
    6bf0:	52 e4       	ldi	r21, 0x42	; 66
    6bf2:	bc 01       	movw	r22, r24
    6bf4:	cd 01       	movw	r24, r26
    6bf6:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    6bfa:	dc 01       	movw	r26, r24
    6bfc:	cb 01       	movw	r24, r22
    6bfe:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <heaterPID+0x1c>
    6c02:	90 93 1a 28 	sts	0x281A, r25	; 0x80281a <heaterPID+0x1d>
    6c06:	a0 93 1b 28 	sts	0x281B, r26	; 0x80281b <heaterPID+0x1e>
    6c0a:	b0 93 1c 28 	sts	0x281C, r27	; 0x80281c <heaterPID+0x1f>
    6c0e:	ce 01       	movw	r24, r28
    6c10:	02 96       	adiw	r24, 0x02	; 2
    6c12:	04 e0       	ldi	r16, 0x04	; 4
    6c14:	10 e0       	ldi	r17, 0x00	; 0
    6c16:	20 e0       	ldi	r18, 0x00	; 0
    6c18:	30 e0       	ldi	r19, 0x00	; 0
    6c1a:	ac 01       	movw	r20, r24
    6c1c:	60 ea       	ldi	r22, 0xA0	; 160
    6c1e:	70 e0       	ldi	r23, 0x00	; 0
    6c20:	80 e0       	ldi	r24, 0x00	; 0
    6c22:	90 e0       	ldi	r25, 0x00	; 0
    6c24:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <read_PID_from_NVM>
    6c28:	8a 81       	ldd	r24, Y+2	; 0x02
    6c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    6c2c:	ac 81       	ldd	r26, Y+4	; 0x04
    6c2e:	bd 81       	ldd	r27, Y+5	; 0x05
    6c30:	bc 01       	movw	r22, r24
    6c32:	cd 01       	movw	r24, r26
    6c34:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    6c38:	dc 01       	movw	r26, r24
    6c3a:	cb 01       	movw	r24, r22
    6c3c:	20 e0       	ldi	r18, 0x00	; 0
    6c3e:	30 e0       	ldi	r19, 0x00	; 0
    6c40:	48 ec       	ldi	r20, 0xC8	; 200
    6c42:	52 e4       	ldi	r21, 0x42	; 66
    6c44:	bc 01       	movw	r22, r24
    6c46:	cd 01       	movw	r24, r26
    6c48:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    6c4c:	dc 01       	movw	r26, r24
    6c4e:	cb 01       	movw	r24, r22
    6c50:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <heaterPID+0x20>
    6c54:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <heaterPID+0x21>
    6c58:	a0 93 1f 28 	sts	0x281F, r26	; 0x80281f <heaterPID+0x22>
    6c5c:	b0 93 20 28 	sts	0x2820, r27	; 0x802820 <heaterPID+0x23>
    6c60:	ce 01       	movw	r24, r28
    6c62:	02 96       	adiw	r24, 0x02	; 2
    6c64:	04 e0       	ldi	r16, 0x04	; 4
    6c66:	10 e0       	ldi	r17, 0x00	; 0
    6c68:	20 e0       	ldi	r18, 0x00	; 0
    6c6a:	30 e0       	ldi	r19, 0x00	; 0
    6c6c:	ac 01       	movw	r20, r24
    6c6e:	6a ea       	ldi	r22, 0xAA	; 170
    6c70:	70 e0       	ldi	r23, 0x00	; 0
    6c72:	80 e0       	ldi	r24, 0x00	; 0
    6c74:	90 e0       	ldi	r25, 0x00	; 0
    6c76:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <read_PID_from_NVM>
    6c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    6c7e:	ac 81       	ldd	r26, Y+4	; 0x04
    6c80:	bd 81       	ldd	r27, Y+5	; 0x05
    6c82:	bc 01       	movw	r22, r24
    6c84:	cd 01       	movw	r24, r26
    6c86:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    6c8a:	dc 01       	movw	r26, r24
    6c8c:	cb 01       	movw	r24, r22
    6c8e:	20 e0       	ldi	r18, 0x00	; 0
    6c90:	30 e0       	ldi	r19, 0x00	; 0
    6c92:	48 ec       	ldi	r20, 0xC8	; 200
    6c94:	52 e4       	ldi	r21, 0x42	; 66
    6c96:	bc 01       	movw	r22, r24
    6c98:	cd 01       	movw	r24, r26
    6c9a:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    6c9e:	dc 01       	movw	r26, r24
    6ca0:	cb 01       	movw	r24, r22
    6ca2:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <heaterPID+0x24>
    6ca6:	90 93 22 28 	sts	0x2822, r25	; 0x802822 <heaterPID+0x25>
    6caa:	a0 93 23 28 	sts	0x2823, r26	; 0x802823 <heaterPID+0x26>
    6cae:	b0 93 24 28 	sts	0x2824, r27	; 0x802824 <heaterPID+0x27>
    6cb2:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <heaterPID+0x20>
    6cb6:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <heaterPID+0x21>
    6cba:	a0 91 1f 28 	lds	r26, 0x281F	; 0x80281f <heaterPID+0x22>
    6cbe:	b0 91 20 28 	lds	r27, 0x2820	; 0x802820 <heaterPID+0x23>
    6cc2:	9c 01       	movw	r18, r24
    6cc4:	ad 01       	movw	r20, r26
    6cc6:	60 e0       	ldi	r22, 0x00	; 0
    6cc8:	70 e0       	ldi	r23, 0x00	; 0
    6cca:	88 ec       	ldi	r24, 0xC8	; 200
    6ccc:	92 e4       	ldi	r25, 0x42	; 66
    6cce:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    6cd2:	dc 01       	movw	r26, r24
    6cd4:	cb 01       	movw	r24, r22
    6cd6:	20 e0       	ldi	r18, 0x00	; 0
    6cd8:	30 e0       	ldi	r19, 0x00	; 0
    6cda:	40 e2       	ldi	r20, 0x20	; 32
    6cdc:	51 e4       	ldi	r21, 0x41	; 65
    6cde:	bc 01       	movw	r22, r24
    6ce0:	cd 01       	movw	r24, r26
    6ce2:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    6ce6:	dc 01       	movw	r26, r24
    6ce8:	cb 01       	movw	r24, r22
    6cea:	bc 01       	movw	r22, r24
    6cec:	cd 01       	movw	r24, r26
    6cee:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <__fixsfsi>
    6cf2:	dc 01       	movw	r26, r24
    6cf4:	cb 01       	movw	r24, r22
    6cf6:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <heaterPID+0x14>
    6cfa:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <heaterPID+0x15>
    6cfe:	a0 93 13 28 	sts	0x2813, r26	; 0x802813 <heaterPID+0x16>
    6d02:	b0 93 14 28 	sts	0x2814, r27	; 0x802814 <heaterPID+0x17>
    6d06:	10 92 15 28 	sts	0x2815, r1	; 0x802815 <heaterPID+0x18>
    6d0a:	10 92 16 28 	sts	0x2816, r1	; 0x802816 <heaterPID+0x19>
    6d0e:	10 92 17 28 	sts	0x2817, r1	; 0x802817 <heaterPID+0x1a>
    6d12:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <heaterPID+0x1b>
    6d16:	84 e0       	ldi	r24, 0x04	; 4
    6d18:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <LEDState>
    6d1c:	0e 94 ca 56 	call	0xad94	; 0xad94 <handle_LEDs>
    6d20:	0e 94 2a 58 	call	0xb054	; 0xb054 <handle_temp_PID>
    6d24:	0e 94 10 59 	call	0xb220	; 0xb220 <handle_pump>
    6d28:	0e 94 40 59 	call	0xb280	; 0xb280 <handle_fan>
    6d2c:	0e 94 c4 59 	call	0xb388	; 0xb388 <handle_TEC>
    6d30:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <WDTResetCountSet>
    6d34:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <WDTResetCountSet+0x1>
    6d38:	a0 91 d3 21 	lds	r26, 0x21D3	; 0x8021d3 <WDTResetCountSet+0x2>
    6d3c:	b0 91 d4 21 	lds	r27, 0x21D4	; 0x8021d4 <WDTResetCountSet+0x3>
    6d40:	89 2b       	or	r24, r25
    6d42:	8a 2b       	or	r24, r26
    6d44:	8b 2b       	or	r24, r27
    6d46:	b1 f1       	breq	.+108    	; 0x6db4 <real_main+0x292>
    6d48:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <watchdogTime_ms>
    6d4c:	90 91 a9 21 	lds	r25, 0x21A9	; 0x8021a9 <watchdogTime_ms+0x1>
    6d50:	a0 91 aa 21 	lds	r26, 0x21AA	; 0x8021aa <watchdogTime_ms+0x2>
    6d54:	b0 91 ab 21 	lds	r27, 0x21AB	; 0x8021ab <watchdogTime_ms+0x3>
    6d58:	8e 3e       	cpi	r24, 0xEE	; 238
    6d5a:	92 40       	sbci	r25, 0x02	; 2
    6d5c:	a1 05       	cpc	r26, r1
    6d5e:	b1 05       	cpc	r27, r1
    6d60:	48 f1       	brcs	.+82     	; 0x6db4 <real_main+0x292>
    6d62:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <watchdogTime_ms>
    6d66:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <watchdogTime_ms+0x1>
    6d6a:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <watchdogTime_ms+0x2>
    6d6e:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <watchdogTime_ms+0x3>
    6d72:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <WDTResetCount>
    6d76:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <WDTResetCount+0x1>
    6d7a:	a0 91 cf 21 	lds	r26, 0x21CF	; 0x8021cf <WDTResetCount+0x2>
    6d7e:	b0 91 d0 21 	lds	r27, 0x21D0	; 0x8021d0 <WDTResetCount+0x3>
    6d82:	89 2b       	or	r24, r25
    6d84:	8a 2b       	or	r24, r26
    6d86:	8b 2b       	or	r24, r27
    6d88:	a9 f0       	breq	.+42     	; 0x6db4 <real_main+0x292>
    6d8a:	0e 94 0c 5e 	call	0xbc18	; 0xbc18 <reset_WDT>
    6d8e:	80 91 cd 21 	lds	r24, 0x21CD	; 0x8021cd <WDTResetCount>
    6d92:	90 91 ce 21 	lds	r25, 0x21CE	; 0x8021ce <WDTResetCount+0x1>
    6d96:	a0 91 cf 21 	lds	r26, 0x21CF	; 0x8021cf <WDTResetCount+0x2>
    6d9a:	b0 91 d0 21 	lds	r27, 0x21D0	; 0x8021d0 <WDTResetCount+0x3>
    6d9e:	01 97       	sbiw	r24, 0x01	; 1
    6da0:	a1 09       	sbc	r26, r1
    6da2:	b1 09       	sbc	r27, r1
    6da4:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <WDTResetCount>
    6da8:	90 93 ce 21 	sts	0x21CE, r25	; 0x8021ce <WDTResetCount+0x1>
    6dac:	a0 93 cf 21 	sts	0x21CF, r26	; 0x8021cf <WDTResetCount+0x2>
    6db0:	b0 93 d0 21 	sts	0x21D0, r27	; 0x8021d0 <WDTResetCount+0x3>
    6db4:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <USBDataReceived>
    6db8:	88 23       	and	r24, r24
    6dba:	29 f0       	breq	.+10     	; 0x6dc6 <real_main+0x2a4>
    6dbc:	68 d5       	rcall	.+2768   	; 0x788e <parse_received_USB_msg>
    6dbe:	0e 94 72 41 	call	0x82e4	; 0x82e4 <handle_received_USB_cmd>
    6dc2:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <USBDataReceived>
    6dc6:	19 82       	std	Y+1, r1	; 0x01
    6dc8:	e2 c0       	rjmp	.+452    	; 0x6f8e <real_main+0x46c>
    6dca:	89 81       	ldd	r24, Y+1	; 0x01
    6dcc:	28 2f       	mov	r18, r24
    6dce:	30 e0       	ldi	r19, 0x00	; 0
    6dd0:	47 e4       	ldi	r20, 0x47	; 71
    6dd2:	42 9f       	mul	r20, r18
    6dd4:	c0 01       	movw	r24, r0
    6dd6:	43 9f       	mul	r20, r19
    6dd8:	90 0d       	add	r25, r0
    6dda:	11 24       	eor	r1, r1
    6ddc:	80 5d       	subi	r24, 0xD0	; 208
    6dde:	97 4d       	sbci	r25, 0xD7	; 215
    6de0:	fc 01       	movw	r30, r24
    6de2:	80 81       	ld	r24, Z
    6de4:	88 23       	and	r24, r24
    6de6:	09 f4       	brne	.+2      	; 0x6dea <real_main+0x2c8>
    6de8:	cf c0       	rjmp	.+414    	; 0x6f88 <real_main+0x466>
    6dea:	89 81       	ldd	r24, Y+1	; 0x01
    6dec:	28 2f       	mov	r18, r24
    6dee:	30 e0       	ldi	r19, 0x00	; 0
    6df0:	47 e4       	ldi	r20, 0x47	; 71
    6df2:	42 9f       	mul	r20, r18
    6df4:	c0 01       	movw	r24, r0
    6df6:	43 9f       	mul	r20, r19
    6df8:	90 0d       	add	r25, r0
    6dfa:	11 24       	eor	r1, r1
    6dfc:	83 5c       	subi	r24, 0xC3	; 195
    6dfe:	97 4d       	sbci	r25, 0xD7	; 215
    6e00:	fc 01       	movw	r30, r24
    6e02:	80 81       	ld	r24, Z
    6e04:	91 81       	ldd	r25, Z+1	; 0x01
    6e06:	a2 81       	ldd	r26, Z+2	; 0x02
    6e08:	b3 81       	ldd	r27, Z+3	; 0x03
    6e0a:	20 e0       	ldi	r18, 0x00	; 0
    6e0c:	30 e0       	ldi	r19, 0x00	; 0
    6e0e:	a9 01       	movw	r20, r18
    6e10:	bc 01       	movw	r22, r24
    6e12:	cd 01       	movw	r24, r26
    6e14:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    6e18:	88 23       	and	r24, r24
    6e1a:	09 f4       	brne	.+2      	; 0x6e1e <real_main+0x2fc>
    6e1c:	4a c0       	rjmp	.+148    	; 0x6eb2 <real_main+0x390>
    6e1e:	89 81       	ldd	r24, Y+1	; 0x01
    6e20:	28 2f       	mov	r18, r24
    6e22:	30 e0       	ldi	r19, 0x00	; 0
    6e24:	47 e4       	ldi	r20, 0x47	; 71
    6e26:	42 9f       	mul	r20, r18
    6e28:	c0 01       	movw	r24, r0
    6e2a:	43 9f       	mul	r20, r19
    6e2c:	90 0d       	add	r25, r0
    6e2e:	11 24       	eor	r1, r1
    6e30:	87 5c       	subi	r24, 0xC7	; 199
    6e32:	97 4d       	sbci	r25, 0xD7	; 215
    6e34:	fc 01       	movw	r30, r24
    6e36:	80 81       	ld	r24, Z
    6e38:	91 81       	ldd	r25, Z+1	; 0x01
    6e3a:	a2 81       	ldd	r26, Z+2	; 0x02
    6e3c:	b3 81       	ldd	r27, Z+3	; 0x03
    6e3e:	20 e0       	ldi	r18, 0x00	; 0
    6e40:	30 e0       	ldi	r19, 0x00	; 0
    6e42:	a9 01       	movw	r20, r18
    6e44:	bc 01       	movw	r22, r24
    6e46:	cd 01       	movw	r24, r26
    6e48:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    6e4c:	88 23       	and	r24, r24
    6e4e:	89 f1       	breq	.+98     	; 0x6eb2 <real_main+0x390>
    6e50:	89 81       	ldd	r24, Y+1	; 0x01
    6e52:	28 2f       	mov	r18, r24
    6e54:	30 e0       	ldi	r19, 0x00	; 0
    6e56:	47 e4       	ldi	r20, 0x47	; 71
    6e58:	42 9f       	mul	r20, r18
    6e5a:	c0 01       	movw	r24, r0
    6e5c:	43 9f       	mul	r20, r19
    6e5e:	90 0d       	add	r25, r0
    6e60:	11 24       	eor	r1, r1
    6e62:	8f 5c       	subi	r24, 0xCF	; 207
    6e64:	97 4d       	sbci	r25, 0xD7	; 215
    6e66:	fc 01       	movw	r30, r24
    6e68:	80 81       	ld	r24, Z
    6e6a:	91 81       	ldd	r25, Z+1	; 0x01
    6e6c:	a2 81       	ldd	r26, Z+2	; 0x02
    6e6e:	b3 81       	ldd	r27, Z+3	; 0x03
    6e70:	0a 97       	sbiw	r24, 0x0a	; 10
    6e72:	a1 05       	cpc	r26, r1
    6e74:	b1 05       	cpc	r27, r1
    6e76:	e8 f0       	brcs	.+58     	; 0x6eb2 <real_main+0x390>
    6e78:	89 81       	ldd	r24, Y+1	; 0x01
    6e7a:	28 2f       	mov	r18, r24
    6e7c:	30 e0       	ldi	r19, 0x00	; 0
    6e7e:	47 e4       	ldi	r20, 0x47	; 71
    6e80:	42 9f       	mul	r20, r18
    6e82:	c0 01       	movw	r24, r0
    6e84:	43 9f       	mul	r20, r19
    6e86:	90 0d       	add	r25, r0
    6e88:	11 24       	eor	r1, r1
    6e8a:	83 5d       	subi	r24, 0xD3	; 211
    6e8c:	97 4d       	sbci	r25, 0xD7	; 215
    6e8e:	0e 94 82 8b 	call	0x11704	; 0x11704 <handle_accel>
    6e92:	89 81       	ldd	r24, Y+1	; 0x01
    6e94:	28 2f       	mov	r18, r24
    6e96:	30 e0       	ldi	r19, 0x00	; 0
    6e98:	47 e4       	ldi	r20, 0x47	; 71
    6e9a:	42 9f       	mul	r20, r18
    6e9c:	c0 01       	movw	r24, r0
    6e9e:	43 9f       	mul	r20, r19
    6ea0:	90 0d       	add	r25, r0
    6ea2:	11 24       	eor	r1, r1
    6ea4:	8f 5c       	subi	r24, 0xCF	; 207
    6ea6:	97 4d       	sbci	r25, 0xD7	; 215
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	10 82       	st	Z, r1
    6eac:	11 82       	std	Z+1, r1	; 0x01
    6eae:	12 82       	std	Z+2, r1	; 0x02
    6eb0:	13 82       	std	Z+3, r1	; 0x03
    6eb2:	89 81       	ldd	r24, Y+1	; 0x01
    6eb4:	28 2f       	mov	r18, r24
    6eb6:	30 e0       	ldi	r19, 0x00	; 0
    6eb8:	47 e4       	ldi	r20, 0x47	; 71
    6eba:	42 9f       	mul	r20, r18
    6ebc:	c0 01       	movw	r24, r0
    6ebe:	43 9f       	mul	r20, r19
    6ec0:	90 0d       	add	r25, r0
    6ec2:	11 24       	eor	r1, r1
    6ec4:	8b 5b       	subi	r24, 0xBB	; 187
    6ec6:	97 4d       	sbci	r25, 0xD7	; 215
    6ec8:	fc 01       	movw	r30, r24
    6eca:	80 81       	ld	r24, Z
    6ecc:	91 81       	ldd	r25, Z+1	; 0x01
    6ece:	a2 81       	ldd	r26, Z+2	; 0x02
    6ed0:	b3 81       	ldd	r27, Z+3	; 0x03
    6ed2:	20 e0       	ldi	r18, 0x00	; 0
    6ed4:	30 e0       	ldi	r19, 0x00	; 0
    6ed6:	a9 01       	movw	r20, r18
    6ed8:	bc 01       	movw	r22, r24
    6eda:	cd 01       	movw	r24, r26
    6edc:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    6ee0:	88 23       	and	r24, r24
    6ee2:	09 f4       	brne	.+2      	; 0x6ee6 <real_main+0x3c4>
    6ee4:	51 c0       	rjmp	.+162    	; 0x6f88 <real_main+0x466>
    6ee6:	89 81       	ldd	r24, Y+1	; 0x01
    6ee8:	28 2f       	mov	r18, r24
    6eea:	30 e0       	ldi	r19, 0x00	; 0
    6eec:	47 e4       	ldi	r20, 0x47	; 71
    6eee:	42 9f       	mul	r20, r18
    6ef0:	c0 01       	movw	r24, r0
    6ef2:	43 9f       	mul	r20, r19
    6ef4:	90 0d       	add	r25, r0
    6ef6:	11 24       	eor	r1, r1
    6ef8:	83 5c       	subi	r24, 0xC3	; 195
    6efa:	97 4d       	sbci	r25, 0xD7	; 215
    6efc:	fc 01       	movw	r30, r24
    6efe:	10 82       	st	Z, r1
    6f00:	11 82       	std	Z+1, r1	; 0x01
    6f02:	12 82       	std	Z+2, r1	; 0x02
    6f04:	13 82       	std	Z+3, r1	; 0x03
    6f06:	89 81       	ldd	r24, Y+1	; 0x01
    6f08:	28 2f       	mov	r18, r24
    6f0a:	30 e0       	ldi	r19, 0x00	; 0
    6f0c:	47 e4       	ldi	r20, 0x47	; 71
    6f0e:	42 9f       	mul	r20, r18
    6f10:	c0 01       	movw	r24, r0
    6f12:	43 9f       	mul	r20, r19
    6f14:	90 0d       	add	r25, r0
    6f16:	11 24       	eor	r1, r1
    6f18:	83 5c       	subi	r24, 0xC3	; 195
    6f1a:	97 4d       	sbci	r25, 0xD7	; 215
    6f1c:	fc 01       	movw	r30, r24
    6f1e:	10 82       	st	Z, r1
    6f20:	11 82       	std	Z+1, r1	; 0x01
    6f22:	12 82       	std	Z+2, r1	; 0x02
    6f24:	13 82       	std	Z+3, r1	; 0x03
    6f26:	89 81       	ldd	r24, Y+1	; 0x01
    6f28:	28 2f       	mov	r18, r24
    6f2a:	30 e0       	ldi	r19, 0x00	; 0
    6f2c:	47 e4       	ldi	r20, 0x47	; 71
    6f2e:	42 9f       	mul	r20, r18
    6f30:	c0 01       	movw	r24, r0
    6f32:	43 9f       	mul	r20, r19
    6f34:	90 0d       	add	r25, r0
    6f36:	11 24       	eor	r1, r1
    6f38:	8f 5c       	subi	r24, 0xCF	; 207
    6f3a:	97 4d       	sbci	r25, 0xD7	; 215
    6f3c:	fc 01       	movw	r30, r24
    6f3e:	80 81       	ld	r24, Z
    6f40:	91 81       	ldd	r25, Z+1	; 0x01
    6f42:	a2 81       	ldd	r26, Z+2	; 0x02
    6f44:	b3 81       	ldd	r27, Z+3	; 0x03
    6f46:	0a 97       	sbiw	r24, 0x0a	; 10
    6f48:	a1 05       	cpc	r26, r1
    6f4a:	b1 05       	cpc	r27, r1
    6f4c:	e8 f0       	brcs	.+58     	; 0x6f88 <real_main+0x466>
    6f4e:	89 81       	ldd	r24, Y+1	; 0x01
    6f50:	28 2f       	mov	r18, r24
    6f52:	30 e0       	ldi	r19, 0x00	; 0
    6f54:	47 e4       	ldi	r20, 0x47	; 71
    6f56:	42 9f       	mul	r20, r18
    6f58:	c0 01       	movw	r24, r0
    6f5a:	43 9f       	mul	r20, r19
    6f5c:	90 0d       	add	r25, r0
    6f5e:	11 24       	eor	r1, r1
    6f60:	83 5d       	subi	r24, 0xD3	; 211
    6f62:	97 4d       	sbci	r25, 0xD7	; 215
    6f64:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <handle_decel>
    6f68:	89 81       	ldd	r24, Y+1	; 0x01
    6f6a:	28 2f       	mov	r18, r24
    6f6c:	30 e0       	ldi	r19, 0x00	; 0
    6f6e:	47 e4       	ldi	r20, 0x47	; 71
    6f70:	42 9f       	mul	r20, r18
    6f72:	c0 01       	movw	r24, r0
    6f74:	43 9f       	mul	r20, r19
    6f76:	90 0d       	add	r25, r0
    6f78:	11 24       	eor	r1, r1
    6f7a:	8f 5c       	subi	r24, 0xCF	; 207
    6f7c:	97 4d       	sbci	r25, 0xD7	; 215
    6f7e:	fc 01       	movw	r30, r24
    6f80:	10 82       	st	Z, r1
    6f82:	11 82       	std	Z+1, r1	; 0x01
    6f84:	12 82       	std	Z+2, r1	; 0x02
    6f86:	13 82       	std	Z+3, r1	; 0x03
    6f88:	89 81       	ldd	r24, Y+1	; 0x01
    6f8a:	8f 5f       	subi	r24, 0xFF	; 255
    6f8c:	89 83       	std	Y+1, r24	; 0x01
    6f8e:	89 81       	ldd	r24, Y+1	; 0x01
    6f90:	84 30       	cpi	r24, 0x04	; 4
    6f92:	08 f4       	brcc	.+2      	; 0x6f96 <real_main+0x474>
    6f94:	1a cf       	rjmp	.-460    	; 0x6dca <real_main+0x2a8>
    6f96:	83 e1       	ldi	r24, 0x13	; 19
    6f98:	e0 d8       	rcall	.-3648   	; 0x615a <ioport_get_pin_level>
    6f9a:	c0 ce       	rjmp	.-640    	; 0x6d1c <real_main+0x1fa>

00006f9c <init_IO>:
    6f9c:	cf 93       	push	r28
    6f9e:	df 93       	push	r29
    6fa0:	cd b7       	in	r28, 0x3d	; 61
    6fa2:	de b7       	in	r29, 0x3e	; 62
    6fa4:	95 d0       	rcall	.+298    	; 0x70d0 <init_motor_structs>
    6fa6:	0e 94 60 8d 	call	0x11ac0	; 0x11ac0 <init_stepper_motor_pins>
    6faa:	85 d1       	rcall	.+778    	; 0x72b6 <init_steppers_SPI_control>
    6fac:	60 e0       	ldi	r22, 0x00	; 0
    6fae:	8a e0       	ldi	r24, 0x0A	; 10
    6fb0:	7a d8       	rcall	.-3852   	; 0x60a6 <ioport_set_pin_dir>
    6fb2:	80 e2       	ldi	r24, 0x20	; 32
    6fb4:	96 e0       	ldi	r25, 0x06	; 6
    6fb6:	22 e0       	ldi	r18, 0x02	; 2
    6fb8:	fc 01       	movw	r30, r24
    6fba:	22 8b       	std	Z+18, r18	; 0x12
    6fbc:	80 e2       	ldi	r24, 0x20	; 32
    6fbe:	96 e0       	ldi	r25, 0x06	; 6
    6fc0:	24 e0       	ldi	r18, 0x04	; 4
    6fc2:	fc 01       	movw	r30, r24
    6fc4:	22 87       	std	Z+10, r18	; 0x0a
    6fc6:	80 e2       	ldi	r24, 0x20	; 32
    6fc8:	96 e0       	ldi	r25, 0x06	; 6
    6fca:	21 e0       	ldi	r18, 0x01	; 1
    6fcc:	fc 01       	movw	r30, r24
    6fce:	21 87       	std	Z+9, r18	; 0x09
    6fd0:	60 e0       	ldi	r22, 0x00	; 0
    6fd2:	83 e1       	ldi	r24, 0x13	; 19
    6fd4:	68 d8       	rcall	.-3888   	; 0x60a6 <ioport_set_pin_dir>
    6fd6:	80 e4       	ldi	r24, 0x40	; 64
    6fd8:	96 e0       	ldi	r25, 0x06	; 6
    6fda:	22 e0       	ldi	r18, 0x02	; 2
    6fdc:	fc 01       	movw	r30, r24
    6fde:	23 8b       	std	Z+19, r18	; 0x13
    6fe0:	80 e4       	ldi	r24, 0x40	; 64
    6fe2:	96 e0       	ldi	r25, 0x06	; 6
    6fe4:	28 e0       	ldi	r18, 0x08	; 8
    6fe6:	fc 01       	movw	r30, r24
    6fe8:	22 87       	std	Z+10, r18	; 0x0a
    6fea:	80 e4       	ldi	r24, 0x40	; 64
    6fec:	96 e0       	ldi	r25, 0x06	; 6
    6fee:	21 e0       	ldi	r18, 0x01	; 1
    6ff0:	fc 01       	movw	r30, r24
    6ff2:	21 87       	std	Z+9, r18	; 0x09
    6ff4:	61 e0       	ldi	r22, 0x01	; 1
    6ff6:	70 e0       	ldi	r23, 0x00	; 0
    6ff8:	8e e2       	ldi	r24, 0x2E	; 46
    6ffa:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ioport_configure_pin>
    6ffe:	61 e0       	ldi	r22, 0x01	; 1
    7000:	70 e0       	ldi	r23, 0x00	; 0
    7002:	81 e1       	ldi	r24, 0x11	; 17
    7004:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ioport_configure_pin>
    7008:	63 e0       	ldi	r22, 0x03	; 3
    700a:	70 e0       	ldi	r23, 0x00	; 0
    700c:	83 e1       	ldi	r24, 0x13	; 19
    700e:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ioport_configure_pin>
    7012:	63 e0       	ldi	r22, 0x03	; 3
    7014:	70 e0       	ldi	r23, 0x00	; 0
    7016:	8c e1       	ldi	r24, 0x1C	; 28
    7018:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ioport_configure_pin>
    701c:	63 e0       	ldi	r22, 0x03	; 3
    701e:	70 e0       	ldi	r23, 0x00	; 0
    7020:	8d e1       	ldi	r24, 0x1D	; 29
    7022:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ioport_configure_pin>
    7026:	60 e0       	ldi	r22, 0x00	; 0
    7028:	78 e1       	ldi	r23, 0x18	; 24
    702a:	80 e0       	ldi	r24, 0x00	; 0
    702c:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ioport_configure_pin>
    7030:	80 e0       	ldi	r24, 0x00	; 0
    7032:	90 e0       	ldi	r25, 0x00	; 0
    7034:	a0 ea       	ldi	r26, 0xA0	; 160
    7036:	b0 e4       	ldi	r27, 0x40	; 64
    7038:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <heaterPID+0x24>
    703c:	90 93 22 28 	sts	0x2822, r25	; 0x802822 <heaterPID+0x25>
    7040:	a0 93 23 28 	sts	0x2823, r26	; 0x802823 <heaterPID+0x26>
    7044:	b0 93 24 28 	sts	0x2824, r27	; 0x802824 <heaterPID+0x27>
    7048:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <heaterPID+0x8>
    704c:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <heaterPID+0x9>
    7050:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <heaterPID+0xa>
    7054:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <heaterPID+0xb>
    7058:	80 e0       	ldi	r24, 0x00	; 0
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	a0 e8       	ldi	r26, 0x80	; 128
    705e:	be e3       	ldi	r27, 0x3E	; 62
    7060:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <heaterPID+0x20>
    7064:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <heaterPID+0x21>
    7068:	a0 93 1f 28 	sts	0x281F, r26	; 0x80281f <heaterPID+0x22>
    706c:	b0 93 20 28 	sts	0x2820, r27	; 0x802820 <heaterPID+0x23>
    7070:	89 e1       	ldi	r24, 0x19	; 25
    7072:	90 e0       	ldi	r25, 0x00	; 0
    7074:	a0 e0       	ldi	r26, 0x00	; 0
    7076:	b0 e0       	ldi	r27, 0x00	; 0
    7078:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <heaterPID+0x14>
    707c:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <heaterPID+0x15>
    7080:	a0 93 13 28 	sts	0x2813, r26	; 0x802813 <heaterPID+0x16>
    7084:	b0 93 14 28 	sts	0x2814, r27	; 0x802814 <heaterPID+0x17>
    7088:	87 ee       	ldi	r24, 0xE7	; 231
    708a:	9f ef       	ldi	r25, 0xFF	; 255
    708c:	af ef       	ldi	r26, 0xFF	; 255
    708e:	bf ef       	ldi	r27, 0xFF	; 255
    7090:	80 93 15 28 	sts	0x2815, r24	; 0x802815 <heaterPID+0x18>
    7094:	90 93 16 28 	sts	0x2816, r25	; 0x802816 <heaterPID+0x19>
    7098:	a0 93 17 28 	sts	0x2817, r26	; 0x802817 <heaterPID+0x1a>
    709c:	b0 93 18 28 	sts	0x2818, r27	; 0x802818 <heaterPID+0x1b>
    70a0:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <heaterPID+0x4>
    70a4:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <heaterPID+0x5>
    70a8:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <heaterPID+0x6>
    70ac:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <heaterPID+0x7>
    70b0:	80 e0       	ldi	r24, 0x00	; 0
    70b2:	90 e0       	ldi	r25, 0x00	; 0
    70b4:	a8 e0       	ldi	r26, 0x08	; 8
    70b6:	b1 e4       	ldi	r27, 0x41	; 65
    70b8:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <heaterPID+0x1c>
    70bc:	90 93 1a 28 	sts	0x281A, r25	; 0x80281a <heaterPID+0x1d>
    70c0:	a0 93 1b 28 	sts	0x281B, r26	; 0x80281b <heaterPID+0x1e>
    70c4:	b0 93 1c 28 	sts	0x281C, r27	; 0x80281c <heaterPID+0x1f>
    70c8:	00 00       	nop
    70ca:	df 91       	pop	r29
    70cc:	cf 91       	pop	r28
    70ce:	08 95       	ret

000070d0 <init_motor_structs>:
    70d0:	cf 93       	push	r28
    70d2:	df 93       	push	r29
    70d4:	00 d0       	rcall	.+0      	; 0x70d6 <init_motor_structs+0x6>
    70d6:	cd b7       	in	r28, 0x3d	; 61
    70d8:	de b7       	in	r29, 0x3e	; 62
    70da:	19 82       	std	Y+1, r1	; 0x01
    70dc:	1a 82       	std	Y+2, r1	; 0x02
    70de:	11 c0       	rjmp	.+34     	; 0x7102 <init_motor_structs+0x32>
    70e0:	29 81       	ldd	r18, Y+1	; 0x01
    70e2:	3a 81       	ldd	r19, Y+2	; 0x02
    70e4:	47 e4       	ldi	r20, 0x47	; 71
    70e6:	42 9f       	mul	r20, r18
    70e8:	c0 01       	movw	r24, r0
    70ea:	43 9f       	mul	r20, r19
    70ec:	90 0d       	add	r25, r0
    70ee:	11 24       	eor	r1, r1
    70f0:	83 5d       	subi	r24, 0xD3	; 211
    70f2:	97 4d       	sbci	r25, 0xD7	; 215
    70f4:	0e 94 c7 8f 	call	0x11f8e	; 0x11f8e <reset_motor_config>
    70f8:	89 81       	ldd	r24, Y+1	; 0x01
    70fa:	9a 81       	ldd	r25, Y+2	; 0x02
    70fc:	01 96       	adiw	r24, 0x01	; 1
    70fe:	89 83       	std	Y+1, r24	; 0x01
    7100:	9a 83       	std	Y+2, r25	; 0x02
    7102:	89 81       	ldd	r24, Y+1	; 0x01
    7104:	9a 81       	ldd	r25, Y+2	; 0x02
    7106:	04 97       	sbiw	r24, 0x04	; 4
    7108:	5c f3       	brlt	.-42     	; 0x70e0 <init_motor_structs+0x10>
    710a:	10 92 2d 28 	sts	0x282D, r1	; 0x80282d <systemMotors>
    710e:	8a e3       	ldi	r24, 0x3A	; 58
    7110:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <systemMotors+0x3f>
    7114:	84 e2       	ldi	r24, 0x24	; 36
    7116:	80 93 6d 28 	sts	0x286D, r24	; 0x80286d <systemMotors+0x40>
    711a:	8d e3       	ldi	r24, 0x3D	; 61
    711c:	80 93 6e 28 	sts	0x286E, r24	; 0x80286e <systemMotors+0x41>
    7120:	89 e3       	ldi	r24, 0x39	; 57
    7122:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <systemMotors+0x42>
    7126:	88 e3       	ldi	r24, 0x38	; 56
    7128:	80 93 70 28 	sts	0x2870, r24	; 0x802870 <systemMotors+0x43>
    712c:	8b e3       	ldi	r24, 0x3B	; 59
    712e:	80 93 71 28 	sts	0x2871, r24	; 0x802871 <systemMotors+0x44>
    7132:	8c e3       	ldi	r24, 0x3C	; 60
    7134:	80 93 72 28 	sts	0x2872, r24	; 0x802872 <systemMotors+0x45>
    7138:	8f e3       	ldi	r24, 0x3F	; 63
    713a:	80 93 73 28 	sts	0x2873, r24	; 0x802873 <systemMotors+0x46>
    713e:	85 e0       	ldi	r24, 0x05	; 5
    7140:	80 93 54 28 	sts	0x2854, r24	; 0x802854 <systemMotors+0x27>
    7144:	81 e0       	ldi	r24, 0x01	; 1
    7146:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <systemMotors+0x28>
    714a:	82 e3       	ldi	r24, 0x32	; 50
    714c:	80 93 5e 28 	sts	0x285E, r24	; 0x80285e <systemMotors+0x31>
    7150:	81 e0       	ldi	r24, 0x01	; 1
    7152:	80 93 74 28 	sts	0x2874, r24	; 0x802874 <systemMotors+0x47>
    7156:	82 e4       	ldi	r24, 0x42	; 66
    7158:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <systemMotors+0x86>
    715c:	8b e2       	ldi	r24, 0x2B	; 43
    715e:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <systemMotors+0x87>
    7162:	85 e4       	ldi	r24, 0x45	; 69
    7164:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <systemMotors+0x88>
    7168:	81 e4       	ldi	r24, 0x41	; 65
    716a:	80 93 b6 28 	sts	0x28B6, r24	; 0x8028b6 <systemMotors+0x89>
    716e:	80 e4       	ldi	r24, 0x40	; 64
    7170:	80 93 b7 28 	sts	0x28B7, r24	; 0x8028b7 <systemMotors+0x8a>
    7174:	83 e4       	ldi	r24, 0x43	; 67
    7176:	80 93 b8 28 	sts	0x28B8, r24	; 0x8028b8 <systemMotors+0x8b>
    717a:	84 e4       	ldi	r24, 0x44	; 68
    717c:	80 93 b9 28 	sts	0x28B9, r24	; 0x8028b9 <systemMotors+0x8c>
    7180:	87 e4       	ldi	r24, 0x47	; 71
    7182:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <systemMotors+0x8d>
    7186:	86 e0       	ldi	r24, 0x06	; 6
    7188:	80 93 9b 28 	sts	0x289B, r24	; 0x80289b <systemMotors+0x6e>
    718c:	84 e0       	ldi	r24, 0x04	; 4
    718e:	80 93 9c 28 	sts	0x289C, r24	; 0x80289c <systemMotors+0x6f>
    7192:	82 e3       	ldi	r24, 0x32	; 50
    7194:	80 93 a5 28 	sts	0x28A5, r24	; 0x8028a5 <systemMotors+0x78>
    7198:	82 e0       	ldi	r24, 0x02	; 2
    719a:	80 93 bb 28 	sts	0x28BB, r24	; 0x8028bb <systemMotors+0x8e>
    719e:	8a e4       	ldi	r24, 0x4A	; 74
    71a0:	80 93 fa 28 	sts	0x28FA, r24	; 0x8028fa <systemMotors+0xcd>
    71a4:	89 e1       	ldi	r24, 0x19	; 25
    71a6:	80 93 fb 28 	sts	0x28FB, r24	; 0x8028fb <systemMotors+0xce>
    71aa:	8d e4       	ldi	r24, 0x4D	; 77
    71ac:	80 93 fc 28 	sts	0x28FC, r24	; 0x8028fc <systemMotors+0xcf>
    71b0:	89 e4       	ldi	r24, 0x49	; 73
    71b2:	80 93 fd 28 	sts	0x28FD, r24	; 0x8028fd <systemMotors+0xd0>
    71b6:	88 e4       	ldi	r24, 0x48	; 72
    71b8:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <systemMotors+0xd1>
    71bc:	8b e4       	ldi	r24, 0x4B	; 75
    71be:	80 93 ff 28 	sts	0x28FF, r24	; 0x8028ff <systemMotors+0xd2>
    71c2:	8c e4       	ldi	r24, 0x4C	; 76
    71c4:	80 93 00 29 	sts	0x2900, r24	; 0x802900 <systemMotors+0xd3>
    71c8:	8f e4       	ldi	r24, 0x4F	; 79
    71ca:	80 93 01 29 	sts	0x2901, r24	; 0x802901 <systemMotors+0xd4>
    71ce:	82 e0       	ldi	r24, 0x02	; 2
    71d0:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <systemMotors+0xb5>
    71d4:	82 e0       	ldi	r24, 0x02	; 2
    71d6:	80 93 e3 28 	sts	0x28E3, r24	; 0x8028e3 <systemMotors+0xb6>
    71da:	82 e3       	ldi	r24, 0x32	; 50
    71dc:	80 93 ec 28 	sts	0x28EC, r24	; 0x8028ec <systemMotors+0xbf>
    71e0:	83 e0       	ldi	r24, 0x03	; 3
    71e2:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <systemMotors+0xd5>
    71e6:	8a e2       	ldi	r24, 0x2A	; 42
    71e8:	80 93 41 29 	sts	0x2941, r24	; 0x802941 <systemMotors+0x114>
    71ec:	80 e1       	ldi	r24, 0x10	; 16
    71ee:	80 93 42 29 	sts	0x2942, r24	; 0x802942 <systemMotors+0x115>
    71f2:	8d e2       	ldi	r24, 0x2D	; 45
    71f4:	80 93 43 29 	sts	0x2943, r24	; 0x802943 <systemMotors+0x116>
    71f8:	89 e2       	ldi	r24, 0x29	; 41
    71fa:	80 93 44 29 	sts	0x2944, r24	; 0x802944 <systemMotors+0x117>
    71fe:	88 e2       	ldi	r24, 0x28	; 40
    7200:	80 93 45 29 	sts	0x2945, r24	; 0x802945 <systemMotors+0x118>
    7204:	8e e2       	ldi	r24, 0x2E	; 46
    7206:	80 93 46 29 	sts	0x2946, r24	; 0x802946 <systemMotors+0x119>
    720a:	8c e2       	ldi	r24, 0x2C	; 44
    720c:	80 93 47 29 	sts	0x2947, r24	; 0x802947 <systemMotors+0x11a>
    7210:	8f e2       	ldi	r24, 0x2F	; 47
    7212:	80 93 48 29 	sts	0x2948, r24	; 0x802948 <systemMotors+0x11b>
    7216:	10 92 29 29 	sts	0x2929, r1	; 0x802929 <systemMotors+0xfc>
    721a:	81 e0       	ldi	r24, 0x01	; 1
    721c:	80 93 2a 29 	sts	0x292A, r24	; 0x80292a <systemMotors+0xfd>
    7220:	82 e3       	ldi	r24, 0x32	; 50
    7222:	80 93 33 29 	sts	0x2933, r24	; 0x802933 <systemMotors+0x106>
    7226:	1b 82       	std	Y+3, r1	; 0x03
    7228:	10 c0       	rjmp	.+32     	; 0x724a <init_motor_structs+0x17a>
    722a:	8b 81       	ldd	r24, Y+3	; 0x03
    722c:	28 2f       	mov	r18, r24
    722e:	30 e0       	ldi	r19, 0x00	; 0
    7230:	47 e4       	ldi	r20, 0x47	; 71
    7232:	42 9f       	mul	r20, r18
    7234:	c0 01       	movw	r24, r0
    7236:	43 9f       	mul	r20, r19
    7238:	90 0d       	add	r25, r0
    723a:	11 24       	eor	r1, r1
    723c:	83 5d       	subi	r24, 0xD3	; 211
    723e:	97 4d       	sbci	r25, 0xD7	; 215
    7240:	0e 94 42 8d 	call	0x11a84	; 0x11a84 <init_motor_timers>
    7244:	8b 81       	ldd	r24, Y+3	; 0x03
    7246:	8f 5f       	subi	r24, 0xFF	; 255
    7248:	8b 83       	std	Y+3, r24	; 0x03
    724a:	8b 81       	ldd	r24, Y+3	; 0x03
    724c:	84 30       	cpi	r24, 0x04	; 4
    724e:	68 f3       	brcs	.-38     	; 0x722a <init_motor_structs+0x15a>
    7250:	65 e4       	ldi	r22, 0x45	; 69
    7252:	74 e3       	ldi	r23, 0x34	; 52
    7254:	80 e4       	ldi	r24, 0x40	; 64
    7256:	9a e0       	ldi	r25, 0x0A	; 10
    7258:	0e 94 c2 ad 	call	0x15b84	; 0x15b84 <tc_set_overflow_interrupt_callback>
    725c:	62 e0       	ldi	r22, 0x02	; 2
    725e:	80 e4       	ldi	r24, 0x40	; 64
    7260:	9a e0       	ldi	r25, 0x0A	; 10
    7262:	0e 94 ed 30 	call	0x61da	; 0x61da <tc_set_overflow_interrupt_level>
    7266:	68 e9       	ldi	r22, 0x98	; 152
    7268:	74 e3       	ldi	r23, 0x34	; 52
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	9b e0       	ldi	r25, 0x0B	; 11
    726e:	0e 94 c2 ad 	call	0x15b84	; 0x15b84 <tc_set_overflow_interrupt_callback>
    7272:	62 e0       	ldi	r22, 0x02	; 2
    7274:	80 e0       	ldi	r24, 0x00	; 0
    7276:	9b e0       	ldi	r25, 0x0B	; 11
    7278:	0e 94 ed 30 	call	0x61da	; 0x61da <tc_set_overflow_interrupt_level>
    727c:	6b ee       	ldi	r22, 0xEB	; 235
    727e:	74 e3       	ldi	r23, 0x34	; 52
    7280:	80 e0       	ldi	r24, 0x00	; 0
    7282:	99 e0       	ldi	r25, 0x09	; 9
    7284:	0e 94 c2 ad 	call	0x15b84	; 0x15b84 <tc_set_overflow_interrupt_callback>
    7288:	62 e0       	ldi	r22, 0x02	; 2
    728a:	80 e0       	ldi	r24, 0x00	; 0
    728c:	99 e0       	ldi	r25, 0x09	; 9
    728e:	0e 94 ed 30 	call	0x61da	; 0x61da <tc_set_overflow_interrupt_level>
    7292:	6e e3       	ldi	r22, 0x3E	; 62
    7294:	75 e3       	ldi	r23, 0x35	; 53
    7296:	80 e0       	ldi	r24, 0x00	; 0
    7298:	98 e0       	ldi	r25, 0x08	; 8
    729a:	0e 94 c2 ad 	call	0x15b84	; 0x15b84 <tc_set_overflow_interrupt_callback>
    729e:	62 e0       	ldi	r22, 0x02	; 2
    72a0:	80 e0       	ldi	r24, 0x00	; 0
    72a2:	98 e0       	ldi	r25, 0x08	; 8
    72a4:	0e 94 ed 30 	call	0x61da	; 0x61da <tc_set_overflow_interrupt_level>
    72a8:	00 00       	nop
    72aa:	23 96       	adiw	r28, 0x03	; 3
    72ac:	cd bf       	out	0x3d, r28	; 61
    72ae:	de bf       	out	0x3e, r29	; 62
    72b0:	df 91       	pop	r29
    72b2:	cf 91       	pop	r28
    72b4:	08 95       	ret

000072b6 <init_steppers_SPI_control>:
    72b6:	cf 93       	push	r28
    72b8:	df 93       	push	r29
    72ba:	1f 92       	push	r1
    72bc:	cd b7       	in	r28, 0x3d	; 61
    72be:	de b7       	in	r29, 0x3e	; 62
    72c0:	19 82       	std	Y+1, r1	; 0x01
    72c2:	58 c2       	rjmp	.+1200   	; 0x7774 <init_steppers_SPI_control+0x4be>
    72c4:	89 81       	ldd	r24, Y+1	; 0x01
    72c6:	28 2f       	mov	r18, r24
    72c8:	30 e0       	ldi	r19, 0x00	; 0
    72ca:	47 e4       	ldi	r20, 0x47	; 71
    72cc:	42 9f       	mul	r20, r18
    72ce:	c0 01       	movw	r24, r0
    72d0:	43 9f       	mul	r20, r19
    72d2:	90 0d       	add	r25, r0
    72d4:	11 24       	eor	r1, r1
    72d6:	81 5a       	subi	r24, 0xA1	; 161
    72d8:	97 4d       	sbci	r25, 0xD7	; 215
    72da:	fc 01       	movw	r30, r24
    72dc:	10 82       	st	Z, r1
    72de:	11 82       	std	Z+1, r1	; 0x01
    72e0:	89 81       	ldd	r24, Y+1	; 0x01
    72e2:	48 2f       	mov	r20, r24
    72e4:	50 e0       	ldi	r21, 0x00	; 0
    72e6:	89 81       	ldd	r24, Y+1	; 0x01
    72e8:	28 2f       	mov	r18, r24
    72ea:	30 e0       	ldi	r19, 0x00	; 0
    72ec:	67 e4       	ldi	r22, 0x47	; 71
    72ee:	62 9f       	mul	r22, r18
    72f0:	c0 01       	movw	r24, r0
    72f2:	63 9f       	mul	r22, r19
    72f4:	90 0d       	add	r25, r0
    72f6:	11 24       	eor	r1, r1
    72f8:	81 5a       	subi	r24, 0xA1	; 161
    72fa:	97 4d       	sbci	r25, 0xD7	; 215
    72fc:	fc 01       	movw	r30, r24
    72fe:	80 81       	ld	r24, Z
    7300:	91 81       	ldd	r25, Z+1	; 0x01
    7302:	9c 01       	movw	r18, r24
    7304:	30 62       	ori	r19, 0x20	; 32
    7306:	67 e4       	ldi	r22, 0x47	; 71
    7308:	64 9f       	mul	r22, r20
    730a:	c0 01       	movw	r24, r0
    730c:	65 9f       	mul	r22, r21
    730e:	90 0d       	add	r25, r0
    7310:	11 24       	eor	r1, r1
    7312:	81 5a       	subi	r24, 0xA1	; 161
    7314:	97 4d       	sbci	r25, 0xD7	; 215
    7316:	fc 01       	movw	r30, r24
    7318:	20 83       	st	Z, r18
    731a:	31 83       	std	Z+1, r19	; 0x01
    731c:	89 81       	ldd	r24, Y+1	; 0x01
    731e:	48 2f       	mov	r20, r24
    7320:	50 e0       	ldi	r21, 0x00	; 0
    7322:	89 81       	ldd	r24, Y+1	; 0x01
    7324:	28 2f       	mov	r18, r24
    7326:	30 e0       	ldi	r19, 0x00	; 0
    7328:	67 e4       	ldi	r22, 0x47	; 71
    732a:	62 9f       	mul	r22, r18
    732c:	c0 01       	movw	r24, r0
    732e:	63 9f       	mul	r22, r19
    7330:	90 0d       	add	r25, r0
    7332:	11 24       	eor	r1, r1
    7334:	81 5a       	subi	r24, 0xA1	; 161
    7336:	97 4d       	sbci	r25, 0xD7	; 215
    7338:	fc 01       	movw	r30, r24
    733a:	80 81       	ld	r24, Z
    733c:	91 81       	ldd	r25, Z+1	; 0x01
    733e:	9c 01       	movw	r18, r24
    7340:	34 60       	ori	r19, 0x04	; 4
    7342:	67 e4       	ldi	r22, 0x47	; 71
    7344:	64 9f       	mul	r22, r20
    7346:	c0 01       	movw	r24, r0
    7348:	65 9f       	mul	r22, r21
    734a:	90 0d       	add	r25, r0
    734c:	11 24       	eor	r1, r1
    734e:	81 5a       	subi	r24, 0xA1	; 161
    7350:	97 4d       	sbci	r25, 0xD7	; 215
    7352:	fc 01       	movw	r30, r24
    7354:	20 83       	st	Z, r18
    7356:	31 83       	std	Z+1, r19	; 0x01
    7358:	89 81       	ldd	r24, Y+1	; 0x01
    735a:	48 2f       	mov	r20, r24
    735c:	50 e0       	ldi	r21, 0x00	; 0
    735e:	89 81       	ldd	r24, Y+1	; 0x01
    7360:	28 2f       	mov	r18, r24
    7362:	30 e0       	ldi	r19, 0x00	; 0
    7364:	67 e4       	ldi	r22, 0x47	; 71
    7366:	62 9f       	mul	r22, r18
    7368:	c0 01       	movw	r24, r0
    736a:	63 9f       	mul	r22, r19
    736c:	90 0d       	add	r25, r0
    736e:	11 24       	eor	r1, r1
    7370:	81 5a       	subi	r24, 0xA1	; 161
    7372:	97 4d       	sbci	r25, 0xD7	; 215
    7374:	fc 01       	movw	r30, r24
    7376:	80 81       	ld	r24, Z
    7378:	91 81       	ldd	r25, Z+1	; 0x01
    737a:	9c 01       	movw	r18, r24
    737c:	32 60       	ori	r19, 0x02	; 2
    737e:	67 e4       	ldi	r22, 0x47	; 71
    7380:	64 9f       	mul	r22, r20
    7382:	c0 01       	movw	r24, r0
    7384:	65 9f       	mul	r22, r21
    7386:	90 0d       	add	r25, r0
    7388:	11 24       	eor	r1, r1
    738a:	81 5a       	subi	r24, 0xA1	; 161
    738c:	97 4d       	sbci	r25, 0xD7	; 215
    738e:	fc 01       	movw	r30, r24
    7390:	20 83       	st	Z, r18
    7392:	31 83       	std	Z+1, r19	; 0x01
    7394:	89 81       	ldd	r24, Y+1	; 0x01
    7396:	48 2f       	mov	r20, r24
    7398:	50 e0       	ldi	r21, 0x00	; 0
    739a:	89 81       	ldd	r24, Y+1	; 0x01
    739c:	28 2f       	mov	r18, r24
    739e:	30 e0       	ldi	r19, 0x00	; 0
    73a0:	67 e4       	ldi	r22, 0x47	; 71
    73a2:	62 9f       	mul	r22, r18
    73a4:	c0 01       	movw	r24, r0
    73a6:	63 9f       	mul	r22, r19
    73a8:	90 0d       	add	r25, r0
    73aa:	11 24       	eor	r1, r1
    73ac:	81 5a       	subi	r24, 0xA1	; 161
    73ae:	97 4d       	sbci	r25, 0xD7	; 215
    73b0:	fc 01       	movw	r30, r24
    73b2:	80 81       	ld	r24, Z
    73b4:	91 81       	ldd	r25, Z+1	; 0x01
    73b6:	9c 01       	movw	r18, r24
    73b8:	31 60       	ori	r19, 0x01	; 1
    73ba:	67 e4       	ldi	r22, 0x47	; 71
    73bc:	64 9f       	mul	r22, r20
    73be:	c0 01       	movw	r24, r0
    73c0:	65 9f       	mul	r22, r21
    73c2:	90 0d       	add	r25, r0
    73c4:	11 24       	eor	r1, r1
    73c6:	81 5a       	subi	r24, 0xA1	; 161
    73c8:	97 4d       	sbci	r25, 0xD7	; 215
    73ca:	fc 01       	movw	r30, r24
    73cc:	20 83       	st	Z, r18
    73ce:	31 83       	std	Z+1, r19	; 0x01
    73d0:	89 81       	ldd	r24, Y+1	; 0x01
    73d2:	48 2f       	mov	r20, r24
    73d4:	50 e0       	ldi	r21, 0x00	; 0
    73d6:	89 81       	ldd	r24, Y+1	; 0x01
    73d8:	28 2f       	mov	r18, r24
    73da:	30 e0       	ldi	r19, 0x00	; 0
    73dc:	67 e4       	ldi	r22, 0x47	; 71
    73de:	62 9f       	mul	r22, r18
    73e0:	c0 01       	movw	r24, r0
    73e2:	63 9f       	mul	r22, r19
    73e4:	90 0d       	add	r25, r0
    73e6:	11 24       	eor	r1, r1
    73e8:	81 5a       	subi	r24, 0xA1	; 161
    73ea:	97 4d       	sbci	r25, 0xD7	; 215
    73ec:	fc 01       	movw	r30, r24
    73ee:	80 81       	ld	r24, Z
    73f0:	91 81       	ldd	r25, Z+1	; 0x01
    73f2:	9c 01       	movw	r18, r24
    73f4:	20 61       	ori	r18, 0x10	; 16
    73f6:	67 e4       	ldi	r22, 0x47	; 71
    73f8:	64 9f       	mul	r22, r20
    73fa:	c0 01       	movw	r24, r0
    73fc:	65 9f       	mul	r22, r21
    73fe:	90 0d       	add	r25, r0
    7400:	11 24       	eor	r1, r1
    7402:	81 5a       	subi	r24, 0xA1	; 161
    7404:	97 4d       	sbci	r25, 0xD7	; 215
    7406:	fc 01       	movw	r30, r24
    7408:	20 83       	st	Z, r18
    740a:	31 83       	std	Z+1, r19	; 0x01
    740c:	89 81       	ldd	r24, Y+1	; 0x01
    740e:	48 2f       	mov	r20, r24
    7410:	50 e0       	ldi	r21, 0x00	; 0
    7412:	89 81       	ldd	r24, Y+1	; 0x01
    7414:	28 2f       	mov	r18, r24
    7416:	30 e0       	ldi	r19, 0x00	; 0
    7418:	67 e4       	ldi	r22, 0x47	; 71
    741a:	62 9f       	mul	r22, r18
    741c:	c0 01       	movw	r24, r0
    741e:	63 9f       	mul	r22, r19
    7420:	90 0d       	add	r25, r0
    7422:	11 24       	eor	r1, r1
    7424:	81 5a       	subi	r24, 0xA1	; 161
    7426:	97 4d       	sbci	r25, 0xD7	; 215
    7428:	fc 01       	movw	r30, r24
    742a:	80 81       	ld	r24, Z
    742c:	91 81       	ldd	r25, Z+1	; 0x01
    742e:	9c 01       	movw	r18, r24
    7430:	28 60       	ori	r18, 0x08	; 8
    7432:	67 e4       	ldi	r22, 0x47	; 71
    7434:	64 9f       	mul	r22, r20
    7436:	c0 01       	movw	r24, r0
    7438:	65 9f       	mul	r22, r21
    743a:	90 0d       	add	r25, r0
    743c:	11 24       	eor	r1, r1
    743e:	81 5a       	subi	r24, 0xA1	; 161
    7440:	97 4d       	sbci	r25, 0xD7	; 215
    7442:	fc 01       	movw	r30, r24
    7444:	20 83       	st	Z, r18
    7446:	31 83       	std	Z+1, r19	; 0x01
    7448:	89 81       	ldd	r24, Y+1	; 0x01
    744a:	48 2f       	mov	r20, r24
    744c:	50 e0       	ldi	r21, 0x00	; 0
    744e:	89 81       	ldd	r24, Y+1	; 0x01
    7450:	28 2f       	mov	r18, r24
    7452:	30 e0       	ldi	r19, 0x00	; 0
    7454:	67 e4       	ldi	r22, 0x47	; 71
    7456:	62 9f       	mul	r22, r18
    7458:	c0 01       	movw	r24, r0
    745a:	63 9f       	mul	r22, r19
    745c:	90 0d       	add	r25, r0
    745e:	11 24       	eor	r1, r1
    7460:	81 5a       	subi	r24, 0xA1	; 161
    7462:	97 4d       	sbci	r25, 0xD7	; 215
    7464:	fc 01       	movw	r30, r24
    7466:	80 81       	ld	r24, Z
    7468:	91 81       	ldd	r25, Z+1	; 0x01
    746a:	9c 01       	movw	r18, r24
    746c:	24 60       	ori	r18, 0x04	; 4
    746e:	67 e4       	ldi	r22, 0x47	; 71
    7470:	64 9f       	mul	r22, r20
    7472:	c0 01       	movw	r24, r0
    7474:	65 9f       	mul	r22, r21
    7476:	90 0d       	add	r25, r0
    7478:	11 24       	eor	r1, r1
    747a:	81 5a       	subi	r24, 0xA1	; 161
    747c:	97 4d       	sbci	r25, 0xD7	; 215
    747e:	fc 01       	movw	r30, r24
    7480:	20 83       	st	Z, r18
    7482:	31 83       	std	Z+1, r19	; 0x01
    7484:	89 81       	ldd	r24, Y+1	; 0x01
    7486:	28 2f       	mov	r18, r24
    7488:	30 e0       	ldi	r19, 0x00	; 0
    748a:	47 e4       	ldi	r20, 0x47	; 71
    748c:	42 9f       	mul	r20, r18
    748e:	c0 01       	movw	r24, r0
    7490:	43 9f       	mul	r20, r19
    7492:	90 0d       	add	r25, r0
    7494:	11 24       	eor	r1, r1
    7496:	81 5a       	subi	r24, 0xA1	; 161
    7498:	97 4d       	sbci	r25, 0xD7	; 215
    749a:	fc 01       	movw	r30, r24
    749c:	80 81       	ld	r24, Z
    749e:	91 81       	ldd	r25, Z+1	; 0x01
    74a0:	89 2f       	mov	r24, r25
    74a2:	99 27       	eor	r25, r25
    74a4:	80 93 50 29 	sts	0x2950, r24	; 0x802950 <stepperTxBuffer>
    74a8:	89 81       	ldd	r24, Y+1	; 0x01
    74aa:	28 2f       	mov	r18, r24
    74ac:	30 e0       	ldi	r19, 0x00	; 0
    74ae:	47 e4       	ldi	r20, 0x47	; 71
    74b0:	42 9f       	mul	r20, r18
    74b2:	c0 01       	movw	r24, r0
    74b4:	43 9f       	mul	r20, r19
    74b6:	90 0d       	add	r25, r0
    74b8:	11 24       	eor	r1, r1
    74ba:	81 5a       	subi	r24, 0xA1	; 161
    74bc:	97 4d       	sbci	r25, 0xD7	; 215
    74be:	fc 01       	movw	r30, r24
    74c0:	80 81       	ld	r24, Z
    74c2:	91 81       	ldd	r25, Z+1	; 0x01
    74c4:	80 93 51 29 	sts	0x2951, r24	; 0x802951 <stepperTxBuffer+0x1>
    74c8:	89 81       	ldd	r24, Y+1	; 0x01
    74ca:	28 2f       	mov	r18, r24
    74cc:	30 e0       	ldi	r19, 0x00	; 0
    74ce:	47 e4       	ldi	r20, 0x47	; 71
    74d0:	42 9f       	mul	r20, r18
    74d2:	c0 01       	movw	r24, r0
    74d4:	43 9f       	mul	r20, r19
    74d6:	90 0d       	add	r25, r0
    74d8:	11 24       	eor	r1, r1
    74da:	8e 58       	subi	r24, 0x8E	; 142
    74dc:	97 4d       	sbci	r25, 0xD7	; 215
    74de:	fc 01       	movw	r30, r24
    74e0:	80 81       	ld	r24, Z
    74e2:	22 e0       	ldi	r18, 0x02	; 2
    74e4:	40 e5       	ldi	r20, 0x50	; 80
    74e6:	59 e2       	ldi	r21, 0x29	; 41
    74e8:	68 2f       	mov	r22, r24
    74ea:	80 ec       	ldi	r24, 0xC0	; 192
    74ec:	9a e0       	ldi	r25, 0x0A	; 10
    74ee:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <send_msg>
    74f2:	89 81       	ldd	r24, Y+1	; 0x01
    74f4:	28 2f       	mov	r18, r24
    74f6:	30 e0       	ldi	r19, 0x00	; 0
    74f8:	47 e4       	ldi	r20, 0x47	; 71
    74fa:	42 9f       	mul	r20, r18
    74fc:	c0 01       	movw	r24, r0
    74fe:	43 9f       	mul	r20, r19
    7500:	90 0d       	add	r25, r0
    7502:	11 24       	eor	r1, r1
    7504:	8f 59       	subi	r24, 0x9F	; 159
    7506:	97 4d       	sbci	r25, 0xD7	; 215
    7508:	fc 01       	movw	r30, r24
    750a:	10 82       	st	Z, r1
    750c:	11 82       	std	Z+1, r1	; 0x01
    750e:	89 81       	ldd	r24, Y+1	; 0x01
    7510:	48 2f       	mov	r20, r24
    7512:	50 e0       	ldi	r21, 0x00	; 0
    7514:	89 81       	ldd	r24, Y+1	; 0x01
    7516:	28 2f       	mov	r18, r24
    7518:	30 e0       	ldi	r19, 0x00	; 0
    751a:	67 e4       	ldi	r22, 0x47	; 71
    751c:	62 9f       	mul	r22, r18
    751e:	c0 01       	movw	r24, r0
    7520:	63 9f       	mul	r22, r19
    7522:	90 0d       	add	r25, r0
    7524:	11 24       	eor	r1, r1
    7526:	8f 59       	subi	r24, 0x9F	; 159
    7528:	97 4d       	sbci	r25, 0xD7	; 215
    752a:	fc 01       	movw	r30, r24
    752c:	80 81       	ld	r24, Z
    752e:	91 81       	ldd	r25, Z+1	; 0x01
    7530:	9c 01       	movw	r18, r24
    7532:	30 64       	ori	r19, 0x40	; 64
    7534:	67 e4       	ldi	r22, 0x47	; 71
    7536:	64 9f       	mul	r22, r20
    7538:	c0 01       	movw	r24, r0
    753a:	65 9f       	mul	r22, r21
    753c:	90 0d       	add	r25, r0
    753e:	11 24       	eor	r1, r1
    7540:	8f 59       	subi	r24, 0x9F	; 159
    7542:	97 4d       	sbci	r25, 0xD7	; 215
    7544:	fc 01       	movw	r30, r24
    7546:	20 83       	st	Z, r18
    7548:	31 83       	std	Z+1, r19	; 0x01
    754a:	89 81       	ldd	r24, Y+1	; 0x01
    754c:	48 2f       	mov	r20, r24
    754e:	50 e0       	ldi	r21, 0x00	; 0
    7550:	89 81       	ldd	r24, Y+1	; 0x01
    7552:	28 2f       	mov	r18, r24
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	67 e4       	ldi	r22, 0x47	; 71
    7558:	62 9f       	mul	r22, r18
    755a:	c0 01       	movw	r24, r0
    755c:	63 9f       	mul	r22, r19
    755e:	90 0d       	add	r25, r0
    7560:	11 24       	eor	r1, r1
    7562:	8f 59       	subi	r24, 0x9F	; 159
    7564:	97 4d       	sbci	r25, 0xD7	; 215
    7566:	fc 01       	movw	r30, r24
    7568:	80 81       	ld	r24, Z
    756a:	91 81       	ldd	r25, Z+1	; 0x01
    756c:	9c 01       	movw	r18, r24
    756e:	30 61       	ori	r19, 0x10	; 16
    7570:	67 e4       	ldi	r22, 0x47	; 71
    7572:	64 9f       	mul	r22, r20
    7574:	c0 01       	movw	r24, r0
    7576:	65 9f       	mul	r22, r21
    7578:	90 0d       	add	r25, r0
    757a:	11 24       	eor	r1, r1
    757c:	8f 59       	subi	r24, 0x9F	; 159
    757e:	97 4d       	sbci	r25, 0xD7	; 215
    7580:	fc 01       	movw	r30, r24
    7582:	20 83       	st	Z, r18
    7584:	31 83       	std	Z+1, r19	; 0x01
    7586:	89 81       	ldd	r24, Y+1	; 0x01
    7588:	28 2f       	mov	r18, r24
    758a:	30 e0       	ldi	r19, 0x00	; 0
    758c:	47 e4       	ldi	r20, 0x47	; 71
    758e:	42 9f       	mul	r20, r18
    7590:	c0 01       	movw	r24, r0
    7592:	43 9f       	mul	r20, r19
    7594:	90 0d       	add	r25, r0
    7596:	11 24       	eor	r1, r1
    7598:	8f 59       	subi	r24, 0x9F	; 159
    759a:	97 4d       	sbci	r25, 0xD7	; 215
    759c:	fc 01       	movw	r30, r24
    759e:	80 81       	ld	r24, Z
    75a0:	91 81       	ldd	r25, Z+1	; 0x01
    75a2:	89 2f       	mov	r24, r25
    75a4:	99 27       	eor	r25, r25
    75a6:	80 93 50 29 	sts	0x2950, r24	; 0x802950 <stepperTxBuffer>
    75aa:	89 81       	ldd	r24, Y+1	; 0x01
    75ac:	28 2f       	mov	r18, r24
    75ae:	30 e0       	ldi	r19, 0x00	; 0
    75b0:	47 e4       	ldi	r20, 0x47	; 71
    75b2:	42 9f       	mul	r20, r18
    75b4:	c0 01       	movw	r24, r0
    75b6:	43 9f       	mul	r20, r19
    75b8:	90 0d       	add	r25, r0
    75ba:	11 24       	eor	r1, r1
    75bc:	8f 59       	subi	r24, 0x9F	; 159
    75be:	97 4d       	sbci	r25, 0xD7	; 215
    75c0:	fc 01       	movw	r30, r24
    75c2:	80 81       	ld	r24, Z
    75c4:	91 81       	ldd	r25, Z+1	; 0x01
    75c6:	80 93 51 29 	sts	0x2951, r24	; 0x802951 <stepperTxBuffer+0x1>
    75ca:	89 81       	ldd	r24, Y+1	; 0x01
    75cc:	28 2f       	mov	r18, r24
    75ce:	30 e0       	ldi	r19, 0x00	; 0
    75d0:	47 e4       	ldi	r20, 0x47	; 71
    75d2:	42 9f       	mul	r20, r18
    75d4:	c0 01       	movw	r24, r0
    75d6:	43 9f       	mul	r20, r19
    75d8:	90 0d       	add	r25, r0
    75da:	11 24       	eor	r1, r1
    75dc:	8e 58       	subi	r24, 0x8E	; 142
    75de:	97 4d       	sbci	r25, 0xD7	; 215
    75e0:	fc 01       	movw	r30, r24
    75e2:	80 81       	ld	r24, Z
    75e4:	22 e0       	ldi	r18, 0x02	; 2
    75e6:	40 e5       	ldi	r20, 0x50	; 80
    75e8:	59 e2       	ldi	r21, 0x29	; 41
    75ea:	68 2f       	mov	r22, r24
    75ec:	80 ec       	ldi	r24, 0xC0	; 192
    75ee:	9a e0       	ldi	r25, 0x0A	; 10
    75f0:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <send_msg>
    75f4:	89 81       	ldd	r24, Y+1	; 0x01
    75f6:	28 2f       	mov	r18, r24
    75f8:	30 e0       	ldi	r19, 0x00	; 0
    75fa:	47 e4       	ldi	r20, 0x47	; 71
    75fc:	42 9f       	mul	r20, r18
    75fe:	c0 01       	movw	r24, r0
    7600:	43 9f       	mul	r20, r19
    7602:	90 0d       	add	r25, r0
    7604:	11 24       	eor	r1, r1
    7606:	8d 59       	subi	r24, 0x9D	; 157
    7608:	97 4d       	sbci	r25, 0xD7	; 215
    760a:	fc 01       	movw	r30, r24
    760c:	10 82       	st	Z, r1
    760e:	11 82       	std	Z+1, r1	; 0x01
    7610:	89 81       	ldd	r24, Y+1	; 0x01
    7612:	48 2f       	mov	r20, r24
    7614:	50 e0       	ldi	r21, 0x00	; 0
    7616:	89 81       	ldd	r24, Y+1	; 0x01
    7618:	28 2f       	mov	r18, r24
    761a:	30 e0       	ldi	r19, 0x00	; 0
    761c:	67 e4       	ldi	r22, 0x47	; 71
    761e:	62 9f       	mul	r22, r18
    7620:	c0 01       	movw	r24, r0
    7622:	63 9f       	mul	r22, r19
    7624:	90 0d       	add	r25, r0
    7626:	11 24       	eor	r1, r1
    7628:	8d 59       	subi	r24, 0x9D	; 157
    762a:	97 4d       	sbci	r25, 0xD7	; 215
    762c:	fc 01       	movw	r30, r24
    762e:	80 81       	ld	r24, Z
    7630:	91 81       	ldd	r25, Z+1	; 0x01
    7632:	9c 01       	movw	r18, r24
    7634:	30 68       	ori	r19, 0x80	; 128
    7636:	67 e4       	ldi	r22, 0x47	; 71
    7638:	64 9f       	mul	r22, r20
    763a:	c0 01       	movw	r24, r0
    763c:	65 9f       	mul	r22, r21
    763e:	90 0d       	add	r25, r0
    7640:	11 24       	eor	r1, r1
    7642:	8d 59       	subi	r24, 0x9D	; 157
    7644:	97 4d       	sbci	r25, 0xD7	; 215
    7646:	fc 01       	movw	r30, r24
    7648:	20 83       	st	Z, r18
    764a:	31 83       	std	Z+1, r19	; 0x01
    764c:	89 81       	ldd	r24, Y+1	; 0x01
    764e:	48 2f       	mov	r20, r24
    7650:	50 e0       	ldi	r21, 0x00	; 0
    7652:	89 81       	ldd	r24, Y+1	; 0x01
    7654:	28 2f       	mov	r18, r24
    7656:	30 e0       	ldi	r19, 0x00	; 0
    7658:	67 e4       	ldi	r22, 0x47	; 71
    765a:	62 9f       	mul	r22, r18
    765c:	c0 01       	movw	r24, r0
    765e:	63 9f       	mul	r22, r19
    7660:	90 0d       	add	r25, r0
    7662:	11 24       	eor	r1, r1
    7664:	8d 59       	subi	r24, 0x9D	; 157
    7666:	97 4d       	sbci	r25, 0xD7	; 215
    7668:	fc 01       	movw	r30, r24
    766a:	80 81       	ld	r24, Z
    766c:	91 81       	ldd	r25, Z+1	; 0x01
    766e:	9c 01       	movw	r18, r24
    7670:	20 64       	ori	r18, 0x40	; 64
    7672:	67 e4       	ldi	r22, 0x47	; 71
    7674:	64 9f       	mul	r22, r20
    7676:	c0 01       	movw	r24, r0
    7678:	65 9f       	mul	r22, r21
    767a:	90 0d       	add	r25, r0
    767c:	11 24       	eor	r1, r1
    767e:	8d 59       	subi	r24, 0x9D	; 157
    7680:	97 4d       	sbci	r25, 0xD7	; 215
    7682:	fc 01       	movw	r30, r24
    7684:	20 83       	st	Z, r18
    7686:	31 83       	std	Z+1, r19	; 0x01
    7688:	89 81       	ldd	r24, Y+1	; 0x01
    768a:	48 2f       	mov	r20, r24
    768c:	50 e0       	ldi	r21, 0x00	; 0
    768e:	89 81       	ldd	r24, Y+1	; 0x01
    7690:	28 2f       	mov	r18, r24
    7692:	30 e0       	ldi	r19, 0x00	; 0
    7694:	67 e4       	ldi	r22, 0x47	; 71
    7696:	62 9f       	mul	r22, r18
    7698:	c0 01       	movw	r24, r0
    769a:	63 9f       	mul	r22, r19
    769c:	90 0d       	add	r25, r0
    769e:	11 24       	eor	r1, r1
    76a0:	8d 59       	subi	r24, 0x9D	; 157
    76a2:	97 4d       	sbci	r25, 0xD7	; 215
    76a4:	fc 01       	movw	r30, r24
    76a6:	80 81       	ld	r24, Z
    76a8:	91 81       	ldd	r25, Z+1	; 0x01
    76aa:	9c 01       	movw	r18, r24
    76ac:	32 60       	ori	r19, 0x02	; 2
    76ae:	67 e4       	ldi	r22, 0x47	; 71
    76b0:	64 9f       	mul	r22, r20
    76b2:	c0 01       	movw	r24, r0
    76b4:	65 9f       	mul	r22, r21
    76b6:	90 0d       	add	r25, r0
    76b8:	11 24       	eor	r1, r1
    76ba:	8d 59       	subi	r24, 0x9D	; 157
    76bc:	97 4d       	sbci	r25, 0xD7	; 215
    76be:	fc 01       	movw	r30, r24
    76c0:	20 83       	st	Z, r18
    76c2:	31 83       	std	Z+1, r19	; 0x01
    76c4:	89 81       	ldd	r24, Y+1	; 0x01
    76c6:	48 2f       	mov	r20, r24
    76c8:	50 e0       	ldi	r21, 0x00	; 0
    76ca:	89 81       	ldd	r24, Y+1	; 0x01
    76cc:	28 2f       	mov	r18, r24
    76ce:	30 e0       	ldi	r19, 0x00	; 0
    76d0:	67 e4       	ldi	r22, 0x47	; 71
    76d2:	62 9f       	mul	r22, r18
    76d4:	c0 01       	movw	r24, r0
    76d6:	63 9f       	mul	r22, r19
    76d8:	90 0d       	add	r25, r0
    76da:	11 24       	eor	r1, r1
    76dc:	8d 59       	subi	r24, 0x9D	; 157
    76de:	97 4d       	sbci	r25, 0xD7	; 215
    76e0:	fc 01       	movw	r30, r24
    76e2:	80 81       	ld	r24, Z
    76e4:	91 81       	ldd	r25, Z+1	; 0x01
    76e6:	9c 01       	movw	r18, r24
    76e8:	38 60       	ori	r19, 0x08	; 8
    76ea:	67 e4       	ldi	r22, 0x47	; 71
    76ec:	64 9f       	mul	r22, r20
    76ee:	c0 01       	movw	r24, r0
    76f0:	65 9f       	mul	r22, r21
    76f2:	90 0d       	add	r25, r0
    76f4:	11 24       	eor	r1, r1
    76f6:	8d 59       	subi	r24, 0x9D	; 157
    76f8:	97 4d       	sbci	r25, 0xD7	; 215
    76fa:	fc 01       	movw	r30, r24
    76fc:	20 83       	st	Z, r18
    76fe:	31 83       	std	Z+1, r19	; 0x01
    7700:	89 81       	ldd	r24, Y+1	; 0x01
    7702:	28 2f       	mov	r18, r24
    7704:	30 e0       	ldi	r19, 0x00	; 0
    7706:	47 e4       	ldi	r20, 0x47	; 71
    7708:	42 9f       	mul	r20, r18
    770a:	c0 01       	movw	r24, r0
    770c:	43 9f       	mul	r20, r19
    770e:	90 0d       	add	r25, r0
    7710:	11 24       	eor	r1, r1
    7712:	8d 59       	subi	r24, 0x9D	; 157
    7714:	97 4d       	sbci	r25, 0xD7	; 215
    7716:	fc 01       	movw	r30, r24
    7718:	80 81       	ld	r24, Z
    771a:	91 81       	ldd	r25, Z+1	; 0x01
    771c:	89 2f       	mov	r24, r25
    771e:	99 27       	eor	r25, r25
    7720:	80 93 50 29 	sts	0x2950, r24	; 0x802950 <stepperTxBuffer>
    7724:	89 81       	ldd	r24, Y+1	; 0x01
    7726:	28 2f       	mov	r18, r24
    7728:	30 e0       	ldi	r19, 0x00	; 0
    772a:	47 e4       	ldi	r20, 0x47	; 71
    772c:	42 9f       	mul	r20, r18
    772e:	c0 01       	movw	r24, r0
    7730:	43 9f       	mul	r20, r19
    7732:	90 0d       	add	r25, r0
    7734:	11 24       	eor	r1, r1
    7736:	8d 59       	subi	r24, 0x9D	; 157
    7738:	97 4d       	sbci	r25, 0xD7	; 215
    773a:	fc 01       	movw	r30, r24
    773c:	80 81       	ld	r24, Z
    773e:	91 81       	ldd	r25, Z+1	; 0x01
    7740:	80 93 51 29 	sts	0x2951, r24	; 0x802951 <stepperTxBuffer+0x1>
    7744:	89 81       	ldd	r24, Y+1	; 0x01
    7746:	28 2f       	mov	r18, r24
    7748:	30 e0       	ldi	r19, 0x00	; 0
    774a:	47 e4       	ldi	r20, 0x47	; 71
    774c:	42 9f       	mul	r20, r18
    774e:	c0 01       	movw	r24, r0
    7750:	43 9f       	mul	r20, r19
    7752:	90 0d       	add	r25, r0
    7754:	11 24       	eor	r1, r1
    7756:	8e 58       	subi	r24, 0x8E	; 142
    7758:	97 4d       	sbci	r25, 0xD7	; 215
    775a:	fc 01       	movw	r30, r24
    775c:	80 81       	ld	r24, Z
    775e:	22 e0       	ldi	r18, 0x02	; 2
    7760:	40 e5       	ldi	r20, 0x50	; 80
    7762:	59 e2       	ldi	r21, 0x29	; 41
    7764:	68 2f       	mov	r22, r24
    7766:	80 ec       	ldi	r24, 0xC0	; 192
    7768:	9a e0       	ldi	r25, 0x0A	; 10
    776a:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <send_msg>
    776e:	89 81       	ldd	r24, Y+1	; 0x01
    7770:	8f 5f       	subi	r24, 0xFF	; 255
    7772:	89 83       	std	Y+1, r24	; 0x01
    7774:	89 81       	ldd	r24, Y+1	; 0x01
    7776:	84 30       	cpi	r24, 0x04	; 4
    7778:	08 f4       	brcc	.+2      	; 0x777c <init_steppers_SPI_control+0x4c6>
    777a:	a4 cd       	rjmp	.-1208   	; 0x72c4 <init_steppers_SPI_control+0xe>
    777c:	00 00       	nop
    777e:	0f 90       	pop	r0
    7780:	df 91       	pop	r29
    7782:	cf 91       	pop	r28
    7784:	08 95       	ret

00007786 <init_sys_timer>:
    7786:	cf 93       	push	r28
    7788:	df 93       	push	r29
    778a:	cd b7       	in	r28, 0x3d	; 61
    778c:	de b7       	in	r29, 0x3e	; 62
    778e:	80 e4       	ldi	r24, 0x40	; 64
    7790:	98 e0       	ldi	r25, 0x08	; 8
    7792:	0e 94 38 ad 	call	0x15a70	; 0x15a70 <tc_enable>
    7796:	6b e4       	ldi	r22, 0x4B	; 75
    7798:	73 e3       	ldi	r23, 0x33	; 51
    779a:	80 e4       	ldi	r24, 0x40	; 64
    779c:	98 e0       	ldi	r25, 0x08	; 8
    779e:	0e 94 c2 ad 	call	0x15b84	; 0x15b84 <tc_set_overflow_interrupt_callback>
    77a2:	60 e0       	ldi	r22, 0x00	; 0
    77a4:	80 e4       	ldi	r24, 0x40	; 64
    77a6:	98 e0       	ldi	r25, 0x08	; 8
    77a8:	0e 94 a8 32 	call	0x6550	; 0x6550 <tc_set_wgm>
    77ac:	64 ef       	ldi	r22, 0xF4	; 244
    77ae:	71 e0       	ldi	r23, 0x01	; 1
    77b0:	80 e4       	ldi	r24, 0x40	; 64
    77b2:	98 e0       	ldi	r25, 0x08	; 8
    77b4:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <tc_write_period>
    77b8:	63 e0       	ldi	r22, 0x03	; 3
    77ba:	80 e4       	ldi	r24, 0x40	; 64
    77bc:	98 e0       	ldi	r25, 0x08	; 8
    77be:	0e 94 ed 30 	call	0x61da	; 0x61da <tc_set_overflow_interrupt_level>
    77c2:	65 e0       	ldi	r22, 0x05	; 5
    77c4:	80 e4       	ldi	r24, 0x40	; 64
    77c6:	98 e0       	ldi	r25, 0x08	; 8
    77c8:	0e 94 60 31 	call	0x62c0	; 0x62c0 <tc_write_clock_source>
    77cc:	00 00       	nop
    77ce:	df 91       	pop	r29
    77d0:	cf 91       	pop	r28
    77d2:	08 95       	ret

000077d4 <init_heater_timer>:
    77d4:	cf 93       	push	r28
    77d6:	df 93       	push	r29
    77d8:	cd b7       	in	r28, 0x3d	; 61
    77da:	de b7       	in	r29, 0x3e	; 62
    77dc:	80 e4       	ldi	r24, 0x40	; 64
    77de:	99 e0       	ldi	r25, 0x09	; 9
    77e0:	0e 94 38 ad 	call	0x15a70	; 0x15a70 <tc_enable>
    77e4:	65 e1       	ldi	r22, 0x15	; 21
    77e6:	74 e3       	ldi	r23, 0x34	; 52
    77e8:	80 e4       	ldi	r24, 0x40	; 64
    77ea:	99 e0       	ldi	r25, 0x09	; 9
    77ec:	0e 94 32 ae 	call	0x15c64	; 0x15c64 <tc_set_cca_interrupt_callback>
    77f0:	61 e3       	ldi	r22, 0x31	; 49
    77f2:	74 e3       	ldi	r23, 0x34	; 52
    77f4:	80 e4       	ldi	r24, 0x40	; 64
    77f6:	99 e0       	ldi	r25, 0x09	; 9
    77f8:	0e 94 c2 ad 	call	0x15b84	; 0x15b84 <tc_set_overflow_interrupt_callback>
    77fc:	60 e0       	ldi	r22, 0x00	; 0
    77fe:	80 e4       	ldi	r24, 0x40	; 64
    7800:	99 e0       	ldi	r25, 0x09	; 9
    7802:	0e 94 a8 32 	call	0x6550	; 0x6550 <tc_set_wgm>
    7806:	64 ef       	ldi	r22, 0xF4	; 244
    7808:	71 e0       	ldi	r23, 0x01	; 1
    780a:	80 e4       	ldi	r24, 0x40	; 64
    780c:	99 e0       	ldi	r25, 0x09	; 9
    780e:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <tc_write_period>
    7812:	44 e6       	ldi	r20, 0x64	; 100
    7814:	50 e0       	ldi	r21, 0x00	; 0
    7816:	61 e0       	ldi	r22, 0x01	; 1
    7818:	80 e4       	ldi	r24, 0x40	; 64
    781a:	99 e0       	ldi	r25, 0x09	; 9
    781c:	0e 94 3e 32 	call	0x647c	; 0x647c <tc_write_cc>
    7820:	61 e0       	ldi	r22, 0x01	; 1
    7822:	80 e4       	ldi	r24, 0x40	; 64
    7824:	99 e0       	ldi	r25, 0x09	; 9
    7826:	0e 94 ac 31 	call	0x6358	; 0x6358 <tc_enable_cc_channels>
    782a:	61 e0       	ldi	r22, 0x01	; 1
    782c:	80 e4       	ldi	r24, 0x40	; 64
    782e:	99 e0       	ldi	r25, 0x09	; 9
    7830:	0e 94 11 31 	call	0x6222	; 0x6222 <tc_set_cca_interrupt_level>
    7834:	61 e0       	ldi	r22, 0x01	; 1
    7836:	80 e4       	ldi	r24, 0x40	; 64
    7838:	99 e0       	ldi	r25, 0x09	; 9
    783a:	0e 94 ed 30 	call	0x61da	; 0x61da <tc_set_overflow_interrupt_level>
    783e:	65 e0       	ldi	r22, 0x05	; 5
    7840:	80 e4       	ldi	r24, 0x40	; 64
    7842:	99 e0       	ldi	r25, 0x09	; 9
    7844:	0e 94 60 31 	call	0x62c0	; 0x62c0 <tc_write_clock_source>
    7848:	00 00       	nop
    784a:	df 91       	pop	r29
    784c:	cf 91       	pop	r28
    784e:	08 95       	ret

00007850 <init_fan_timer>:
    7850:	cf 93       	push	r28
    7852:	df 93       	push	r29
    7854:	cd b7       	in	r28, 0x3d	; 61
    7856:	de b7       	in	r29, 0x3e	; 62
    7858:	63 e2       	ldi	r22, 0x23	; 35
    785a:	74 e3       	ldi	r23, 0x34	; 52
    785c:	80 e4       	ldi	r24, 0x40	; 64
    785e:	99 e0       	ldi	r25, 0x09	; 9
    7860:	0e 94 a2 ae 	call	0x15d44	; 0x15d44 <tc_set_ccb_interrupt_callback>
    7864:	44 e6       	ldi	r20, 0x64	; 100
    7866:	50 e0       	ldi	r21, 0x00	; 0
    7868:	62 e0       	ldi	r22, 0x02	; 2
    786a:	80 e4       	ldi	r24, 0x40	; 64
    786c:	99 e0       	ldi	r25, 0x09	; 9
    786e:	0e 94 3e 32 	call	0x647c	; 0x647c <tc_write_cc>
    7872:	62 e0       	ldi	r22, 0x02	; 2
    7874:	80 e4       	ldi	r24, 0x40	; 64
    7876:	99 e0       	ldi	r25, 0x09	; 9
    7878:	0e 94 ac 31 	call	0x6358	; 0x6358 <tc_enable_cc_channels>
    787c:	61 e0       	ldi	r22, 0x01	; 1
    787e:	80 e4       	ldi	r24, 0x40	; 64
    7880:	99 e0       	ldi	r25, 0x09	; 9
    7882:	0e 94 35 31 	call	0x626a	; 0x626a <tc_set_ccb_interrupt_level>
    7886:	00 00       	nop
    7888:	df 91       	pop	r29
    788a:	cf 91       	pop	r28
    788c:	08 95       	ret

0000788e <parse_received_USB_msg>:
    788e:	cf 93       	push	r28
    7890:	df 93       	push	r29
    7892:	cd b7       	in	r28, 0x3d	; 61
    7894:	de b7       	in	r29, 0x3e	; 62
    7896:	6b 97       	sbiw	r28, 0x1b	; 27
    7898:	cd bf       	out	0x3d, r28	; 61
    789a:	de bf       	out	0x3e, r29	; 62
    789c:	19 82       	std	Y+1, r1	; 0x01
    789e:	1a 82       	std	Y+2, r1	; 0x02
    78a0:	1b 82       	std	Y+3, r1	; 0x03
    78a2:	1c 82       	std	Y+4, r1	; 0x04
    78a4:	1d 82       	std	Y+5, r1	; 0x05
    78a6:	1e 82       	std	Y+6, r1	; 0x06
    78a8:	1b 8a       	std	Y+19, r1	; 0x13
    78aa:	1c 8a       	std	Y+20, r1	; 0x14
    78ac:	87 e0       	ldi	r24, 0x07	; 7
    78ae:	ea eb       	ldi	r30, 0xBA	; 186
    78b0:	f0 e2       	ldi	r31, 0x20	; 32
    78b2:	de 01       	movw	r26, r28
    78b4:	55 96       	adiw	r26, 0x15	; 21
    78b6:	01 90       	ld	r0, Z+
    78b8:	0d 92       	st	X+, r0
    78ba:	8a 95       	dec	r24
    78bc:	e1 f7       	brne	.-8      	; 0x78b6 <parse_received_USB_msg+0x28>
    78be:	0e 94 3f 56 	call	0xac7e	; 0xac7e <clear_receivedUSBMsg>
    78c2:	0e 94 f4 82 	call	0x105e8	; 0x105e8 <get_last_msg_length>
    78c6:	8b 8b       	std	Y+19, r24	; 0x13
    78c8:	9c 8b       	std	Y+20, r25	; 0x14
    78ca:	80 91 6f 25 	lds	r24, 0x256F	; 0x80256f <USBRxBuff>
    78ce:	89 83       	std	Y+1, r24	; 0x01
    78d0:	8b 81       	ldd	r24, Y+3	; 0x03
    78d2:	9c 81       	ldd	r25, Y+4	; 0x04
    78d4:	8f 83       	std	Y+7, r24	; 0x07
    78d6:	98 87       	std	Y+8, r25	; 0x08
    78d8:	1e c0       	rjmp	.+60     	; 0x7916 <parse_received_USB_msg+0x88>
    78da:	89 81       	ldd	r24, Y+1	; 0x01
    78dc:	80 32       	cpi	r24, 0x20	; 32
    78de:	11 f1       	breq	.+68     	; 0x7924 <parse_received_USB_msg+0x96>
    78e0:	89 81       	ldd	r24, Y+1	; 0x01
    78e2:	88 23       	and	r24, r24
    78e4:	f9 f0       	breq	.+62     	; 0x7924 <parse_received_USB_msg+0x96>
    78e6:	8b 81       	ldd	r24, Y+3	; 0x03
    78e8:	9c 81       	ldd	r25, Y+4	; 0x04
    78ea:	86 5c       	subi	r24, 0xC6	; 198
    78ec:	99 4d       	sbci	r25, 0xD9	; 217
    78ee:	29 81       	ldd	r18, Y+1	; 0x01
    78f0:	fc 01       	movw	r30, r24
    78f2:	20 83       	st	Z, r18
    78f4:	8b 81       	ldd	r24, Y+3	; 0x03
    78f6:	9c 81       	ldd	r25, Y+4	; 0x04
    78f8:	01 96       	adiw	r24, 0x01	; 1
    78fa:	8b 83       	std	Y+3, r24	; 0x03
    78fc:	9c 83       	std	Y+4, r25	; 0x04
    78fe:	8b 81       	ldd	r24, Y+3	; 0x03
    7900:	9c 81       	ldd	r25, Y+4	; 0x04
    7902:	81 59       	subi	r24, 0x91	; 145
    7904:	9a 4d       	sbci	r25, 0xDA	; 218
    7906:	fc 01       	movw	r30, r24
    7908:	80 81       	ld	r24, Z
    790a:	89 83       	std	Y+1, r24	; 0x01
    790c:	8f 81       	ldd	r24, Y+7	; 0x07
    790e:	98 85       	ldd	r25, Y+8	; 0x08
    7910:	01 96       	adiw	r24, 0x01	; 1
    7912:	8f 83       	std	Y+7, r24	; 0x07
    7914:	98 87       	std	Y+8, r25	; 0x08
    7916:	2f 81       	ldd	r18, Y+7	; 0x07
    7918:	38 85       	ldd	r19, Y+8	; 0x08
    791a:	8b 89       	ldd	r24, Y+19	; 0x13
    791c:	9c 89       	ldd	r25, Y+20	; 0x14
    791e:	28 17       	cp	r18, r24
    7920:	39 07       	cpc	r19, r25
    7922:	d8 f2       	brcs	.-74     	; 0x78da <parse_received_USB_msg+0x4c>
    7924:	8a e3       	ldi	r24, 0x3A	; 58
    7926:	96 e2       	ldi	r25, 0x26	; 38
    7928:	36 d2       	rcall	.+1132   	; 0x7d96 <check_cmd_type>
    792a:	80 93 3d 26 	sts	0x263D, r24	; 0x80263d <receivedUSBMsg+0x6>
    792e:	8b 81       	ldd	r24, Y+3	; 0x03
    7930:	9c 81       	ldd	r25, Y+4	; 0x04
    7932:	01 96       	adiw	r24, 0x01	; 1
    7934:	8b 83       	std	Y+3, r24	; 0x03
    7936:	9c 83       	std	Y+4, r25	; 0x04
    7938:	8b 81       	ldd	r24, Y+3	; 0x03
    793a:	9c 81       	ldd	r25, Y+4	; 0x04
    793c:	81 59       	subi	r24, 0x91	; 145
    793e:	9a 4d       	sbci	r25, 0xDA	; 218
    7940:	fc 01       	movw	r30, r24
    7942:	80 81       	ld	r24, Z
    7944:	89 83       	std	Y+1, r24	; 0x01
    7946:	8b 81       	ldd	r24, Y+3	; 0x03
    7948:	9c 81       	ldd	r25, Y+4	; 0x04
    794a:	8d 83       	std	Y+5, r24	; 0x05
    794c:	9e 83       	std	Y+6, r25	; 0x06
    794e:	8b 81       	ldd	r24, Y+3	; 0x03
    7950:	9c 81       	ldd	r25, Y+4	; 0x04
    7952:	01 97       	sbiw	r24, 0x01	; 1
    7954:	89 87       	std	Y+9, r24	; 0x09
    7956:	9a 87       	std	Y+10, r25	; 0x0a
    7958:	2c c0       	rjmp	.+88     	; 0x79b2 <parse_received_USB_msg+0x124>
    795a:	89 81       	ldd	r24, Y+1	; 0x01
    795c:	8d 30       	cpi	r24, 0x0D	; 13
    795e:	81 f1       	breq	.+96     	; 0x79c0 <parse_received_USB_msg+0x132>
    7960:	89 81       	ldd	r24, Y+1	; 0x01
    7962:	88 23       	and	r24, r24
    7964:	69 f1       	breq	.+90     	; 0x79c0 <parse_received_USB_msg+0x132>
    7966:	89 81       	ldd	r24, Y+1	; 0x01
    7968:	80 33       	cpi	r24, 0x30	; 48
    796a:	18 f0       	brcs	.+6      	; 0x7972 <parse_received_USB_msg+0xe4>
    796c:	89 81       	ldd	r24, Y+1	; 0x01
    796e:	8a 33       	cpi	r24, 0x3A	; 58
    7970:	38 f1       	brcs	.+78     	; 0x79c0 <parse_received_USB_msg+0x132>
    7972:	2b 81       	ldd	r18, Y+3	; 0x03
    7974:	3c 81       	ldd	r19, Y+4	; 0x04
    7976:	8d 81       	ldd	r24, Y+5	; 0x05
    7978:	9e 81       	ldd	r25, Y+6	; 0x06
    797a:	a9 01       	movw	r20, r18
    797c:	48 1b       	sub	r20, r24
    797e:	59 0b       	sbc	r21, r25
    7980:	ca 01       	movw	r24, r20
    7982:	82 5c       	subi	r24, 0xC2	; 194
    7984:	99 4d       	sbci	r25, 0xD9	; 217
    7986:	29 81       	ldd	r18, Y+1	; 0x01
    7988:	fc 01       	movw	r30, r24
    798a:	20 83       	st	Z, r18
    798c:	89 81       	ldd	r24, Y+1	; 0x01
    798e:	8a 83       	std	Y+2, r24	; 0x02
    7990:	8b 81       	ldd	r24, Y+3	; 0x03
    7992:	9c 81       	ldd	r25, Y+4	; 0x04
    7994:	01 96       	adiw	r24, 0x01	; 1
    7996:	8b 83       	std	Y+3, r24	; 0x03
    7998:	9c 83       	std	Y+4, r25	; 0x04
    799a:	8b 81       	ldd	r24, Y+3	; 0x03
    799c:	9c 81       	ldd	r25, Y+4	; 0x04
    799e:	81 59       	subi	r24, 0x91	; 145
    79a0:	9a 4d       	sbci	r25, 0xDA	; 218
    79a2:	fc 01       	movw	r30, r24
    79a4:	80 81       	ld	r24, Z
    79a6:	89 83       	std	Y+1, r24	; 0x01
    79a8:	89 85       	ldd	r24, Y+9	; 0x09
    79aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    79ac:	01 96       	adiw	r24, 0x01	; 1
    79ae:	89 87       	std	Y+9, r24	; 0x09
    79b0:	9a 87       	std	Y+10, r25	; 0x0a
    79b2:	29 85       	ldd	r18, Y+9	; 0x09
    79b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    79b6:	8b 89       	ldd	r24, Y+19	; 0x13
    79b8:	9c 89       	ldd	r25, Y+20	; 0x14
    79ba:	28 17       	cp	r18, r24
    79bc:	39 07       	cpc	r19, r25
    79be:	68 f2       	brcs	.-102    	; 0x795a <parse_received_USB_msg+0xcc>
    79c0:	10 92 38 26 	sts	0x2638, r1	; 0x802638 <receivedUSBMsg+0x1>
    79c4:	8a 81       	ldd	r24, Y+2	; 0x02
    79c6:	8b 32       	cpi	r24, 0x2B	; 43
    79c8:	e9 f4       	brne	.+58     	; 0x7a04 <parse_received_USB_msg+0x176>
    79ca:	10 92 38 26 	sts	0x2638, r1	; 0x802638 <receivedUSBMsg+0x1>
    79ce:	2b 81       	ldd	r18, Y+3	; 0x03
    79d0:	3c 81       	ldd	r19, Y+4	; 0x04
    79d2:	8d 81       	ldd	r24, Y+5	; 0x05
    79d4:	9e 81       	ldd	r25, Y+6	; 0x06
    79d6:	a9 01       	movw	r20, r18
    79d8:	48 1b       	sub	r20, r24
    79da:	59 0b       	sbc	r21, r25
    79dc:	ca 01       	movw	r24, r20
    79de:	02 97       	sbiw	r24, 0x02	; 2
    79e0:	82 5c       	subi	r24, 0xC2	; 194
    79e2:	99 4d       	sbci	r25, 0xD9	; 217
    79e4:	fc 01       	movw	r30, r24
    79e6:	10 82       	st	Z, r1
    79e8:	2b 81       	ldd	r18, Y+3	; 0x03
    79ea:	3c 81       	ldd	r19, Y+4	; 0x04
    79ec:	8d 81       	ldd	r24, Y+5	; 0x05
    79ee:	9e 81       	ldd	r25, Y+6	; 0x06
    79f0:	a9 01       	movw	r20, r18
    79f2:	48 1b       	sub	r20, r24
    79f4:	59 0b       	sbc	r21, r25
    79f6:	ca 01       	movw	r24, r20
    79f8:	01 97       	sbiw	r24, 0x01	; 1
    79fa:	82 5c       	subi	r24, 0xC2	; 194
    79fc:	99 4d       	sbci	r25, 0xD9	; 217
    79fe:	fc 01       	movw	r30, r24
    7a00:	10 82       	st	Z, r1
    7a02:	20 c0       	rjmp	.+64     	; 0x7a44 <parse_received_USB_msg+0x1b6>
    7a04:	8a 81       	ldd	r24, Y+2	; 0x02
    7a06:	8d 32       	cpi	r24, 0x2D	; 45
    7a08:	e9 f4       	brne	.+58     	; 0x7a44 <parse_received_USB_msg+0x1b6>
    7a0a:	81 e0       	ldi	r24, 0x01	; 1
    7a0c:	80 93 38 26 	sts	0x2638, r24	; 0x802638 <receivedUSBMsg+0x1>
    7a10:	2b 81       	ldd	r18, Y+3	; 0x03
    7a12:	3c 81       	ldd	r19, Y+4	; 0x04
    7a14:	8d 81       	ldd	r24, Y+5	; 0x05
    7a16:	9e 81       	ldd	r25, Y+6	; 0x06
    7a18:	a9 01       	movw	r20, r18
    7a1a:	48 1b       	sub	r20, r24
    7a1c:	59 0b       	sbc	r21, r25
    7a1e:	ca 01       	movw	r24, r20
    7a20:	02 97       	sbiw	r24, 0x02	; 2
    7a22:	82 5c       	subi	r24, 0xC2	; 194
    7a24:	99 4d       	sbci	r25, 0xD9	; 217
    7a26:	fc 01       	movw	r30, r24
    7a28:	10 82       	st	Z, r1
    7a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    7a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    7a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    7a30:	9e 81       	ldd	r25, Y+6	; 0x06
    7a32:	a9 01       	movw	r20, r18
    7a34:	48 1b       	sub	r20, r24
    7a36:	59 0b       	sbc	r21, r25
    7a38:	ca 01       	movw	r24, r20
    7a3a:	01 97       	sbiw	r24, 0x01	; 1
    7a3c:	82 5c       	subi	r24, 0xC2	; 194
    7a3e:	99 4d       	sbci	r25, 0xD9	; 217
    7a40:	fc 01       	movw	r30, r24
    7a42:	10 82       	st	Z, r1
    7a44:	8a 81       	ldd	r24, Y+2	; 0x02
    7a46:	80 32       	cpi	r24, 0x20	; 32
    7a48:	69 f4       	brne	.+26     	; 0x7a64 <parse_received_USB_msg+0x1d6>
    7a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    7a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    7a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    7a50:	9e 81       	ldd	r25, Y+6	; 0x06
    7a52:	a9 01       	movw	r20, r18
    7a54:	48 1b       	sub	r20, r24
    7a56:	59 0b       	sbc	r21, r25
    7a58:	ca 01       	movw	r24, r20
    7a5a:	01 97       	sbiw	r24, 0x01	; 1
    7a5c:	82 5c       	subi	r24, 0xC2	; 194
    7a5e:	99 4d       	sbci	r25, 0xD9	; 217
    7a60:	fc 01       	movw	r30, r24
    7a62:	10 82       	st	Z, r1
    7a64:	8e e3       	ldi	r24, 0x3E	; 62
    7a66:	96 e2       	ldi	r25, 0x26	; 38
    7a68:	04 d2       	rcall	.+1032   	; 0x7e72 <convert_cmd_str_to_char>
    7a6a:	80 93 4e 26 	sts	0x264E, r24	; 0x80264e <receivedUSBMsg+0x17>
    7a6e:	80 91 4e 26 	lds	r24, 0x264E	; 0x80264e <receivedUSBMsg+0x17>
    7a72:	87 30       	cpi	r24, 0x07	; 7
    7a74:	40 f0       	brcs	.+16     	; 0x7a86 <parse_received_USB_msg+0x1f8>
    7a76:	80 91 4e 26 	lds	r24, 0x264E	; 0x80264e <receivedUSBMsg+0x17>
    7a7a:	8e 30       	cpi	r24, 0x0E	; 14
    7a7c:	20 f4       	brcc	.+8      	; 0x7a86 <parse_received_USB_msg+0x1f8>
    7a7e:	80 91 42 26 	lds	r24, 0x2642	; 0x802642 <receivedUSBMsg+0xb>
    7a82:	80 93 39 26 	sts	0x2639, r24	; 0x802639 <receivedUSBMsg+0x2>
    7a86:	8b 81       	ldd	r24, Y+3	; 0x03
    7a88:	9c 81       	ldd	r25, Y+4	; 0x04
    7a8a:	8d 83       	std	Y+5, r24	; 0x05
    7a8c:	9e 83       	std	Y+6, r25	; 0x06
    7a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    7a90:	9c 81       	ldd	r25, Y+4	; 0x04
    7a92:	01 97       	sbiw	r24, 0x01	; 1
    7a94:	8b 87       	std	Y+11, r24	; 0x0b
    7a96:	9c 87       	std	Y+12, r25	; 0x0c
    7a98:	27 c0       	rjmp	.+78     	; 0x7ae8 <parse_received_USB_msg+0x25a>
    7a9a:	89 81       	ldd	r24, Y+1	; 0x01
    7a9c:	8d 30       	cpi	r24, 0x0D	; 13
    7a9e:	59 f1       	breq	.+86     	; 0x7af6 <parse_received_USB_msg+0x268>
    7aa0:	89 81       	ldd	r24, Y+1	; 0x01
    7aa2:	80 32       	cpi	r24, 0x20	; 32
    7aa4:	41 f1       	breq	.+80     	; 0x7af6 <parse_received_USB_msg+0x268>
    7aa6:	89 81       	ldd	r24, Y+1	; 0x01
    7aa8:	88 23       	and	r24, r24
    7aaa:	29 f1       	breq	.+74     	; 0x7af6 <parse_received_USB_msg+0x268>
    7aac:	2b 81       	ldd	r18, Y+3	; 0x03
    7aae:	3c 81       	ldd	r19, Y+4	; 0x04
    7ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    7ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    7ab4:	a9 01       	movw	r20, r18
    7ab6:	48 1b       	sub	r20, r24
    7ab8:	59 0b       	sbc	r21, r25
    7aba:	ca 01       	movw	r24, r20
    7abc:	81 5b       	subi	r24, 0xB1	; 177
    7abe:	99 4d       	sbci	r25, 0xD9	; 217
    7ac0:	29 81       	ldd	r18, Y+1	; 0x01
    7ac2:	fc 01       	movw	r30, r24
    7ac4:	20 83       	st	Z, r18
    7ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    7ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    7aca:	01 96       	adiw	r24, 0x01	; 1
    7acc:	8b 83       	std	Y+3, r24	; 0x03
    7ace:	9c 83       	std	Y+4, r25	; 0x04
    7ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    7ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    7ad4:	81 59       	subi	r24, 0x91	; 145
    7ad6:	9a 4d       	sbci	r25, 0xDA	; 218
    7ad8:	fc 01       	movw	r30, r24
    7ada:	80 81       	ld	r24, Z
    7adc:	89 83       	std	Y+1, r24	; 0x01
    7ade:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
    7ae2:	01 96       	adiw	r24, 0x01	; 1
    7ae4:	8b 87       	std	Y+11, r24	; 0x0b
    7ae6:	9c 87       	std	Y+12, r25	; 0x0c
    7ae8:	2b 85       	ldd	r18, Y+11	; 0x0b
    7aea:	3c 85       	ldd	r19, Y+12	; 0x0c
    7aec:	8b 89       	ldd	r24, Y+19	; 0x13
    7aee:	9c 89       	ldd	r25, Y+20	; 0x14
    7af0:	28 17       	cp	r18, r24
    7af2:	39 07       	cpc	r19, r25
    7af4:	90 f2       	brcs	.-92     	; 0x7a9a <parse_received_USB_msg+0x20c>
    7af6:	89 81       	ldd	r24, Y+1	; 0x01
    7af8:	8d 30       	cpi	r24, 0x0D	; 13
    7afa:	61 f0       	breq	.+24     	; 0x7b14 <parse_received_USB_msg+0x286>
    7afc:	8b 81       	ldd	r24, Y+3	; 0x03
    7afe:	9c 81       	ldd	r25, Y+4	; 0x04
    7b00:	01 96       	adiw	r24, 0x01	; 1
    7b02:	8b 83       	std	Y+3, r24	; 0x03
    7b04:	9c 83       	std	Y+4, r25	; 0x04
    7b06:	8b 81       	ldd	r24, Y+3	; 0x03
    7b08:	9c 81       	ldd	r25, Y+4	; 0x04
    7b0a:	81 59       	subi	r24, 0x91	; 145
    7b0c:	9a 4d       	sbci	r25, 0xDA	; 218
    7b0e:	fc 01       	movw	r30, r24
    7b10:	80 81       	ld	r24, Z
    7b12:	89 83       	std	Y+1, r24	; 0x01
    7b14:	8b 81       	ldd	r24, Y+3	; 0x03
    7b16:	9c 81       	ldd	r25, Y+4	; 0x04
    7b18:	8d 83       	std	Y+5, r24	; 0x05
    7b1a:	9e 83       	std	Y+6, r25	; 0x06
    7b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    7b20:	01 97       	sbiw	r24, 0x01	; 1
    7b22:	8d 87       	std	Y+13, r24	; 0x0d
    7b24:	9e 87       	std	Y+14, r25	; 0x0e
    7b26:	48 c0       	rjmp	.+144    	; 0x7bb8 <parse_received_USB_msg+0x32a>
    7b28:	89 81       	ldd	r24, Y+1	; 0x01
    7b2a:	8d 30       	cpi	r24, 0x0D	; 13
    7b2c:	09 f4       	brne	.+2      	; 0x7b30 <parse_received_USB_msg+0x2a2>
    7b2e:	4c c0       	rjmp	.+152    	; 0x7bc8 <parse_received_USB_msg+0x33a>
    7b30:	89 81       	ldd	r24, Y+1	; 0x01
    7b32:	80 32       	cpi	r24, 0x20	; 32
    7b34:	09 f4       	brne	.+2      	; 0x7b38 <parse_received_USB_msg+0x2aa>
    7b36:	48 c0       	rjmp	.+144    	; 0x7bc8 <parse_received_USB_msg+0x33a>
    7b38:	89 81       	ldd	r24, Y+1	; 0x01
    7b3a:	88 23       	and	r24, r24
    7b3c:	09 f4       	brne	.+2      	; 0x7b40 <parse_received_USB_msg+0x2b2>
    7b3e:	44 c0       	rjmp	.+136    	; 0x7bc8 <parse_received_USB_msg+0x33a>
    7b40:	80 91 4e 26 	lds	r24, 0x264E	; 0x80264e <receivedUSBMsg+0x17>
    7b44:	85 31       	cpi	r24, 0x15	; 21
    7b46:	d1 f0       	breq	.+52     	; 0x7b7c <parse_received_USB_msg+0x2ee>
    7b48:	89 81       	ldd	r24, Y+1	; 0x01
    7b4a:	8b 32       	cpi	r24, 0x2B	; 43
    7b4c:	19 f0       	breq	.+6      	; 0x7b54 <parse_received_USB_msg+0x2c6>
    7b4e:	89 81       	ldd	r24, Y+1	; 0x01
    7b50:	8d 32       	cpi	r24, 0x2D	; 45
    7b52:	31 f4       	brne	.+12     	; 0x7b60 <parse_received_USB_msg+0x2d2>
    7b54:	8d 81       	ldd	r24, Y+5	; 0x05
    7b56:	9e 81       	ldd	r25, Y+6	; 0x06
    7b58:	01 96       	adiw	r24, 0x01	; 1
    7b5a:	8d 83       	std	Y+5, r24	; 0x05
    7b5c:	9e 83       	std	Y+6, r25	; 0x06
    7b5e:	1b c0       	rjmp	.+54     	; 0x7b96 <parse_received_USB_msg+0x308>
    7b60:	2b 81       	ldd	r18, Y+3	; 0x03
    7b62:	3c 81       	ldd	r19, Y+4	; 0x04
    7b64:	8d 81       	ldd	r24, Y+5	; 0x05
    7b66:	9e 81       	ldd	r25, Y+6	; 0x06
    7b68:	a9 01       	movw	r20, r18
    7b6a:	48 1b       	sub	r20, r24
    7b6c:	59 0b       	sbc	r21, r25
    7b6e:	ca 01       	movw	r24, r20
    7b70:	81 5a       	subi	r24, 0xA1	; 161
    7b72:	99 4d       	sbci	r25, 0xD9	; 217
    7b74:	29 81       	ldd	r18, Y+1	; 0x01
    7b76:	fc 01       	movw	r30, r24
    7b78:	20 83       	st	Z, r18
    7b7a:	0d c0       	rjmp	.+26     	; 0x7b96 <parse_received_USB_msg+0x308>
    7b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    7b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    7b80:	8d 81       	ldd	r24, Y+5	; 0x05
    7b82:	9e 81       	ldd	r25, Y+6	; 0x06
    7b84:	a9 01       	movw	r20, r18
    7b86:	48 1b       	sub	r20, r24
    7b88:	59 0b       	sbc	r21, r25
    7b8a:	ca 01       	movw	r24, r20
    7b8c:	81 5a       	subi	r24, 0xA1	; 161
    7b8e:	99 4d       	sbci	r25, 0xD9	; 217
    7b90:	29 81       	ldd	r18, Y+1	; 0x01
    7b92:	fc 01       	movw	r30, r24
    7b94:	20 83       	st	Z, r18
    7b96:	8b 81       	ldd	r24, Y+3	; 0x03
    7b98:	9c 81       	ldd	r25, Y+4	; 0x04
    7b9a:	01 96       	adiw	r24, 0x01	; 1
    7b9c:	8b 83       	std	Y+3, r24	; 0x03
    7b9e:	9c 83       	std	Y+4, r25	; 0x04
    7ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    7ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    7ba4:	81 59       	subi	r24, 0x91	; 145
    7ba6:	9a 4d       	sbci	r25, 0xDA	; 218
    7ba8:	fc 01       	movw	r30, r24
    7baa:	80 81       	ld	r24, Z
    7bac:	89 83       	std	Y+1, r24	; 0x01
    7bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    7bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    7bb2:	01 96       	adiw	r24, 0x01	; 1
    7bb4:	8d 87       	std	Y+13, r24	; 0x0d
    7bb6:	9e 87       	std	Y+14, r25	; 0x0e
    7bb8:	2d 85       	ldd	r18, Y+13	; 0x0d
    7bba:	3e 85       	ldd	r19, Y+14	; 0x0e
    7bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    7bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    7bc0:	28 17       	cp	r18, r24
    7bc2:	39 07       	cpc	r19, r25
    7bc4:	08 f4       	brcc	.+2      	; 0x7bc8 <parse_received_USB_msg+0x33a>
    7bc6:	b0 cf       	rjmp	.-160    	; 0x7b28 <parse_received_USB_msg+0x29a>
    7bc8:	89 81       	ldd	r24, Y+1	; 0x01
    7bca:	8d 30       	cpi	r24, 0x0D	; 13
    7bcc:	61 f0       	breq	.+24     	; 0x7be6 <parse_received_USB_msg+0x358>
    7bce:	8b 81       	ldd	r24, Y+3	; 0x03
    7bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    7bd2:	01 96       	adiw	r24, 0x01	; 1
    7bd4:	8b 83       	std	Y+3, r24	; 0x03
    7bd6:	9c 83       	std	Y+4, r25	; 0x04
    7bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    7bda:	9c 81       	ldd	r25, Y+4	; 0x04
    7bdc:	81 59       	subi	r24, 0x91	; 145
    7bde:	9a 4d       	sbci	r25, 0xDA	; 218
    7be0:	fc 01       	movw	r30, r24
    7be2:	80 81       	ld	r24, Z
    7be4:	89 83       	std	Y+1, r24	; 0x01
    7be6:	8b 81       	ldd	r24, Y+3	; 0x03
    7be8:	9c 81       	ldd	r25, Y+4	; 0x04
    7bea:	8d 83       	std	Y+5, r24	; 0x05
    7bec:	9e 83       	std	Y+6, r25	; 0x06
    7bee:	8b 81       	ldd	r24, Y+3	; 0x03
    7bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    7bf2:	01 97       	sbiw	r24, 0x01	; 1
    7bf4:	8f 87       	std	Y+15, r24	; 0x0f
    7bf6:	98 8b       	std	Y+16, r25	; 0x10
    7bf8:	33 c0       	rjmp	.+102    	; 0x7c60 <parse_received_USB_msg+0x3d2>
    7bfa:	89 81       	ldd	r24, Y+1	; 0x01
    7bfc:	8d 30       	cpi	r24, 0x0D	; 13
    7bfe:	b9 f1       	breq	.+110    	; 0x7c6e <parse_received_USB_msg+0x3e0>
    7c00:	89 81       	ldd	r24, Y+1	; 0x01
    7c02:	80 32       	cpi	r24, 0x20	; 32
    7c04:	a1 f1       	breq	.+104    	; 0x7c6e <parse_received_USB_msg+0x3e0>
    7c06:	89 81       	ldd	r24, Y+1	; 0x01
    7c08:	88 23       	and	r24, r24
    7c0a:	89 f1       	breq	.+98     	; 0x7c6e <parse_received_USB_msg+0x3e0>
    7c0c:	89 81       	ldd	r24, Y+1	; 0x01
    7c0e:	8b 32       	cpi	r24, 0x2B	; 43
    7c10:	19 f0       	breq	.+6      	; 0x7c18 <parse_received_USB_msg+0x38a>
    7c12:	89 81       	ldd	r24, Y+1	; 0x01
    7c14:	8d 32       	cpi	r24, 0x2D	; 45
    7c16:	31 f4       	brne	.+12     	; 0x7c24 <parse_received_USB_msg+0x396>
    7c18:	8d 81       	ldd	r24, Y+5	; 0x05
    7c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    7c1c:	01 96       	adiw	r24, 0x01	; 1
    7c1e:	8d 83       	std	Y+5, r24	; 0x05
    7c20:	9e 83       	std	Y+6, r25	; 0x06
    7c22:	0d c0       	rjmp	.+26     	; 0x7c3e <parse_received_USB_msg+0x3b0>
    7c24:	2b 81       	ldd	r18, Y+3	; 0x03
    7c26:	3c 81       	ldd	r19, Y+4	; 0x04
    7c28:	8d 81       	ldd	r24, Y+5	; 0x05
    7c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    7c2c:	a9 01       	movw	r20, r18
    7c2e:	48 1b       	sub	r20, r24
    7c30:	59 0b       	sbc	r21, r25
    7c32:	ca 01       	movw	r24, r20
    7c34:	81 59       	subi	r24, 0x91	; 145
    7c36:	99 4d       	sbci	r25, 0xD9	; 217
    7c38:	29 81       	ldd	r18, Y+1	; 0x01
    7c3a:	fc 01       	movw	r30, r24
    7c3c:	20 83       	st	Z, r18
    7c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    7c40:	9c 81       	ldd	r25, Y+4	; 0x04
    7c42:	01 96       	adiw	r24, 0x01	; 1
    7c44:	8b 83       	std	Y+3, r24	; 0x03
    7c46:	9c 83       	std	Y+4, r25	; 0x04
    7c48:	8b 81       	ldd	r24, Y+3	; 0x03
    7c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    7c4c:	81 59       	subi	r24, 0x91	; 145
    7c4e:	9a 4d       	sbci	r25, 0xDA	; 218
    7c50:	fc 01       	movw	r30, r24
    7c52:	80 81       	ld	r24, Z
    7c54:	89 83       	std	Y+1, r24	; 0x01
    7c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    7c58:	98 89       	ldd	r25, Y+16	; 0x10
    7c5a:	01 96       	adiw	r24, 0x01	; 1
    7c5c:	8f 87       	std	Y+15, r24	; 0x0f
    7c5e:	98 8b       	std	Y+16, r25	; 0x10
    7c60:	2f 85       	ldd	r18, Y+15	; 0x0f
    7c62:	38 89       	ldd	r19, Y+16	; 0x10
    7c64:	8b 89       	ldd	r24, Y+19	; 0x13
    7c66:	9c 89       	ldd	r25, Y+20	; 0x14
    7c68:	28 17       	cp	r18, r24
    7c6a:	39 07       	cpc	r19, r25
    7c6c:	30 f2       	brcs	.-116    	; 0x7bfa <parse_received_USB_msg+0x36c>
    7c6e:	89 81       	ldd	r24, Y+1	; 0x01
    7c70:	8d 30       	cpi	r24, 0x0D	; 13
    7c72:	61 f0       	breq	.+24     	; 0x7c8c <parse_received_USB_msg+0x3fe>
    7c74:	8b 81       	ldd	r24, Y+3	; 0x03
    7c76:	9c 81       	ldd	r25, Y+4	; 0x04
    7c78:	01 96       	adiw	r24, 0x01	; 1
    7c7a:	8b 83       	std	Y+3, r24	; 0x03
    7c7c:	9c 83       	std	Y+4, r25	; 0x04
    7c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    7c80:	9c 81       	ldd	r25, Y+4	; 0x04
    7c82:	81 59       	subi	r24, 0x91	; 145
    7c84:	9a 4d       	sbci	r25, 0xDA	; 218
    7c86:	fc 01       	movw	r30, r24
    7c88:	80 81       	ld	r24, Z
    7c8a:	89 83       	std	Y+1, r24	; 0x01
    7c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    7c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    7c90:	8d 83       	std	Y+5, r24	; 0x05
    7c92:	9e 83       	std	Y+6, r25	; 0x06
    7c94:	8b 81       	ldd	r24, Y+3	; 0x03
    7c96:	9c 81       	ldd	r25, Y+4	; 0x04
    7c98:	01 97       	sbiw	r24, 0x01	; 1
    7c9a:	89 8b       	std	Y+17, r24	; 0x11
    7c9c:	9a 8b       	std	Y+18, r25	; 0x12
    7c9e:	30 c0       	rjmp	.+96     	; 0x7d00 <parse_received_USB_msg+0x472>
    7ca0:	89 81       	ldd	r24, Y+1	; 0x01
    7ca2:	8d 30       	cpi	r24, 0x0D	; 13
    7ca4:	a1 f1       	breq	.+104    	; 0x7d0e <parse_received_USB_msg+0x480>
    7ca6:	89 81       	ldd	r24, Y+1	; 0x01
    7ca8:	88 23       	and	r24, r24
    7caa:	89 f1       	breq	.+98     	; 0x7d0e <parse_received_USB_msg+0x480>
    7cac:	89 81       	ldd	r24, Y+1	; 0x01
    7cae:	8b 32       	cpi	r24, 0x2B	; 43
    7cb0:	19 f0       	breq	.+6      	; 0x7cb8 <parse_received_USB_msg+0x42a>
    7cb2:	89 81       	ldd	r24, Y+1	; 0x01
    7cb4:	8d 32       	cpi	r24, 0x2D	; 45
    7cb6:	31 f4       	brne	.+12     	; 0x7cc4 <parse_received_USB_msg+0x436>
    7cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    7cba:	9e 81       	ldd	r25, Y+6	; 0x06
    7cbc:	01 96       	adiw	r24, 0x01	; 1
    7cbe:	8d 83       	std	Y+5, r24	; 0x05
    7cc0:	9e 83       	std	Y+6, r25	; 0x06
    7cc2:	0d c0       	rjmp	.+26     	; 0x7cde <parse_received_USB_msg+0x450>
    7cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    7cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    7cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    7cca:	9e 81       	ldd	r25, Y+6	; 0x06
    7ccc:	a9 01       	movw	r20, r18
    7cce:	48 1b       	sub	r20, r24
    7cd0:	59 0b       	sbc	r21, r25
    7cd2:	ca 01       	movw	r24, r20
    7cd4:	8b 5f       	subi	r24, 0xFB	; 251
    7cd6:	98 4d       	sbci	r25, 0xD8	; 216
    7cd8:	29 81       	ldd	r18, Y+1	; 0x01
    7cda:	fc 01       	movw	r30, r24
    7cdc:	20 83       	st	Z, r18
    7cde:	8b 81       	ldd	r24, Y+3	; 0x03
    7ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    7ce2:	01 96       	adiw	r24, 0x01	; 1
    7ce4:	8b 83       	std	Y+3, r24	; 0x03
    7ce6:	9c 83       	std	Y+4, r25	; 0x04
    7ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    7cea:	9c 81       	ldd	r25, Y+4	; 0x04
    7cec:	81 59       	subi	r24, 0x91	; 145
    7cee:	9a 4d       	sbci	r25, 0xDA	; 218
    7cf0:	fc 01       	movw	r30, r24
    7cf2:	80 81       	ld	r24, Z
    7cf4:	89 83       	std	Y+1, r24	; 0x01
    7cf6:	89 89       	ldd	r24, Y+17	; 0x11
    7cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    7cfa:	01 96       	adiw	r24, 0x01	; 1
    7cfc:	89 8b       	std	Y+17, r24	; 0x11
    7cfe:	9a 8b       	std	Y+18, r25	; 0x12
    7d00:	29 89       	ldd	r18, Y+17	; 0x11
    7d02:	3a 89       	ldd	r19, Y+18	; 0x12
    7d04:	8b 89       	ldd	r24, Y+19	; 0x13
    7d06:	9c 89       	ldd	r25, Y+20	; 0x14
    7d08:	28 17       	cp	r18, r24
    7d0a:	39 07       	cpc	r19, r25
    7d0c:	48 f2       	brcs	.-110    	; 0x7ca0 <parse_received_USB_msg+0x412>
    7d0e:	8f e4       	ldi	r24, 0x4F	; 79
    7d10:	96 e2       	ldi	r25, 0x26	; 38
    7d12:	5b d1       	rcall	.+694    	; 0x7fca <convert_msg_data_to_num>
    7d14:	dc 01       	movw	r26, r24
    7d16:	cb 01       	movw	r24, r22
    7d18:	80 93 15 27 	sts	0x2715, r24	; 0x802715 <receivedUSBMsg+0xde>
    7d1c:	90 93 16 27 	sts	0x2716, r25	; 0x802716 <receivedUSBMsg+0xdf>
    7d20:	a0 93 17 27 	sts	0x2717, r26	; 0x802717 <receivedUSBMsg+0xe0>
    7d24:	b0 93 18 27 	sts	0x2718, r27	; 0x802718 <receivedUSBMsg+0xe1>
    7d28:	8f e5       	ldi	r24, 0x5F	; 95
    7d2a:	96 e2       	ldi	r25, 0x26	; 38
    7d2c:	4e d1       	rcall	.+668    	; 0x7fca <convert_msg_data_to_num>
    7d2e:	dc 01       	movw	r26, r24
    7d30:	cb 01       	movw	r24, r22
    7d32:	80 93 19 27 	sts	0x2719, r24	; 0x802719 <receivedUSBMsg+0xe2>
    7d36:	90 93 1a 27 	sts	0x271A, r25	; 0x80271a <receivedUSBMsg+0xe3>
    7d3a:	a0 93 1b 27 	sts	0x271B, r26	; 0x80271b <receivedUSBMsg+0xe4>
    7d3e:	b0 93 1c 27 	sts	0x271C, r27	; 0x80271c <receivedUSBMsg+0xe5>
    7d42:	8f e6       	ldi	r24, 0x6F	; 111
    7d44:	96 e2       	ldi	r25, 0x26	; 38
    7d46:	41 d1       	rcall	.+642    	; 0x7fca <convert_msg_data_to_num>
    7d48:	dc 01       	movw	r26, r24
    7d4a:	cb 01       	movw	r24, r22
    7d4c:	80 93 1d 27 	sts	0x271D, r24	; 0x80271d <receivedUSBMsg+0xe6>
    7d50:	90 93 1e 27 	sts	0x271E, r25	; 0x80271e <receivedUSBMsg+0xe7>
    7d54:	a0 93 1f 27 	sts	0x271F, r26	; 0x80271f <receivedUSBMsg+0xe8>
    7d58:	b0 93 20 27 	sts	0x2720, r27	; 0x802720 <receivedUSBMsg+0xe9>
    7d5c:	85 e0       	ldi	r24, 0x05	; 5
    7d5e:	97 e2       	ldi	r25, 0x27	; 39
    7d60:	34 d1       	rcall	.+616    	; 0x7fca <convert_msg_data_to_num>
    7d62:	dc 01       	movw	r26, r24
    7d64:	cb 01       	movw	r24, r22
    7d66:	80 93 21 27 	sts	0x2721, r24	; 0x802721 <receivedUSBMsg+0xea>
    7d6a:	90 93 22 27 	sts	0x2722, r25	; 0x802722 <receivedUSBMsg+0xeb>
    7d6e:	a0 93 23 27 	sts	0x2723, r26	; 0x802723 <receivedUSBMsg+0xec>
    7d72:	b0 93 24 27 	sts	0x2724, r27	; 0x802724 <receivedUSBMsg+0xed>
    7d76:	89 81       	ldd	r24, Y+1	; 0x01
    7d78:	8d 30       	cpi	r24, 0x0D	; 13
    7d7a:	19 f0       	breq	.+6      	; 0x7d82 <parse_received_USB_msg+0x4f4>
    7d7c:	10 92 37 26 	sts	0x2637, r1	; 0x802637 <receivedUSBMsg>
    7d80:	03 c0       	rjmp	.+6      	; 0x7d88 <parse_received_USB_msg+0x4fa>
    7d82:	81 e0       	ldi	r24, 0x01	; 1
    7d84:	80 93 37 26 	sts	0x2637, r24	; 0x802637 <receivedUSBMsg>
    7d88:	00 00       	nop
    7d8a:	6b 96       	adiw	r28, 0x1b	; 27
    7d8c:	cd bf       	out	0x3d, r28	; 61
    7d8e:	de bf       	out	0x3e, r29	; 62
    7d90:	df 91       	pop	r29
    7d92:	cf 91       	pop	r28
    7d94:	08 95       	ret

00007d96 <check_cmd_type>:
    7d96:	cf 93       	push	r28
    7d98:	df 93       	push	r29
    7d9a:	cd b7       	in	r28, 0x3d	; 61
    7d9c:	de b7       	in	r29, 0x3e	; 62
    7d9e:	27 97       	sbiw	r28, 0x07	; 7
    7da0:	cd bf       	out	0x3d, r28	; 61
    7da2:	de bf       	out	0x3e, r29	; 62
    7da4:	8e 83       	std	Y+6, r24	; 0x06
    7da6:	9f 83       	std	Y+7, r25	; 0x07
    7da8:	19 82       	std	Y+1, r1	; 0x01
    7daa:	8e 81       	ldd	r24, Y+6	; 0x06
    7dac:	9f 81       	ldd	r25, Y+7	; 0x07
    7dae:	8c 83       	std	Y+4, r24	; 0x04
    7db0:	9d 83       	std	Y+5, r25	; 0x05
    7db2:	89 ec       	ldi	r24, 0xC9	; 201
    7db4:	90 e2       	ldi	r25, 0x20	; 32
    7db6:	8a 83       	std	Y+2, r24	; 0x02
    7db8:	9b 83       	std	Y+3, r25	; 0x03
    7dba:	03 c0       	rjmp	.+6      	; 0x7dc2 <check_cmd_type+0x2c>
    7dbc:	89 81       	ldd	r24, Y+1	; 0x01
    7dbe:	8f 5f       	subi	r24, 0xFF	; 255
    7dc0:	89 83       	std	Y+1, r24	; 0x01
    7dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    7dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    7dc6:	9c 01       	movw	r18, r24
    7dc8:	2f 5f       	subi	r18, 0xFF	; 255
    7dca:	3f 4f       	sbci	r19, 0xFF	; 255
    7dcc:	2e 83       	std	Y+6, r18	; 0x06
    7dce:	3f 83       	std	Y+7, r19	; 0x07
    7dd0:	fc 01       	movw	r30, r24
    7dd2:	80 81       	ld	r24, Z
    7dd4:	28 2f       	mov	r18, r24
    7dd6:	88 0f       	add	r24, r24
    7dd8:	33 0b       	sbc	r19, r19
    7dda:	8a 81       	ldd	r24, Y+2	; 0x02
    7ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    7dde:	ac 01       	movw	r20, r24
    7de0:	4f 5f       	subi	r20, 0xFF	; 255
    7de2:	5f 4f       	sbci	r21, 0xFF	; 255
    7de4:	4a 83       	std	Y+2, r20	; 0x02
    7de6:	5b 83       	std	Y+3, r21	; 0x03
    7de8:	fc 01       	movw	r30, r24
    7dea:	80 81       	ld	r24, Z
    7dec:	88 2f       	mov	r24, r24
    7dee:	90 e0       	ldi	r25, 0x00	; 0
    7df0:	28 17       	cp	r18, r24
    7df2:	39 07       	cpc	r19, r25
    7df4:	19 f4       	brne	.+6      	; 0x7dfc <check_cmd_type+0x66>
    7df6:	89 81       	ldd	r24, Y+1	; 0x01
    7df8:	83 30       	cpi	r24, 0x03	; 3
    7dfa:	01 f7       	brne	.-64     	; 0x7dbc <check_cmd_type+0x26>
    7dfc:	89 81       	ldd	r24, Y+1	; 0x01
    7dfe:	83 30       	cpi	r24, 0x03	; 3
    7e00:	11 f4       	brne	.+4      	; 0x7e06 <check_cmd_type+0x70>
    7e02:	80 e0       	ldi	r24, 0x00	; 0
    7e04:	30 c0       	rjmp	.+96     	; 0x7e66 <check_cmd_type+0xd0>
    7e06:	8d ec       	ldi	r24, 0xCD	; 205
    7e08:	90 e2       	ldi	r25, 0x20	; 32
    7e0a:	8a 83       	std	Y+2, r24	; 0x02
    7e0c:	9b 83       	std	Y+3, r25	; 0x03
    7e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    7e10:	9d 81       	ldd	r25, Y+5	; 0x05
    7e12:	8e 83       	std	Y+6, r24	; 0x06
    7e14:	9f 83       	std	Y+7, r25	; 0x07
    7e16:	19 82       	std	Y+1, r1	; 0x01
    7e18:	03 c0       	rjmp	.+6      	; 0x7e20 <check_cmd_type+0x8a>
    7e1a:	89 81       	ldd	r24, Y+1	; 0x01
    7e1c:	8f 5f       	subi	r24, 0xFF	; 255
    7e1e:	89 83       	std	Y+1, r24	; 0x01
    7e20:	8e 81       	ldd	r24, Y+6	; 0x06
    7e22:	9f 81       	ldd	r25, Y+7	; 0x07
    7e24:	9c 01       	movw	r18, r24
    7e26:	2f 5f       	subi	r18, 0xFF	; 255
    7e28:	3f 4f       	sbci	r19, 0xFF	; 255
    7e2a:	2e 83       	std	Y+6, r18	; 0x06
    7e2c:	3f 83       	std	Y+7, r19	; 0x07
    7e2e:	fc 01       	movw	r30, r24
    7e30:	80 81       	ld	r24, Z
    7e32:	28 2f       	mov	r18, r24
    7e34:	88 0f       	add	r24, r24
    7e36:	33 0b       	sbc	r19, r19
    7e38:	8a 81       	ldd	r24, Y+2	; 0x02
    7e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    7e3c:	ac 01       	movw	r20, r24
    7e3e:	4f 5f       	subi	r20, 0xFF	; 255
    7e40:	5f 4f       	sbci	r21, 0xFF	; 255
    7e42:	4a 83       	std	Y+2, r20	; 0x02
    7e44:	5b 83       	std	Y+3, r21	; 0x03
    7e46:	fc 01       	movw	r30, r24
    7e48:	80 81       	ld	r24, Z
    7e4a:	88 2f       	mov	r24, r24
    7e4c:	90 e0       	ldi	r25, 0x00	; 0
    7e4e:	28 17       	cp	r18, r24
    7e50:	39 07       	cpc	r19, r25
    7e52:	19 f4       	brne	.+6      	; 0x7e5a <check_cmd_type+0xc4>
    7e54:	89 81       	ldd	r24, Y+1	; 0x01
    7e56:	83 30       	cpi	r24, 0x03	; 3
    7e58:	01 f7       	brne	.-64     	; 0x7e1a <check_cmd_type+0x84>
    7e5a:	89 81       	ldd	r24, Y+1	; 0x01
    7e5c:	83 30       	cpi	r24, 0x03	; 3
    7e5e:	11 f4       	brne	.+4      	; 0x7e64 <check_cmd_type+0xce>
    7e60:	81 e0       	ldi	r24, 0x01	; 1
    7e62:	01 c0       	rjmp	.+2      	; 0x7e66 <check_cmd_type+0xd0>
    7e64:	82 e0       	ldi	r24, 0x02	; 2
    7e66:	27 96       	adiw	r28, 0x07	; 7
    7e68:	cd bf       	out	0x3d, r28	; 61
    7e6a:	de bf       	out	0x3e, r29	; 62
    7e6c:	df 91       	pop	r29
    7e6e:	cf 91       	pop	r28
    7e70:	08 95       	ret

00007e72 <convert_cmd_str_to_char>:
    7e72:	cf 93       	push	r28
    7e74:	df 93       	push	r29
    7e76:	cd b7       	in	r28, 0x3d	; 61
    7e78:	de b7       	in	r29, 0x3e	; 62
    7e7a:	2b 97       	sbiw	r28, 0x0b	; 11
    7e7c:	cd bf       	out	0x3d, r28	; 61
    7e7e:	de bf       	out	0x3e, r29	; 62
    7e80:	8a 87       	std	Y+10, r24	; 0x0a
    7e82:	9b 87       	std	Y+11, r25	; 0x0b
    7e84:	19 82       	std	Y+1, r1	; 0x01
    7e86:	1a 82       	std	Y+2, r1	; 0x02
    7e88:	1f 82       	std	Y+7, r1	; 0x07
    7e8a:	1b 82       	std	Y+3, r1	; 0x03
    7e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e90:	88 87       	std	Y+8, r24	; 0x08
    7e92:	99 87       	std	Y+9, r25	; 0x09
    7e94:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    7e98:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    7e9c:	8c 83       	std	Y+4, r24	; 0x04
    7e9e:	9d 83       	std	Y+5, r25	; 0x05
    7ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ea2:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ea4:	fc 01       	movw	r30, r24
    7ea6:	80 81       	ld	r24, Z
    7ea8:	8a 83       	std	Y+2, r24	; 0x02
    7eaa:	1e 82       	std	Y+6, r1	; 0x06
    7eac:	84 c0       	rjmp	.+264    	; 0x7fb6 <convert_cmd_str_to_char+0x144>
    7eae:	8a 85       	ldd	r24, Y+10	; 0x0a
    7eb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7eb2:	fc 01       	movw	r30, r24
    7eb4:	80 81       	ld	r24, Z
    7eb6:	28 2f       	mov	r18, r24
    7eb8:	88 0f       	add	r24, r24
    7eba:	33 0b       	sbc	r19, r19
    7ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    7ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    7ec0:	fc 01       	movw	r30, r24
    7ec2:	80 81       	ld	r24, Z
    7ec4:	88 2f       	mov	r24, r24
    7ec6:	90 e0       	ldi	r25, 0x00	; 0
    7ec8:	28 17       	cp	r18, r24
    7eca:	39 07       	cpc	r19, r25
    7ecc:	09 f5       	brne	.+66     	; 0x7f10 <convert_cmd_str_to_char+0x9e>
    7ece:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ed2:	fc 01       	movw	r30, r24
    7ed4:	80 81       	ld	r24, Z
    7ed6:	88 23       	and	r24, r24
    7ed8:	19 f0       	breq	.+6      	; 0x7ee0 <convert_cmd_str_to_char+0x6e>
    7eda:	8b 81       	ldd	r24, Y+3	; 0x03
    7edc:	8f 5f       	subi	r24, 0xFF	; 255
    7ede:	8b 83       	std	Y+3, r24	; 0x03
    7ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ee4:	fc 01       	movw	r30, r24
    7ee6:	80 81       	ld	r24, Z
    7ee8:	8a 83       	std	Y+2, r24	; 0x02
    7eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    7eec:	9b 85       	ldd	r25, Y+11	; 0x0b
    7eee:	01 96       	adiw	r24, 0x01	; 1
    7ef0:	8a 87       	std	Y+10, r24	; 0x0a
    7ef2:	9b 87       	std	Y+11, r25	; 0x0b
    7ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    7ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    7ef8:	01 96       	adiw	r24, 0x01	; 1
    7efa:	8c 83       	std	Y+4, r24	; 0x04
    7efc:	9d 83       	std	Y+5, r25	; 0x05
    7efe:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f00:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f02:	fc 01       	movw	r30, r24
    7f04:	80 81       	ld	r24, Z
    7f06:	88 23       	and	r24, r24
    7f08:	41 f5       	brne	.+80     	; 0x7f5a <convert_cmd_str_to_char+0xe8>
    7f0a:	81 e0       	ldi	r24, 0x01	; 1
    7f0c:	89 83       	std	Y+1, r24	; 0x01
    7f0e:	25 c0       	rjmp	.+74     	; 0x7f5a <convert_cmd_str_to_char+0xe8>
    7f10:	8a 81       	ldd	r24, Y+2	; 0x02
    7f12:	8d 32       	cpi	r24, 0x2D	; 45
    7f14:	81 f0       	breq	.+32     	; 0x7f36 <convert_cmd_str_to_char+0xc4>
    7f16:	8c 81       	ldd	r24, Y+4	; 0x04
    7f18:	9d 81       	ldd	r25, Y+5	; 0x05
    7f1a:	fc 01       	movw	r30, r24
    7f1c:	80 81       	ld	r24, Z
    7f1e:	88 23       	and	r24, r24
    7f20:	39 f4       	brne	.+14     	; 0x7f30 <convert_cmd_str_to_char+0xbe>
    7f22:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f24:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f26:	fc 01       	movw	r30, r24
    7f28:	80 81       	ld	r24, Z
    7f2a:	88 23       	and	r24, r24
    7f2c:	09 f0       	breq	.+2      	; 0x7f30 <convert_cmd_str_to_char+0xbe>
    7f2e:	1b 82       	std	Y+3, r1	; 0x03
    7f30:	81 e0       	ldi	r24, 0x01	; 1
    7f32:	89 83       	std	Y+1, r24	; 0x01
    7f34:	12 c0       	rjmp	.+36     	; 0x7f5a <convert_cmd_str_to_char+0xe8>
    7f36:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f38:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f3a:	fc 01       	movw	r30, r24
    7f3c:	80 81       	ld	r24, Z
    7f3e:	8a 83       	std	Y+2, r24	; 0x02
    7f40:	8b 81       	ldd	r24, Y+3	; 0x03
    7f42:	8f 5f       	subi	r24, 0xFF	; 255
    7f44:	8b 83       	std	Y+3, r24	; 0x03
    7f46:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f48:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f4a:	01 96       	adiw	r24, 0x01	; 1
    7f4c:	8a 87       	std	Y+10, r24	; 0x0a
    7f4e:	9b 87       	std	Y+11, r25	; 0x0b
    7f50:	8c 81       	ldd	r24, Y+4	; 0x04
    7f52:	9d 81       	ldd	r25, Y+5	; 0x05
    7f54:	01 96       	adiw	r24, 0x01	; 1
    7f56:	8c 83       	std	Y+4, r24	; 0x04
    7f58:	9d 83       	std	Y+5, r25	; 0x05
    7f5a:	89 81       	ldd	r24, Y+1	; 0x01
    7f5c:	88 23       	and	r24, r24
    7f5e:	09 f4       	brne	.+2      	; 0x7f62 <convert_cmd_str_to_char+0xf0>
    7f60:	a6 cf       	rjmp	.-180    	; 0x7eae <convert_cmd_str_to_char+0x3c>
    7f62:	8e 81       	ldd	r24, Y+6	; 0x06
    7f64:	88 2f       	mov	r24, r24
    7f66:	90 e0       	ldi	r25, 0x00	; 0
    7f68:	88 0f       	add	r24, r24
    7f6a:	99 1f       	adc	r25, r25
    7f6c:	80 50       	subi	r24, 0x00	; 0
    7f6e:	90 4e       	sbci	r25, 0xE0	; 224
    7f70:	fc 01       	movw	r30, r24
    7f72:	80 81       	ld	r24, Z
    7f74:	91 81       	ldd	r25, Z+1	; 0x01
    7f76:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    7f7a:	8f 83       	std	Y+7, r24	; 0x07
    7f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    7f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    7f80:	98 17       	cp	r25, r24
    7f82:	19 f4       	brne	.+6      	; 0x7f8a <convert_cmd_str_to_char+0x118>
    7f84:	8e 81       	ldd	r24, Y+6	; 0x06
    7f86:	8f 5f       	subi	r24, 0xFF	; 255
    7f88:	1a c0       	rjmp	.+52     	; 0x7fbe <convert_cmd_str_to_char+0x14c>
    7f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    7f8c:	88 2f       	mov	r24, r24
    7f8e:	90 e0       	ldi	r25, 0x00	; 0
    7f90:	01 96       	adiw	r24, 0x01	; 1
    7f92:	88 0f       	add	r24, r24
    7f94:	99 1f       	adc	r25, r25
    7f96:	80 50       	subi	r24, 0x00	; 0
    7f98:	90 4e       	sbci	r25, 0xE0	; 224
    7f9a:	fc 01       	movw	r30, r24
    7f9c:	80 81       	ld	r24, Z
    7f9e:	91 81       	ldd	r25, Z+1	; 0x01
    7fa0:	8c 83       	std	Y+4, r24	; 0x04
    7fa2:	9d 83       	std	Y+5, r25	; 0x05
    7fa4:	88 85       	ldd	r24, Y+8	; 0x08
    7fa6:	99 85       	ldd	r25, Y+9	; 0x09
    7fa8:	8a 87       	std	Y+10, r24	; 0x0a
    7faa:	9b 87       	std	Y+11, r25	; 0x0b
    7fac:	19 82       	std	Y+1, r1	; 0x01
    7fae:	1b 82       	std	Y+3, r1	; 0x03
    7fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    7fb2:	8f 5f       	subi	r24, 0xFF	; 255
    7fb4:	8e 83       	std	Y+6, r24	; 0x06
    7fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    7fb8:	8c 32       	cpi	r24, 0x2C	; 44
    7fba:	78 f2       	brcs	.-98     	; 0x7f5a <convert_cmd_str_to_char+0xe8>
    7fbc:	80 e0       	ldi	r24, 0x00	; 0
    7fbe:	2b 96       	adiw	r28, 0x0b	; 11
    7fc0:	cd bf       	out	0x3d, r28	; 61
    7fc2:	de bf       	out	0x3e, r29	; 62
    7fc4:	df 91       	pop	r29
    7fc6:	cf 91       	pop	r28
    7fc8:	08 95       	ret

00007fca <convert_msg_data_to_num>:
    7fca:	cf 93       	push	r28
    7fcc:	df 93       	push	r29
    7fce:	1f 92       	push	r1
    7fd0:	1f 92       	push	r1
    7fd2:	cd b7       	in	r28, 0x3d	; 61
    7fd4:	de b7       	in	r29, 0x3e	; 62
    7fd6:	89 83       	std	Y+1, r24	; 0x01
    7fd8:	9a 83       	std	Y+2, r25	; 0x02
    7fda:	89 81       	ldd	r24, Y+1	; 0x01
    7fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    7fde:	0e 94 e9 b7 	call	0x16fd2	; 0x16fd2 <atof>
    7fe2:	dc 01       	movw	r26, r24
    7fe4:	cb 01       	movw	r24, r22
    7fe6:	bc 01       	movw	r22, r24
    7fe8:	cd 01       	movw	r24, r26
    7fea:	0f 90       	pop	r0
    7fec:	0f 90       	pop	r0
    7fee:	df 91       	pop	r29
    7ff0:	cf 91       	pop	r28
    7ff2:	08 95       	ret

00007ff4 <convert_int_to_string>:
    7ff4:	cf 93       	push	r28
    7ff6:	df 93       	push	r29
    7ff8:	00 d0       	rcall	.+0      	; 0x7ffa <convert_int_to_string+0x6>
    7ffa:	00 d0       	rcall	.+0      	; 0x7ffc <convert_int_to_string+0x8>
    7ffc:	cd b7       	in	r28, 0x3d	; 61
    7ffe:	de b7       	in	r29, 0x3e	; 62
    8000:	69 83       	std	Y+1, r22	; 0x01
    8002:	7a 83       	std	Y+2, r23	; 0x02
    8004:	8b 83       	std	Y+3, r24	; 0x03
    8006:	9c 83       	std	Y+4, r25	; 0x04
    8008:	4d 83       	std	Y+5, r20	; 0x05
    800a:	5e 83       	std	Y+6, r21	; 0x06
    800c:	89 81       	ldd	r24, Y+1	; 0x01
    800e:	9a 81       	ldd	r25, Y+2	; 0x02
    8010:	2d 81       	ldd	r18, Y+5	; 0x05
    8012:	3e 81       	ldd	r19, Y+6	; 0x06
    8014:	4a e0       	ldi	r20, 0x0A	; 10
    8016:	50 e0       	ldi	r21, 0x00	; 0
    8018:	b9 01       	movw	r22, r18
    801a:	0e 94 05 b8 	call	0x1700a	; 0x1700a <itoa>
    801e:	00 00       	nop
    8020:	26 96       	adiw	r28, 0x06	; 6
    8022:	cd bf       	out	0x3d, r28	; 61
    8024:	de bf       	out	0x3e, r29	; 62
    8026:	df 91       	pop	r29
    8028:	cf 91       	pop	r28
    802a:	08 95       	ret

0000802c <convert_float_to_string>:
    802c:	0f 93       	push	r16
    802e:	1f 93       	push	r17
    8030:	cf 93       	push	r28
    8032:	df 93       	push	r29
    8034:	cd b7       	in	r28, 0x3d	; 61
    8036:	de b7       	in	r29, 0x3e	; 62
    8038:	6d 97       	sbiw	r28, 0x1d	; 29
    803a:	cd bf       	out	0x3d, r28	; 61
    803c:	de bf       	out	0x3e, r29	; 62
    803e:	6f 8b       	std	Y+23, r22	; 0x17
    8040:	78 8f       	std	Y+24, r23	; 0x18
    8042:	89 8f       	std	Y+25, r24	; 0x19
    8044:	9a 8f       	std	Y+26, r25	; 0x1a
    8046:	4b 8f       	std	Y+27, r20	; 0x1b
    8048:	5c 8f       	std	Y+28, r21	; 0x1c
    804a:	2d 8f       	std	Y+29, r18	; 0x1d
    804c:	28 e0       	ldi	r18, 0x08	; 8
    804e:	ce 01       	movw	r24, r28
    8050:	07 96       	adiw	r24, 0x07	; 7
    8052:	fc 01       	movw	r30, r24
    8054:	32 2f       	mov	r19, r18
    8056:	11 92       	st	Z+, r1
    8058:	3a 95       	dec	r19
    805a:	e9 f7       	brne	.-6      	; 0x8056 <convert_float_to_string+0x2a>
    805c:	28 e0       	ldi	r18, 0x08	; 8
    805e:	ce 01       	movw	r24, r28
    8060:	0f 96       	adiw	r24, 0x0f	; 15
    8062:	fc 01       	movw	r30, r24
    8064:	32 2f       	mov	r19, r18
    8066:	11 92       	st	Z+, r1
    8068:	3a 95       	dec	r19
    806a:	e9 f7       	brne	.-6      	; 0x8066 <convert_float_to_string+0x3a>
    806c:	19 82       	std	Y+1, r1	; 0x01
    806e:	1a 82       	std	Y+2, r1	; 0x02
    8070:	1b 82       	std	Y+3, r1	; 0x03
    8072:	1c 82       	std	Y+4, r1	; 0x04
    8074:	1d 82       	std	Y+5, r1	; 0x05
    8076:	1e 82       	std	Y+6, r1	; 0x06
    8078:	8a 81       	ldd	r24, Y+2	; 0x02
    807a:	88 2f       	mov	r24, r24
    807c:	90 e0       	ldi	r25, 0x00	; 0
    807e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    8080:	3c 8d       	ldd	r19, Y+28	; 0x1c
    8082:	82 0f       	add	r24, r18
    8084:	93 1f       	adc	r25, r19
    8086:	fc 01       	movw	r30, r24
    8088:	10 82       	st	Z, r1
    808a:	8a 81       	ldd	r24, Y+2	; 0x02
    808c:	8f 5f       	subi	r24, 0xFF	; 255
    808e:	8a 83       	std	Y+2, r24	; 0x02
    8090:	9a 81       	ldd	r25, Y+2	; 0x02
    8092:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8094:	98 17       	cp	r25, r24
    8096:	80 f3       	brcs	.-32     	; 0x8078 <convert_float_to_string+0x4c>
    8098:	6f 89       	ldd	r22, Y+23	; 0x17
    809a:	78 8d       	ldd	r23, Y+24	; 0x18
    809c:	89 8d       	ldd	r24, Y+25	; 0x19
    809e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    80a0:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <__fixsfsi>
    80a4:	dc 01       	movw	r26, r24
    80a6:	cb 01       	movw	r24, r22
    80a8:	9c 01       	movw	r18, r24
    80aa:	ce 01       	movw	r24, r28
    80ac:	07 96       	adiw	r24, 0x07	; 7
    80ae:	4a e0       	ldi	r20, 0x0A	; 10
    80b0:	50 e0       	ldi	r21, 0x00	; 0
    80b2:	bc 01       	movw	r22, r24
    80b4:	c9 01       	movw	r24, r18
    80b6:	0e 94 05 b8 	call	0x1700a	; 0x1700a <itoa>
    80ba:	6f 89       	ldd	r22, Y+23	; 0x17
    80bc:	78 8d       	ldd	r23, Y+24	; 0x18
    80be:	89 8d       	ldd	r24, Y+25	; 0x19
    80c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    80c2:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <__fixsfsi>
    80c6:	dc 01       	movw	r26, r24
    80c8:	cb 01       	movw	r24, r22
    80ca:	09 2e       	mov	r0, r25
    80cc:	00 0c       	add	r0, r0
    80ce:	aa 0b       	sbc	r26, r26
    80d0:	bb 0b       	sbc	r27, r27
    80d2:	bc 01       	movw	r22, r24
    80d4:	cd 01       	movw	r24, r26
    80d6:	0e 94 54 b5 	call	0x16aa8	; 0x16aa8 <__floatsisf>
    80da:	dc 01       	movw	r26, r24
    80dc:	cb 01       	movw	r24, r22
    80de:	9c 01       	movw	r18, r24
    80e0:	ad 01       	movw	r20, r26
    80e2:	6f 89       	ldd	r22, Y+23	; 0x17
    80e4:	78 8d       	ldd	r23, Y+24	; 0x18
    80e6:	89 8d       	ldd	r24, Y+25	; 0x19
    80e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    80ea:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
    80ee:	dc 01       	movw	r26, r24
    80f0:	cb 01       	movw	r24, r22
    80f2:	20 e0       	ldi	r18, 0x00	; 0
    80f4:	30 e0       	ldi	r19, 0x00	; 0
    80f6:	48 ec       	ldi	r20, 0xC8	; 200
    80f8:	52 e4       	ldi	r21, 0x42	; 66
    80fa:	bc 01       	movw	r22, r24
    80fc:	cd 01       	movw	r24, r26
    80fe:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    8102:	dc 01       	movw	r26, r24
    8104:	cb 01       	movw	r24, r22
    8106:	bc 01       	movw	r22, r24
    8108:	cd 01       	movw	r24, r26
    810a:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <round>
    810e:	dc 01       	movw	r26, r24
    8110:	cb 01       	movw	r24, r22
    8112:	8b 83       	std	Y+3, r24	; 0x03
    8114:	9c 83       	std	Y+4, r25	; 0x04
    8116:	ad 83       	std	Y+5, r26	; 0x05
    8118:	be 83       	std	Y+6, r27	; 0x06
    811a:	20 e0       	ldi	r18, 0x00	; 0
    811c:	30 e0       	ldi	r19, 0x00	; 0
    811e:	a9 01       	movw	r20, r18
    8120:	6b 81       	ldd	r22, Y+3	; 0x03
    8122:	7c 81       	ldd	r23, Y+4	; 0x04
    8124:	8d 81       	ldd	r24, Y+5	; 0x05
    8126:	9e 81       	ldd	r25, Y+6	; 0x06
    8128:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    812c:	88 23       	and	r24, r24
    812e:	4c f4       	brge	.+18     	; 0x8142 <convert_float_to_string+0x116>
    8130:	8b 81       	ldd	r24, Y+3	; 0x03
    8132:	9c 81       	ldd	r25, Y+4	; 0x04
    8134:	ad 81       	ldd	r26, Y+5	; 0x05
    8136:	be 81       	ldd	r27, Y+6	; 0x06
    8138:	b0 58       	subi	r27, 0x80	; 128
    813a:	8b 83       	std	Y+3, r24	; 0x03
    813c:	9c 83       	std	Y+4, r25	; 0x04
    813e:	ad 83       	std	Y+5, r26	; 0x05
    8140:	be 83       	std	Y+6, r27	; 0x06
    8142:	6b 81       	ldd	r22, Y+3	; 0x03
    8144:	7c 81       	ldd	r23, Y+4	; 0x04
    8146:	8d 81       	ldd	r24, Y+5	; 0x05
    8148:	9e 81       	ldd	r25, Y+6	; 0x06
    814a:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <__fixsfsi>
    814e:	dc 01       	movw	r26, r24
    8150:	cb 01       	movw	r24, r22
    8152:	9c 01       	movw	r18, r24
    8154:	ce 01       	movw	r24, r28
    8156:	0f 96       	adiw	r24, 0x0f	; 15
    8158:	4a e0       	ldi	r20, 0x0A	; 10
    815a:	50 e0       	ldi	r21, 0x00	; 0
    815c:	bc 01       	movw	r22, r24
    815e:	c9 01       	movw	r24, r18
    8160:	0e 94 05 b8 	call	0x1700a	; 0x1700a <itoa>
    8164:	1a 82       	std	Y+2, r1	; 0x02
    8166:	29 c0       	rjmp	.+82     	; 0x81ba <convert_float_to_string+0x18e>
    8168:	8a 81       	ldd	r24, Y+2	; 0x02
    816a:	88 2f       	mov	r24, r24
    816c:	90 e0       	ldi	r25, 0x00	; 0
    816e:	9e 01       	movw	r18, r28
    8170:	29 5f       	subi	r18, 0xF9	; 249
    8172:	3f 4f       	sbci	r19, 0xFF	; 255
    8174:	82 0f       	add	r24, r18
    8176:	93 1f       	adc	r25, r19
    8178:	fc 01       	movw	r30, r24
    817a:	80 81       	ld	r24, Z
    817c:	88 23       	and	r24, r24
    817e:	b1 f0       	breq	.+44     	; 0x81ac <convert_float_to_string+0x180>
    8180:	8a 81       	ldd	r24, Y+2	; 0x02
    8182:	88 2f       	mov	r24, r24
    8184:	90 e0       	ldi	r25, 0x00	; 0
    8186:	2b 8d       	ldd	r18, Y+27	; 0x1b
    8188:	3c 8d       	ldd	r19, Y+28	; 0x1c
    818a:	82 0f       	add	r24, r18
    818c:	93 1f       	adc	r25, r19
    818e:	2a 81       	ldd	r18, Y+2	; 0x02
    8190:	22 2f       	mov	r18, r18
    8192:	30 e0       	ldi	r19, 0x00	; 0
    8194:	ae 01       	movw	r20, r28
    8196:	49 5f       	subi	r20, 0xF9	; 249
    8198:	5f 4f       	sbci	r21, 0xFF	; 255
    819a:	24 0f       	add	r18, r20
    819c:	35 1f       	adc	r19, r21
    819e:	f9 01       	movw	r30, r18
    81a0:	20 81       	ld	r18, Z
    81a2:	fc 01       	movw	r30, r24
    81a4:	20 83       	st	Z, r18
    81a6:	89 81       	ldd	r24, Y+1	; 0x01
    81a8:	8f 5f       	subi	r24, 0xFF	; 255
    81aa:	89 83       	std	Y+1, r24	; 0x01
    81ac:	99 81       	ldd	r25, Y+1	; 0x01
    81ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    81b0:	98 17       	cp	r25, r24
    81b2:	70 f4       	brcc	.+28     	; 0x81d0 <convert_float_to_string+0x1a4>
    81b4:	8a 81       	ldd	r24, Y+2	; 0x02
    81b6:	8f 5f       	subi	r24, 0xFF	; 255
    81b8:	8a 83       	std	Y+2, r24	; 0x02
    81ba:	8a 81       	ldd	r24, Y+2	; 0x02
    81bc:	08 2f       	mov	r16, r24
    81be:	10 e0       	ldi	r17, 0x00	; 0
    81c0:	ce 01       	movw	r24, r28
    81c2:	07 96       	adiw	r24, 0x07	; 7
    81c4:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    81c8:	08 17       	cp	r16, r24
    81ca:	19 07       	cpc	r17, r25
    81cc:	68 f2       	brcs	.-102    	; 0x8168 <convert_float_to_string+0x13c>
    81ce:	01 c0       	rjmp	.+2      	; 0x81d2 <convert_float_to_string+0x1a6>
    81d0:	00 00       	nop
    81d2:	99 81       	ldd	r25, Y+1	; 0x01
    81d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    81d6:	98 17       	cp	r25, r24
    81d8:	08 f0       	brcs	.+2      	; 0x81dc <convert_float_to_string+0x1b0>
    81da:	44 c0       	rjmp	.+136    	; 0x8264 <convert_float_to_string+0x238>
    81dc:	89 81       	ldd	r24, Y+1	; 0x01
    81de:	91 e0       	ldi	r25, 0x01	; 1
    81e0:	98 0f       	add	r25, r24
    81e2:	99 83       	std	Y+1, r25	; 0x01
    81e4:	88 2f       	mov	r24, r24
    81e6:	90 e0       	ldi	r25, 0x00	; 0
    81e8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    81ea:	3c 8d       	ldd	r19, Y+28	; 0x1c
    81ec:	82 0f       	add	r24, r18
    81ee:	93 1f       	adc	r25, r19
    81f0:	2e e2       	ldi	r18, 0x2E	; 46
    81f2:	fc 01       	movw	r30, r24
    81f4:	20 83       	st	Z, r18
    81f6:	1a 82       	std	Y+2, r1	; 0x02
    81f8:	29 c0       	rjmp	.+82     	; 0x824c <convert_float_to_string+0x220>
    81fa:	8a 81       	ldd	r24, Y+2	; 0x02
    81fc:	88 2f       	mov	r24, r24
    81fe:	90 e0       	ldi	r25, 0x00	; 0
    8200:	9e 01       	movw	r18, r28
    8202:	21 5f       	subi	r18, 0xF1	; 241
    8204:	3f 4f       	sbci	r19, 0xFF	; 255
    8206:	82 0f       	add	r24, r18
    8208:	93 1f       	adc	r25, r19
    820a:	fc 01       	movw	r30, r24
    820c:	80 81       	ld	r24, Z
    820e:	88 23       	and	r24, r24
    8210:	b1 f0       	breq	.+44     	; 0x823e <convert_float_to_string+0x212>
    8212:	89 81       	ldd	r24, Y+1	; 0x01
    8214:	88 2f       	mov	r24, r24
    8216:	90 e0       	ldi	r25, 0x00	; 0
    8218:	2b 8d       	ldd	r18, Y+27	; 0x1b
    821a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    821c:	82 0f       	add	r24, r18
    821e:	93 1f       	adc	r25, r19
    8220:	2a 81       	ldd	r18, Y+2	; 0x02
    8222:	22 2f       	mov	r18, r18
    8224:	30 e0       	ldi	r19, 0x00	; 0
    8226:	ae 01       	movw	r20, r28
    8228:	41 5f       	subi	r20, 0xF1	; 241
    822a:	5f 4f       	sbci	r21, 0xFF	; 255
    822c:	24 0f       	add	r18, r20
    822e:	35 1f       	adc	r19, r21
    8230:	f9 01       	movw	r30, r18
    8232:	20 81       	ld	r18, Z
    8234:	fc 01       	movw	r30, r24
    8236:	20 83       	st	Z, r18
    8238:	89 81       	ldd	r24, Y+1	; 0x01
    823a:	8f 5f       	subi	r24, 0xFF	; 255
    823c:	89 83       	std	Y+1, r24	; 0x01
    823e:	99 81       	ldd	r25, Y+1	; 0x01
    8240:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8242:	98 17       	cp	r25, r24
    8244:	70 f4       	brcc	.+28     	; 0x8262 <convert_float_to_string+0x236>
    8246:	8a 81       	ldd	r24, Y+2	; 0x02
    8248:	8f 5f       	subi	r24, 0xFF	; 255
    824a:	8a 83       	std	Y+2, r24	; 0x02
    824c:	8a 81       	ldd	r24, Y+2	; 0x02
    824e:	08 2f       	mov	r16, r24
    8250:	10 e0       	ldi	r17, 0x00	; 0
    8252:	ce 01       	movw	r24, r28
    8254:	0f 96       	adiw	r24, 0x0f	; 15
    8256:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    825a:	08 17       	cp	r16, r24
    825c:	19 07       	cpc	r17, r25
    825e:	68 f2       	brcs	.-102    	; 0x81fa <convert_float_to_string+0x1ce>
    8260:	01 c0       	rjmp	.+2      	; 0x8264 <convert_float_to_string+0x238>
    8262:	00 00       	nop
    8264:	00 00       	nop
    8266:	6d 96       	adiw	r28, 0x1d	; 29
    8268:	cd bf       	out	0x3d, r28	; 61
    826a:	de bf       	out	0x3e, r29	; 62
    826c:	df 91       	pop	r29
    826e:	cf 91       	pop	r28
    8270:	1f 91       	pop	r17
    8272:	0f 91       	pop	r16
    8274:	08 95       	ret

00008276 <convert_received_motor_to_index>:
    8276:	cf 93       	push	r28
    8278:	df 93       	push	r29
    827a:	1f 92       	push	r1
    827c:	cd b7       	in	r28, 0x3d	; 61
    827e:	de b7       	in	r29, 0x3e	; 62
    8280:	89 83       	std	Y+1, r24	; 0x01
    8282:	89 81       	ldd	r24, Y+1	; 0x01
    8284:	88 2f       	mov	r24, r24
    8286:	90 e0       	ldi	r25, 0x00	; 0
    8288:	80 35       	cpi	r24, 0x50	; 80
    828a:	91 05       	cpc	r25, r1
    828c:	a1 f0       	breq	.+40     	; 0x82b6 <convert_received_motor_to_index+0x40>
    828e:	81 35       	cpi	r24, 0x51	; 81
    8290:	91 05       	cpc	r25, r1
    8292:	24 f4       	brge	.+8      	; 0x829c <convert_received_motor_to_index+0x26>
    8294:	8c 34       	cpi	r24, 0x4C	; 76
    8296:	91 05       	cpc	r25, r1
    8298:	61 f0       	breq	.+24     	; 0x82b2 <convert_received_motor_to_index+0x3c>
    829a:	0f c0       	rjmp	.+30     	; 0x82ba <convert_received_motor_to_index+0x44>
    829c:	82 35       	cpi	r24, 0x52	; 82
    829e:	91 05       	cpc	r25, r1
    82a0:	21 f0       	breq	.+8      	; 0x82aa <convert_received_motor_to_index+0x34>
    82a2:	85 35       	cpi	r24, 0x55	; 85
    82a4:	91 05       	cpc	r25, r1
    82a6:	19 f0       	breq	.+6      	; 0x82ae <convert_received_motor_to_index+0x38>
    82a8:	08 c0       	rjmp	.+16     	; 0x82ba <convert_received_motor_to_index+0x44>
    82aa:	80 e0       	ldi	r24, 0x00	; 0
    82ac:	07 c0       	rjmp	.+14     	; 0x82bc <convert_received_motor_to_index+0x46>
    82ae:	81 e0       	ldi	r24, 0x01	; 1
    82b0:	05 c0       	rjmp	.+10     	; 0x82bc <convert_received_motor_to_index+0x46>
    82b2:	82 e0       	ldi	r24, 0x02	; 2
    82b4:	03 c0       	rjmp	.+6      	; 0x82bc <convert_received_motor_to_index+0x46>
    82b6:	83 e0       	ldi	r24, 0x03	; 3
    82b8:	01 c0       	rjmp	.+2      	; 0x82bc <convert_received_motor_to_index+0x46>
    82ba:	8f ef       	ldi	r24, 0xFF	; 255
    82bc:	0f 90       	pop	r0
    82be:	df 91       	pop	r29
    82c0:	cf 91       	pop	r28
    82c2:	08 95       	ret

000082c4 <check_motor_index>:
    82c4:	cf 93       	push	r28
    82c6:	df 93       	push	r29
    82c8:	1f 92       	push	r1
    82ca:	cd b7       	in	r28, 0x3d	; 61
    82cc:	de b7       	in	r29, 0x3e	; 62
    82ce:	89 83       	std	Y+1, r24	; 0x01
    82d0:	89 81       	ldd	r24, Y+1	; 0x01
    82d2:	84 30       	cpi	r24, 0x04	; 4
    82d4:	10 f4       	brcc	.+4      	; 0x82da <check_motor_index+0x16>
    82d6:	81 e0       	ldi	r24, 0x01	; 1
    82d8:	01 c0       	rjmp	.+2      	; 0x82dc <check_motor_index+0x18>
    82da:	80 e0       	ldi	r24, 0x00	; 0
    82dc:	0f 90       	pop	r0
    82de:	df 91       	pop	r29
    82e0:	cf 91       	pop	r28
    82e2:	08 95       	ret

000082e4 <handle_received_USB_cmd>:
    82e4:	cf 92       	push	r12
    82e6:	df 92       	push	r13
    82e8:	ef 92       	push	r14
    82ea:	ff 92       	push	r15
    82ec:	0f 93       	push	r16
    82ee:	1f 93       	push	r17
    82f0:	cf 93       	push	r28
    82f2:	df 93       	push	r29
    82f4:	cd b7       	in	r28, 0x3d	; 61
    82f6:	de b7       	in	r29, 0x3e	; 62
    82f8:	cb 53       	subi	r28, 0x3B	; 59
    82fa:	d1 40       	sbci	r29, 0x01	; 1
    82fc:	cd bf       	out	0x3d, r28	; 61
    82fe:	de bf       	out	0x3e, r29	; 62
    8300:	19 82       	std	Y+1, r1	; 0x01
    8302:	1a 82       	std	Y+2, r1	; 0x02
    8304:	8f ef       	ldi	r24, 0xFF	; 255
    8306:	8d ab       	std	Y+53, r24	; 0x35
    8308:	0e 94 b1 56 	call	0xad62	; 0xad62 <flush_USB_tx_buffer>
    830c:	8a ef       	ldi	r24, 0xFA	; 250
    830e:	90 e0       	ldi	r25, 0x00	; 0
    8310:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <LEDOnTime>
    8314:	90 93 ae 21 	sts	0x21AE, r25	; 0x8021ae <LEDOnTime+0x1>
    8318:	8a ef       	ldi	r24, 0xFA	; 250
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <LEDOffTime>
    8320:	90 93 b0 21 	sts	0x21B0, r25	; 0x8021b0 <LEDOffTime+0x1>
    8324:	80 91 37 26 	lds	r24, 0x2637	; 0x802637 <receivedUSBMsg>
    8328:	88 23       	and	r24, r24
    832a:	19 f4       	brne	.+6      	; 0x8332 <handle_received_USB_cmd+0x4e>
    832c:	8f ef       	ldi	r24, 0xFF	; 255
    832e:	80 93 4e 26 	sts	0x264E, r24	; 0x80264e <receivedUSBMsg+0x17>
    8332:	80 91 4e 26 	lds	r24, 0x264E	; 0x80264e <receivedUSBMsg+0x17>
    8336:	88 2f       	mov	r24, r24
    8338:	90 e0       	ldi	r25, 0x00	; 0
    833a:	09 2e       	mov	r0, r25
    833c:	00 0c       	add	r0, r0
    833e:	aa 0b       	sbc	r26, r26
    8340:	bb 0b       	sbc	r27, r27
    8342:	41 e0       	ldi	r20, 0x01	; 1
    8344:	50 e0       	ldi	r21, 0x00	; 0
    8346:	25 e1       	ldi	r18, 0x15	; 21
    8348:	30 e0       	ldi	r19, 0x00	; 0
    834a:	84 1b       	sub	r24, r20
    834c:	95 0b       	sbc	r25, r21
    834e:	28 17       	cp	r18, r24
    8350:	39 07       	cpc	r19, r25
    8352:	10 f4       	brcc	.+4      	; 0x8358 <handle_received_USB_cmd+0x74>
    8354:	0c 94 a0 54 	jmp	0xa940	; 0xa940 <handle_received_USB_cmd+0x265c>
    8358:	fc 01       	movw	r30, r24
    835a:	88 27       	eor	r24, r24
    835c:	e2 50       	subi	r30, 0x02	; 2
    835e:	ff 4f       	sbci	r31, 0xFF	; 255
    8360:	8f 4f       	sbci	r24, 0xFF	; 255
    8362:	0c 94 47 b7 	jmp	0x16e8e	; 0x16e8e <__tablejump2__>
    8366:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    836a:	88 23       	and	r24, r24
    836c:	11 f0       	breq	.+4      	; 0x8372 <handle_received_USB_cmd+0x8e>
    836e:	0c 94 a2 54 	jmp	0xa944	; 0xa944 <handle_received_USB_cmd+0x2660>
    8372:	1b 82       	std	Y+3, r1	; 0x03
    8374:	14 c0       	rjmp	.+40     	; 0x839e <handle_received_USB_cmd+0xba>
    8376:	89 81       	ldd	r24, Y+1	; 0x01
    8378:	91 e0       	ldi	r25, 0x01	; 1
    837a:	98 0f       	add	r25, r24
    837c:	99 83       	std	Y+1, r25	; 0x01
    837e:	88 2f       	mov	r24, r24
    8380:	90 e0       	ldi	r25, 0x00	; 0
    8382:	2b 81       	ldd	r18, Y+3	; 0x03
    8384:	22 2f       	mov	r18, r18
    8386:	30 e0       	ldi	r19, 0x00	; 0
    8388:	20 52       	subi	r18, 0x20	; 32
    838a:	3f 4d       	sbci	r19, 0xDF	; 223
    838c:	f9 01       	movw	r30, r18
    838e:	20 81       	ld	r18, Z
    8390:	8b 5d       	subi	r24, 0xDB	; 219
    8392:	98 4d       	sbci	r25, 0xD8	; 216
    8394:	fc 01       	movw	r30, r24
    8396:	20 83       	st	Z, r18
    8398:	8b 81       	ldd	r24, Y+3	; 0x03
    839a:	8f 5f       	subi	r24, 0xFF	; 255
    839c:	8b 83       	std	Y+3, r24	; 0x03
    839e:	8b 81       	ldd	r24, Y+3	; 0x03
    83a0:	83 30       	cpi	r24, 0x03	; 3
    83a2:	48 f3       	brcs	.-46     	; 0x8376 <handle_received_USB_cmd+0x92>
    83a4:	89 81       	ldd	r24, Y+1	; 0x01
    83a6:	91 e0       	ldi	r25, 0x01	; 1
    83a8:	98 0f       	add	r25, r24
    83aa:	99 83       	std	Y+1, r25	; 0x01
    83ac:	88 2f       	mov	r24, r24
    83ae:	90 e0       	ldi	r25, 0x00	; 0
    83b0:	8b 5d       	subi	r24, 0xDB	; 219
    83b2:	98 4d       	sbci	r25, 0xD8	; 216
    83b4:	20 e2       	ldi	r18, 0x20	; 32
    83b6:	fc 01       	movw	r30, r24
    83b8:	20 83       	st	Z, r18
    83ba:	89 81       	ldd	r24, Y+1	; 0x01
    83bc:	91 e0       	ldi	r25, 0x01	; 1
    83be:	98 0f       	add	r25, r24
    83c0:	99 83       	std	Y+1, r25	; 0x01
    83c2:	08 2f       	mov	r16, r24
    83c4:	10 e0       	ldi	r17, 0x00	; 0
    83c6:	8a e0       	ldi	r24, 0x0A	; 10
    83c8:	0e 94 ad 30 	call	0x615a	; 0x615a <ioport_get_pin_level>
    83cc:	98 2f       	mov	r25, r24
    83ce:	81 e0       	ldi	r24, 0x01	; 1
    83d0:	89 27       	eor	r24, r25
    83d2:	20 e3       	ldi	r18, 0x30	; 48
    83d4:	28 0f       	add	r18, r24
    83d6:	c8 01       	movw	r24, r16
    83d8:	8b 5d       	subi	r24, 0xDB	; 219
    83da:	98 4d       	sbci	r25, 0xD8	; 216
    83dc:	fc 01       	movw	r30, r24
    83de:	20 83       	st	Z, r18
    83e0:	89 81       	ldd	r24, Y+1	; 0x01
    83e2:	91 e0       	ldi	r25, 0x01	; 1
    83e4:	98 0f       	add	r25, r24
    83e6:	99 83       	std	Y+1, r25	; 0x01
    83e8:	88 2f       	mov	r24, r24
    83ea:	90 e0       	ldi	r25, 0x00	; 0
    83ec:	8b 5d       	subi	r24, 0xDB	; 219
    83ee:	98 4d       	sbci	r25, 0xD8	; 216
    83f0:	2d e0       	ldi	r18, 0x0D	; 13
    83f2:	fc 01       	movw	r30, r24
    83f4:	20 83       	st	Z, r18
    83f6:	81 e0       	ldi	r24, 0x01	; 1
    83f8:	90 e0       	ldi	r25, 0x00	; 0
    83fa:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    83fe:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    8402:	81 e0       	ldi	r24, 0x01	; 1
    8404:	8a 83       	std	Y+2, r24	; 0x02
    8406:	0c 94 a2 54 	jmp	0xa944	; 0xa944 <handle_received_USB_cmd+0x2660>
    840a:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    840e:	88 23       	and	r24, r24
    8410:	09 f0       	breq	.+2      	; 0x8414 <handle_received_USB_cmd+0x130>
    8412:	9a c0       	rjmp	.+308    	; 0x8548 <handle_received_USB_cmd+0x264>
    8414:	ce 01       	movw	r24, r28
    8416:	80 5c       	subi	r24, 0xC0	; 192
    8418:	9f 4f       	sbci	r25, 0xFF	; 255
    841a:	fc 01       	movw	r30, r24
    841c:	10 82       	st	Z, r1
    841e:	11 82       	std	Z+1, r1	; 0x01
    8420:	12 82       	std	Z+2, r1	; 0x02
    8422:	13 82       	std	Z+3, r1	; 0x03
    8424:	1c 82       	std	Y+4, r1	; 0x04
    8426:	14 c0       	rjmp	.+40     	; 0x8450 <handle_received_USB_cmd+0x16c>
    8428:	89 81       	ldd	r24, Y+1	; 0x01
    842a:	91 e0       	ldi	r25, 0x01	; 1
    842c:	98 0f       	add	r25, r24
    842e:	99 83       	std	Y+1, r25	; 0x01
    8430:	88 2f       	mov	r24, r24
    8432:	90 e0       	ldi	r25, 0x00	; 0
    8434:	2c 81       	ldd	r18, Y+4	; 0x04
    8436:	22 2f       	mov	r18, r18
    8438:	30 e0       	ldi	r19, 0x00	; 0
    843a:	2c 51       	subi	r18, 0x1C	; 28
    843c:	3f 4d       	sbci	r19, 0xDF	; 223
    843e:	f9 01       	movw	r30, r18
    8440:	20 81       	ld	r18, Z
    8442:	8b 5d       	subi	r24, 0xDB	; 219
    8444:	98 4d       	sbci	r25, 0xD8	; 216
    8446:	fc 01       	movw	r30, r24
    8448:	20 83       	st	Z, r18
    844a:	8c 81       	ldd	r24, Y+4	; 0x04
    844c:	8f 5f       	subi	r24, 0xFF	; 255
    844e:	8c 83       	std	Y+4, r24	; 0x04
    8450:	8c 81       	ldd	r24, Y+4	; 0x04
    8452:	83 30       	cpi	r24, 0x03	; 3
    8454:	48 f3       	brcs	.-46     	; 0x8428 <handle_received_USB_cmd+0x144>
    8456:	89 81       	ldd	r24, Y+1	; 0x01
    8458:	91 e0       	ldi	r25, 0x01	; 1
    845a:	98 0f       	add	r25, r24
    845c:	99 83       	std	Y+1, r25	; 0x01
    845e:	88 2f       	mov	r24, r24
    8460:	90 e0       	ldi	r25, 0x00	; 0
    8462:	8b 5d       	subi	r24, 0xDB	; 219
    8464:	98 4d       	sbci	r25, 0xD8	; 216
    8466:	20 e2       	ldi	r18, 0x20	; 32
    8468:	fc 01       	movw	r30, r24
    846a:	20 83       	st	Z, r18
    846c:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <TECPWMDutyA>
    8470:	88 23       	and	r24, r24
    8472:	c9 f0       	breq	.+50     	; 0x84a6 <handle_received_USB_cmd+0x1c2>
    8474:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <TECPWMDutyA>
    8478:	88 2f       	mov	r24, r24
    847a:	90 e0       	ldi	r25, 0x00	; 0
    847c:	a0 e0       	ldi	r26, 0x00	; 0
    847e:	b0 e0       	ldi	r27, 0x00	; 0
    8480:	9e 01       	movw	r18, r28
    8482:	20 5c       	subi	r18, 0xC0	; 192
    8484:	3f 4f       	sbci	r19, 0xFF	; 255
    8486:	a9 01       	movw	r20, r18
    8488:	bc 01       	movw	r22, r24
    848a:	cd 01       	movw	r24, r26
    848c:	b3 dd       	rcall	.-1178   	; 0x7ff4 <convert_int_to_string>
    848e:	89 81       	ldd	r24, Y+1	; 0x01
    8490:	91 e0       	ldi	r25, 0x01	; 1
    8492:	98 0f       	add	r25, r24
    8494:	99 83       	std	Y+1, r25	; 0x01
    8496:	88 2f       	mov	r24, r24
    8498:	90 e0       	ldi	r25, 0x00	; 0
    849a:	8b 5d       	subi	r24, 0xDB	; 219
    849c:	98 4d       	sbci	r25, 0xD8	; 216
    849e:	2b e2       	ldi	r18, 0x2B	; 43
    84a0:	fc 01       	movw	r30, r24
    84a2:	20 83       	st	Z, r18
    84a4:	18 c0       	rjmp	.+48     	; 0x84d6 <handle_received_USB_cmd+0x1f2>
    84a6:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <TECPWMDutyB>
    84aa:	88 2f       	mov	r24, r24
    84ac:	90 e0       	ldi	r25, 0x00	; 0
    84ae:	a0 e0       	ldi	r26, 0x00	; 0
    84b0:	b0 e0       	ldi	r27, 0x00	; 0
    84b2:	9e 01       	movw	r18, r28
    84b4:	20 5c       	subi	r18, 0xC0	; 192
    84b6:	3f 4f       	sbci	r19, 0xFF	; 255
    84b8:	a9 01       	movw	r20, r18
    84ba:	bc 01       	movw	r22, r24
    84bc:	cd 01       	movw	r24, r26
    84be:	9a dd       	rcall	.-1228   	; 0x7ff4 <convert_int_to_string>
    84c0:	89 81       	ldd	r24, Y+1	; 0x01
    84c2:	91 e0       	ldi	r25, 0x01	; 1
    84c4:	98 0f       	add	r25, r24
    84c6:	99 83       	std	Y+1, r25	; 0x01
    84c8:	88 2f       	mov	r24, r24
    84ca:	90 e0       	ldi	r25, 0x00	; 0
    84cc:	8b 5d       	subi	r24, 0xDB	; 219
    84ce:	98 4d       	sbci	r25, 0xD8	; 216
    84d0:	2d e2       	ldi	r18, 0x2D	; 45
    84d2:	fc 01       	movw	r30, r24
    84d4:	20 83       	st	Z, r18
    84d6:	1d 82       	std	Y+5, r1	; 0x05
    84d8:	17 c0       	rjmp	.+46     	; 0x8508 <handle_received_USB_cmd+0x224>
    84da:	89 81       	ldd	r24, Y+1	; 0x01
    84dc:	91 e0       	ldi	r25, 0x01	; 1
    84de:	98 0f       	add	r25, r24
    84e0:	99 83       	std	Y+1, r25	; 0x01
    84e2:	88 2f       	mov	r24, r24
    84e4:	90 e0       	ldi	r25, 0x00	; 0
    84e6:	2d 81       	ldd	r18, Y+5	; 0x05
    84e8:	22 2f       	mov	r18, r18
    84ea:	30 e0       	ldi	r19, 0x00	; 0
    84ec:	ae 01       	movw	r20, r28
    84ee:	40 5c       	subi	r20, 0xC0	; 192
    84f0:	5f 4f       	sbci	r21, 0xFF	; 255
    84f2:	24 0f       	add	r18, r20
    84f4:	35 1f       	adc	r19, r21
    84f6:	f9 01       	movw	r30, r18
    84f8:	20 81       	ld	r18, Z
    84fa:	8b 5d       	subi	r24, 0xDB	; 219
    84fc:	98 4d       	sbci	r25, 0xD8	; 216
    84fe:	fc 01       	movw	r30, r24
    8500:	20 83       	st	Z, r18
    8502:	8d 81       	ldd	r24, Y+5	; 0x05
    8504:	8f 5f       	subi	r24, 0xFF	; 255
    8506:	8d 83       	std	Y+5, r24	; 0x05
    8508:	8d 81       	ldd	r24, Y+5	; 0x05
    850a:	08 2f       	mov	r16, r24
    850c:	10 e0       	ldi	r17, 0x00	; 0
    850e:	ce 01       	movw	r24, r28
    8510:	80 5c       	subi	r24, 0xC0	; 192
    8512:	9f 4f       	sbci	r25, 0xFF	; 255
    8514:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    8518:	08 17       	cp	r16, r24
    851a:	19 07       	cpc	r17, r25
    851c:	f0 f2       	brcs	.-68     	; 0x84da <handle_received_USB_cmd+0x1f6>
    851e:	89 81       	ldd	r24, Y+1	; 0x01
    8520:	91 e0       	ldi	r25, 0x01	; 1
    8522:	98 0f       	add	r25, r24
    8524:	99 83       	std	Y+1, r25	; 0x01
    8526:	88 2f       	mov	r24, r24
    8528:	90 e0       	ldi	r25, 0x00	; 0
    852a:	8b 5d       	subi	r24, 0xDB	; 219
    852c:	98 4d       	sbci	r25, 0xD8	; 216
    852e:	2d e0       	ldi	r18, 0x0D	; 13
    8530:	fc 01       	movw	r30, r24
    8532:	20 83       	st	Z, r18
    8534:	82 e0       	ldi	r24, 0x02	; 2
    8536:	90 e0       	ldi	r25, 0x00	; 0
    8538:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    853c:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    8540:	81 e0       	ldi	r24, 0x01	; 1
    8542:	8a 83       	std	Y+2, r24	; 0x02
    8544:	0c 94 a4 54 	jmp	0xa948	; 0xa948 <handle_received_USB_cmd+0x2664>
    8548:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    854c:	81 30       	cpi	r24, 0x01	; 1
    854e:	11 f0       	breq	.+4      	; 0x8554 <handle_received_USB_cmd+0x270>
    8550:	0c 94 a4 54 	jmp	0xa948	; 0xa948 <handle_received_USB_cmd+0x2664>
    8554:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    8558:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    855c:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    8560:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    8564:	e1 2c       	mov	r14, r1
    8566:	f1 2c       	mov	r15, r1
    8568:	06 ec       	ldi	r16, 0xC6	; 198
    856a:	12 e4       	ldi	r17, 0x42	; 66
    856c:	20 e0       	ldi	r18, 0x00	; 0
    856e:	30 e0       	ldi	r19, 0x00	; 0
    8570:	a9 01       	movw	r20, r18
    8572:	bc 01       	movw	r22, r24
    8574:	cd 01       	movw	r24, r26
    8576:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    857a:	88 23       	and	r24, r24
    857c:	11 f4       	brne	.+4      	; 0x8582 <handle_received_USB_cmd+0x29e>
    857e:	0c 94 a4 54 	jmp	0xa948	; 0xa948 <handle_received_USB_cmd+0x2664>
    8582:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    8586:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    858a:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    858e:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    8592:	e1 2c       	mov	r14, r1
    8594:	f1 2c       	mov	r15, r1
    8596:	06 ec       	ldi	r16, 0xC6	; 198
    8598:	12 e4       	ldi	r17, 0x42	; 66
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	30 e0       	ldi	r19, 0x00	; 0
    859e:	a9 01       	movw	r20, r18
    85a0:	bc 01       	movw	r22, r24
    85a2:	cd 01       	movw	r24, r26
    85a4:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    85a8:	88 23       	and	r24, r24
    85aa:	11 f4       	brne	.+4      	; 0x85b0 <handle_received_USB_cmd+0x2cc>
    85ac:	0c 94 a4 54 	jmp	0xa948	; 0xa948 <handle_received_USB_cmd+0x2664>
    85b0:	80 91 38 26 	lds	r24, 0x2638	; 0x802638 <receivedUSBMsg+0x1>
    85b4:	82 30       	cpi	r24, 0x02	; 2
    85b6:	11 f4       	brne	.+4      	; 0x85bc <handle_received_USB_cmd+0x2d8>
    85b8:	0c 94 a4 54 	jmp	0xa948	; 0xa948 <handle_received_USB_cmd+0x2664>
    85bc:	0e 94 40 80 	call	0x10080	; 0x10080 <recover_from_OTSD>
    85c0:	60 ef       	ldi	r22, 0xF0	; 240
    85c2:	79 e4       	ldi	r23, 0x49	; 73
    85c4:	82 e0       	ldi	r24, 0x02	; 2
    85c6:	90 e0       	ldi	r25, 0x00	; 0
    85c8:	0e 94 c6 7d 	call	0xfb8c	; 0xfb8c <set_TEC_pwm_A_freq>
    85cc:	60 ef       	ldi	r22, 0xF0	; 240
    85ce:	79 e4       	ldi	r23, 0x49	; 73
    85d0:	82 e0       	ldi	r24, 0x02	; 2
    85d2:	90 e0       	ldi	r25, 0x00	; 0
    85d4:	0e 94 f0 7d 	call	0xfbe0	; 0xfbe0 <set_TEC_pwm_B_freq>
    85d8:	80 91 38 26 	lds	r24, 0x2638	; 0x802638 <receivedUSBMsg+0x1>
    85dc:	88 23       	and	r24, r24
    85de:	11 f5       	brne	.+68     	; 0x8624 <handle_received_USB_cmd+0x340>
    85e0:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    85e4:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    85e8:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    85ec:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    85f0:	bc 01       	movw	r22, r24
    85f2:	cd 01       	movw	r24, r26
    85f4:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    85f8:	dc 01       	movw	r26, r24
    85fa:	cb 01       	movw	r24, r22
    85fc:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <TECPWMDutyA>
    8600:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <TECPWMDutyB>
    8604:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <TECPWMDutyA>
    8608:	88 23       	and	r24, r24
    860a:	41 f0       	breq	.+16     	; 0x861c <handle_received_USB_cmd+0x338>
    860c:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    8610:	88 23       	and	r24, r24
    8612:	21 f4       	brne	.+8      	; 0x861c <handle_received_USB_cmd+0x338>
    8614:	82 e0       	ldi	r24, 0x02	; 2
    8616:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <TECState>
    861a:	21 c0       	rjmp	.+66     	; 0x865e <handle_received_USB_cmd+0x37a>
    861c:	81 e0       	ldi	r24, 0x01	; 1
    861e:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <TECState>
    8622:	1d c0       	rjmp	.+58     	; 0x865e <handle_received_USB_cmd+0x37a>
    8624:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <TECPWMDutyA>
    8628:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    862c:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    8630:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    8634:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    8638:	bc 01       	movw	r22, r24
    863a:	cd 01       	movw	r24, r26
    863c:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    8640:	dc 01       	movw	r26, r24
    8642:	cb 01       	movw	r24, r22
    8644:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <TECPWMDutyB>
    8648:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    864c:	88 23       	and	r24, r24
    864e:	21 f0       	breq	.+8      	; 0x8658 <handle_received_USB_cmd+0x374>
    8650:	81 e0       	ldi	r24, 0x01	; 1
    8652:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <TECState>
    8656:	03 c0       	rjmp	.+6      	; 0x865e <handle_received_USB_cmd+0x37a>
    8658:	83 e0       	ldi	r24, 0x03	; 3
    865a:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <TECState>
    865e:	1e 82       	std	Y+6, r1	; 0x06
    8660:	14 c0       	rjmp	.+40     	; 0x868a <handle_received_USB_cmd+0x3a6>
    8662:	89 81       	ldd	r24, Y+1	; 0x01
    8664:	91 e0       	ldi	r25, 0x01	; 1
    8666:	98 0f       	add	r25, r24
    8668:	99 83       	std	Y+1, r25	; 0x01
    866a:	88 2f       	mov	r24, r24
    866c:	90 e0       	ldi	r25, 0x00	; 0
    866e:	2e 81       	ldd	r18, Y+6	; 0x06
    8670:	22 2f       	mov	r18, r18
    8672:	30 e0       	ldi	r19, 0x00	; 0
    8674:	2f 52       	subi	r18, 0x2F	; 47
    8676:	3f 4d       	sbci	r19, 0xDF	; 223
    8678:	f9 01       	movw	r30, r18
    867a:	20 81       	ld	r18, Z
    867c:	8b 5d       	subi	r24, 0xDB	; 219
    867e:	98 4d       	sbci	r25, 0xD8	; 216
    8680:	fc 01       	movw	r30, r24
    8682:	20 83       	st	Z, r18
    8684:	8e 81       	ldd	r24, Y+6	; 0x06
    8686:	8f 5f       	subi	r24, 0xFF	; 255
    8688:	8e 83       	std	Y+6, r24	; 0x06
    868a:	8e 81       	ldd	r24, Y+6	; 0x06
    868c:	82 30       	cpi	r24, 0x02	; 2
    868e:	48 f3       	brcs	.-46     	; 0x8662 <handle_received_USB_cmd+0x37e>
    8690:	89 81       	ldd	r24, Y+1	; 0x01
    8692:	91 e0       	ldi	r25, 0x01	; 1
    8694:	98 0f       	add	r25, r24
    8696:	99 83       	std	Y+1, r25	; 0x01
    8698:	88 2f       	mov	r24, r24
    869a:	90 e0       	ldi	r25, 0x00	; 0
    869c:	8b 5d       	subi	r24, 0xDB	; 219
    869e:	98 4d       	sbci	r25, 0xD8	; 216
    86a0:	2d e0       	ldi	r18, 0x0D	; 13
    86a2:	fc 01       	movw	r30, r24
    86a4:	20 83       	st	Z, r18
    86a6:	82 e0       	ldi	r24, 0x02	; 2
    86a8:	90 e0       	ldi	r25, 0x00	; 0
    86aa:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    86ae:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    86b2:	81 e0       	ldi	r24, 0x01	; 1
    86b4:	8a 83       	std	Y+2, r24	; 0x02
    86b6:	0c 94 a4 54 	jmp	0xa948	; 0xa948 <handle_received_USB_cmd+0x2664>
    86ba:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    86be:	88 23       	and	r24, r24
    86c0:	09 f0       	breq	.+2      	; 0x86c4 <handle_received_USB_cmd+0x3e0>
    86c2:	75 c0       	rjmp	.+234    	; 0x87ae <handle_received_USB_cmd+0x4ca>
    86c4:	ce 01       	movw	r24, r28
    86c6:	8c 5b       	subi	r24, 0xBC	; 188
    86c8:	9f 4f       	sbci	r25, 0xFF	; 255
    86ca:	28 e0       	ldi	r18, 0x08	; 8
    86cc:	fc 01       	movw	r30, r24
    86ce:	e2 2e       	mov	r14, r18
    86d0:	11 92       	st	Z+, r1
    86d2:	ea 94       	dec	r14
    86d4:	e9 f7       	brne	.-6      	; 0x86d0 <handle_received_USB_cmd+0x3ec>
    86d6:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <tempSetPoint>
    86da:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <tempSetPoint+0x1>
    86de:	a0 91 bb 21 	lds	r26, 0x21BB	; 0x8021bb <tempSetPoint+0x2>
    86e2:	b0 91 bc 21 	lds	r27, 0x21BC	; 0x8021bc <tempSetPoint+0x3>
    86e6:	ae 01       	movw	r20, r28
    86e8:	4c 5b       	subi	r20, 0xBC	; 188
    86ea:	5f 4f       	sbci	r21, 0xFF	; 255
    86ec:	28 e0       	ldi	r18, 0x08	; 8
    86ee:	bc 01       	movw	r22, r24
    86f0:	cd 01       	movw	r24, r26
    86f2:	9c dc       	rcall	.-1736   	; 0x802c <convert_float_to_string>
    86f4:	1f 82       	std	Y+7, r1	; 0x07
    86f6:	14 c0       	rjmp	.+40     	; 0x8720 <handle_received_USB_cmd+0x43c>
    86f8:	89 81       	ldd	r24, Y+1	; 0x01
    86fa:	91 e0       	ldi	r25, 0x01	; 1
    86fc:	98 0f       	add	r25, r24
    86fe:	99 83       	std	Y+1, r25	; 0x01
    8700:	88 2f       	mov	r24, r24
    8702:	90 e0       	ldi	r25, 0x00	; 0
    8704:	2f 81       	ldd	r18, Y+7	; 0x07
    8706:	22 2f       	mov	r18, r18
    8708:	30 e0       	ldi	r19, 0x00	; 0
    870a:	28 51       	subi	r18, 0x18	; 24
    870c:	3f 4d       	sbci	r19, 0xDF	; 223
    870e:	f9 01       	movw	r30, r18
    8710:	20 81       	ld	r18, Z
    8712:	8b 5d       	subi	r24, 0xDB	; 219
    8714:	98 4d       	sbci	r25, 0xD8	; 216
    8716:	fc 01       	movw	r30, r24
    8718:	20 83       	st	Z, r18
    871a:	8f 81       	ldd	r24, Y+7	; 0x07
    871c:	8f 5f       	subi	r24, 0xFF	; 255
    871e:	8f 83       	std	Y+7, r24	; 0x07
    8720:	8f 81       	ldd	r24, Y+7	; 0x07
    8722:	87 30       	cpi	r24, 0x07	; 7
    8724:	48 f3       	brcs	.-46     	; 0x86f8 <handle_received_USB_cmd+0x414>
    8726:	89 81       	ldd	r24, Y+1	; 0x01
    8728:	91 e0       	ldi	r25, 0x01	; 1
    872a:	98 0f       	add	r25, r24
    872c:	99 83       	std	Y+1, r25	; 0x01
    872e:	88 2f       	mov	r24, r24
    8730:	90 e0       	ldi	r25, 0x00	; 0
    8732:	8b 5d       	subi	r24, 0xDB	; 219
    8734:	98 4d       	sbci	r25, 0xD8	; 216
    8736:	20 e2       	ldi	r18, 0x20	; 32
    8738:	fc 01       	movw	r30, r24
    873a:	20 83       	st	Z, r18
    873c:	18 86       	std	Y+8, r1	; 0x08
    873e:	17 c0       	rjmp	.+46     	; 0x876e <handle_received_USB_cmd+0x48a>
    8740:	89 81       	ldd	r24, Y+1	; 0x01
    8742:	91 e0       	ldi	r25, 0x01	; 1
    8744:	98 0f       	add	r25, r24
    8746:	99 83       	std	Y+1, r25	; 0x01
    8748:	88 2f       	mov	r24, r24
    874a:	90 e0       	ldi	r25, 0x00	; 0
    874c:	28 85       	ldd	r18, Y+8	; 0x08
    874e:	22 2f       	mov	r18, r18
    8750:	30 e0       	ldi	r19, 0x00	; 0
    8752:	ae 01       	movw	r20, r28
    8754:	4c 5b       	subi	r20, 0xBC	; 188
    8756:	5f 4f       	sbci	r21, 0xFF	; 255
    8758:	24 0f       	add	r18, r20
    875a:	35 1f       	adc	r19, r21
    875c:	f9 01       	movw	r30, r18
    875e:	20 81       	ld	r18, Z
    8760:	8b 5d       	subi	r24, 0xDB	; 219
    8762:	98 4d       	sbci	r25, 0xD8	; 216
    8764:	fc 01       	movw	r30, r24
    8766:	20 83       	st	Z, r18
    8768:	88 85       	ldd	r24, Y+8	; 0x08
    876a:	8f 5f       	subi	r24, 0xFF	; 255
    876c:	88 87       	std	Y+8, r24	; 0x08
    876e:	88 85       	ldd	r24, Y+8	; 0x08
    8770:	08 2f       	mov	r16, r24
    8772:	10 e0       	ldi	r17, 0x00	; 0
    8774:	ce 01       	movw	r24, r28
    8776:	8c 5b       	subi	r24, 0xBC	; 188
    8778:	9f 4f       	sbci	r25, 0xFF	; 255
    877a:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    877e:	08 17       	cp	r16, r24
    8780:	19 07       	cpc	r17, r25
    8782:	f0 f2       	brcs	.-68     	; 0x8740 <handle_received_USB_cmd+0x45c>
    8784:	89 81       	ldd	r24, Y+1	; 0x01
    8786:	91 e0       	ldi	r25, 0x01	; 1
    8788:	98 0f       	add	r25, r24
    878a:	99 83       	std	Y+1, r25	; 0x01
    878c:	88 2f       	mov	r24, r24
    878e:	90 e0       	ldi	r25, 0x00	; 0
    8790:	8b 5d       	subi	r24, 0xDB	; 219
    8792:	98 4d       	sbci	r25, 0xD8	; 216
    8794:	2d e0       	ldi	r18, 0x0D	; 13
    8796:	fc 01       	movw	r30, r24
    8798:	20 83       	st	Z, r18
    879a:	83 e0       	ldi	r24, 0x03	; 3
    879c:	90 e0       	ldi	r25, 0x00	; 0
    879e:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    87a2:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    87a6:	81 e0       	ldi	r24, 0x01	; 1
    87a8:	8a 83       	std	Y+2, r24	; 0x02
    87aa:	0c 94 a6 54 	jmp	0xa94c	; 0xa94c <handle_received_USB_cmd+0x2668>
    87ae:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    87b2:	81 30       	cpi	r24, 0x01	; 1
    87b4:	11 f0       	breq	.+4      	; 0x87ba <handle_received_USB_cmd+0x4d6>
    87b6:	0c 94 a6 54 	jmp	0xa94c	; 0xa94c <handle_received_USB_cmd+0x2668>
    87ba:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    87be:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    87c2:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    87c6:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    87ca:	e1 2c       	mov	r14, r1
    87cc:	f1 2c       	mov	r15, r1
    87ce:	07 e4       	ldi	r16, 0x47	; 71
    87d0:	13 e4       	ldi	r17, 0x43	; 67
    87d2:	20 e0       	ldi	r18, 0x00	; 0
    87d4:	30 e0       	ldi	r19, 0x00	; 0
    87d6:	a9 01       	movw	r20, r18
    87d8:	bc 01       	movw	r22, r24
    87da:	cd 01       	movw	r24, r26
    87dc:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    87e0:	88 23       	and	r24, r24
    87e2:	11 f4       	brne	.+4      	; 0x87e8 <handle_received_USB_cmd+0x504>
    87e4:	0c 94 a6 54 	jmp	0xa94c	; 0xa94c <handle_received_USB_cmd+0x2668>
    87e8:	81 e0       	ldi	r24, 0x01	; 1
    87ea:	80 93 b7 21 	sts	0x21B7, r24	; 0x8021b7 <heaterEnabled>
    87ee:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    87f2:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    87f6:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    87fa:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    87fe:	80 93 b9 21 	sts	0x21B9, r24	; 0x8021b9 <tempSetPoint>
    8802:	90 93 ba 21 	sts	0x21BA, r25	; 0x8021ba <tempSetPoint+0x1>
    8806:	a0 93 bb 21 	sts	0x21BB, r26	; 0x8021bb <tempSetPoint+0x2>
    880a:	b0 93 bc 21 	sts	0x21BC, r27	; 0x8021bc <tempSetPoint+0x3>
    880e:	0e 94 5e 59 	call	0xb2bc	; 0xb2bc <calc_heater_adj>
    8812:	19 86       	std	Y+9, r1	; 0x09
    8814:	14 c0       	rjmp	.+40     	; 0x883e <handle_received_USB_cmd+0x55a>
    8816:	89 81       	ldd	r24, Y+1	; 0x01
    8818:	91 e0       	ldi	r25, 0x01	; 1
    881a:	98 0f       	add	r25, r24
    881c:	99 83       	std	Y+1, r25	; 0x01
    881e:	88 2f       	mov	r24, r24
    8820:	90 e0       	ldi	r25, 0x00	; 0
    8822:	29 85       	ldd	r18, Y+9	; 0x09
    8824:	22 2f       	mov	r18, r18
    8826:	30 e0       	ldi	r19, 0x00	; 0
    8828:	2f 52       	subi	r18, 0x2F	; 47
    882a:	3f 4d       	sbci	r19, 0xDF	; 223
    882c:	f9 01       	movw	r30, r18
    882e:	20 81       	ld	r18, Z
    8830:	8b 5d       	subi	r24, 0xDB	; 219
    8832:	98 4d       	sbci	r25, 0xD8	; 216
    8834:	fc 01       	movw	r30, r24
    8836:	20 83       	st	Z, r18
    8838:	89 85       	ldd	r24, Y+9	; 0x09
    883a:	8f 5f       	subi	r24, 0xFF	; 255
    883c:	89 87       	std	Y+9, r24	; 0x09
    883e:	89 85       	ldd	r24, Y+9	; 0x09
    8840:	82 30       	cpi	r24, 0x02	; 2
    8842:	48 f3       	brcs	.-46     	; 0x8816 <handle_received_USB_cmd+0x532>
    8844:	89 81       	ldd	r24, Y+1	; 0x01
    8846:	91 e0       	ldi	r25, 0x01	; 1
    8848:	98 0f       	add	r25, r24
    884a:	99 83       	std	Y+1, r25	; 0x01
    884c:	88 2f       	mov	r24, r24
    884e:	90 e0       	ldi	r25, 0x00	; 0
    8850:	8b 5d       	subi	r24, 0xDB	; 219
    8852:	98 4d       	sbci	r25, 0xD8	; 216
    8854:	2d e0       	ldi	r18, 0x0D	; 13
    8856:	fc 01       	movw	r30, r24
    8858:	20 83       	st	Z, r18
    885a:	83 e0       	ldi	r24, 0x03	; 3
    885c:	90 e0       	ldi	r25, 0x00	; 0
    885e:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    8862:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    8866:	81 e0       	ldi	r24, 0x01	; 1
    8868:	8a 83       	std	Y+2, r24	; 0x02
    886a:	0c 94 a6 54 	jmp	0xa94c	; 0xa94c <handle_received_USB_cmd+0x2668>
    886e:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    8872:	81 30       	cpi	r24, 0x01	; 1
    8874:	11 f0       	breq	.+4      	; 0x887a <handle_received_USB_cmd+0x596>
    8876:	0c 94 a8 54 	jmp	0xa950	; 0xa950 <handle_received_USB_cmd+0x266c>
    887a:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <tempSetPoint>
    887e:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <tempSetPoint+0x1>
    8882:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <tempSetPoint+0x2>
    8886:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <tempSetPoint+0x3>
    888a:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <heaterEnabled>
    888e:	1a 86       	std	Y+10, r1	; 0x0a
    8890:	14 c0       	rjmp	.+40     	; 0x88ba <handle_received_USB_cmd+0x5d6>
    8892:	89 81       	ldd	r24, Y+1	; 0x01
    8894:	91 e0       	ldi	r25, 0x01	; 1
    8896:	98 0f       	add	r25, r24
    8898:	99 83       	std	Y+1, r25	; 0x01
    889a:	88 2f       	mov	r24, r24
    889c:	90 e0       	ldi	r25, 0x00	; 0
    889e:	2a 85       	ldd	r18, Y+10	; 0x0a
    88a0:	22 2f       	mov	r18, r18
    88a2:	30 e0       	ldi	r19, 0x00	; 0
    88a4:	2f 52       	subi	r18, 0x2F	; 47
    88a6:	3f 4d       	sbci	r19, 0xDF	; 223
    88a8:	f9 01       	movw	r30, r18
    88aa:	20 81       	ld	r18, Z
    88ac:	8b 5d       	subi	r24, 0xDB	; 219
    88ae:	98 4d       	sbci	r25, 0xD8	; 216
    88b0:	fc 01       	movw	r30, r24
    88b2:	20 83       	st	Z, r18
    88b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    88b6:	8f 5f       	subi	r24, 0xFF	; 255
    88b8:	8a 87       	std	Y+10, r24	; 0x0a
    88ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    88bc:	82 30       	cpi	r24, 0x02	; 2
    88be:	48 f3       	brcs	.-46     	; 0x8892 <handle_received_USB_cmd+0x5ae>
    88c0:	89 81       	ldd	r24, Y+1	; 0x01
    88c2:	91 e0       	ldi	r25, 0x01	; 1
    88c4:	98 0f       	add	r25, r24
    88c6:	99 83       	std	Y+1, r25	; 0x01
    88c8:	88 2f       	mov	r24, r24
    88ca:	90 e0       	ldi	r25, 0x00	; 0
    88cc:	8b 5d       	subi	r24, 0xDB	; 219
    88ce:	98 4d       	sbci	r25, 0xD8	; 216
    88d0:	2d e0       	ldi	r18, 0x0D	; 13
    88d2:	fc 01       	movw	r30, r24
    88d4:	20 83       	st	Z, r18
    88d6:	84 e0       	ldi	r24, 0x04	; 4
    88d8:	90 e0       	ldi	r25, 0x00	; 0
    88da:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    88de:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    88e2:	81 e0       	ldi	r24, 0x01	; 1
    88e4:	8a 83       	std	Y+2, r24	; 0x02
    88e6:	0c 94 a8 54 	jmp	0xa950	; 0xa950 <handle_received_USB_cmd+0x266c>
    88ea:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    88ee:	88 23       	and	r24, r24
    88f0:	11 f0       	breq	.+4      	; 0x88f6 <handle_received_USB_cmd+0x612>
    88f2:	0c 94 aa 54 	jmp	0xa954	; 0xa954 <handle_received_USB_cmd+0x2670>
    88f6:	ce 01       	movw	r24, r28
    88f8:	84 5b       	subi	r24, 0xB4	; 180
    88fa:	9f 4f       	sbci	r25, 0xFF	; 255
    88fc:	28 e0       	ldi	r18, 0x08	; 8
    88fe:	fc 01       	movw	r30, r24
    8900:	e2 2e       	mov	r14, r18
    8902:	11 92       	st	Z+, r1
    8904:	ea 94       	dec	r14
    8906:	e9 f7       	brne	.-6      	; 0x8902 <handle_received_USB_cmd+0x61e>
    8908:	ce 01       	movw	r24, r28
    890a:	8c 5a       	subi	r24, 0xAC	; 172
    890c:	9f 4f       	sbci	r25, 0xFF	; 255
    890e:	fc 01       	movw	r30, r24
    8910:	10 82       	st	Z, r1
    8912:	11 82       	std	Z+1, r1	; 0x01
    8914:	12 82       	std	Z+2, r1	; 0x02
    8916:	13 82       	std	Z+3, r1	; 0x03
    8918:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <heaterEnabled>
    891c:	88 23       	and	r24, r24
    891e:	39 f5       	brne	.+78     	; 0x896e <handle_received_USB_cmd+0x68a>
    8920:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <curTemp>
    8924:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <curTemp+0x1>
    8928:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <curTemp+0x2>
    892c:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <curTemp+0x3>
    8930:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <tempProbeType>
    8934:	88 23       	and	r24, r24
    8936:	69 f4       	brne	.+26     	; 0x8952 <handle_received_USB_cmd+0x66e>
    8938:	0e 94 7b 55 	call	0xaaf6	; 0xaaf6 <calc_temp_from_ADC_reading>
    893c:	dc 01       	movw	r26, r24
    893e:	cb 01       	movw	r24, r22
    8940:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    8944:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    8948:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    894c:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    8950:	0e c0       	rjmp	.+28     	; 0x896e <handle_received_USB_cmd+0x68a>
    8952:	0e 94 f6 5b 	call	0xb7ec	; 0xb7ec <get_RTD_sensor_reading>
    8956:	0e 94 e6 55 	call	0xabcc	; 0xabcc <calc_temp_from_RTD_reading>
    895a:	dc 01       	movw	r26, r24
    895c:	cb 01       	movw	r24, r22
    895e:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    8962:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    8966:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    896a:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    896e:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <curTemp>
    8972:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <curTemp+0x1>
    8976:	a0 91 bf 21 	lds	r26, 0x21BF	; 0x8021bf <curTemp+0x2>
    897a:	b0 91 c0 21 	lds	r27, 0x21C0	; 0x8021c0 <curTemp+0x3>
    897e:	ae 01       	movw	r20, r28
    8980:	44 5b       	subi	r20, 0xB4	; 180
    8982:	5f 4f       	sbci	r21, 0xFF	; 255
    8984:	28 e0       	ldi	r18, 0x08	; 8
    8986:	bc 01       	movw	r22, r24
    8988:	cd 01       	movw	r24, r26
    898a:	50 db       	rcall	.-2400   	; 0x802c <convert_float_to_string>
    898c:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <heaterPID+0x2c>
    8990:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <heaterPID+0x2d>
    8994:	a0 91 2b 28 	lds	r26, 0x282B	; 0x80282b <heaterPID+0x2e>
    8998:	b0 91 2c 28 	lds	r27, 0x282C	; 0x80282c <heaterPID+0x2f>
    899c:	bc 01       	movw	r22, r24
    899e:	cd 01       	movw	r24, r26
    89a0:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    89a4:	dc 01       	movw	r26, r24
    89a6:	cb 01       	movw	r24, r22
    89a8:	cc 01       	movw	r24, r24
    89aa:	a0 e0       	ldi	r26, 0x00	; 0
    89ac:	b0 e0       	ldi	r27, 0x00	; 0
    89ae:	9e 01       	movw	r18, r28
    89b0:	2c 5a       	subi	r18, 0xAC	; 172
    89b2:	3f 4f       	sbci	r19, 0xFF	; 255
    89b4:	a9 01       	movw	r20, r18
    89b6:	bc 01       	movw	r22, r24
    89b8:	cd 01       	movw	r24, r26
    89ba:	1c db       	rcall	.-2504   	; 0x7ff4 <convert_int_to_string>
    89bc:	1b 86       	std	Y+11, r1	; 0x0b
    89be:	14 c0       	rjmp	.+40     	; 0x89e8 <handle_received_USB_cmd+0x704>
    89c0:	89 81       	ldd	r24, Y+1	; 0x01
    89c2:	91 e0       	ldi	r25, 0x01	; 1
    89c4:	98 0f       	add	r25, r24
    89c6:	99 83       	std	Y+1, r25	; 0x01
    89c8:	88 2f       	mov	r24, r24
    89ca:	90 e0       	ldi	r25, 0x00	; 0
    89cc:	2b 85       	ldd	r18, Y+11	; 0x0b
    89ce:	22 2f       	mov	r18, r18
    89d0:	30 e0       	ldi	r19, 0x00	; 0
    89d2:	24 50       	subi	r18, 0x04	; 4
    89d4:	3f 4d       	sbci	r19, 0xDF	; 223
    89d6:	f9 01       	movw	r30, r18
    89d8:	20 81       	ld	r18, Z
    89da:	8b 5d       	subi	r24, 0xDB	; 219
    89dc:	98 4d       	sbci	r25, 0xD8	; 216
    89de:	fc 01       	movw	r30, r24
    89e0:	20 83       	st	Z, r18
    89e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    89e4:	8f 5f       	subi	r24, 0xFF	; 255
    89e6:	8b 87       	std	Y+11, r24	; 0x0b
    89e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    89ea:	84 30       	cpi	r24, 0x04	; 4
    89ec:	48 f3       	brcs	.-46     	; 0x89c0 <handle_received_USB_cmd+0x6dc>
    89ee:	89 81       	ldd	r24, Y+1	; 0x01
    89f0:	91 e0       	ldi	r25, 0x01	; 1
    89f2:	98 0f       	add	r25, r24
    89f4:	99 83       	std	Y+1, r25	; 0x01
    89f6:	88 2f       	mov	r24, r24
    89f8:	90 e0       	ldi	r25, 0x00	; 0
    89fa:	8b 5d       	subi	r24, 0xDB	; 219
    89fc:	98 4d       	sbci	r25, 0xD8	; 216
    89fe:	20 e2       	ldi	r18, 0x20	; 32
    8a00:	fc 01       	movw	r30, r24
    8a02:	20 83       	st	Z, r18
    8a04:	1c 86       	std	Y+12, r1	; 0x0c
    8a06:	17 c0       	rjmp	.+46     	; 0x8a36 <handle_received_USB_cmd+0x752>
    8a08:	89 81       	ldd	r24, Y+1	; 0x01
    8a0a:	91 e0       	ldi	r25, 0x01	; 1
    8a0c:	98 0f       	add	r25, r24
    8a0e:	99 83       	std	Y+1, r25	; 0x01
    8a10:	88 2f       	mov	r24, r24
    8a12:	90 e0       	ldi	r25, 0x00	; 0
    8a14:	2c 85       	ldd	r18, Y+12	; 0x0c
    8a16:	22 2f       	mov	r18, r18
    8a18:	30 e0       	ldi	r19, 0x00	; 0
    8a1a:	ae 01       	movw	r20, r28
    8a1c:	44 5b       	subi	r20, 0xB4	; 180
    8a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    8a20:	24 0f       	add	r18, r20
    8a22:	35 1f       	adc	r19, r21
    8a24:	f9 01       	movw	r30, r18
    8a26:	20 81       	ld	r18, Z
    8a28:	8b 5d       	subi	r24, 0xDB	; 219
    8a2a:	98 4d       	sbci	r25, 0xD8	; 216
    8a2c:	fc 01       	movw	r30, r24
    8a2e:	20 83       	st	Z, r18
    8a30:	8c 85       	ldd	r24, Y+12	; 0x0c
    8a32:	8f 5f       	subi	r24, 0xFF	; 255
    8a34:	8c 87       	std	Y+12, r24	; 0x0c
    8a36:	8c 85       	ldd	r24, Y+12	; 0x0c
    8a38:	08 2f       	mov	r16, r24
    8a3a:	10 e0       	ldi	r17, 0x00	; 0
    8a3c:	ce 01       	movw	r24, r28
    8a3e:	84 5b       	subi	r24, 0xB4	; 180
    8a40:	9f 4f       	sbci	r25, 0xFF	; 255
    8a42:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    8a46:	08 17       	cp	r16, r24
    8a48:	19 07       	cpc	r17, r25
    8a4a:	f0 f2       	brcs	.-68     	; 0x8a08 <handle_received_USB_cmd+0x724>
    8a4c:	89 81       	ldd	r24, Y+1	; 0x01
    8a4e:	91 e0       	ldi	r25, 0x01	; 1
    8a50:	98 0f       	add	r25, r24
    8a52:	99 83       	std	Y+1, r25	; 0x01
    8a54:	88 2f       	mov	r24, r24
    8a56:	90 e0       	ldi	r25, 0x00	; 0
    8a58:	8b 5d       	subi	r24, 0xDB	; 219
    8a5a:	98 4d       	sbci	r25, 0xD8	; 216
    8a5c:	20 e2       	ldi	r18, 0x20	; 32
    8a5e:	fc 01       	movw	r30, r24
    8a60:	20 83       	st	Z, r18
    8a62:	1d 86       	std	Y+13, r1	; 0x0d
    8a64:	17 c0       	rjmp	.+46     	; 0x8a94 <handle_received_USB_cmd+0x7b0>
    8a66:	89 81       	ldd	r24, Y+1	; 0x01
    8a68:	91 e0       	ldi	r25, 0x01	; 1
    8a6a:	98 0f       	add	r25, r24
    8a6c:	99 83       	std	Y+1, r25	; 0x01
    8a6e:	88 2f       	mov	r24, r24
    8a70:	90 e0       	ldi	r25, 0x00	; 0
    8a72:	2d 85       	ldd	r18, Y+13	; 0x0d
    8a74:	22 2f       	mov	r18, r18
    8a76:	30 e0       	ldi	r19, 0x00	; 0
    8a78:	ae 01       	movw	r20, r28
    8a7a:	4c 5a       	subi	r20, 0xAC	; 172
    8a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a7e:	24 0f       	add	r18, r20
    8a80:	35 1f       	adc	r19, r21
    8a82:	f9 01       	movw	r30, r18
    8a84:	20 81       	ld	r18, Z
    8a86:	8b 5d       	subi	r24, 0xDB	; 219
    8a88:	98 4d       	sbci	r25, 0xD8	; 216
    8a8a:	fc 01       	movw	r30, r24
    8a8c:	20 83       	st	Z, r18
    8a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a90:	8f 5f       	subi	r24, 0xFF	; 255
    8a92:	8d 87       	std	Y+13, r24	; 0x0d
    8a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a96:	08 2f       	mov	r16, r24
    8a98:	10 e0       	ldi	r17, 0x00	; 0
    8a9a:	ce 01       	movw	r24, r28
    8a9c:	8c 5a       	subi	r24, 0xAC	; 172
    8a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    8aa0:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    8aa4:	08 17       	cp	r16, r24
    8aa6:	19 07       	cpc	r17, r25
    8aa8:	f0 f2       	brcs	.-68     	; 0x8a66 <handle_received_USB_cmd+0x782>
    8aaa:	89 81       	ldd	r24, Y+1	; 0x01
    8aac:	91 e0       	ldi	r25, 0x01	; 1
    8aae:	98 0f       	add	r25, r24
    8ab0:	99 83       	std	Y+1, r25	; 0x01
    8ab2:	88 2f       	mov	r24, r24
    8ab4:	90 e0       	ldi	r25, 0x00	; 0
    8ab6:	8b 5d       	subi	r24, 0xDB	; 219
    8ab8:	98 4d       	sbci	r25, 0xD8	; 216
    8aba:	2d e0       	ldi	r18, 0x0D	; 13
    8abc:	fc 01       	movw	r30, r24
    8abe:	20 83       	st	Z, r18
    8ac0:	85 e0       	ldi	r24, 0x05	; 5
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    8ac8:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    8acc:	81 e0       	ldi	r24, 0x01	; 1
    8ace:	8a 83       	std	Y+2, r24	; 0x02
    8ad0:	0c 94 aa 54 	jmp	0xa954	; 0xa954 <handle_received_USB_cmd+0x2670>
    8ad4:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    8ad8:	88 23       	and	r24, r24
    8ada:	09 f0       	breq	.+2      	; 0x8ade <handle_received_USB_cmd+0x7fa>
    8adc:	24 c1       	rjmp	.+584    	; 0x8d26 <handle_received_USB_cmd+0xa42>
    8ade:	ce 01       	movw	r24, r28
    8ae0:	88 5a       	subi	r24, 0xA8	; 168
    8ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae4:	28 e0       	ldi	r18, 0x08	; 8
    8ae6:	fc 01       	movw	r30, r24
    8ae8:	e2 2e       	mov	r14, r18
    8aea:	11 92       	st	Z+, r1
    8aec:	ea 94       	dec	r14
    8aee:	e9 f7       	brne	.-6      	; 0x8aea <handle_received_USB_cmd+0x806>
    8af0:	ce 01       	movw	r24, r28
    8af2:	80 5a       	subi	r24, 0xA0	; 160
    8af4:	9f 4f       	sbci	r25, 0xFF	; 255
    8af6:	28 e0       	ldi	r18, 0x08	; 8
    8af8:	fc 01       	movw	r30, r24
    8afa:	e2 2e       	mov	r14, r18
    8afc:	11 92       	st	Z+, r1
    8afe:	ea 94       	dec	r14
    8b00:	e9 f7       	brne	.-6      	; 0x8afc <handle_received_USB_cmd+0x818>
    8b02:	ce 01       	movw	r24, r28
    8b04:	88 59       	subi	r24, 0x98	; 152
    8b06:	9f 4f       	sbci	r25, 0xFF	; 255
    8b08:	28 e0       	ldi	r18, 0x08	; 8
    8b0a:	fc 01       	movw	r30, r24
    8b0c:	e2 2e       	mov	r14, r18
    8b0e:	11 92       	st	Z+, r1
    8b10:	ea 94       	dec	r14
    8b12:	e9 f7       	brne	.-6      	; 0x8b0e <handle_received_USB_cmd+0x82a>
    8b14:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <heaterPID+0x1c>
    8b18:	90 91 1a 28 	lds	r25, 0x281A	; 0x80281a <heaterPID+0x1d>
    8b1c:	a0 91 1b 28 	lds	r26, 0x281B	; 0x80281b <heaterPID+0x1e>
    8b20:	b0 91 1c 28 	lds	r27, 0x281C	; 0x80281c <heaterPID+0x1f>
    8b24:	ae 01       	movw	r20, r28
    8b26:	48 5a       	subi	r20, 0xA8	; 168
    8b28:	5f 4f       	sbci	r21, 0xFF	; 255
    8b2a:	28 e0       	ldi	r18, 0x08	; 8
    8b2c:	bc 01       	movw	r22, r24
    8b2e:	cd 01       	movw	r24, r26
    8b30:	7d da       	rcall	.-2822   	; 0x802c <convert_float_to_string>
    8b32:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <heaterPID+0x20>
    8b36:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <heaterPID+0x21>
    8b3a:	a0 91 1f 28 	lds	r26, 0x281F	; 0x80281f <heaterPID+0x22>
    8b3e:	b0 91 20 28 	lds	r27, 0x2820	; 0x802820 <heaterPID+0x23>
    8b42:	ae 01       	movw	r20, r28
    8b44:	40 5a       	subi	r20, 0xA0	; 160
    8b46:	5f 4f       	sbci	r21, 0xFF	; 255
    8b48:	28 e0       	ldi	r18, 0x08	; 8
    8b4a:	bc 01       	movw	r22, r24
    8b4c:	cd 01       	movw	r24, r26
    8b4e:	6e da       	rcall	.-2852   	; 0x802c <convert_float_to_string>
    8b50:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <heaterPID+0x24>
    8b54:	90 91 22 28 	lds	r25, 0x2822	; 0x802822 <heaterPID+0x25>
    8b58:	a0 91 23 28 	lds	r26, 0x2823	; 0x802823 <heaterPID+0x26>
    8b5c:	b0 91 24 28 	lds	r27, 0x2824	; 0x802824 <heaterPID+0x27>
    8b60:	ae 01       	movw	r20, r28
    8b62:	48 59       	subi	r20, 0x98	; 152
    8b64:	5f 4f       	sbci	r21, 0xFF	; 255
    8b66:	28 e0       	ldi	r18, 0x08	; 8
    8b68:	bc 01       	movw	r22, r24
    8b6a:	cd 01       	movw	r24, r26
    8b6c:	5f da       	rcall	.-2882   	; 0x802c <convert_float_to_string>
    8b6e:	1e 86       	std	Y+14, r1	; 0x0e
    8b70:	14 c0       	rjmp	.+40     	; 0x8b9a <handle_received_USB_cmd+0x8b6>
    8b72:	89 81       	ldd	r24, Y+1	; 0x01
    8b74:	91 e0       	ldi	r25, 0x01	; 1
    8b76:	98 0f       	add	r25, r24
    8b78:	99 83       	std	Y+1, r25	; 0x01
    8b7a:	88 2f       	mov	r24, r24
    8b7c:	90 e0       	ldi	r25, 0x00	; 0
    8b7e:	2e 85       	ldd	r18, Y+14	; 0x0e
    8b80:	22 2f       	mov	r18, r18
    8b82:	30 e0       	ldi	r19, 0x00	; 0
    8b84:	2f 5f       	subi	r18, 0xFF	; 255
    8b86:	3e 4d       	sbci	r19, 0xDE	; 222
    8b88:	f9 01       	movw	r30, r18
    8b8a:	20 81       	ld	r18, Z
    8b8c:	8b 5d       	subi	r24, 0xDB	; 219
    8b8e:	98 4d       	sbci	r25, 0xD8	; 216
    8b90:	fc 01       	movw	r30, r24
    8b92:	20 83       	st	Z, r18
    8b94:	8e 85       	ldd	r24, Y+14	; 0x0e
    8b96:	8f 5f       	subi	r24, 0xFF	; 255
    8b98:	8e 87       	std	Y+14, r24	; 0x0e
    8b9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    8b9c:	88 30       	cpi	r24, 0x08	; 8
    8b9e:	48 f3       	brcs	.-46     	; 0x8b72 <handle_received_USB_cmd+0x88e>
    8ba0:	89 81       	ldd	r24, Y+1	; 0x01
    8ba2:	91 e0       	ldi	r25, 0x01	; 1
    8ba4:	98 0f       	add	r25, r24
    8ba6:	99 83       	std	Y+1, r25	; 0x01
    8ba8:	88 2f       	mov	r24, r24
    8baa:	90 e0       	ldi	r25, 0x00	; 0
    8bac:	8b 5d       	subi	r24, 0xDB	; 219
    8bae:	98 4d       	sbci	r25, 0xD8	; 216
    8bb0:	20 e2       	ldi	r18, 0x20	; 32
    8bb2:	fc 01       	movw	r30, r24
    8bb4:	20 83       	st	Z, r18
    8bb6:	1f 86       	std	Y+15, r1	; 0x0f
    8bb8:	23 c0       	rjmp	.+70     	; 0x8c00 <handle_received_USB_cmd+0x91c>
    8bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    8bbc:	88 2f       	mov	r24, r24
    8bbe:	90 e0       	ldi	r25, 0x00	; 0
    8bc0:	9e 01       	movw	r18, r28
    8bc2:	28 5a       	subi	r18, 0xA8	; 168
    8bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    8bc6:	82 0f       	add	r24, r18
    8bc8:	93 1f       	adc	r25, r19
    8bca:	fc 01       	movw	r30, r24
    8bcc:	80 81       	ld	r24, Z
    8bce:	88 23       	and	r24, r24
    8bd0:	a1 f0       	breq	.+40     	; 0x8bfa <handle_received_USB_cmd+0x916>
    8bd2:	89 81       	ldd	r24, Y+1	; 0x01
    8bd4:	91 e0       	ldi	r25, 0x01	; 1
    8bd6:	98 0f       	add	r25, r24
    8bd8:	99 83       	std	Y+1, r25	; 0x01
    8bda:	88 2f       	mov	r24, r24
    8bdc:	90 e0       	ldi	r25, 0x00	; 0
    8bde:	2f 85       	ldd	r18, Y+15	; 0x0f
    8be0:	22 2f       	mov	r18, r18
    8be2:	30 e0       	ldi	r19, 0x00	; 0
    8be4:	ae 01       	movw	r20, r28
    8be6:	48 5a       	subi	r20, 0xA8	; 168
    8be8:	5f 4f       	sbci	r21, 0xFF	; 255
    8bea:	24 0f       	add	r18, r20
    8bec:	35 1f       	adc	r19, r21
    8bee:	f9 01       	movw	r30, r18
    8bf0:	20 81       	ld	r18, Z
    8bf2:	8b 5d       	subi	r24, 0xDB	; 219
    8bf4:	98 4d       	sbci	r25, 0xD8	; 216
    8bf6:	fc 01       	movw	r30, r24
    8bf8:	20 83       	st	Z, r18
    8bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    8bfc:	8f 5f       	subi	r24, 0xFF	; 255
    8bfe:	8f 87       	std	Y+15, r24	; 0x0f
    8c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    8c02:	08 2f       	mov	r16, r24
    8c04:	10 e0       	ldi	r17, 0x00	; 0
    8c06:	ce 01       	movw	r24, r28
    8c08:	88 5a       	subi	r24, 0xA8	; 168
    8c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c0c:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    8c10:	08 17       	cp	r16, r24
    8c12:	19 07       	cpc	r17, r25
    8c14:	90 f2       	brcs	.-92     	; 0x8bba <handle_received_USB_cmd+0x8d6>
    8c16:	89 81       	ldd	r24, Y+1	; 0x01
    8c18:	91 e0       	ldi	r25, 0x01	; 1
    8c1a:	98 0f       	add	r25, r24
    8c1c:	99 83       	std	Y+1, r25	; 0x01
    8c1e:	88 2f       	mov	r24, r24
    8c20:	90 e0       	ldi	r25, 0x00	; 0
    8c22:	8b 5d       	subi	r24, 0xDB	; 219
    8c24:	98 4d       	sbci	r25, 0xD8	; 216
    8c26:	20 e2       	ldi	r18, 0x20	; 32
    8c28:	fc 01       	movw	r30, r24
    8c2a:	20 83       	st	Z, r18
    8c2c:	18 8a       	std	Y+16, r1	; 0x10
    8c2e:	23 c0       	rjmp	.+70     	; 0x8c76 <handle_received_USB_cmd+0x992>
    8c30:	88 89       	ldd	r24, Y+16	; 0x10
    8c32:	88 2f       	mov	r24, r24
    8c34:	90 e0       	ldi	r25, 0x00	; 0
    8c36:	9e 01       	movw	r18, r28
    8c38:	20 5a       	subi	r18, 0xA0	; 160
    8c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c3c:	82 0f       	add	r24, r18
    8c3e:	93 1f       	adc	r25, r19
    8c40:	fc 01       	movw	r30, r24
    8c42:	80 81       	ld	r24, Z
    8c44:	88 23       	and	r24, r24
    8c46:	a1 f0       	breq	.+40     	; 0x8c70 <handle_received_USB_cmd+0x98c>
    8c48:	89 81       	ldd	r24, Y+1	; 0x01
    8c4a:	91 e0       	ldi	r25, 0x01	; 1
    8c4c:	98 0f       	add	r25, r24
    8c4e:	99 83       	std	Y+1, r25	; 0x01
    8c50:	88 2f       	mov	r24, r24
    8c52:	90 e0       	ldi	r25, 0x00	; 0
    8c54:	28 89       	ldd	r18, Y+16	; 0x10
    8c56:	22 2f       	mov	r18, r18
    8c58:	30 e0       	ldi	r19, 0x00	; 0
    8c5a:	ae 01       	movw	r20, r28
    8c5c:	40 5a       	subi	r20, 0xA0	; 160
    8c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    8c60:	24 0f       	add	r18, r20
    8c62:	35 1f       	adc	r19, r21
    8c64:	f9 01       	movw	r30, r18
    8c66:	20 81       	ld	r18, Z
    8c68:	8b 5d       	subi	r24, 0xDB	; 219
    8c6a:	98 4d       	sbci	r25, 0xD8	; 216
    8c6c:	fc 01       	movw	r30, r24
    8c6e:	20 83       	st	Z, r18
    8c70:	88 89       	ldd	r24, Y+16	; 0x10
    8c72:	8f 5f       	subi	r24, 0xFF	; 255
    8c74:	88 8b       	std	Y+16, r24	; 0x10
    8c76:	88 89       	ldd	r24, Y+16	; 0x10
    8c78:	08 2f       	mov	r16, r24
    8c7a:	10 e0       	ldi	r17, 0x00	; 0
    8c7c:	ce 01       	movw	r24, r28
    8c7e:	80 5a       	subi	r24, 0xA0	; 160
    8c80:	9f 4f       	sbci	r25, 0xFF	; 255
    8c82:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    8c86:	08 17       	cp	r16, r24
    8c88:	19 07       	cpc	r17, r25
    8c8a:	90 f2       	brcs	.-92     	; 0x8c30 <handle_received_USB_cmd+0x94c>
    8c8c:	89 81       	ldd	r24, Y+1	; 0x01
    8c8e:	91 e0       	ldi	r25, 0x01	; 1
    8c90:	98 0f       	add	r25, r24
    8c92:	99 83       	std	Y+1, r25	; 0x01
    8c94:	88 2f       	mov	r24, r24
    8c96:	90 e0       	ldi	r25, 0x00	; 0
    8c98:	8b 5d       	subi	r24, 0xDB	; 219
    8c9a:	98 4d       	sbci	r25, 0xD8	; 216
    8c9c:	20 e2       	ldi	r18, 0x20	; 32
    8c9e:	fc 01       	movw	r30, r24
    8ca0:	20 83       	st	Z, r18
    8ca2:	19 8a       	std	Y+17, r1	; 0x11
    8ca4:	23 c0       	rjmp	.+70     	; 0x8cec <handle_received_USB_cmd+0xa08>
    8ca6:	89 89       	ldd	r24, Y+17	; 0x11
    8ca8:	88 2f       	mov	r24, r24
    8caa:	90 e0       	ldi	r25, 0x00	; 0
    8cac:	9e 01       	movw	r18, r28
    8cae:	28 59       	subi	r18, 0x98	; 152
    8cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    8cb2:	82 0f       	add	r24, r18
    8cb4:	93 1f       	adc	r25, r19
    8cb6:	fc 01       	movw	r30, r24
    8cb8:	80 81       	ld	r24, Z
    8cba:	88 23       	and	r24, r24
    8cbc:	a1 f0       	breq	.+40     	; 0x8ce6 <handle_received_USB_cmd+0xa02>
    8cbe:	89 81       	ldd	r24, Y+1	; 0x01
    8cc0:	91 e0       	ldi	r25, 0x01	; 1
    8cc2:	98 0f       	add	r25, r24
    8cc4:	99 83       	std	Y+1, r25	; 0x01
    8cc6:	88 2f       	mov	r24, r24
    8cc8:	90 e0       	ldi	r25, 0x00	; 0
    8cca:	29 89       	ldd	r18, Y+17	; 0x11
    8ccc:	22 2f       	mov	r18, r18
    8cce:	30 e0       	ldi	r19, 0x00	; 0
    8cd0:	ae 01       	movw	r20, r28
    8cd2:	48 59       	subi	r20, 0x98	; 152
    8cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd6:	24 0f       	add	r18, r20
    8cd8:	35 1f       	adc	r19, r21
    8cda:	f9 01       	movw	r30, r18
    8cdc:	20 81       	ld	r18, Z
    8cde:	8b 5d       	subi	r24, 0xDB	; 219
    8ce0:	98 4d       	sbci	r25, 0xD8	; 216
    8ce2:	fc 01       	movw	r30, r24
    8ce4:	20 83       	st	Z, r18
    8ce6:	89 89       	ldd	r24, Y+17	; 0x11
    8ce8:	8f 5f       	subi	r24, 0xFF	; 255
    8cea:	89 8b       	std	Y+17, r24	; 0x11
    8cec:	89 89       	ldd	r24, Y+17	; 0x11
    8cee:	08 2f       	mov	r16, r24
    8cf0:	10 e0       	ldi	r17, 0x00	; 0
    8cf2:	ce 01       	movw	r24, r28
    8cf4:	88 59       	subi	r24, 0x98	; 152
    8cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    8cf8:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    8cfc:	08 17       	cp	r16, r24
    8cfe:	19 07       	cpc	r17, r25
    8d00:	90 f2       	brcs	.-92     	; 0x8ca6 <handle_received_USB_cmd+0x9c2>
    8d02:	89 81       	ldd	r24, Y+1	; 0x01
    8d04:	88 2f       	mov	r24, r24
    8d06:	90 e0       	ldi	r25, 0x00	; 0
    8d08:	8b 5d       	subi	r24, 0xDB	; 219
    8d0a:	98 4d       	sbci	r25, 0xD8	; 216
    8d0c:	2d e0       	ldi	r18, 0x0D	; 13
    8d0e:	fc 01       	movw	r30, r24
    8d10:	20 83       	st	Z, r18
    8d12:	86 e0       	ldi	r24, 0x06	; 6
    8d14:	90 e0       	ldi	r25, 0x00	; 0
    8d16:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    8d1a:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    8d1e:	81 e0       	ldi	r24, 0x01	; 1
    8d20:	8a 83       	std	Y+2, r24	; 0x02
    8d22:	0c 94 ac 54 	jmp	0xa958	; 0xa958 <handle_received_USB_cmd+0x2674>
    8d26:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    8d2a:	81 30       	cpi	r24, 0x01	; 1
    8d2c:	11 f0       	breq	.+4      	; 0x8d32 <handle_received_USB_cmd+0xa4e>
    8d2e:	0c 94 ac 54 	jmp	0xa958	; 0xa958 <handle_received_USB_cmd+0x2674>
    8d32:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    8d36:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    8d3a:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    8d3e:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    8d42:	1c e5       	ldi	r17, 0x5C	; 92
    8d44:	e1 2e       	mov	r14, r17
    8d46:	ff 24       	eor	r15, r15
    8d48:	fa 94       	dec	r15
    8d4a:	09 e7       	ldi	r16, 0x79	; 121
    8d4c:	14 e4       	ldi	r17, 0x44	; 68
    8d4e:	20 e0       	ldi	r18, 0x00	; 0
    8d50:	30 e0       	ldi	r19, 0x00	; 0
    8d52:	a9 01       	movw	r20, r18
    8d54:	bc 01       	movw	r22, r24
    8d56:	cd 01       	movw	r24, r26
    8d58:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    8d5c:	88 23       	and	r24, r24
    8d5e:	11 f4       	brne	.+4      	; 0x8d64 <handle_received_USB_cmd+0xa80>
    8d60:	0c 94 ac 54 	jmp	0xa958	; 0xa958 <handle_received_USB_cmd+0x2674>
    8d64:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    8d68:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    8d6c:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    8d70:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    8d74:	1c e5       	ldi	r17, 0x5C	; 92
    8d76:	e1 2e       	mov	r14, r17
    8d78:	ff 24       	eor	r15, r15
    8d7a:	fa 94       	dec	r15
    8d7c:	09 e7       	ldi	r16, 0x79	; 121
    8d7e:	14 e4       	ldi	r17, 0x44	; 68
    8d80:	20 e0       	ldi	r18, 0x00	; 0
    8d82:	30 e0       	ldi	r19, 0x00	; 0
    8d84:	a9 01       	movw	r20, r18
    8d86:	bc 01       	movw	r22, r24
    8d88:	cd 01       	movw	r24, r26
    8d8a:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    8d8e:	88 23       	and	r24, r24
    8d90:	11 f4       	brne	.+4      	; 0x8d96 <handle_received_USB_cmd+0xab2>
    8d92:	0c 94 ac 54 	jmp	0xa958	; 0xa958 <handle_received_USB_cmd+0x2674>
    8d96:	80 91 1d 27 	lds	r24, 0x271D	; 0x80271d <receivedUSBMsg+0xe6>
    8d9a:	90 91 1e 27 	lds	r25, 0x271E	; 0x80271e <receivedUSBMsg+0xe7>
    8d9e:	a0 91 1f 27 	lds	r26, 0x271F	; 0x80271f <receivedUSBMsg+0xe8>
    8da2:	b0 91 20 27 	lds	r27, 0x2720	; 0x802720 <receivedUSBMsg+0xe9>
    8da6:	1c e5       	ldi	r17, 0x5C	; 92
    8da8:	e1 2e       	mov	r14, r17
    8daa:	ff 24       	eor	r15, r15
    8dac:	fa 94       	dec	r15
    8dae:	09 e7       	ldi	r16, 0x79	; 121
    8db0:	14 e4       	ldi	r17, 0x44	; 68
    8db2:	20 e0       	ldi	r18, 0x00	; 0
    8db4:	30 e0       	ldi	r19, 0x00	; 0
    8db6:	a9 01       	movw	r20, r18
    8db8:	bc 01       	movw	r22, r24
    8dba:	cd 01       	movw	r24, r26
    8dbc:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    8dc0:	88 23       	and	r24, r24
    8dc2:	11 f4       	brne	.+4      	; 0x8dc8 <handle_received_USB_cmd+0xae4>
    8dc4:	0c 94 ac 54 	jmp	0xa958	; 0xa958 <handle_received_USB_cmd+0x2674>
    8dc8:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    8dcc:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    8dd0:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    8dd4:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    8dd8:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <heaterPID+0x1c>
    8ddc:	90 93 1a 28 	sts	0x281A, r25	; 0x80281a <heaterPID+0x1d>
    8de0:	a0 93 1b 28 	sts	0x281B, r26	; 0x80281b <heaterPID+0x1e>
    8de4:	b0 93 1c 28 	sts	0x281C, r27	; 0x80281c <heaterPID+0x1f>
    8de8:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    8dec:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    8df0:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    8df4:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    8df8:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <heaterPID+0x20>
    8dfc:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <heaterPID+0x21>
    8e00:	a0 93 1f 28 	sts	0x281F, r26	; 0x80281f <heaterPID+0x22>
    8e04:	b0 93 20 28 	sts	0x2820, r27	; 0x802820 <heaterPID+0x23>
    8e08:	80 91 1d 27 	lds	r24, 0x271D	; 0x80271d <receivedUSBMsg+0xe6>
    8e0c:	90 91 1e 27 	lds	r25, 0x271E	; 0x80271e <receivedUSBMsg+0xe7>
    8e10:	a0 91 1f 27 	lds	r26, 0x271F	; 0x80271f <receivedUSBMsg+0xe8>
    8e14:	b0 91 20 27 	lds	r27, 0x2720	; 0x802720 <receivedUSBMsg+0xe9>
    8e18:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <heaterPID+0x24>
    8e1c:	90 93 22 28 	sts	0x2822, r25	; 0x802822 <heaterPID+0x25>
    8e20:	a0 93 23 28 	sts	0x2823, r26	; 0x802823 <heaterPID+0x26>
    8e24:	b0 93 24 28 	sts	0x2824, r27	; 0x802824 <heaterPID+0x27>
    8e28:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <heaterPID+0x20>
    8e2c:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <heaterPID+0x21>
    8e30:	a0 91 1f 28 	lds	r26, 0x281F	; 0x80281f <heaterPID+0x22>
    8e34:	b0 91 20 28 	lds	r27, 0x2820	; 0x802820 <heaterPID+0x23>
    8e38:	9c 01       	movw	r18, r24
    8e3a:	ad 01       	movw	r20, r26
    8e3c:	60 e0       	ldi	r22, 0x00	; 0
    8e3e:	70 e0       	ldi	r23, 0x00	; 0
    8e40:	88 ec       	ldi	r24, 0xC8	; 200
    8e42:	92 e4       	ldi	r25, 0x42	; 66
    8e44:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    8e48:	dc 01       	movw	r26, r24
    8e4a:	cb 01       	movw	r24, r22
    8e4c:	20 e0       	ldi	r18, 0x00	; 0
    8e4e:	30 e0       	ldi	r19, 0x00	; 0
    8e50:	40 e2       	ldi	r20, 0x20	; 32
    8e52:	51 e4       	ldi	r21, 0x41	; 65
    8e54:	bc 01       	movw	r22, r24
    8e56:	cd 01       	movw	r24, r26
    8e58:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    8e5c:	dc 01       	movw	r26, r24
    8e5e:	cb 01       	movw	r24, r22
    8e60:	bc 01       	movw	r22, r24
    8e62:	cd 01       	movw	r24, r26
    8e64:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <__fixsfsi>
    8e68:	dc 01       	movw	r26, r24
    8e6a:	cb 01       	movw	r24, r22
    8e6c:	80 93 11 28 	sts	0x2811, r24	; 0x802811 <heaterPID+0x14>
    8e70:	90 93 12 28 	sts	0x2812, r25	; 0x802812 <heaterPID+0x15>
    8e74:	a0 93 13 28 	sts	0x2813, r26	; 0x802813 <heaterPID+0x16>
    8e78:	b0 93 14 28 	sts	0x2814, r27	; 0x802814 <heaterPID+0x17>
    8e7c:	10 92 15 28 	sts	0x2815, r1	; 0x802815 <heaterPID+0x18>
    8e80:	10 92 16 28 	sts	0x2816, r1	; 0x802816 <heaterPID+0x19>
    8e84:	10 92 17 28 	sts	0x2817, r1	; 0x802817 <heaterPID+0x1a>
    8e88:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <heaterPID+0x1b>
    8e8c:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <heaterPID+0x1c>
    8e90:	90 91 1a 28 	lds	r25, 0x281A	; 0x80281a <heaterPID+0x1d>
    8e94:	a0 91 1b 28 	lds	r26, 0x281B	; 0x80281b <heaterPID+0x1e>
    8e98:	b0 91 1c 28 	lds	r27, 0x281C	; 0x80281c <heaterPID+0x1f>
    8e9c:	20 e0       	ldi	r18, 0x00	; 0
    8e9e:	30 e0       	ldi	r19, 0x00	; 0
    8ea0:	48 ec       	ldi	r20, 0xC8	; 200
    8ea2:	52 e4       	ldi	r21, 0x42	; 66
    8ea4:	bc 01       	movw	r22, r24
    8ea6:	cd 01       	movw	r24, r26
    8ea8:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    8eac:	dc 01       	movw	r26, r24
    8eae:	cb 01       	movw	r24, r22
    8eb0:	bc 01       	movw	r22, r24
    8eb2:	cd 01       	movw	r24, r26
    8eb4:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    8eb8:	dc 01       	movw	r26, r24
    8eba:	cb 01       	movw	r24, r22
    8ebc:	9e 01       	movw	r18, r28
    8ebe:	20 59       	subi	r18, 0x90	; 144
    8ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ec2:	f9 01       	movw	r30, r18
    8ec4:	80 83       	st	Z, r24
    8ec6:	91 83       	std	Z+1, r25	; 0x01
    8ec8:	a2 83       	std	Z+2, r26	; 0x02
    8eca:	b3 83       	std	Z+3, r27	; 0x03
    8ecc:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <heaterPID+0x20>
    8ed0:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <heaterPID+0x21>
    8ed4:	a0 91 1f 28 	lds	r26, 0x281F	; 0x80281f <heaterPID+0x22>
    8ed8:	b0 91 20 28 	lds	r27, 0x2820	; 0x802820 <heaterPID+0x23>
    8edc:	20 e0       	ldi	r18, 0x00	; 0
    8ede:	30 e0       	ldi	r19, 0x00	; 0
    8ee0:	48 ec       	ldi	r20, 0xC8	; 200
    8ee2:	52 e4       	ldi	r21, 0x42	; 66
    8ee4:	bc 01       	movw	r22, r24
    8ee6:	cd 01       	movw	r24, r26
    8ee8:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    8eec:	dc 01       	movw	r26, r24
    8eee:	cb 01       	movw	r24, r22
    8ef0:	bc 01       	movw	r22, r24
    8ef2:	cd 01       	movw	r24, r26
    8ef4:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    8ef8:	dc 01       	movw	r26, r24
    8efa:	cb 01       	movw	r24, r22
    8efc:	9e 01       	movw	r18, r28
    8efe:	2c 58       	subi	r18, 0x8C	; 140
    8f00:	3f 4f       	sbci	r19, 0xFF	; 255
    8f02:	f9 01       	movw	r30, r18
    8f04:	80 83       	st	Z, r24
    8f06:	91 83       	std	Z+1, r25	; 0x01
    8f08:	a2 83       	std	Z+2, r26	; 0x02
    8f0a:	b3 83       	std	Z+3, r27	; 0x03
    8f0c:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <heaterPID+0x24>
    8f10:	90 91 22 28 	lds	r25, 0x2822	; 0x802822 <heaterPID+0x25>
    8f14:	a0 91 23 28 	lds	r26, 0x2823	; 0x802823 <heaterPID+0x26>
    8f18:	b0 91 24 28 	lds	r27, 0x2824	; 0x802824 <heaterPID+0x27>
    8f1c:	20 e0       	ldi	r18, 0x00	; 0
    8f1e:	30 e0       	ldi	r19, 0x00	; 0
    8f20:	48 ec       	ldi	r20, 0xC8	; 200
    8f22:	52 e4       	ldi	r21, 0x42	; 66
    8f24:	bc 01       	movw	r22, r24
    8f26:	cd 01       	movw	r24, r26
    8f28:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    8f2c:	dc 01       	movw	r26, r24
    8f2e:	cb 01       	movw	r24, r22
    8f30:	bc 01       	movw	r22, r24
    8f32:	cd 01       	movw	r24, r26
    8f34:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    8f38:	dc 01       	movw	r26, r24
    8f3a:	cb 01       	movw	r24, r22
    8f3c:	9e 01       	movw	r18, r28
    8f3e:	28 58       	subi	r18, 0x88	; 136
    8f40:	3f 4f       	sbci	r19, 0xFF	; 255
    8f42:	f9 01       	movw	r30, r18
    8f44:	80 83       	st	Z, r24
    8f46:	91 83       	std	Z+1, r25	; 0x01
    8f48:	a2 83       	std	Z+2, r26	; 0x02
    8f4a:	b3 83       	std	Z+3, r27	; 0x03
    8f4c:	ce 01       	movw	r24, r28
    8f4e:	80 59       	subi	r24, 0x90	; 144
    8f50:	9f 4f       	sbci	r25, 0xFF	; 255
    8f52:	04 e0       	ldi	r16, 0x04	; 4
    8f54:	10 e0       	ldi	r17, 0x00	; 0
    8f56:	20 e0       	ldi	r18, 0x00	; 0
    8f58:	30 e0       	ldi	r19, 0x00	; 0
    8f5a:	ac 01       	movw	r20, r24
    8f5c:	66 e9       	ldi	r22, 0x96	; 150
    8f5e:	70 e0       	ldi	r23, 0x00	; 0
    8f60:	80 e0       	ldi	r24, 0x00	; 0
    8f62:	90 e0       	ldi	r25, 0x00	; 0
    8f64:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <write_PID_to_NVM>
    8f68:	ce 01       	movw	r24, r28
    8f6a:	8c 58       	subi	r24, 0x8C	; 140
    8f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    8f6e:	04 e0       	ldi	r16, 0x04	; 4
    8f70:	10 e0       	ldi	r17, 0x00	; 0
    8f72:	20 e0       	ldi	r18, 0x00	; 0
    8f74:	30 e0       	ldi	r19, 0x00	; 0
    8f76:	ac 01       	movw	r20, r24
    8f78:	60 ea       	ldi	r22, 0xA0	; 160
    8f7a:	70 e0       	ldi	r23, 0x00	; 0
    8f7c:	80 e0       	ldi	r24, 0x00	; 0
    8f7e:	90 e0       	ldi	r25, 0x00	; 0
    8f80:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <write_PID_to_NVM>
    8f84:	ce 01       	movw	r24, r28
    8f86:	88 58       	subi	r24, 0x88	; 136
    8f88:	9f 4f       	sbci	r25, 0xFF	; 255
    8f8a:	04 e0       	ldi	r16, 0x04	; 4
    8f8c:	10 e0       	ldi	r17, 0x00	; 0
    8f8e:	20 e0       	ldi	r18, 0x00	; 0
    8f90:	30 e0       	ldi	r19, 0x00	; 0
    8f92:	ac 01       	movw	r20, r24
    8f94:	6a ea       	ldi	r22, 0xAA	; 170
    8f96:	70 e0       	ldi	r23, 0x00	; 0
    8f98:	80 e0       	ldi	r24, 0x00	; 0
    8f9a:	90 e0       	ldi	r25, 0x00	; 0
    8f9c:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <write_PID_to_NVM>
    8fa0:	1a 8a       	std	Y+18, r1	; 0x12
    8fa2:	14 c0       	rjmp	.+40     	; 0x8fcc <handle_received_USB_cmd+0xce8>
    8fa4:	89 81       	ldd	r24, Y+1	; 0x01
    8fa6:	91 e0       	ldi	r25, 0x01	; 1
    8fa8:	98 0f       	add	r25, r24
    8faa:	99 83       	std	Y+1, r25	; 0x01
    8fac:	88 2f       	mov	r24, r24
    8fae:	90 e0       	ldi	r25, 0x00	; 0
    8fb0:	2a 89       	ldd	r18, Y+18	; 0x12
    8fb2:	22 2f       	mov	r18, r18
    8fb4:	30 e0       	ldi	r19, 0x00	; 0
    8fb6:	2f 52       	subi	r18, 0x2F	; 47
    8fb8:	3f 4d       	sbci	r19, 0xDF	; 223
    8fba:	f9 01       	movw	r30, r18
    8fbc:	20 81       	ld	r18, Z
    8fbe:	8b 5d       	subi	r24, 0xDB	; 219
    8fc0:	98 4d       	sbci	r25, 0xD8	; 216
    8fc2:	fc 01       	movw	r30, r24
    8fc4:	20 83       	st	Z, r18
    8fc6:	8a 89       	ldd	r24, Y+18	; 0x12
    8fc8:	8f 5f       	subi	r24, 0xFF	; 255
    8fca:	8a 8b       	std	Y+18, r24	; 0x12
    8fcc:	8a 89       	ldd	r24, Y+18	; 0x12
    8fce:	82 30       	cpi	r24, 0x02	; 2
    8fd0:	48 f3       	brcs	.-46     	; 0x8fa4 <handle_received_USB_cmd+0xcc0>
    8fd2:	89 81       	ldd	r24, Y+1	; 0x01
    8fd4:	91 e0       	ldi	r25, 0x01	; 1
    8fd6:	98 0f       	add	r25, r24
    8fd8:	99 83       	std	Y+1, r25	; 0x01
    8fda:	88 2f       	mov	r24, r24
    8fdc:	90 e0       	ldi	r25, 0x00	; 0
    8fde:	8b 5d       	subi	r24, 0xDB	; 219
    8fe0:	98 4d       	sbci	r25, 0xD8	; 216
    8fe2:	2d e0       	ldi	r18, 0x0D	; 13
    8fe4:	fc 01       	movw	r30, r24
    8fe6:	20 83       	st	Z, r18
    8fe8:	86 e0       	ldi	r24, 0x06	; 6
    8fea:	90 e0       	ldi	r25, 0x00	; 0
    8fec:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    8ff0:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    8ff4:	81 e0       	ldi	r24, 0x01	; 1
    8ff6:	8a 83       	std	Y+2, r24	; 0x02
    8ff8:	0c 94 ac 54 	jmp	0xa958	; 0xa958 <handle_received_USB_cmd+0x2674>
    8ffc:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9000:	88 23       	and	r24, r24
    9002:	09 f0       	breq	.+2      	; 0x9006 <handle_received_USB_cmd+0xd22>
    9004:	99 c0       	rjmp	.+306    	; 0x9138 <handle_received_USB_cmd+0xe54>
    9006:	ce 01       	movw	r24, r28
    9008:	84 58       	subi	r24, 0x84	; 132
    900a:	9f 4f       	sbci	r25, 0xFF	; 255
    900c:	28 e0       	ldi	r18, 0x08	; 8
    900e:	fc 01       	movw	r30, r24
    9010:	e2 2e       	mov	r14, r18
    9012:	11 92       	st	Z+, r1
    9014:	ea 94       	dec	r14
    9016:	e9 f7       	brne	.-6      	; 0x9012 <handle_received_USB_cmd+0xd2e>
    9018:	80 91 39 26 	lds	r24, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    901c:	2c d9       	rcall	.-3496   	; 0x8276 <convert_received_motor_to_index>
    901e:	8d ab       	std	Y+53, r24	; 0x35
    9020:	8d a9       	ldd	r24, Y+53	; 0x35
    9022:	50 d9       	rcall	.-3424   	; 0x82c4 <check_motor_index>
    9024:	88 23       	and	r24, r24
    9026:	11 f4       	brne	.+4      	; 0x902c <handle_received_USB_cmd+0xd48>
    9028:	0c 94 ae 54 	jmp	0xa95c	; 0xa95c <handle_received_USB_cmd+0x2678>
    902c:	8d a9       	ldd	r24, Y+53	; 0x35
    902e:	28 2f       	mov	r18, r24
    9030:	30 e0       	ldi	r19, 0x00	; 0
    9032:	47 e4       	ldi	r20, 0x47	; 71
    9034:	42 9f       	mul	r20, r18
    9036:	c0 01       	movw	r24, r0
    9038:	43 9f       	mul	r20, r19
    903a:	90 0d       	add	r25, r0
    903c:	11 24       	eor	r1, r1
    903e:	83 5d       	subi	r24, 0xD3	; 211
    9040:	97 4d       	sbci	r25, 0xD7	; 215
    9042:	0e 94 d4 8d 	call	0x11ba8	; 0x11ba8 <get_motor_hold_current_percent>
    9046:	88 2f       	mov	r24, r24
    9048:	90 e0       	ldi	r25, 0x00	; 0
    904a:	a0 e0       	ldi	r26, 0x00	; 0
    904c:	b0 e0       	ldi	r27, 0x00	; 0
    904e:	9e 01       	movw	r18, r28
    9050:	24 58       	subi	r18, 0x84	; 132
    9052:	3f 4f       	sbci	r19, 0xFF	; 255
    9054:	a9 01       	movw	r20, r18
    9056:	bc 01       	movw	r22, r24
    9058:	cd 01       	movw	r24, r26
    905a:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <convert_int_to_string>
    905e:	1b 8a       	std	Y+19, r1	; 0x13
    9060:	24 c0       	rjmp	.+72     	; 0x90aa <handle_received_USB_cmd+0xdc6>
    9062:	8b 89       	ldd	r24, Y+19	; 0x13
    9064:	84 30       	cpi	r24, 0x04	; 4
    9066:	91 f0       	breq	.+36     	; 0x908c <handle_received_USB_cmd+0xda8>
    9068:	89 81       	ldd	r24, Y+1	; 0x01
    906a:	91 e0       	ldi	r25, 0x01	; 1
    906c:	98 0f       	add	r25, r24
    906e:	99 83       	std	Y+1, r25	; 0x01
    9070:	88 2f       	mov	r24, r24
    9072:	90 e0       	ldi	r25, 0x00	; 0
    9074:	2b 89       	ldd	r18, Y+19	; 0x13
    9076:	22 2f       	mov	r18, r18
    9078:	30 e0       	ldi	r19, 0x00	; 0
    907a:	26 5f       	subi	r18, 0xF6	; 246
    907c:	3e 4d       	sbci	r19, 0xDE	; 222
    907e:	f9 01       	movw	r30, r18
    9080:	20 81       	ld	r18, Z
    9082:	8b 5d       	subi	r24, 0xDB	; 219
    9084:	98 4d       	sbci	r25, 0xD8	; 216
    9086:	fc 01       	movw	r30, r24
    9088:	20 83       	st	Z, r18
    908a:	0c c0       	rjmp	.+24     	; 0x90a4 <handle_received_USB_cmd+0xdc0>
    908c:	89 81       	ldd	r24, Y+1	; 0x01
    908e:	91 e0       	ldi	r25, 0x01	; 1
    9090:	98 0f       	add	r25, r24
    9092:	99 83       	std	Y+1, r25	; 0x01
    9094:	88 2f       	mov	r24, r24
    9096:	90 e0       	ldi	r25, 0x00	; 0
    9098:	20 91 39 26 	lds	r18, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    909c:	8b 5d       	subi	r24, 0xDB	; 219
    909e:	98 4d       	sbci	r25, 0xD8	; 216
    90a0:	fc 01       	movw	r30, r24
    90a2:	20 83       	st	Z, r18
    90a4:	8b 89       	ldd	r24, Y+19	; 0x13
    90a6:	8f 5f       	subi	r24, 0xFF	; 255
    90a8:	8b 8b       	std	Y+19, r24	; 0x13
    90aa:	8b 89       	ldd	r24, Y+19	; 0x13
    90ac:	87 30       	cpi	r24, 0x07	; 7
    90ae:	c8 f2       	brcs	.-78     	; 0x9062 <handle_received_USB_cmd+0xd7e>
    90b0:	89 81       	ldd	r24, Y+1	; 0x01
    90b2:	91 e0       	ldi	r25, 0x01	; 1
    90b4:	98 0f       	add	r25, r24
    90b6:	99 83       	std	Y+1, r25	; 0x01
    90b8:	88 2f       	mov	r24, r24
    90ba:	90 e0       	ldi	r25, 0x00	; 0
    90bc:	8b 5d       	subi	r24, 0xDB	; 219
    90be:	98 4d       	sbci	r25, 0xD8	; 216
    90c0:	20 e2       	ldi	r18, 0x20	; 32
    90c2:	fc 01       	movw	r30, r24
    90c4:	20 83       	st	Z, r18
    90c6:	1c 8a       	std	Y+20, r1	; 0x14
    90c8:	17 c0       	rjmp	.+46     	; 0x90f8 <handle_received_USB_cmd+0xe14>
    90ca:	89 81       	ldd	r24, Y+1	; 0x01
    90cc:	91 e0       	ldi	r25, 0x01	; 1
    90ce:	98 0f       	add	r25, r24
    90d0:	99 83       	std	Y+1, r25	; 0x01
    90d2:	88 2f       	mov	r24, r24
    90d4:	90 e0       	ldi	r25, 0x00	; 0
    90d6:	2c 89       	ldd	r18, Y+20	; 0x14
    90d8:	22 2f       	mov	r18, r18
    90da:	30 e0       	ldi	r19, 0x00	; 0
    90dc:	ae 01       	movw	r20, r28
    90de:	44 58       	subi	r20, 0x84	; 132
    90e0:	5f 4f       	sbci	r21, 0xFF	; 255
    90e2:	24 0f       	add	r18, r20
    90e4:	35 1f       	adc	r19, r21
    90e6:	f9 01       	movw	r30, r18
    90e8:	20 81       	ld	r18, Z
    90ea:	8b 5d       	subi	r24, 0xDB	; 219
    90ec:	98 4d       	sbci	r25, 0xD8	; 216
    90ee:	fc 01       	movw	r30, r24
    90f0:	20 83       	st	Z, r18
    90f2:	8c 89       	ldd	r24, Y+20	; 0x14
    90f4:	8f 5f       	subi	r24, 0xFF	; 255
    90f6:	8c 8b       	std	Y+20, r24	; 0x14
    90f8:	8c 89       	ldd	r24, Y+20	; 0x14
    90fa:	08 2f       	mov	r16, r24
    90fc:	10 e0       	ldi	r17, 0x00	; 0
    90fe:	ce 01       	movw	r24, r28
    9100:	84 58       	subi	r24, 0x84	; 132
    9102:	9f 4f       	sbci	r25, 0xFF	; 255
    9104:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    9108:	08 17       	cp	r16, r24
    910a:	19 07       	cpc	r17, r25
    910c:	f0 f2       	brcs	.-68     	; 0x90ca <handle_received_USB_cmd+0xde6>
    910e:	89 81       	ldd	r24, Y+1	; 0x01
    9110:	91 e0       	ldi	r25, 0x01	; 1
    9112:	98 0f       	add	r25, r24
    9114:	99 83       	std	Y+1, r25	; 0x01
    9116:	88 2f       	mov	r24, r24
    9118:	90 e0       	ldi	r25, 0x00	; 0
    911a:	8b 5d       	subi	r24, 0xDB	; 219
    911c:	98 4d       	sbci	r25, 0xD8	; 216
    911e:	2d e0       	ldi	r18, 0x0D	; 13
    9120:	fc 01       	movw	r30, r24
    9122:	20 83       	st	Z, r18
    9124:	87 e0       	ldi	r24, 0x07	; 7
    9126:	90 e0       	ldi	r25, 0x00	; 0
    9128:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    912c:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    9130:	81 e0       	ldi	r24, 0x01	; 1
    9132:	8a 83       	std	Y+2, r24	; 0x02
    9134:	0c 94 ae 54 	jmp	0xa95c	; 0xa95c <handle_received_USB_cmd+0x2678>
    9138:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    913c:	81 30       	cpi	r24, 0x01	; 1
    913e:	11 f0       	breq	.+4      	; 0x9144 <handle_received_USB_cmd+0xe60>
    9140:	0c 94 ae 54 	jmp	0xa95c	; 0xa95c <handle_received_USB_cmd+0x2678>
    9144:	80 91 39 26 	lds	r24, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    9148:	96 d8       	rcall	.-3796   	; 0x8276 <convert_received_motor_to_index>
    914a:	8d ab       	std	Y+53, r24	; 0x35
    914c:	8d a9       	ldd	r24, Y+53	; 0x35
    914e:	ba d8       	rcall	.-3724   	; 0x82c4 <check_motor_index>
    9150:	88 23       	and	r24, r24
    9152:	11 f4       	brne	.+4      	; 0x9158 <handle_received_USB_cmd+0xe74>
    9154:	0c 94 ae 54 	jmp	0xa95c	; 0xa95c <handle_received_USB_cmd+0x2678>
    9158:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    915c:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9160:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9164:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9168:	bc 01       	movw	r22, r24
    916a:	cd 01       	movw	r24, r26
    916c:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    9170:	dc 01       	movw	r26, r24
    9172:	cb 01       	movw	r24, r22
    9174:	58 2f       	mov	r21, r24
    9176:	8d a9       	ldd	r24, Y+53	; 0x35
    9178:	28 2f       	mov	r18, r24
    917a:	30 e0       	ldi	r19, 0x00	; 0
    917c:	47 e4       	ldi	r20, 0x47	; 71
    917e:	42 9f       	mul	r20, r18
    9180:	c0 01       	movw	r24, r0
    9182:	43 9f       	mul	r20, r19
    9184:	90 0d       	add	r25, r0
    9186:	11 24       	eor	r1, r1
    9188:	83 5d       	subi	r24, 0xD3	; 211
    918a:	97 4d       	sbci	r25, 0xD7	; 215
    918c:	65 2f       	mov	r22, r21
    918e:	0e 94 17 8e 	call	0x11c2e	; 0x11c2e <set_motor_hold_current>
    9192:	88 23       	and	r24, r24
    9194:	11 f4       	brne	.+4      	; 0x919a <handle_received_USB_cmd+0xeb6>
    9196:	0c 94 ae 54 	jmp	0xa95c	; 0xa95c <handle_received_USB_cmd+0x2678>
    919a:	1d 8a       	std	Y+21, r1	; 0x15
    919c:	14 c0       	rjmp	.+40     	; 0x91c6 <handle_received_USB_cmd+0xee2>
    919e:	89 81       	ldd	r24, Y+1	; 0x01
    91a0:	91 e0       	ldi	r25, 0x01	; 1
    91a2:	98 0f       	add	r25, r24
    91a4:	99 83       	std	Y+1, r25	; 0x01
    91a6:	88 2f       	mov	r24, r24
    91a8:	90 e0       	ldi	r25, 0x00	; 0
    91aa:	2d 89       	ldd	r18, Y+21	; 0x15
    91ac:	22 2f       	mov	r18, r18
    91ae:	30 e0       	ldi	r19, 0x00	; 0
    91b0:	2f 52       	subi	r18, 0x2F	; 47
    91b2:	3f 4d       	sbci	r19, 0xDF	; 223
    91b4:	f9 01       	movw	r30, r18
    91b6:	20 81       	ld	r18, Z
    91b8:	8b 5d       	subi	r24, 0xDB	; 219
    91ba:	98 4d       	sbci	r25, 0xD8	; 216
    91bc:	fc 01       	movw	r30, r24
    91be:	20 83       	st	Z, r18
    91c0:	8d 89       	ldd	r24, Y+21	; 0x15
    91c2:	8f 5f       	subi	r24, 0xFF	; 255
    91c4:	8d 8b       	std	Y+21, r24	; 0x15
    91c6:	8d 89       	ldd	r24, Y+21	; 0x15
    91c8:	82 30       	cpi	r24, 0x02	; 2
    91ca:	48 f3       	brcs	.-46     	; 0x919e <handle_received_USB_cmd+0xeba>
    91cc:	89 81       	ldd	r24, Y+1	; 0x01
    91ce:	91 e0       	ldi	r25, 0x01	; 1
    91d0:	98 0f       	add	r25, r24
    91d2:	99 83       	std	Y+1, r25	; 0x01
    91d4:	88 2f       	mov	r24, r24
    91d6:	90 e0       	ldi	r25, 0x00	; 0
    91d8:	8b 5d       	subi	r24, 0xDB	; 219
    91da:	98 4d       	sbci	r25, 0xD8	; 216
    91dc:	2d e0       	ldi	r18, 0x0D	; 13
    91de:	fc 01       	movw	r30, r24
    91e0:	20 83       	st	Z, r18
    91e2:	87 e0       	ldi	r24, 0x07	; 7
    91e4:	90 e0       	ldi	r25, 0x00	; 0
    91e6:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    91ea:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    91ee:	81 e0       	ldi	r24, 0x01	; 1
    91f0:	8a 83       	std	Y+2, r24	; 0x02
    91f2:	0c 94 ae 54 	jmp	0xa95c	; 0xa95c <handle_received_USB_cmd+0x2678>
    91f6:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    91fa:	81 30       	cpi	r24, 0x01	; 1
    91fc:	11 f0       	breq	.+4      	; 0x9202 <handle_received_USB_cmd+0xf1e>
    91fe:	0c 94 b0 54 	jmp	0xa960	; 0xa960 <handle_received_USB_cmd+0x267c>
    9202:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9206:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    920a:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    920e:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9212:	10 e8       	ldi	r17, 0x80	; 128
    9214:	e1 2e       	mov	r14, r17
    9216:	1f e4       	ldi	r17, 0x4F	; 79
    9218:	f1 2e       	mov	r15, r17
    921a:	03 ec       	ldi	r16, 0xC3	; 195
    921c:	17 e4       	ldi	r17, 0x47	; 71
    921e:	20 e8       	ldi	r18, 0x80	; 128
    9220:	3f e4       	ldi	r19, 0x4F	; 79
    9222:	43 ec       	ldi	r20, 0xC3	; 195
    9224:	57 ec       	ldi	r21, 0xC7	; 199
    9226:	bc 01       	movw	r22, r24
    9228:	cd 01       	movw	r24, r26
    922a:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    922e:	88 23       	and	r24, r24
    9230:	11 f4       	brne	.+4      	; 0x9236 <handle_received_USB_cmd+0xf52>
    9232:	0c 94 b0 54 	jmp	0xa960	; 0xa960 <handle_received_USB_cmd+0x267c>
    9236:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    923a:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    923e:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    9242:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    9246:	e1 2c       	mov	r14, r1
    9248:	1c e3       	ldi	r17, 0x3C	; 60
    924a:	f1 2e       	mov	r15, r17
    924c:	0c e1       	ldi	r16, 0x1C	; 28
    924e:	16 e4       	ldi	r17, 0x46	; 70
    9250:	20 e0       	ldi	r18, 0x00	; 0
    9252:	30 e0       	ldi	r19, 0x00	; 0
    9254:	a9 01       	movw	r20, r18
    9256:	bc 01       	movw	r22, r24
    9258:	cd 01       	movw	r24, r26
    925a:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    925e:	88 23       	and	r24, r24
    9260:	11 f4       	brne	.+4      	; 0x9266 <handle_received_USB_cmd+0xf82>
    9262:	0c 94 b0 54 	jmp	0xa960	; 0xa960 <handle_received_USB_cmd+0x267c>
    9266:	80 91 39 26 	lds	r24, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    926a:	05 d8       	rcall	.-4086   	; 0x8276 <convert_received_motor_to_index>
    926c:	8d ab       	std	Y+53, r24	; 0x35
    926e:	8d a9       	ldd	r24, Y+53	; 0x35
    9270:	29 d8       	rcall	.-4014   	; 0x82c4 <check_motor_index>
    9272:	88 23       	and	r24, r24
    9274:	11 f4       	brne	.+4      	; 0x927a <handle_received_USB_cmd+0xf96>
    9276:	0c 94 b0 54 	jmp	0xa960	; 0xa960 <handle_received_USB_cmd+0x267c>
    927a:	80 91 38 26 	lds	r24, 0x2638	; 0x802638 <receivedUSBMsg+0x1>
    927e:	82 30       	cpi	r24, 0x02	; 2
    9280:	11 f4       	brne	.+4      	; 0x9286 <handle_received_USB_cmd+0xfa2>
    9282:	0c 94 b0 54 	jmp	0xa960	; 0xa960 <handle_received_USB_cmd+0x267c>
    9286:	8d a9       	ldd	r24, Y+53	; 0x35
    9288:	28 2f       	mov	r18, r24
    928a:	30 e0       	ldi	r19, 0x00	; 0
    928c:	47 e4       	ldi	r20, 0x47	; 71
    928e:	42 9f       	mul	r20, r18
    9290:	c0 01       	movw	r24, r0
    9292:	43 9f       	mul	r20, r19
    9294:	90 0d       	add	r25, r0
    9296:	11 24       	eor	r1, r1
    9298:	85 5b       	subi	r24, 0xB5	; 181
    929a:	97 4d       	sbci	r25, 0xD7	; 215
    929c:	fc 01       	movw	r30, r24
    929e:	10 82       	st	Z, r1
    92a0:	50 91 38 26 	lds	r21, 0x2638	; 0x802638 <receivedUSBMsg+0x1>
    92a4:	8d a9       	ldd	r24, Y+53	; 0x35
    92a6:	28 2f       	mov	r18, r24
    92a8:	30 e0       	ldi	r19, 0x00	; 0
    92aa:	47 e4       	ldi	r20, 0x47	; 71
    92ac:	42 9f       	mul	r20, r18
    92ae:	c0 01       	movw	r24, r0
    92b0:	43 9f       	mul	r20, r19
    92b2:	90 0d       	add	r25, r0
    92b4:	11 24       	eor	r1, r1
    92b6:	83 5d       	subi	r24, 0xD3	; 211
    92b8:	97 4d       	sbci	r25, 0xD7	; 215
    92ba:	65 2f       	mov	r22, r21
    92bc:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <set_motor_direction>
    92c0:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    92c4:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    92c8:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    92cc:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    92d0:	bc 01       	movw	r22, r24
    92d2:	cd 01       	movw	r24, r26
    92d4:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    92d8:	ab 01       	movw	r20, r22
    92da:	bc 01       	movw	r22, r24
    92dc:	8d a9       	ldd	r24, Y+53	; 0x35
    92de:	28 2f       	mov	r18, r24
    92e0:	30 e0       	ldi	r19, 0x00	; 0
    92e2:	e7 e4       	ldi	r30, 0x47	; 71
    92e4:	e2 9f       	mul	r30, r18
    92e6:	c0 01       	movw	r24, r0
    92e8:	e3 9f       	mul	r30, r19
    92ea:	90 0d       	add	r25, r0
    92ec:	11 24       	eor	r1, r1
    92ee:	83 5d       	subi	r24, 0xD3	; 211
    92f0:	97 4d       	sbci	r25, 0xD7	; 215
    92f2:	0e 94 1e 8b 	call	0x1163c	; 0x1163c <set_motor_accel_time>
    92f6:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    92fa:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    92fe:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    9302:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    9306:	bc 01       	movw	r22, r24
    9308:	cd 01       	movw	r24, r26
    930a:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    930e:	ab 01       	movw	r20, r22
    9310:	bc 01       	movw	r22, r24
    9312:	8d a9       	ldd	r24, Y+53	; 0x35
    9314:	28 2f       	mov	r18, r24
    9316:	30 e0       	ldi	r19, 0x00	; 0
    9318:	e7 e4       	ldi	r30, 0x47	; 71
    931a:	e2 9f       	mul	r30, r18
    931c:	c0 01       	movw	r24, r0
    931e:	e3 9f       	mul	r30, r19
    9320:	90 0d       	add	r25, r0
    9322:	11 24       	eor	r1, r1
    9324:	83 5d       	subi	r24, 0xD3	; 211
    9326:	97 4d       	sbci	r25, 0xD7	; 215
    9328:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <set_motor_decel_time>
    932c:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9330:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9334:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9338:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    933c:	bc 01       	movw	r22, r24
    933e:	cd 01       	movw	r24, r26
    9340:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    9344:	ab 01       	movw	r20, r22
    9346:	bc 01       	movw	r22, r24
    9348:	8d a9       	ldd	r24, Y+53	; 0x35
    934a:	28 2f       	mov	r18, r24
    934c:	30 e0       	ldi	r19, 0x00	; 0
    934e:	e7 e4       	ldi	r30, 0x47	; 71
    9350:	e2 9f       	mul	r30, r18
    9352:	c0 01       	movw	r24, r0
    9354:	e3 9f       	mul	r30, r19
    9356:	90 0d       	add	r25, r0
    9358:	11 24       	eor	r1, r1
    935a:	83 5d       	subi	r24, 0xD3	; 211
    935c:	97 4d       	sbci	r25, 0xD7	; 215
    935e:	0e 94 46 8a 	call	0x1148c	; 0x1148c <set_motor_speed>
    9362:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9366:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    936a:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    936e:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9372:	bc 01       	movw	r22, r24
    9374:	cd 01       	movw	r24, r26
    9376:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <__fixsfsi>
    937a:	dc 01       	movw	r26, r24
    937c:	cb 01       	movw	r24, r22
    937e:	89 2b       	or	r24, r25
    9380:	71 f4       	brne	.+28     	; 0x939e <handle_received_USB_cmd+0x10ba>
    9382:	8d a9       	ldd	r24, Y+53	; 0x35
    9384:	28 2f       	mov	r18, r24
    9386:	30 e0       	ldi	r19, 0x00	; 0
    9388:	47 e4       	ldi	r20, 0x47	; 71
    938a:	42 9f       	mul	r20, r18
    938c:	c0 01       	movw	r24, r0
    938e:	43 9f       	mul	r20, r19
    9390:	90 0d       	add	r25, r0
    9392:	11 24       	eor	r1, r1
    9394:	83 5d       	subi	r24, 0xD3	; 211
    9396:	97 4d       	sbci	r25, 0xD7	; 215
    9398:	0e 94 3a 8f 	call	0x11e74	; 0x11e74 <stop_motor>
    939c:	0d c0       	rjmp	.+26     	; 0x93b8 <handle_received_USB_cmd+0x10d4>
    939e:	8d a9       	ldd	r24, Y+53	; 0x35
    93a0:	28 2f       	mov	r18, r24
    93a2:	30 e0       	ldi	r19, 0x00	; 0
    93a4:	47 e4       	ldi	r20, 0x47	; 71
    93a6:	42 9f       	mul	r20, r18
    93a8:	c0 01       	movw	r24, r0
    93aa:	43 9f       	mul	r20, r19
    93ac:	90 0d       	add	r25, r0
    93ae:	11 24       	eor	r1, r1
    93b0:	83 5d       	subi	r24, 0xD3	; 211
    93b2:	97 4d       	sbci	r25, 0xD7	; 215
    93b4:	0e 94 d0 8e 	call	0x11da0	; 0x11da0 <start_motor>
    93b8:	1e 8a       	std	Y+22, r1	; 0x16
    93ba:	14 c0       	rjmp	.+40     	; 0x93e4 <handle_received_USB_cmd+0x1100>
    93bc:	89 81       	ldd	r24, Y+1	; 0x01
    93be:	91 e0       	ldi	r25, 0x01	; 1
    93c0:	98 0f       	add	r25, r24
    93c2:	99 83       	std	Y+1, r25	; 0x01
    93c4:	88 2f       	mov	r24, r24
    93c6:	90 e0       	ldi	r25, 0x00	; 0
    93c8:	2e 89       	ldd	r18, Y+22	; 0x16
    93ca:	22 2f       	mov	r18, r18
    93cc:	30 e0       	ldi	r19, 0x00	; 0
    93ce:	2f 52       	subi	r18, 0x2F	; 47
    93d0:	3f 4d       	sbci	r19, 0xDF	; 223
    93d2:	f9 01       	movw	r30, r18
    93d4:	20 81       	ld	r18, Z
    93d6:	8b 5d       	subi	r24, 0xDB	; 219
    93d8:	98 4d       	sbci	r25, 0xD8	; 216
    93da:	fc 01       	movw	r30, r24
    93dc:	20 83       	st	Z, r18
    93de:	8e 89       	ldd	r24, Y+22	; 0x16
    93e0:	8f 5f       	subi	r24, 0xFF	; 255
    93e2:	8e 8b       	std	Y+22, r24	; 0x16
    93e4:	8e 89       	ldd	r24, Y+22	; 0x16
    93e6:	82 30       	cpi	r24, 0x02	; 2
    93e8:	48 f3       	brcs	.-46     	; 0x93bc <handle_received_USB_cmd+0x10d8>
    93ea:	89 81       	ldd	r24, Y+1	; 0x01
    93ec:	91 e0       	ldi	r25, 0x01	; 1
    93ee:	98 0f       	add	r25, r24
    93f0:	99 83       	std	Y+1, r25	; 0x01
    93f2:	88 2f       	mov	r24, r24
    93f4:	90 e0       	ldi	r25, 0x00	; 0
    93f6:	8b 5d       	subi	r24, 0xDB	; 219
    93f8:	98 4d       	sbci	r25, 0xD8	; 216
    93fa:	2d e0       	ldi	r18, 0x0D	; 13
    93fc:	fc 01       	movw	r30, r24
    93fe:	20 83       	st	Z, r18
    9400:	89 e0       	ldi	r24, 0x09	; 9
    9402:	90 e0       	ldi	r25, 0x00	; 0
    9404:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    9408:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    940c:	81 e0       	ldi	r24, 0x01	; 1
    940e:	8a 83       	std	Y+2, r24	; 0x02
    9410:	0c 94 b0 54 	jmp	0xa960	; 0xa960 <handle_received_USB_cmd+0x267c>
    9414:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9418:	81 30       	cpi	r24, 0x01	; 1
    941a:	11 f0       	breq	.+4      	; 0x9420 <handle_received_USB_cmd+0x113c>
    941c:	0c 94 b2 54 	jmp	0xa964	; 0xa964 <handle_received_USB_cmd+0x2680>
    9420:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9424:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9428:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    942c:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9430:	10 e8       	ldi	r17, 0x80	; 128
    9432:	e1 2e       	mov	r14, r17
    9434:	1f e4       	ldi	r17, 0x4F	; 79
    9436:	f1 2e       	mov	r15, r17
    9438:	03 ec       	ldi	r16, 0xC3	; 195
    943a:	17 e4       	ldi	r17, 0x47	; 71
    943c:	20 e8       	ldi	r18, 0x80	; 128
    943e:	3f e4       	ldi	r19, 0x4F	; 79
    9440:	43 ec       	ldi	r20, 0xC3	; 195
    9442:	57 ec       	ldi	r21, 0xC7	; 199
    9444:	bc 01       	movw	r22, r24
    9446:	cd 01       	movw	r24, r26
    9448:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    944c:	88 23       	and	r24, r24
    944e:	11 f4       	brne	.+4      	; 0x9454 <handle_received_USB_cmd+0x1170>
    9450:	0c 94 b2 54 	jmp	0xa964	; 0xa964 <handle_received_USB_cmd+0x2680>
    9454:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    9458:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    945c:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    9460:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    9464:	10 e8       	ldi	r17, 0x80	; 128
    9466:	e1 2e       	mov	r14, r17
    9468:	1f e4       	ldi	r17, 0x4F	; 79
    946a:	f1 2e       	mov	r15, r17
    946c:	03 ec       	ldi	r16, 0xC3	; 195
    946e:	17 e4       	ldi	r17, 0x47	; 71
    9470:	20 e8       	ldi	r18, 0x80	; 128
    9472:	3f e4       	ldi	r19, 0x4F	; 79
    9474:	43 ec       	ldi	r20, 0xC3	; 195
    9476:	57 ec       	ldi	r21, 0xC7	; 199
    9478:	bc 01       	movw	r22, r24
    947a:	cd 01       	movw	r24, r26
    947c:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    9480:	88 23       	and	r24, r24
    9482:	11 f4       	brne	.+4      	; 0x9488 <handle_received_USB_cmd+0x11a4>
    9484:	0c 94 b2 54 	jmp	0xa964	; 0xa964 <handle_received_USB_cmd+0x2680>
    9488:	80 91 1d 27 	lds	r24, 0x271D	; 0x80271d <receivedUSBMsg+0xe6>
    948c:	90 91 1e 27 	lds	r25, 0x271E	; 0x80271e <receivedUSBMsg+0xe7>
    9490:	a0 91 1f 27 	lds	r26, 0x271F	; 0x80271f <receivedUSBMsg+0xe8>
    9494:	b0 91 20 27 	lds	r27, 0x2720	; 0x802720 <receivedUSBMsg+0xe9>
    9498:	e1 2c       	mov	r14, r1
    949a:	1c e3       	ldi	r17, 0x3C	; 60
    949c:	f1 2e       	mov	r15, r17
    949e:	0c e1       	ldi	r16, 0x1C	; 28
    94a0:	16 e4       	ldi	r17, 0x46	; 70
    94a2:	20 e0       	ldi	r18, 0x00	; 0
    94a4:	30 e0       	ldi	r19, 0x00	; 0
    94a6:	a9 01       	movw	r20, r18
    94a8:	bc 01       	movw	r22, r24
    94aa:	cd 01       	movw	r24, r26
    94ac:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <check_received_data_limits>
    94b0:	88 23       	and	r24, r24
    94b2:	11 f4       	brne	.+4      	; 0x94b8 <handle_received_USB_cmd+0x11d4>
    94b4:	0c 94 b2 54 	jmp	0xa964	; 0xa964 <handle_received_USB_cmd+0x2680>
    94b8:	80 91 39 26 	lds	r24, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    94bc:	0e 94 3b 41 	call	0x8276	; 0x8276 <convert_received_motor_to_index>
    94c0:	8d ab       	std	Y+53, r24	; 0x35
    94c2:	8d a9       	ldd	r24, Y+53	; 0x35
    94c4:	0e 94 62 41 	call	0x82c4	; 0x82c4 <check_motor_index>
    94c8:	88 23       	and	r24, r24
    94ca:	11 f4       	brne	.+4      	; 0x94d0 <handle_received_USB_cmd+0x11ec>
    94cc:	0c 94 b2 54 	jmp	0xa964	; 0xa964 <handle_received_USB_cmd+0x2680>
    94d0:	80 91 38 26 	lds	r24, 0x2638	; 0x802638 <receivedUSBMsg+0x1>
    94d4:	82 30       	cpi	r24, 0x02	; 2
    94d6:	11 f4       	brne	.+4      	; 0x94dc <handle_received_USB_cmd+0x11f8>
    94d8:	0c 94 b2 54 	jmp	0xa964	; 0xa964 <handle_received_USB_cmd+0x2680>
    94dc:	1e aa       	std	Y+54, r1	; 0x36
    94de:	1f aa       	std	Y+55, r1	; 0x37
    94e0:	18 ae       	std	Y+56, r1	; 0x38
    94e2:	19 ae       	std	Y+57, r1	; 0x39
    94e4:	1a ae       	std	Y+58, r1	; 0x3a
    94e6:	1b ae       	std	Y+59, r1	; 0x3b
    94e8:	1c ae       	std	Y+60, r1	; 0x3c
    94ea:	1d ae       	std	Y+61, r1	; 0x3d
    94ec:	8d a9       	ldd	r24, Y+53	; 0x35
    94ee:	88 2f       	mov	r24, r24
    94f0:	90 e0       	ldi	r25, 0x00	; 0
    94f2:	88 0f       	add	r24, r24
    94f4:	99 1f       	adc	r25, r25
    94f6:	88 0f       	add	r24, r24
    94f8:	99 1f       	adc	r25, r25
    94fa:	8b 52       	subi	r24, 0x2B	; 43
    94fc:	9e 4d       	sbci	r25, 0xDE	; 222
    94fe:	fc 01       	movw	r30, r24
    9500:	10 82       	st	Z, r1
    9502:	11 82       	std	Z+1, r1	; 0x01
    9504:	12 82       	std	Z+2, r1	; 0x02
    9506:	13 82       	std	Z+3, r1	; 0x03
    9508:	8d a9       	ldd	r24, Y+53	; 0x35
    950a:	28 2f       	mov	r18, r24
    950c:	30 e0       	ldi	r19, 0x00	; 0
    950e:	47 e4       	ldi	r20, 0x47	; 71
    9510:	42 9f       	mul	r20, r18
    9512:	c0 01       	movw	r24, r0
    9514:	43 9f       	mul	r20, r19
    9516:	90 0d       	add	r25, r0
    9518:	11 24       	eor	r1, r1
    951a:	85 5b       	subi	r24, 0xB5	; 181
    951c:	97 4d       	sbci	r25, 0xD7	; 215
    951e:	21 e0       	ldi	r18, 0x01	; 1
    9520:	fc 01       	movw	r30, r24
    9522:	20 83       	st	Z, r18
    9524:	50 91 38 26 	lds	r21, 0x2638	; 0x802638 <receivedUSBMsg+0x1>
    9528:	8d a9       	ldd	r24, Y+53	; 0x35
    952a:	28 2f       	mov	r18, r24
    952c:	30 e0       	ldi	r19, 0x00	; 0
    952e:	47 e4       	ldi	r20, 0x47	; 71
    9530:	42 9f       	mul	r20, r18
    9532:	c0 01       	movw	r24, r0
    9534:	43 9f       	mul	r20, r19
    9536:	90 0d       	add	r25, r0
    9538:	11 24       	eor	r1, r1
    953a:	83 5d       	subi	r24, 0xD3	; 211
    953c:	97 4d       	sbci	r25, 0xD7	; 215
    953e:	65 2f       	mov	r22, r21
    9540:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <set_motor_direction>
    9544:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    9548:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    954c:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    9550:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    9554:	bc 01       	movw	r22, r24
    9556:	cd 01       	movw	r24, r26
    9558:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    955c:	ab 01       	movw	r20, r22
    955e:	bc 01       	movw	r22, r24
    9560:	8d a9       	ldd	r24, Y+53	; 0x35
    9562:	28 2f       	mov	r18, r24
    9564:	30 e0       	ldi	r19, 0x00	; 0
    9566:	e7 e4       	ldi	r30, 0x47	; 71
    9568:	e2 9f       	mul	r30, r18
    956a:	c0 01       	movw	r24, r0
    956c:	e3 9f       	mul	r30, r19
    956e:	90 0d       	add	r25, r0
    9570:	11 24       	eor	r1, r1
    9572:	83 5d       	subi	r24, 0xD3	; 211
    9574:	97 4d       	sbci	r25, 0xD7	; 215
    9576:	0e 94 1e 8b 	call	0x1163c	; 0x1163c <set_motor_accel_time>
    957a:	80 91 1d 27 	lds	r24, 0x271D	; 0x80271d <receivedUSBMsg+0xe6>
    957e:	90 91 1e 27 	lds	r25, 0x271E	; 0x80271e <receivedUSBMsg+0xe7>
    9582:	a0 91 1f 27 	lds	r26, 0x271F	; 0x80271f <receivedUSBMsg+0xe8>
    9586:	b0 91 20 27 	lds	r27, 0x2720	; 0x802720 <receivedUSBMsg+0xe9>
    958a:	bc 01       	movw	r22, r24
    958c:	cd 01       	movw	r24, r26
    958e:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    9592:	ab 01       	movw	r20, r22
    9594:	bc 01       	movw	r22, r24
    9596:	8d a9       	ldd	r24, Y+53	; 0x35
    9598:	28 2f       	mov	r18, r24
    959a:	30 e0       	ldi	r19, 0x00	; 0
    959c:	e7 e4       	ldi	r30, 0x47	; 71
    959e:	e2 9f       	mul	r30, r18
    95a0:	c0 01       	movw	r24, r0
    95a2:	e3 9f       	mul	r30, r19
    95a4:	90 0d       	add	r25, r0
    95a6:	11 24       	eor	r1, r1
    95a8:	83 5d       	subi	r24, 0xD3	; 211
    95aa:	97 4d       	sbci	r25, 0xD7	; 215
    95ac:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <set_motor_decel_time>
    95b0:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    95b4:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    95b8:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    95bc:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    95c0:	bc 01       	movw	r22, r24
    95c2:	cd 01       	movw	r24, r26
    95c4:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    95c8:	ab 01       	movw	r20, r22
    95ca:	bc 01       	movw	r22, r24
    95cc:	8d a9       	ldd	r24, Y+53	; 0x35
    95ce:	28 2f       	mov	r18, r24
    95d0:	30 e0       	ldi	r19, 0x00	; 0
    95d2:	e7 e4       	ldi	r30, 0x47	; 71
    95d4:	e2 9f       	mul	r30, r18
    95d6:	c0 01       	movw	r24, r0
    95d8:	e3 9f       	mul	r30, r19
    95da:	90 0d       	add	r25, r0
    95dc:	11 24       	eor	r1, r1
    95de:	83 5d       	subi	r24, 0xD3	; 211
    95e0:	97 4d       	sbci	r25, 0xD7	; 215
    95e2:	0e 94 46 8a 	call	0x1148c	; 0x1148c <set_motor_speed>
    95e6:	8d a9       	ldd	r24, Y+53	; 0x35
    95e8:	28 2f       	mov	r18, r24
    95ea:	30 e0       	ldi	r19, 0x00	; 0
    95ec:	47 e4       	ldi	r20, 0x47	; 71
    95ee:	42 9f       	mul	r20, r18
    95f0:	c0 01       	movw	r24, r0
    95f2:	43 9f       	mul	r20, r19
    95f4:	90 0d       	add	r25, r0
    95f6:	11 24       	eor	r1, r1
    95f8:	8f 5b       	subi	r24, 0xBF	; 191
    95fa:	97 4d       	sbci	r25, 0xD7	; 215
    95fc:	fc 01       	movw	r30, r24
    95fe:	80 81       	ld	r24, Z
    9600:	91 81       	ldd	r25, Z+1	; 0x01
    9602:	a2 81       	ldd	r26, Z+2	; 0x02
    9604:	b3 81       	ldd	r27, Z+3	; 0x03
    9606:	20 e0       	ldi	r18, 0x00	; 0
    9608:	30 e0       	ldi	r19, 0x00	; 0
    960a:	a9 01       	movw	r20, r18
    960c:	bc 01       	movw	r22, r24
    960e:	cd 01       	movw	r24, r26
    9610:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    9614:	88 23       	and	r24, r24
    9616:	09 f4       	brne	.+2      	; 0x961a <handle_received_USB_cmd+0x1336>
    9618:	7f c0       	rjmp	.+254    	; 0x9718 <handle_received_USB_cmd+0x1434>
    961a:	8d a9       	ldd	r24, Y+53	; 0x35
    961c:	28 2f       	mov	r18, r24
    961e:	30 e0       	ldi	r19, 0x00	; 0
    9620:	47 e4       	ldi	r20, 0x47	; 71
    9622:	42 9f       	mul	r20, r18
    9624:	c0 01       	movw	r24, r0
    9626:	43 9f       	mul	r20, r19
    9628:	90 0d       	add	r25, r0
    962a:	11 24       	eor	r1, r1
    962c:	8f 5b       	subi	r24, 0xBF	; 191
    962e:	97 4d       	sbci	r25, 0xD7	; 215
    9630:	fc 01       	movw	r30, r24
    9632:	80 81       	ld	r24, Z
    9634:	91 81       	ldd	r25, Z+1	; 0x01
    9636:	a2 81       	ldd	r26, Z+2	; 0x02
    9638:	b3 81       	ldd	r27, Z+3	; 0x03
    963a:	20 e0       	ldi	r18, 0x00	; 0
    963c:	30 e0       	ldi	r19, 0x00	; 0
    963e:	4a e7       	ldi	r20, 0x7A	; 122
    9640:	54 e4       	ldi	r21, 0x44	; 68
    9642:	bc 01       	movw	r22, r24
    9644:	cd 01       	movw	r24, r26
    9646:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    964a:	dc 01       	movw	r26, r24
    964c:	cb 01       	movw	r24, r22
    964e:	8e ab       	std	Y+54, r24	; 0x36
    9650:	9f ab       	std	Y+55, r25	; 0x37
    9652:	a8 af       	std	Y+56, r26	; 0x38
    9654:	b9 af       	std	Y+57, r27	; 0x39
    9656:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    965a:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    965e:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9662:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9666:	2e a9       	ldd	r18, Y+54	; 0x36
    9668:	3f a9       	ldd	r19, Y+55	; 0x37
    966a:	48 ad       	ldd	r20, Y+56	; 0x38
    966c:	59 ad       	ldd	r21, Y+57	; 0x39
    966e:	bc 01       	movw	r22, r24
    9670:	cd 01       	movw	r24, r26
    9672:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    9676:	dc 01       	movw	r26, r24
    9678:	cb 01       	movw	r24, r22
    967a:	8a af       	std	Y+58, r24	; 0x3a
    967c:	9b af       	std	Y+59, r25	; 0x3b
    967e:	ac af       	std	Y+60, r26	; 0x3c
    9680:	bd af       	std	Y+61, r27	; 0x3d
    9682:	8d a9       	ldd	r24, Y+53	; 0x35
    9684:	08 2f       	mov	r16, r24
    9686:	10 e0       	ldi	r17, 0x00	; 0
    9688:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    968c:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9690:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9694:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9698:	2e a9       	ldd	r18, Y+54	; 0x36
    969a:	3f a9       	ldd	r19, Y+55	; 0x37
    969c:	48 ad       	ldd	r20, Y+56	; 0x38
    969e:	59 ad       	ldd	r21, Y+57	; 0x39
    96a0:	bc 01       	movw	r22, r24
    96a2:	cd 01       	movw	r24, r26
    96a4:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    96a8:	dc 01       	movw	r26, r24
    96aa:	cb 01       	movw	r24, r22
    96ac:	6c 01       	movw	r12, r24
    96ae:	7d 01       	movw	r14, r26
    96b0:	20 e0       	ldi	r18, 0x00	; 0
    96b2:	30 e0       	ldi	r19, 0x00	; 0
    96b4:	40 e0       	ldi	r20, 0x00	; 0
    96b6:	5f e3       	ldi	r21, 0x3F	; 63
    96b8:	6a ad       	ldd	r22, Y+58	; 0x3a
    96ba:	7b ad       	ldd	r23, Y+59	; 0x3b
    96bc:	8c ad       	ldd	r24, Y+60	; 0x3c
    96be:	9d ad       	ldd	r25, Y+61	; 0x3d
    96c0:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    96c4:	dc 01       	movw	r26, r24
    96c6:	cb 01       	movw	r24, r22
    96c8:	2e a9       	ldd	r18, Y+54	; 0x36
    96ca:	3f a9       	ldd	r19, Y+55	; 0x37
    96cc:	48 ad       	ldd	r20, Y+56	; 0x38
    96ce:	59 ad       	ldd	r21, Y+57	; 0x39
    96d0:	bc 01       	movw	r22, r24
    96d2:	cd 01       	movw	r24, r26
    96d4:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    96d8:	dc 01       	movw	r26, r24
    96da:	cb 01       	movw	r24, r22
    96dc:	2e a9       	ldd	r18, Y+54	; 0x36
    96de:	3f a9       	ldd	r19, Y+55	; 0x37
    96e0:	48 ad       	ldd	r20, Y+56	; 0x38
    96e2:	59 ad       	ldd	r21, Y+57	; 0x39
    96e4:	bc 01       	movw	r22, r24
    96e6:	cd 01       	movw	r24, r26
    96e8:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    96ec:	dc 01       	movw	r26, r24
    96ee:	cb 01       	movw	r24, r22
    96f0:	9c 01       	movw	r18, r24
    96f2:	ad 01       	movw	r20, r26
    96f4:	c7 01       	movw	r24, r14
    96f6:	b6 01       	movw	r22, r12
    96f8:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
    96fc:	dc 01       	movw	r26, r24
    96fe:	cb 01       	movw	r24, r22
    9700:	98 01       	movw	r18, r16
    9702:	22 0f       	add	r18, r18
    9704:	33 1f       	adc	r19, r19
    9706:	22 0f       	add	r18, r18
    9708:	33 1f       	adc	r19, r19
    970a:	2b 52       	subi	r18, 0x2B	; 43
    970c:	3e 4d       	sbci	r19, 0xDE	; 222
    970e:	f9 01       	movw	r30, r18
    9710:	80 83       	st	Z, r24
    9712:	91 83       	std	Z+1, r25	; 0x01
    9714:	a2 83       	std	Z+2, r26	; 0x02
    9716:	b3 83       	std	Z+3, r27	; 0x03
    9718:	80 91 19 27 	lds	r24, 0x2719	; 0x802719 <receivedUSBMsg+0xe2>
    971c:	90 91 1a 27 	lds	r25, 0x271A	; 0x80271a <receivedUSBMsg+0xe3>
    9720:	a0 91 1b 27 	lds	r26, 0x271B	; 0x80271b <receivedUSBMsg+0xe4>
    9724:	b0 91 1c 27 	lds	r27, 0x271C	; 0x80271c <receivedUSBMsg+0xe5>
    9728:	bc 01       	movw	r22, r24
    972a:	cd 01       	movw	r24, r26
    972c:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    9730:	ab 01       	movw	r20, r22
    9732:	bc 01       	movw	r22, r24
    9734:	8d a9       	ldd	r24, Y+53	; 0x35
    9736:	28 2f       	mov	r18, r24
    9738:	30 e0       	ldi	r19, 0x00	; 0
    973a:	e7 e4       	ldi	r30, 0x47	; 71
    973c:	e2 9f       	mul	r30, r18
    973e:	c0 01       	movw	r24, r0
    9740:	e3 9f       	mul	r30, r19
    9742:	90 0d       	add	r25, r0
    9744:	11 24       	eor	r1, r1
    9746:	83 5d       	subi	r24, 0xD3	; 211
    9748:	97 4d       	sbci	r25, 0xD7	; 215
    974a:	0e 94 df 8a 	call	0x115be	; 0x115be <set_motor_steps>
    974e:	8d a9       	ldd	r24, Y+53	; 0x35
    9750:	28 2f       	mov	r18, r24
    9752:	30 e0       	ldi	r19, 0x00	; 0
    9754:	47 e4       	ldi	r20, 0x47	; 71
    9756:	42 9f       	mul	r20, r18
    9758:	c0 01       	movw	r24, r0
    975a:	43 9f       	mul	r20, r19
    975c:	90 0d       	add	r25, r0
    975e:	11 24       	eor	r1, r1
    9760:	83 5d       	subi	r24, 0xD3	; 211
    9762:	97 4d       	sbci	r25, 0xD7	; 215
    9764:	0e 94 d0 8e 	call	0x11da0	; 0x11da0 <start_motor>
    9768:	1f 8a       	std	Y+23, r1	; 0x17
    976a:	14 c0       	rjmp	.+40     	; 0x9794 <handle_received_USB_cmd+0x14b0>
    976c:	89 81       	ldd	r24, Y+1	; 0x01
    976e:	91 e0       	ldi	r25, 0x01	; 1
    9770:	98 0f       	add	r25, r24
    9772:	99 83       	std	Y+1, r25	; 0x01
    9774:	88 2f       	mov	r24, r24
    9776:	90 e0       	ldi	r25, 0x00	; 0
    9778:	2f 89       	ldd	r18, Y+23	; 0x17
    977a:	22 2f       	mov	r18, r18
    977c:	30 e0       	ldi	r19, 0x00	; 0
    977e:	2f 52       	subi	r18, 0x2F	; 47
    9780:	3f 4d       	sbci	r19, 0xDF	; 223
    9782:	f9 01       	movw	r30, r18
    9784:	20 81       	ld	r18, Z
    9786:	8b 5d       	subi	r24, 0xDB	; 219
    9788:	98 4d       	sbci	r25, 0xD8	; 216
    978a:	fc 01       	movw	r30, r24
    978c:	20 83       	st	Z, r18
    978e:	8f 89       	ldd	r24, Y+23	; 0x17
    9790:	8f 5f       	subi	r24, 0xFF	; 255
    9792:	8f 8b       	std	Y+23, r24	; 0x17
    9794:	8f 89       	ldd	r24, Y+23	; 0x17
    9796:	82 30       	cpi	r24, 0x02	; 2
    9798:	48 f3       	brcs	.-46     	; 0x976c <handle_received_USB_cmd+0x1488>
    979a:	89 81       	ldd	r24, Y+1	; 0x01
    979c:	91 e0       	ldi	r25, 0x01	; 1
    979e:	98 0f       	add	r25, r24
    97a0:	99 83       	std	Y+1, r25	; 0x01
    97a2:	88 2f       	mov	r24, r24
    97a4:	90 e0       	ldi	r25, 0x00	; 0
    97a6:	8b 5d       	subi	r24, 0xDB	; 219
    97a8:	98 4d       	sbci	r25, 0xD8	; 216
    97aa:	2d e0       	ldi	r18, 0x0D	; 13
    97ac:	fc 01       	movw	r30, r24
    97ae:	20 83       	st	Z, r18
    97b0:	8a e0       	ldi	r24, 0x0A	; 10
    97b2:	90 e0       	ldi	r25, 0x00	; 0
    97b4:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    97b8:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    97bc:	81 e0       	ldi	r24, 0x01	; 1
    97be:	8a 83       	std	Y+2, r24	; 0x02
    97c0:	0c 94 b2 54 	jmp	0xa964	; 0xa964 <handle_received_USB_cmd+0x2680>
    97c4:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    97c8:	88 23       	and	r24, r24
    97ca:	11 f0       	breq	.+4      	; 0x97d0 <handle_received_USB_cmd+0x14ec>
    97cc:	0c 94 b4 54 	jmp	0xa968	; 0xa968 <handle_received_USB_cmd+0x2684>
    97d0:	ce 01       	movw	r24, r28
    97d2:	8c 57       	subi	r24, 0x7C	; 124
    97d4:	9f 4f       	sbci	r25, 0xFF	; 255
    97d6:	28 e0       	ldi	r18, 0x08	; 8
    97d8:	fc 01       	movw	r30, r24
    97da:	e2 2e       	mov	r14, r18
    97dc:	11 92       	st	Z+, r1
    97de:	ea 94       	dec	r14
    97e0:	e9 f7       	brne	.-6      	; 0x97dc <handle_received_USB_cmd+0x14f8>
    97e2:	ce 01       	movw	r24, r28
    97e4:	84 57       	subi	r24, 0x74	; 116
    97e6:	9f 4f       	sbci	r25, 0xFF	; 255
    97e8:	28 e0       	ldi	r18, 0x08	; 8
    97ea:	fc 01       	movw	r30, r24
    97ec:	e2 2e       	mov	r14, r18
    97ee:	11 92       	st	Z+, r1
    97f0:	ea 94       	dec	r14
    97f2:	e9 f7       	brne	.-6      	; 0x97ee <handle_received_USB_cmd+0x150a>
    97f4:	ce 01       	movw	r24, r28
    97f6:	8c 56       	subi	r24, 0x6C	; 108
    97f8:	9f 4f       	sbci	r25, 0xFF	; 255
    97fa:	28 e0       	ldi	r18, 0x08	; 8
    97fc:	fc 01       	movw	r30, r24
    97fe:	e2 2e       	mov	r14, r18
    9800:	11 92       	st	Z+, r1
    9802:	ea 94       	dec	r14
    9804:	e9 f7       	brne	.-6      	; 0x9800 <handle_received_USB_cmd+0x151c>
    9806:	80 91 39 26 	lds	r24, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    980a:	0e 94 3b 41 	call	0x8276	; 0x8276 <convert_received_motor_to_index>
    980e:	8d ab       	std	Y+53, r24	; 0x35
    9810:	8d a9       	ldd	r24, Y+53	; 0x35
    9812:	0e 94 62 41 	call	0x82c4	; 0x82c4 <check_motor_index>
    9816:	88 23       	and	r24, r24
    9818:	11 f4       	brne	.+4      	; 0x981e <handle_received_USB_cmd+0x153a>
    981a:	0c 94 b4 54 	jmp	0xa968	; 0xa968 <handle_received_USB_cmd+0x2684>
    981e:	8d a9       	ldd	r24, Y+53	; 0x35
    9820:	28 2f       	mov	r18, r24
    9822:	30 e0       	ldi	r19, 0x00	; 0
    9824:	47 e4       	ldi	r20, 0x47	; 71
    9826:	42 9f       	mul	r20, r18
    9828:	c0 01       	movw	r24, r0
    982a:	43 9f       	mul	r20, r19
    982c:	90 0d       	add	r25, r0
    982e:	11 24       	eor	r1, r1
    9830:	8b 5c       	subi	r24, 0xCB	; 203
    9832:	97 4d       	sbci	r25, 0xD7	; 215
    9834:	fc 01       	movw	r30, r24
    9836:	80 81       	ld	r24, Z
    9838:	91 81       	ldd	r25, Z+1	; 0x01
    983a:	a2 81       	ldd	r26, Z+2	; 0x02
    983c:	b3 81       	ldd	r27, Z+3	; 0x03
    983e:	ae 01       	movw	r20, r28
    9840:	4c 57       	subi	r20, 0x7C	; 124
    9842:	5f 4f       	sbci	r21, 0xFF	; 255
    9844:	28 e0       	ldi	r18, 0x08	; 8
    9846:	bc 01       	movw	r22, r24
    9848:	cd 01       	movw	r24, r26
    984a:	0e 94 16 40 	call	0x802c	; 0x802c <convert_float_to_string>
    984e:	8d a9       	ldd	r24, Y+53	; 0x35
    9850:	28 2f       	mov	r18, r24
    9852:	30 e0       	ldi	r19, 0x00	; 0
    9854:	47 e4       	ldi	r20, 0x47	; 71
    9856:	42 9f       	mul	r20, r18
    9858:	c0 01       	movw	r24, r0
    985a:	43 9f       	mul	r20, r19
    985c:	90 0d       	add	r25, r0
    985e:	11 24       	eor	r1, r1
    9860:	87 5c       	subi	r24, 0xC7	; 199
    9862:	97 4d       	sbci	r25, 0xD7	; 215
    9864:	fc 01       	movw	r30, r24
    9866:	80 81       	ld	r24, Z
    9868:	91 81       	ldd	r25, Z+1	; 0x01
    986a:	a2 81       	ldd	r26, Z+2	; 0x02
    986c:	b3 81       	ldd	r27, Z+3	; 0x03
    986e:	ae 01       	movw	r20, r28
    9870:	4c 56       	subi	r20, 0x6C	; 108
    9872:	5f 4f       	sbci	r21, 0xFF	; 255
    9874:	28 e0       	ldi	r18, 0x08	; 8
    9876:	bc 01       	movw	r22, r24
    9878:	cd 01       	movw	r24, r26
    987a:	0e 94 16 40 	call	0x802c	; 0x802c <convert_float_to_string>
    987e:	8d a9       	ldd	r24, Y+53	; 0x35
    9880:	28 2f       	mov	r18, r24
    9882:	30 e0       	ldi	r19, 0x00	; 0
    9884:	47 e4       	ldi	r20, 0x47	; 71
    9886:	42 9f       	mul	r20, r18
    9888:	c0 01       	movw	r24, r0
    988a:	43 9f       	mul	r20, r19
    988c:	90 0d       	add	r25, r0
    988e:	11 24       	eor	r1, r1
    9890:	85 5b       	subi	r24, 0xB5	; 181
    9892:	97 4d       	sbci	r25, 0xD7	; 215
    9894:	fc 01       	movw	r30, r24
    9896:	80 81       	ld	r24, Z
    9898:	88 23       	and	r24, r24
    989a:	d1 f0       	breq	.+52     	; 0x98d0 <handle_received_USB_cmd+0x15ec>
    989c:	8d a9       	ldd	r24, Y+53	; 0x35
    989e:	28 2f       	mov	r18, r24
    98a0:	30 e0       	ldi	r19, 0x00	; 0
    98a2:	47 e4       	ldi	r20, 0x47	; 71
    98a4:	42 9f       	mul	r20, r18
    98a6:	c0 01       	movw	r24, r0
    98a8:	43 9f       	mul	r20, r19
    98aa:	90 0d       	add	r25, r0
    98ac:	11 24       	eor	r1, r1
    98ae:	87 5b       	subi	r24, 0xB7	; 183
    98b0:	97 4d       	sbci	r25, 0xD7	; 215
    98b2:	fc 01       	movw	r30, r24
    98b4:	80 81       	ld	r24, Z
    98b6:	91 81       	ldd	r25, Z+1	; 0x01
    98b8:	cc 01       	movw	r24, r24
    98ba:	a0 e0       	ldi	r26, 0x00	; 0
    98bc:	b0 e0       	ldi	r27, 0x00	; 0
    98be:	9e 01       	movw	r18, r28
    98c0:	24 57       	subi	r18, 0x74	; 116
    98c2:	3f 4f       	sbci	r19, 0xFF	; 255
    98c4:	a9 01       	movw	r20, r18
    98c6:	bc 01       	movw	r22, r24
    98c8:	cd 01       	movw	r24, r26
    98ca:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <convert_int_to_string>
    98ce:	0c c0       	rjmp	.+24     	; 0x98e8 <handle_received_USB_cmd+0x1604>
    98d0:	ce 01       	movw	r24, r28
    98d2:	84 57       	subi	r24, 0x74	; 116
    98d4:	9f 4f       	sbci	r25, 0xFF	; 255
    98d6:	2d e2       	ldi	r18, 0x2D	; 45
    98d8:	fc 01       	movw	r30, r24
    98da:	20 83       	st	Z, r18
    98dc:	ce 01       	movw	r24, r28
    98de:	84 57       	subi	r24, 0x74	; 116
    98e0:	9f 4f       	sbci	r25, 0xFF	; 255
    98e2:	21 e3       	ldi	r18, 0x31	; 49
    98e4:	fc 01       	movw	r30, r24
    98e6:	21 83       	std	Z+1, r18	; 0x01
    98e8:	18 8e       	std	Y+24, r1	; 0x18
    98ea:	24 c0       	rjmp	.+72     	; 0x9934 <handle_received_USB_cmd+0x1650>
    98ec:	88 8d       	ldd	r24, Y+24	; 0x18
    98ee:	84 30       	cpi	r24, 0x04	; 4
    98f0:	91 f0       	breq	.+36     	; 0x9916 <handle_received_USB_cmd+0x1632>
    98f2:	89 81       	ldd	r24, Y+1	; 0x01
    98f4:	91 e0       	ldi	r25, 0x01	; 1
    98f6:	98 0f       	add	r25, r24
    98f8:	99 83       	std	Y+1, r25	; 0x01
    98fa:	88 2f       	mov	r24, r24
    98fc:	90 e0       	ldi	r25, 0x00	; 0
    98fe:	28 8d       	ldd	r18, Y+24	; 0x18
    9900:	22 2f       	mov	r18, r18
    9902:	30 e0       	ldi	r19, 0x00	; 0
    9904:	24 5d       	subi	r18, 0xD4	; 212
    9906:	3e 4d       	sbci	r19, 0xDE	; 222
    9908:	f9 01       	movw	r30, r18
    990a:	20 81       	ld	r18, Z
    990c:	8b 5d       	subi	r24, 0xDB	; 219
    990e:	98 4d       	sbci	r25, 0xD8	; 216
    9910:	fc 01       	movw	r30, r24
    9912:	20 83       	st	Z, r18
    9914:	0c c0       	rjmp	.+24     	; 0x992e <handle_received_USB_cmd+0x164a>
    9916:	89 81       	ldd	r24, Y+1	; 0x01
    9918:	91 e0       	ldi	r25, 0x01	; 1
    991a:	98 0f       	add	r25, r24
    991c:	99 83       	std	Y+1, r25	; 0x01
    991e:	88 2f       	mov	r24, r24
    9920:	90 e0       	ldi	r25, 0x00	; 0
    9922:	20 91 39 26 	lds	r18, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    9926:	8b 5d       	subi	r24, 0xDB	; 219
    9928:	98 4d       	sbci	r25, 0xD8	; 216
    992a:	fc 01       	movw	r30, r24
    992c:	20 83       	st	Z, r18
    992e:	88 8d       	ldd	r24, Y+24	; 0x18
    9930:	8f 5f       	subi	r24, 0xFF	; 255
    9932:	88 8f       	std	Y+24, r24	; 0x18
    9934:	88 8d       	ldd	r24, Y+24	; 0x18
    9936:	85 30       	cpi	r24, 0x05	; 5
    9938:	c8 f2       	brcs	.-78     	; 0x98ec <handle_received_USB_cmd+0x1608>
    993a:	89 81       	ldd	r24, Y+1	; 0x01
    993c:	91 e0       	ldi	r25, 0x01	; 1
    993e:	98 0f       	add	r25, r24
    9940:	99 83       	std	Y+1, r25	; 0x01
    9942:	88 2f       	mov	r24, r24
    9944:	90 e0       	ldi	r25, 0x00	; 0
    9946:	8b 5d       	subi	r24, 0xDB	; 219
    9948:	98 4d       	sbci	r25, 0xD8	; 216
    994a:	20 e2       	ldi	r18, 0x20	; 32
    994c:	fc 01       	movw	r30, r24
    994e:	20 83       	st	Z, r18
    9950:	8d a9       	ldd	r24, Y+53	; 0x35
    9952:	28 2f       	mov	r18, r24
    9954:	30 e0       	ldi	r19, 0x00	; 0
    9956:	47 e4       	ldi	r20, 0x47	; 71
    9958:	42 9f       	mul	r20, r18
    995a:	c0 01       	movw	r24, r0
    995c:	43 9f       	mul	r20, r19
    995e:	90 0d       	add	r25, r0
    9960:	11 24       	eor	r1, r1
    9962:	81 5d       	subi	r24, 0xD1	; 209
    9964:	97 4d       	sbci	r25, 0xD7	; 215
    9966:	fc 01       	movw	r30, r24
    9968:	80 81       	ld	r24, Z
    996a:	88 23       	and	r24, r24
    996c:	61 f4       	brne	.+24     	; 0x9986 <handle_received_USB_cmd+0x16a2>
    996e:	89 81       	ldd	r24, Y+1	; 0x01
    9970:	91 e0       	ldi	r25, 0x01	; 1
    9972:	98 0f       	add	r25, r24
    9974:	99 83       	std	Y+1, r25	; 0x01
    9976:	88 2f       	mov	r24, r24
    9978:	90 e0       	ldi	r25, 0x00	; 0
    997a:	8b 5d       	subi	r24, 0xDB	; 219
    997c:	98 4d       	sbci	r25, 0xD8	; 216
    997e:	2b e2       	ldi	r18, 0x2B	; 43
    9980:	fc 01       	movw	r30, r24
    9982:	20 83       	st	Z, r18
    9984:	0b c0       	rjmp	.+22     	; 0x999c <handle_received_USB_cmd+0x16b8>
    9986:	89 81       	ldd	r24, Y+1	; 0x01
    9988:	91 e0       	ldi	r25, 0x01	; 1
    998a:	98 0f       	add	r25, r24
    998c:	99 83       	std	Y+1, r25	; 0x01
    998e:	88 2f       	mov	r24, r24
    9990:	90 e0       	ldi	r25, 0x00	; 0
    9992:	8b 5d       	subi	r24, 0xDB	; 219
    9994:	98 4d       	sbci	r25, 0xD8	; 216
    9996:	2d e2       	ldi	r18, 0x2D	; 45
    9998:	fc 01       	movw	r30, r24
    999a:	20 83       	st	Z, r18
    999c:	19 8e       	std	Y+25, r1	; 0x19
    999e:	17 c0       	rjmp	.+46     	; 0x99ce <handle_received_USB_cmd+0x16ea>
    99a0:	89 81       	ldd	r24, Y+1	; 0x01
    99a2:	91 e0       	ldi	r25, 0x01	; 1
    99a4:	98 0f       	add	r25, r24
    99a6:	99 83       	std	Y+1, r25	; 0x01
    99a8:	88 2f       	mov	r24, r24
    99aa:	90 e0       	ldi	r25, 0x00	; 0
    99ac:	29 8d       	ldd	r18, Y+25	; 0x19
    99ae:	22 2f       	mov	r18, r18
    99b0:	30 e0       	ldi	r19, 0x00	; 0
    99b2:	ae 01       	movw	r20, r28
    99b4:	4c 57       	subi	r20, 0x7C	; 124
    99b6:	5f 4f       	sbci	r21, 0xFF	; 255
    99b8:	24 0f       	add	r18, r20
    99ba:	35 1f       	adc	r19, r21
    99bc:	f9 01       	movw	r30, r18
    99be:	20 81       	ld	r18, Z
    99c0:	8b 5d       	subi	r24, 0xDB	; 219
    99c2:	98 4d       	sbci	r25, 0xD8	; 216
    99c4:	fc 01       	movw	r30, r24
    99c6:	20 83       	st	Z, r18
    99c8:	89 8d       	ldd	r24, Y+25	; 0x19
    99ca:	8f 5f       	subi	r24, 0xFF	; 255
    99cc:	89 8f       	std	Y+25, r24	; 0x19
    99ce:	89 8d       	ldd	r24, Y+25	; 0x19
    99d0:	08 2f       	mov	r16, r24
    99d2:	10 e0       	ldi	r17, 0x00	; 0
    99d4:	ce 01       	movw	r24, r28
    99d6:	8c 57       	subi	r24, 0x7C	; 124
    99d8:	9f 4f       	sbci	r25, 0xFF	; 255
    99da:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    99de:	08 17       	cp	r16, r24
    99e0:	19 07       	cpc	r17, r25
    99e2:	f0 f2       	brcs	.-68     	; 0x99a0 <handle_received_USB_cmd+0x16bc>
    99e4:	89 81       	ldd	r24, Y+1	; 0x01
    99e6:	91 e0       	ldi	r25, 0x01	; 1
    99e8:	98 0f       	add	r25, r24
    99ea:	99 83       	std	Y+1, r25	; 0x01
    99ec:	88 2f       	mov	r24, r24
    99ee:	90 e0       	ldi	r25, 0x00	; 0
    99f0:	8b 5d       	subi	r24, 0xDB	; 219
    99f2:	98 4d       	sbci	r25, 0xD8	; 216
    99f4:	20 e2       	ldi	r18, 0x20	; 32
    99f6:	fc 01       	movw	r30, r24
    99f8:	20 83       	st	Z, r18
    99fa:	1a 8e       	std	Y+26, r1	; 0x1a
    99fc:	17 c0       	rjmp	.+46     	; 0x9a2c <handle_received_USB_cmd+0x1748>
    99fe:	89 81       	ldd	r24, Y+1	; 0x01
    9a00:	91 e0       	ldi	r25, 0x01	; 1
    9a02:	98 0f       	add	r25, r24
    9a04:	99 83       	std	Y+1, r25	; 0x01
    9a06:	88 2f       	mov	r24, r24
    9a08:	90 e0       	ldi	r25, 0x00	; 0
    9a0a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9a0c:	22 2f       	mov	r18, r18
    9a0e:	30 e0       	ldi	r19, 0x00	; 0
    9a10:	ae 01       	movw	r20, r28
    9a12:	4c 56       	subi	r20, 0x6C	; 108
    9a14:	5f 4f       	sbci	r21, 0xFF	; 255
    9a16:	24 0f       	add	r18, r20
    9a18:	35 1f       	adc	r19, r21
    9a1a:	f9 01       	movw	r30, r18
    9a1c:	20 81       	ld	r18, Z
    9a1e:	8b 5d       	subi	r24, 0xDB	; 219
    9a20:	98 4d       	sbci	r25, 0xD8	; 216
    9a22:	fc 01       	movw	r30, r24
    9a24:	20 83       	st	Z, r18
    9a26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9a28:	8f 5f       	subi	r24, 0xFF	; 255
    9a2a:	8a 8f       	std	Y+26, r24	; 0x1a
    9a2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9a2e:	08 2f       	mov	r16, r24
    9a30:	10 e0       	ldi	r17, 0x00	; 0
    9a32:	ce 01       	movw	r24, r28
    9a34:	8c 56       	subi	r24, 0x6C	; 108
    9a36:	9f 4f       	sbci	r25, 0xFF	; 255
    9a38:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    9a3c:	08 17       	cp	r16, r24
    9a3e:	19 07       	cpc	r17, r25
    9a40:	f0 f2       	brcs	.-68     	; 0x99fe <handle_received_USB_cmd+0x171a>
    9a42:	89 81       	ldd	r24, Y+1	; 0x01
    9a44:	91 e0       	ldi	r25, 0x01	; 1
    9a46:	98 0f       	add	r25, r24
    9a48:	99 83       	std	Y+1, r25	; 0x01
    9a4a:	88 2f       	mov	r24, r24
    9a4c:	90 e0       	ldi	r25, 0x00	; 0
    9a4e:	8b 5d       	subi	r24, 0xDB	; 219
    9a50:	98 4d       	sbci	r25, 0xD8	; 216
    9a52:	20 e2       	ldi	r18, 0x20	; 32
    9a54:	fc 01       	movw	r30, r24
    9a56:	20 83       	st	Z, r18
    9a58:	1b 8e       	std	Y+27, r1	; 0x1b
    9a5a:	17 c0       	rjmp	.+46     	; 0x9a8a <handle_received_USB_cmd+0x17a6>
    9a5c:	89 81       	ldd	r24, Y+1	; 0x01
    9a5e:	91 e0       	ldi	r25, 0x01	; 1
    9a60:	98 0f       	add	r25, r24
    9a62:	99 83       	std	Y+1, r25	; 0x01
    9a64:	88 2f       	mov	r24, r24
    9a66:	90 e0       	ldi	r25, 0x00	; 0
    9a68:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9a6a:	22 2f       	mov	r18, r18
    9a6c:	30 e0       	ldi	r19, 0x00	; 0
    9a6e:	ae 01       	movw	r20, r28
    9a70:	44 57       	subi	r20, 0x74	; 116
    9a72:	5f 4f       	sbci	r21, 0xFF	; 255
    9a74:	24 0f       	add	r18, r20
    9a76:	35 1f       	adc	r19, r21
    9a78:	f9 01       	movw	r30, r18
    9a7a:	20 81       	ld	r18, Z
    9a7c:	8b 5d       	subi	r24, 0xDB	; 219
    9a7e:	98 4d       	sbci	r25, 0xD8	; 216
    9a80:	fc 01       	movw	r30, r24
    9a82:	20 83       	st	Z, r18
    9a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9a86:	8f 5f       	subi	r24, 0xFF	; 255
    9a88:	8b 8f       	std	Y+27, r24	; 0x1b
    9a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9a8c:	08 2f       	mov	r16, r24
    9a8e:	10 e0       	ldi	r17, 0x00	; 0
    9a90:	ce 01       	movw	r24, r28
    9a92:	84 57       	subi	r24, 0x74	; 116
    9a94:	9f 4f       	sbci	r25, 0xFF	; 255
    9a96:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    9a9a:	08 17       	cp	r16, r24
    9a9c:	19 07       	cpc	r17, r25
    9a9e:	f0 f2       	brcs	.-68     	; 0x9a5c <handle_received_USB_cmd+0x1778>
    9aa0:	89 81       	ldd	r24, Y+1	; 0x01
    9aa2:	91 e0       	ldi	r25, 0x01	; 1
    9aa4:	98 0f       	add	r25, r24
    9aa6:	99 83       	std	Y+1, r25	; 0x01
    9aa8:	88 2f       	mov	r24, r24
    9aaa:	90 e0       	ldi	r25, 0x00	; 0
    9aac:	8b 5d       	subi	r24, 0xDB	; 219
    9aae:	98 4d       	sbci	r25, 0xD8	; 216
    9ab0:	2d e0       	ldi	r18, 0x0D	; 13
    9ab2:	fc 01       	movw	r30, r24
    9ab4:	20 83       	st	Z, r18
    9ab6:	8b e0       	ldi	r24, 0x0B	; 11
    9ab8:	90 e0       	ldi	r25, 0x00	; 0
    9aba:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    9abe:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    9ac2:	81 e0       	ldi	r24, 0x01	; 1
    9ac4:	8a 83       	std	Y+2, r24	; 0x02
    9ac6:	50 c7       	rjmp	.+3744   	; 0xa968 <handle_received_USB_cmd+0x2684>
    9ac8:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9acc:	88 23       	and	r24, r24
    9ace:	09 f0       	breq	.+2      	; 0x9ad2 <handle_received_USB_cmd+0x17ee>
    9ad0:	97 c0       	rjmp	.+302    	; 0x9c00 <handle_received_USB_cmd+0x191c>
    9ad2:	ce 01       	movw	r24, r28
    9ad4:	84 56       	subi	r24, 0x64	; 100
    9ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    9ad8:	fc 01       	movw	r30, r24
    9ada:	10 82       	st	Z, r1
    9adc:	11 82       	std	Z+1, r1	; 0x01
    9ade:	12 82       	std	Z+2, r1	; 0x02
    9ae0:	80 91 39 26 	lds	r24, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    9ae4:	0e 94 3b 41 	call	0x8276	; 0x8276 <convert_received_motor_to_index>
    9ae8:	8d ab       	std	Y+53, r24	; 0x35
    9aea:	8d a9       	ldd	r24, Y+53	; 0x35
    9aec:	0e 94 62 41 	call	0x82c4	; 0x82c4 <check_motor_index>
    9af0:	88 23       	and	r24, r24
    9af2:	09 f4       	brne	.+2      	; 0x9af6 <handle_received_USB_cmd+0x1812>
    9af4:	3b c7       	rjmp	.+3702   	; 0xa96c <handle_received_USB_cmd+0x2688>
    9af6:	8d a9       	ldd	r24, Y+53	; 0x35
    9af8:	28 2f       	mov	r18, r24
    9afa:	30 e0       	ldi	r19, 0x00	; 0
    9afc:	47 e4       	ldi	r20, 0x47	; 71
    9afe:	42 9f       	mul	r20, r18
    9b00:	c0 01       	movw	r24, r0
    9b02:	43 9f       	mul	r20, r19
    9b04:	90 0d       	add	r25, r0
    9b06:	11 24       	eor	r1, r1
    9b08:	84 5b       	subi	r24, 0xB4	; 180
    9b0a:	97 4d       	sbci	r25, 0xD7	; 215
    9b0c:	fc 01       	movw	r30, r24
    9b0e:	80 81       	ld	r24, Z
    9b10:	88 2f       	mov	r24, r24
    9b12:	90 e0       	ldi	r25, 0x00	; 0
    9b14:	a0 e0       	ldi	r26, 0x00	; 0
    9b16:	b0 e0       	ldi	r27, 0x00	; 0
    9b18:	9e 01       	movw	r18, r28
    9b1a:	24 56       	subi	r18, 0x64	; 100
    9b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    9b1e:	a9 01       	movw	r20, r18
    9b20:	bc 01       	movw	r22, r24
    9b22:	cd 01       	movw	r24, r26
    9b24:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <convert_int_to_string>
    9b28:	1c 8e       	std	Y+28, r1	; 0x1c
    9b2a:	24 c0       	rjmp	.+72     	; 0x9b74 <handle_received_USB_cmd+0x1890>
    9b2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9b2e:	84 30       	cpi	r24, 0x04	; 4
    9b30:	91 f0       	breq	.+36     	; 0x9b56 <handle_received_USB_cmd+0x1872>
    9b32:	89 81       	ldd	r24, Y+1	; 0x01
    9b34:	91 e0       	ldi	r25, 0x01	; 1
    9b36:	98 0f       	add	r25, r24
    9b38:	99 83       	std	Y+1, r25	; 0x01
    9b3a:	88 2f       	mov	r24, r24
    9b3c:	90 e0       	ldi	r25, 0x00	; 0
    9b3e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    9b40:	22 2f       	mov	r18, r18
    9b42:	30 e0       	ldi	r19, 0x00	; 0
    9b44:	26 5c       	subi	r18, 0xC6	; 198
    9b46:	3e 4d       	sbci	r19, 0xDE	; 222
    9b48:	f9 01       	movw	r30, r18
    9b4a:	20 81       	ld	r18, Z
    9b4c:	8b 5d       	subi	r24, 0xDB	; 219
    9b4e:	98 4d       	sbci	r25, 0xD8	; 216
    9b50:	fc 01       	movw	r30, r24
    9b52:	20 83       	st	Z, r18
    9b54:	0c c0       	rjmp	.+24     	; 0x9b6e <handle_received_USB_cmd+0x188a>
    9b56:	89 81       	ldd	r24, Y+1	; 0x01
    9b58:	91 e0       	ldi	r25, 0x01	; 1
    9b5a:	98 0f       	add	r25, r24
    9b5c:	99 83       	std	Y+1, r25	; 0x01
    9b5e:	88 2f       	mov	r24, r24
    9b60:	90 e0       	ldi	r25, 0x00	; 0
    9b62:	20 91 39 26 	lds	r18, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    9b66:	8b 5d       	subi	r24, 0xDB	; 219
    9b68:	98 4d       	sbci	r25, 0xD8	; 216
    9b6a:	fc 01       	movw	r30, r24
    9b6c:	20 83       	st	Z, r18
    9b6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9b70:	8f 5f       	subi	r24, 0xFF	; 255
    9b72:	8c 8f       	std	Y+28, r24	; 0x1c
    9b74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9b76:	88 30       	cpi	r24, 0x08	; 8
    9b78:	c8 f2       	brcs	.-78     	; 0x9b2c <handle_received_USB_cmd+0x1848>
    9b7a:	89 81       	ldd	r24, Y+1	; 0x01
    9b7c:	91 e0       	ldi	r25, 0x01	; 1
    9b7e:	98 0f       	add	r25, r24
    9b80:	99 83       	std	Y+1, r25	; 0x01
    9b82:	88 2f       	mov	r24, r24
    9b84:	90 e0       	ldi	r25, 0x00	; 0
    9b86:	8b 5d       	subi	r24, 0xDB	; 219
    9b88:	98 4d       	sbci	r25, 0xD8	; 216
    9b8a:	20 e2       	ldi	r18, 0x20	; 32
    9b8c:	fc 01       	movw	r30, r24
    9b8e:	20 83       	st	Z, r18
    9b90:	1d 8e       	std	Y+29, r1	; 0x1d
    9b92:	17 c0       	rjmp	.+46     	; 0x9bc2 <handle_received_USB_cmd+0x18de>
    9b94:	89 81       	ldd	r24, Y+1	; 0x01
    9b96:	91 e0       	ldi	r25, 0x01	; 1
    9b98:	98 0f       	add	r25, r24
    9b9a:	99 83       	std	Y+1, r25	; 0x01
    9b9c:	88 2f       	mov	r24, r24
    9b9e:	90 e0       	ldi	r25, 0x00	; 0
    9ba0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    9ba2:	22 2f       	mov	r18, r18
    9ba4:	30 e0       	ldi	r19, 0x00	; 0
    9ba6:	ae 01       	movw	r20, r28
    9ba8:	44 56       	subi	r20, 0x64	; 100
    9baa:	5f 4f       	sbci	r21, 0xFF	; 255
    9bac:	24 0f       	add	r18, r20
    9bae:	35 1f       	adc	r19, r21
    9bb0:	f9 01       	movw	r30, r18
    9bb2:	20 81       	ld	r18, Z
    9bb4:	8b 5d       	subi	r24, 0xDB	; 219
    9bb6:	98 4d       	sbci	r25, 0xD8	; 216
    9bb8:	fc 01       	movw	r30, r24
    9bba:	20 83       	st	Z, r18
    9bbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9bbe:	8f 5f       	subi	r24, 0xFF	; 255
    9bc0:	8d 8f       	std	Y+29, r24	; 0x1d
    9bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9bc4:	08 2f       	mov	r16, r24
    9bc6:	10 e0       	ldi	r17, 0x00	; 0
    9bc8:	ce 01       	movw	r24, r28
    9bca:	84 56       	subi	r24, 0x64	; 100
    9bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    9bce:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    9bd2:	08 17       	cp	r16, r24
    9bd4:	19 07       	cpc	r17, r25
    9bd6:	f0 f2       	brcs	.-68     	; 0x9b94 <handle_received_USB_cmd+0x18b0>
    9bd8:	89 81       	ldd	r24, Y+1	; 0x01
    9bda:	91 e0       	ldi	r25, 0x01	; 1
    9bdc:	98 0f       	add	r25, r24
    9bde:	99 83       	std	Y+1, r25	; 0x01
    9be0:	88 2f       	mov	r24, r24
    9be2:	90 e0       	ldi	r25, 0x00	; 0
    9be4:	8b 5d       	subi	r24, 0xDB	; 219
    9be6:	98 4d       	sbci	r25, 0xD8	; 216
    9be8:	2d e0       	ldi	r18, 0x0D	; 13
    9bea:	fc 01       	movw	r30, r24
    9bec:	20 83       	st	Z, r18
    9bee:	8d e0       	ldi	r24, 0x0D	; 13
    9bf0:	90 e0       	ldi	r25, 0x00	; 0
    9bf2:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    9bf6:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    9bfa:	81 e0       	ldi	r24, 0x01	; 1
    9bfc:	8a 83       	std	Y+2, r24	; 0x02
    9bfe:	b6 c6       	rjmp	.+3436   	; 0xa96c <handle_received_USB_cmd+0x2688>
    9c00:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9c04:	81 30       	cpi	r24, 0x01	; 1
    9c06:	09 f0       	breq	.+2      	; 0x9c0a <handle_received_USB_cmd+0x1926>
    9c08:	b1 c6       	rjmp	.+3426   	; 0xa96c <handle_received_USB_cmd+0x2688>
    9c0a:	1e 8e       	std	Y+30, r1	; 0x1e
    9c0c:	80 91 39 26 	lds	r24, 0x2639	; 0x802639 <receivedUSBMsg+0x2>
    9c10:	0e 94 3b 41 	call	0x8276	; 0x8276 <convert_received_motor_to_index>
    9c14:	8d ab       	std	Y+53, r24	; 0x35
    9c16:	8d a9       	ldd	r24, Y+53	; 0x35
    9c18:	0e 94 62 41 	call	0x82c4	; 0x82c4 <check_motor_index>
    9c1c:	88 23       	and	r24, r24
    9c1e:	09 f4       	brne	.+2      	; 0x9c22 <handle_received_USB_cmd+0x193e>
    9c20:	a5 c6       	rjmp	.+3402   	; 0xa96c <handle_received_USB_cmd+0x2688>
    9c22:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9c26:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9c2a:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9c2e:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9c32:	bc 01       	movw	r22, r24
    9c34:	cd 01       	movw	r24, r26
    9c36:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    9c3a:	dc 01       	movw	r26, r24
    9c3c:	cb 01       	movw	r24, r22
    9c3e:	88 2f       	mov	r24, r24
    9c40:	90 e0       	ldi	r25, 0x00	; 0
    9c42:	82 30       	cpi	r24, 0x02	; 2
    9c44:	91 05       	cpc	r25, r1
    9c46:	e9 f0       	breq	.+58     	; 0x9c82 <handle_received_USB_cmd+0x199e>
    9c48:	83 30       	cpi	r24, 0x03	; 3
    9c4a:	91 05       	cpc	r25, r1
    9c4c:	1c f4       	brge	.+6      	; 0x9c54 <handle_received_USB_cmd+0x1970>
    9c4e:	01 97       	sbiw	r24, 0x01	; 1
    9c50:	39 f0       	breq	.+14     	; 0x9c60 <handle_received_USB_cmd+0x197c>
    9c52:	4a c0       	rjmp	.+148    	; 0x9ce8 <handle_received_USB_cmd+0x1a04>
    9c54:	84 30       	cpi	r24, 0x04	; 4
    9c56:	91 05       	cpc	r25, r1
    9c58:	29 f1       	breq	.+74     	; 0x9ca4 <handle_received_USB_cmd+0x19c0>
    9c5a:	40 97       	sbiw	r24, 0x10	; 16
    9c5c:	a1 f1       	breq	.+104    	; 0x9cc6 <handle_received_USB_cmd+0x19e2>
    9c5e:	44 c0       	rjmp	.+136    	; 0x9ce8 <handle_received_USB_cmd+0x1a04>
    9c60:	8d a9       	ldd	r24, Y+53	; 0x35
    9c62:	28 2f       	mov	r18, r24
    9c64:	30 e0       	ldi	r19, 0x00	; 0
    9c66:	47 e4       	ldi	r20, 0x47	; 71
    9c68:	42 9f       	mul	r20, r18
    9c6a:	c0 01       	movw	r24, r0
    9c6c:	43 9f       	mul	r20, r19
    9c6e:	90 0d       	add	r25, r0
    9c70:	11 24       	eor	r1, r1
    9c72:	83 5d       	subi	r24, 0xD3	; 211
    9c74:	97 4d       	sbci	r25, 0xD7	; 215
    9c76:	61 e0       	ldi	r22, 0x01	; 1
    9c78:	0e 94 e8 89 	call	0x113d0	; 0x113d0 <set_motor_step_resolution>
    9c7c:	81 e0       	ldi	r24, 0x01	; 1
    9c7e:	8e 8f       	std	Y+30, r24	; 0x1e
    9c80:	35 c0       	rjmp	.+106    	; 0x9cec <handle_received_USB_cmd+0x1a08>
    9c82:	8d a9       	ldd	r24, Y+53	; 0x35
    9c84:	28 2f       	mov	r18, r24
    9c86:	30 e0       	ldi	r19, 0x00	; 0
    9c88:	47 e4       	ldi	r20, 0x47	; 71
    9c8a:	42 9f       	mul	r20, r18
    9c8c:	c0 01       	movw	r24, r0
    9c8e:	43 9f       	mul	r20, r19
    9c90:	90 0d       	add	r25, r0
    9c92:	11 24       	eor	r1, r1
    9c94:	83 5d       	subi	r24, 0xD3	; 211
    9c96:	97 4d       	sbci	r25, 0xD7	; 215
    9c98:	62 e0       	ldi	r22, 0x02	; 2
    9c9a:	0e 94 e8 89 	call	0x113d0	; 0x113d0 <set_motor_step_resolution>
    9c9e:	81 e0       	ldi	r24, 0x01	; 1
    9ca0:	8e 8f       	std	Y+30, r24	; 0x1e
    9ca2:	24 c0       	rjmp	.+72     	; 0x9cec <handle_received_USB_cmd+0x1a08>
    9ca4:	8d a9       	ldd	r24, Y+53	; 0x35
    9ca6:	28 2f       	mov	r18, r24
    9ca8:	30 e0       	ldi	r19, 0x00	; 0
    9caa:	47 e4       	ldi	r20, 0x47	; 71
    9cac:	42 9f       	mul	r20, r18
    9cae:	c0 01       	movw	r24, r0
    9cb0:	43 9f       	mul	r20, r19
    9cb2:	90 0d       	add	r25, r0
    9cb4:	11 24       	eor	r1, r1
    9cb6:	83 5d       	subi	r24, 0xD3	; 211
    9cb8:	97 4d       	sbci	r25, 0xD7	; 215
    9cba:	64 e0       	ldi	r22, 0x04	; 4
    9cbc:	0e 94 e8 89 	call	0x113d0	; 0x113d0 <set_motor_step_resolution>
    9cc0:	81 e0       	ldi	r24, 0x01	; 1
    9cc2:	8e 8f       	std	Y+30, r24	; 0x1e
    9cc4:	13 c0       	rjmp	.+38     	; 0x9cec <handle_received_USB_cmd+0x1a08>
    9cc6:	8d a9       	ldd	r24, Y+53	; 0x35
    9cc8:	28 2f       	mov	r18, r24
    9cca:	30 e0       	ldi	r19, 0x00	; 0
    9ccc:	47 e4       	ldi	r20, 0x47	; 71
    9cce:	42 9f       	mul	r20, r18
    9cd0:	c0 01       	movw	r24, r0
    9cd2:	43 9f       	mul	r20, r19
    9cd4:	90 0d       	add	r25, r0
    9cd6:	11 24       	eor	r1, r1
    9cd8:	83 5d       	subi	r24, 0xD3	; 211
    9cda:	97 4d       	sbci	r25, 0xD7	; 215
    9cdc:	60 e1       	ldi	r22, 0x10	; 16
    9cde:	0e 94 e8 89 	call	0x113d0	; 0x113d0 <set_motor_step_resolution>
    9ce2:	81 e0       	ldi	r24, 0x01	; 1
    9ce4:	8e 8f       	std	Y+30, r24	; 0x1e
    9ce6:	02 c0       	rjmp	.+4      	; 0x9cec <handle_received_USB_cmd+0x1a08>
    9ce8:	1e 8e       	std	Y+30, r1	; 0x1e
    9cea:	00 00       	nop
    9cec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9cee:	88 23       	and	r24, r24
    9cf0:	09 f4       	brne	.+2      	; 0x9cf4 <handle_received_USB_cmd+0x1a10>
    9cf2:	3c c6       	rjmp	.+3192   	; 0xa96c <handle_received_USB_cmd+0x2688>
    9cf4:	1f 8e       	std	Y+31, r1	; 0x1f
    9cf6:	14 c0       	rjmp	.+40     	; 0x9d20 <handle_received_USB_cmd+0x1a3c>
    9cf8:	89 81       	ldd	r24, Y+1	; 0x01
    9cfa:	91 e0       	ldi	r25, 0x01	; 1
    9cfc:	98 0f       	add	r25, r24
    9cfe:	99 83       	std	Y+1, r25	; 0x01
    9d00:	88 2f       	mov	r24, r24
    9d02:	90 e0       	ldi	r25, 0x00	; 0
    9d04:	2f 8d       	ldd	r18, Y+31	; 0x1f
    9d06:	22 2f       	mov	r18, r18
    9d08:	30 e0       	ldi	r19, 0x00	; 0
    9d0a:	2f 52       	subi	r18, 0x2F	; 47
    9d0c:	3f 4d       	sbci	r19, 0xDF	; 223
    9d0e:	f9 01       	movw	r30, r18
    9d10:	20 81       	ld	r18, Z
    9d12:	8b 5d       	subi	r24, 0xDB	; 219
    9d14:	98 4d       	sbci	r25, 0xD8	; 216
    9d16:	fc 01       	movw	r30, r24
    9d18:	20 83       	st	Z, r18
    9d1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9d1c:	8f 5f       	subi	r24, 0xFF	; 255
    9d1e:	8f 8f       	std	Y+31, r24	; 0x1f
    9d20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9d22:	82 30       	cpi	r24, 0x02	; 2
    9d24:	48 f3       	brcs	.-46     	; 0x9cf8 <handle_received_USB_cmd+0x1a14>
    9d26:	89 81       	ldd	r24, Y+1	; 0x01
    9d28:	91 e0       	ldi	r25, 0x01	; 1
    9d2a:	98 0f       	add	r25, r24
    9d2c:	99 83       	std	Y+1, r25	; 0x01
    9d2e:	88 2f       	mov	r24, r24
    9d30:	90 e0       	ldi	r25, 0x00	; 0
    9d32:	8b 5d       	subi	r24, 0xDB	; 219
    9d34:	98 4d       	sbci	r25, 0xD8	; 216
    9d36:	2d e0       	ldi	r18, 0x0D	; 13
    9d38:	fc 01       	movw	r30, r24
    9d3a:	20 83       	st	Z, r18
    9d3c:	8d e0       	ldi	r24, 0x0D	; 13
    9d3e:	90 e0       	ldi	r25, 0x00	; 0
    9d40:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    9d44:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    9d48:	81 e0       	ldi	r24, 0x01	; 1
    9d4a:	8a 83       	std	Y+2, r24	; 0x02
    9d4c:	0f c6       	rjmp	.+3102   	; 0xa96c <handle_received_USB_cmd+0x2688>
    9d4e:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9d52:	88 23       	and	r24, r24
    9d54:	09 f0       	breq	.+2      	; 0x9d58 <handle_received_USB_cmd+0x1a74>
    9d56:	45 c0       	rjmp	.+138    	; 0x9de2 <handle_received_USB_cmd+0x1afe>
    9d58:	18 a2       	std	Y+32, r1	; 0x20
    9d5a:	14 c0       	rjmp	.+40     	; 0x9d84 <handle_received_USB_cmd+0x1aa0>
    9d5c:	89 81       	ldd	r24, Y+1	; 0x01
    9d5e:	91 e0       	ldi	r25, 0x01	; 1
    9d60:	98 0f       	add	r25, r24
    9d62:	99 83       	std	Y+1, r25	; 0x01
    9d64:	88 2f       	mov	r24, r24
    9d66:	90 e0       	ldi	r25, 0x00	; 0
    9d68:	28 a1       	ldd	r18, Y+32	; 0x20
    9d6a:	22 2f       	mov	r18, r18
    9d6c:	30 e0       	ldi	r19, 0x00	; 0
    9d6e:	2d 5b       	subi	r18, 0xBD	; 189
    9d70:	3e 4d       	sbci	r19, 0xDE	; 222
    9d72:	f9 01       	movw	r30, r18
    9d74:	20 81       	ld	r18, Z
    9d76:	8b 5d       	subi	r24, 0xDB	; 219
    9d78:	98 4d       	sbci	r25, 0xD8	; 216
    9d7a:	fc 01       	movw	r30, r24
    9d7c:	20 83       	st	Z, r18
    9d7e:	88 a1       	ldd	r24, Y+32	; 0x20
    9d80:	8f 5f       	subi	r24, 0xFF	; 255
    9d82:	88 a3       	std	Y+32, r24	; 0x20
    9d84:	88 a1       	ldd	r24, Y+32	; 0x20
    9d86:	87 30       	cpi	r24, 0x07	; 7
    9d88:	48 f3       	brcs	.-46     	; 0x9d5c <handle_received_USB_cmd+0x1a78>
    9d8a:	89 81       	ldd	r24, Y+1	; 0x01
    9d8c:	91 e0       	ldi	r25, 0x01	; 1
    9d8e:	98 0f       	add	r25, r24
    9d90:	99 83       	std	Y+1, r25	; 0x01
    9d92:	88 2f       	mov	r24, r24
    9d94:	90 e0       	ldi	r25, 0x00	; 0
    9d96:	8b 5d       	subi	r24, 0xDB	; 219
    9d98:	98 4d       	sbci	r25, 0xD8	; 216
    9d9a:	20 e2       	ldi	r18, 0x20	; 32
    9d9c:	fc 01       	movw	r30, r24
    9d9e:	20 83       	st	Z, r18
    9da0:	89 81       	ldd	r24, Y+1	; 0x01
    9da2:	91 e0       	ldi	r25, 0x01	; 1
    9da4:	98 0f       	add	r25, r24
    9da6:	99 83       	std	Y+1, r25	; 0x01
    9da8:	88 2f       	mov	r24, r24
    9daa:	90 e0       	ldi	r25, 0x00	; 0
    9dac:	20 91 c1 21 	lds	r18, 0x21C1	; 0x8021c1 <tempProbeType>
    9db0:	20 5d       	subi	r18, 0xD0	; 208
    9db2:	8b 5d       	subi	r24, 0xDB	; 219
    9db4:	98 4d       	sbci	r25, 0xD8	; 216
    9db6:	fc 01       	movw	r30, r24
    9db8:	20 83       	st	Z, r18
    9dba:	89 81       	ldd	r24, Y+1	; 0x01
    9dbc:	91 e0       	ldi	r25, 0x01	; 1
    9dbe:	98 0f       	add	r25, r24
    9dc0:	99 83       	std	Y+1, r25	; 0x01
    9dc2:	88 2f       	mov	r24, r24
    9dc4:	90 e0       	ldi	r25, 0x00	; 0
    9dc6:	8b 5d       	subi	r24, 0xDB	; 219
    9dc8:	98 4d       	sbci	r25, 0xD8	; 216
    9dca:	2d e0       	ldi	r18, 0x0D	; 13
    9dcc:	fc 01       	movw	r30, r24
    9dce:	20 83       	st	Z, r18
    9dd0:	8e e0       	ldi	r24, 0x0E	; 14
    9dd2:	90 e0       	ldi	r25, 0x00	; 0
    9dd4:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    9dd8:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    9ddc:	81 e0       	ldi	r24, 0x01	; 1
    9dde:	8a 83       	std	Y+2, r24	; 0x02
    9de0:	c7 c5       	rjmp	.+2958   	; 0xa970 <handle_received_USB_cmd+0x268c>
    9de2:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9de6:	81 30       	cpi	r24, 0x01	; 1
    9de8:	09 f0       	breq	.+2      	; 0x9dec <handle_received_USB_cmd+0x1b08>
    9dea:	c2 c5       	rjmp	.+2948   	; 0xa970 <handle_received_USB_cmd+0x268c>
    9dec:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9df0:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9df4:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9df8:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9dfc:	20 e0       	ldi	r18, 0x00	; 0
    9dfe:	30 e0       	ldi	r19, 0x00	; 0
    9e00:	a9 01       	movw	r20, r18
    9e02:	bc 01       	movw	r22, r24
    9e04:	cd 01       	movw	r24, r26
    9e06:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    9e0a:	88 23       	and	r24, r24
    9e0c:	99 f0       	breq	.+38     	; 0x9e34 <handle_received_USB_cmd+0x1b50>
    9e0e:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9e12:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9e16:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9e1a:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9e1e:	20 e0       	ldi	r18, 0x00	; 0
    9e20:	30 e0       	ldi	r19, 0x00	; 0
    9e22:	40 e8       	ldi	r20, 0x80	; 128
    9e24:	5f e3       	ldi	r21, 0x3F	; 63
    9e26:	bc 01       	movw	r22, r24
    9e28:	cd 01       	movw	r24, r26
    9e2a:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    9e2e:	88 23       	and	r24, r24
    9e30:	09 f0       	breq	.+2      	; 0x9e34 <handle_received_USB_cmd+0x1b50>
    9e32:	9e c5       	rjmp	.+2876   	; 0xa970 <handle_received_USB_cmd+0x268c>
    9e34:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9e38:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9e3c:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9e40:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9e44:	bc 01       	movw	r22, r24
    9e46:	cd 01       	movw	r24, r26
    9e48:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    9e4c:	dc 01       	movw	r26, r24
    9e4e:	cb 01       	movw	r24, r22
    9e50:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <tempProbeType>
    9e54:	19 a2       	std	Y+33, r1	; 0x21
    9e56:	14 c0       	rjmp	.+40     	; 0x9e80 <handle_received_USB_cmd+0x1b9c>
    9e58:	89 81       	ldd	r24, Y+1	; 0x01
    9e5a:	91 e0       	ldi	r25, 0x01	; 1
    9e5c:	98 0f       	add	r25, r24
    9e5e:	99 83       	std	Y+1, r25	; 0x01
    9e60:	88 2f       	mov	r24, r24
    9e62:	90 e0       	ldi	r25, 0x00	; 0
    9e64:	29 a1       	ldd	r18, Y+33	; 0x21
    9e66:	22 2f       	mov	r18, r18
    9e68:	30 e0       	ldi	r19, 0x00	; 0
    9e6a:	2f 52       	subi	r18, 0x2F	; 47
    9e6c:	3f 4d       	sbci	r19, 0xDF	; 223
    9e6e:	f9 01       	movw	r30, r18
    9e70:	20 81       	ld	r18, Z
    9e72:	8b 5d       	subi	r24, 0xDB	; 219
    9e74:	98 4d       	sbci	r25, 0xD8	; 216
    9e76:	fc 01       	movw	r30, r24
    9e78:	20 83       	st	Z, r18
    9e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    9e7c:	8f 5f       	subi	r24, 0xFF	; 255
    9e7e:	89 a3       	std	Y+33, r24	; 0x21
    9e80:	89 a1       	ldd	r24, Y+33	; 0x21
    9e82:	82 30       	cpi	r24, 0x02	; 2
    9e84:	48 f3       	brcs	.-46     	; 0x9e58 <handle_received_USB_cmd+0x1b74>
    9e86:	89 81       	ldd	r24, Y+1	; 0x01
    9e88:	91 e0       	ldi	r25, 0x01	; 1
    9e8a:	98 0f       	add	r25, r24
    9e8c:	99 83       	std	Y+1, r25	; 0x01
    9e8e:	88 2f       	mov	r24, r24
    9e90:	90 e0       	ldi	r25, 0x00	; 0
    9e92:	8b 5d       	subi	r24, 0xDB	; 219
    9e94:	98 4d       	sbci	r25, 0xD8	; 216
    9e96:	2d e0       	ldi	r18, 0x0D	; 13
    9e98:	fc 01       	movw	r30, r24
    9e9a:	20 83       	st	Z, r18
    9e9c:	8e e0       	ldi	r24, 0x0E	; 14
    9e9e:	90 e0       	ldi	r25, 0x00	; 0
    9ea0:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    9ea4:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    9ea8:	81 e0       	ldi	r24, 0x01	; 1
    9eaa:	8a 83       	std	Y+2, r24	; 0x02
    9eac:	61 c5       	rjmp	.+2754   	; 0xa970 <handle_received_USB_cmd+0x268c>
    9eae:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9eb2:	81 30       	cpi	r24, 0x01	; 1
    9eb4:	09 f0       	breq	.+2      	; 0x9eb8 <handle_received_USB_cmd+0x1bd4>
    9eb6:	5e c5       	rjmp	.+2748   	; 0xa974 <handle_received_USB_cmd+0x2690>
    9eb8:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9ebc:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9ec0:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9ec4:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9ec8:	e1 2c       	mov	r14, r1
    9eca:	1c e7       	ldi	r17, 0x7C	; 124
    9ecc:	f1 2e       	mov	r15, r17
    9ece:	02 e1       	ldi	r16, 0x12	; 18
    9ed0:	19 e4       	ldi	r17, 0x49	; 73
    9ed2:	20 e0       	ldi	r18, 0x00	; 0
    9ed4:	30 e0       	ldi	r19, 0x00	; 0
    9ed6:	a9 01       	movw	r20, r18
    9ed8:	bc 01       	movw	r22, r24
    9eda:	cd 01       	movw	r24, r26
    9edc:	d0 d5       	rcall	.+2976   	; 0xaa7e <check_received_data_limits>
    9ede:	88 23       	and	r24, r24
    9ee0:	09 f4       	brne	.+2      	; 0x9ee4 <handle_received_USB_cmd+0x1c00>
    9ee2:	48 c5       	rjmp	.+2704   	; 0xa974 <handle_received_USB_cmd+0x2690>
    9ee4:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    9ee8:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    9eec:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    9ef0:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    9ef4:	bc 01       	movw	r22, r24
    9ef6:	cd 01       	movw	r24, r26
    9ef8:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    9efc:	dc 01       	movw	r26, r24
    9efe:	cb 01       	movw	r24, r22
    9f00:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <pumpDuration_ms>
    9f04:	90 93 a1 21 	sts	0x21A1, r25	; 0x8021a1 <pumpDuration_ms+0x1>
    9f08:	a0 93 a2 21 	sts	0x21A2, r26	; 0x8021a2 <pumpDuration_ms+0x2>
    9f0c:	b0 93 a3 21 	sts	0x21A3, r27	; 0x8021a3 <pumpDuration_ms+0x3>
    9f10:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <pumpTime_ms>
    9f14:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <pumpTime_ms+0x1>
    9f18:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <pumpTime_ms+0x2>
    9f1c:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <pumpTime_ms+0x3>
    9f20:	81 e0       	ldi	r24, 0x01	; 1
    9f22:	80 93 b6 21 	sts	0x21B6, r24	; 0x8021b6 <pumpEnabled>
    9f26:	8e e2       	ldi	r24, 0x2E	; 46
    9f28:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    9f2c:	1a a2       	std	Y+34, r1	; 0x22
    9f2e:	14 c0       	rjmp	.+40     	; 0x9f58 <handle_received_USB_cmd+0x1c74>
    9f30:	89 81       	ldd	r24, Y+1	; 0x01
    9f32:	91 e0       	ldi	r25, 0x01	; 1
    9f34:	98 0f       	add	r25, r24
    9f36:	99 83       	std	Y+1, r25	; 0x01
    9f38:	88 2f       	mov	r24, r24
    9f3a:	90 e0       	ldi	r25, 0x00	; 0
    9f3c:	2a a1       	ldd	r18, Y+34	; 0x22
    9f3e:	22 2f       	mov	r18, r18
    9f40:	30 e0       	ldi	r19, 0x00	; 0
    9f42:	2f 52       	subi	r18, 0x2F	; 47
    9f44:	3f 4d       	sbci	r19, 0xDF	; 223
    9f46:	f9 01       	movw	r30, r18
    9f48:	20 81       	ld	r18, Z
    9f4a:	8b 5d       	subi	r24, 0xDB	; 219
    9f4c:	98 4d       	sbci	r25, 0xD8	; 216
    9f4e:	fc 01       	movw	r30, r24
    9f50:	20 83       	st	Z, r18
    9f52:	8a a1       	ldd	r24, Y+34	; 0x22
    9f54:	8f 5f       	subi	r24, 0xFF	; 255
    9f56:	8a a3       	std	Y+34, r24	; 0x22
    9f58:	8a a1       	ldd	r24, Y+34	; 0x22
    9f5a:	82 30       	cpi	r24, 0x02	; 2
    9f5c:	48 f3       	brcs	.-46     	; 0x9f30 <handle_received_USB_cmd+0x1c4c>
    9f5e:	89 81       	ldd	r24, Y+1	; 0x01
    9f60:	91 e0       	ldi	r25, 0x01	; 1
    9f62:	98 0f       	add	r25, r24
    9f64:	99 83       	std	Y+1, r25	; 0x01
    9f66:	88 2f       	mov	r24, r24
    9f68:	90 e0       	ldi	r25, 0x00	; 0
    9f6a:	8b 5d       	subi	r24, 0xDB	; 219
    9f6c:	98 4d       	sbci	r25, 0xD8	; 216
    9f6e:	2d e0       	ldi	r18, 0x0D	; 13
    9f70:	fc 01       	movw	r30, r24
    9f72:	20 83       	st	Z, r18
    9f74:	8f e0       	ldi	r24, 0x0F	; 15
    9f76:	90 e0       	ldi	r25, 0x00	; 0
    9f78:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    9f7c:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    9f80:	81 e0       	ldi	r24, 0x01	; 1
    9f82:	8a 83       	std	Y+2, r24	; 0x02
    9f84:	f7 c4       	rjmp	.+2542   	; 0xa974 <handle_received_USB_cmd+0x2690>
    9f86:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    9f8a:	81 30       	cpi	r24, 0x01	; 1
    9f8c:	09 f0       	breq	.+2      	; 0x9f90 <handle_received_USB_cmd+0x1cac>
    9f8e:	f4 c4       	rjmp	.+2536   	; 0xa978 <handle_received_USB_cmd+0x2694>
    9f90:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <pumpDuration_ms>
    9f94:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <pumpDuration_ms+0x1>
    9f98:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <pumpDuration_ms+0x2>
    9f9c:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <pumpDuration_ms+0x3>
    9fa0:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <pumpTime_ms>
    9fa4:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <pumpTime_ms+0x1>
    9fa8:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <pumpTime_ms+0x2>
    9fac:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <pumpTime_ms+0x3>
    9fb0:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <pumpEnabled>
    9fb4:	8e e2       	ldi	r24, 0x2E	; 46
    9fb6:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    9fba:	1b a2       	std	Y+35, r1	; 0x23
    9fbc:	14 c0       	rjmp	.+40     	; 0x9fe6 <handle_received_USB_cmd+0x1d02>
    9fbe:	89 81       	ldd	r24, Y+1	; 0x01
    9fc0:	91 e0       	ldi	r25, 0x01	; 1
    9fc2:	98 0f       	add	r25, r24
    9fc4:	99 83       	std	Y+1, r25	; 0x01
    9fc6:	88 2f       	mov	r24, r24
    9fc8:	90 e0       	ldi	r25, 0x00	; 0
    9fca:	2b a1       	ldd	r18, Y+35	; 0x23
    9fcc:	22 2f       	mov	r18, r18
    9fce:	30 e0       	ldi	r19, 0x00	; 0
    9fd0:	2f 52       	subi	r18, 0x2F	; 47
    9fd2:	3f 4d       	sbci	r19, 0xDF	; 223
    9fd4:	f9 01       	movw	r30, r18
    9fd6:	20 81       	ld	r18, Z
    9fd8:	8b 5d       	subi	r24, 0xDB	; 219
    9fda:	98 4d       	sbci	r25, 0xD8	; 216
    9fdc:	fc 01       	movw	r30, r24
    9fde:	20 83       	st	Z, r18
    9fe0:	8b a1       	ldd	r24, Y+35	; 0x23
    9fe2:	8f 5f       	subi	r24, 0xFF	; 255
    9fe4:	8b a3       	std	Y+35, r24	; 0x23
    9fe6:	8b a1       	ldd	r24, Y+35	; 0x23
    9fe8:	82 30       	cpi	r24, 0x02	; 2
    9fea:	48 f3       	brcs	.-46     	; 0x9fbe <handle_received_USB_cmd+0x1cda>
    9fec:	89 81       	ldd	r24, Y+1	; 0x01
    9fee:	91 e0       	ldi	r25, 0x01	; 1
    9ff0:	98 0f       	add	r25, r24
    9ff2:	99 83       	std	Y+1, r25	; 0x01
    9ff4:	88 2f       	mov	r24, r24
    9ff6:	90 e0       	ldi	r25, 0x00	; 0
    9ff8:	8b 5d       	subi	r24, 0xDB	; 219
    9ffa:	98 4d       	sbci	r25, 0xD8	; 216
    9ffc:	2d e0       	ldi	r18, 0x0D	; 13
    9ffe:	fc 01       	movw	r30, r24
    a000:	20 83       	st	Z, r18
    a002:	80 e1       	ldi	r24, 0x10	; 16
    a004:	90 e0       	ldi	r25, 0x00	; 0
    a006:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a00a:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a00e:	81 e0       	ldi	r24, 0x01	; 1
    a010:	8a 83       	std	Y+2, r24	; 0x02
    a012:	b2 c4       	rjmp	.+2404   	; 0xa978 <handle_received_USB_cmd+0x2694>
    a014:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a018:	88 23       	and	r24, r24
    a01a:	09 f0       	breq	.+2      	; 0xa01e <handle_received_USB_cmd+0x1d3a>
    a01c:	af c4       	rjmp	.+2398   	; 0xa97c <handle_received_USB_cmd+0x2698>
    a01e:	ce 01       	movw	r24, r28
    a020:	81 56       	subi	r24, 0x61	; 97
    a022:	9f 4f       	sbci	r25, 0xFF	; 255
    a024:	28 e0       	ldi	r18, 0x08	; 8
    a026:	fc 01       	movw	r30, r24
    a028:	e2 2e       	mov	r14, r18
    a02a:	11 92       	st	Z+, r1
    a02c:	ea 94       	dec	r14
    a02e:	e9 f7       	brne	.-6      	; 0xa02a <handle_received_USB_cmd+0x1d46>
    a030:	20 91 a0 21 	lds	r18, 0x21A0	; 0x8021a0 <pumpDuration_ms>
    a034:	30 91 a1 21 	lds	r19, 0x21A1	; 0x8021a1 <pumpDuration_ms+0x1>
    a038:	40 91 a2 21 	lds	r20, 0x21A2	; 0x8021a2 <pumpDuration_ms+0x2>
    a03c:	50 91 a3 21 	lds	r21, 0x21A3	; 0x8021a3 <pumpDuration_ms+0x3>
    a040:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <pumpTime_ms>
    a044:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <pumpTime_ms+0x1>
    a048:	a0 91 96 21 	lds	r26, 0x2196	; 0x802196 <pumpTime_ms+0x2>
    a04c:	b0 91 97 21 	lds	r27, 0x2197	; 0x802197 <pumpTime_ms+0x3>
    a050:	28 17       	cp	r18, r24
    a052:	39 07       	cpc	r19, r25
    a054:	4a 07       	cpc	r20, r26
    a056:	5b 07       	cpc	r21, r27
    a058:	00 f1       	brcs	.+64     	; 0xa09a <handle_received_USB_cmd+0x1db6>
    a05a:	20 91 a0 21 	lds	r18, 0x21A0	; 0x8021a0 <pumpDuration_ms>
    a05e:	30 91 a1 21 	lds	r19, 0x21A1	; 0x8021a1 <pumpDuration_ms+0x1>
    a062:	40 91 a2 21 	lds	r20, 0x21A2	; 0x8021a2 <pumpDuration_ms+0x2>
    a066:	50 91 a3 21 	lds	r21, 0x21A3	; 0x8021a3 <pumpDuration_ms+0x3>
    a06a:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <pumpTime_ms>
    a06e:	90 91 95 21 	lds	r25, 0x2195	; 0x802195 <pumpTime_ms+0x1>
    a072:	a0 91 96 21 	lds	r26, 0x2196	; 0x802196 <pumpTime_ms+0x2>
    a076:	b0 91 97 21 	lds	r27, 0x2197	; 0x802197 <pumpTime_ms+0x3>
    a07a:	79 01       	movw	r14, r18
    a07c:	8a 01       	movw	r16, r20
    a07e:	e8 1a       	sub	r14, r24
    a080:	f9 0a       	sbc	r15, r25
    a082:	0a 0b       	sbc	r16, r26
    a084:	1b 0b       	sbc	r17, r27
    a086:	d8 01       	movw	r26, r16
    a088:	c7 01       	movw	r24, r14
    a08a:	9e 01       	movw	r18, r28
    a08c:	21 56       	subi	r18, 0x61	; 97
    a08e:	3f 4f       	sbci	r19, 0xFF	; 255
    a090:	a9 01       	movw	r20, r18
    a092:	bc 01       	movw	r22, r24
    a094:	cd 01       	movw	r24, r26
    a096:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <convert_int_to_string>
    a09a:	1c a2       	std	Y+36, r1	; 0x24
    a09c:	14 c0       	rjmp	.+40     	; 0xa0c6 <handle_received_USB_cmd+0x1de2>
    a09e:	89 81       	ldd	r24, Y+1	; 0x01
    a0a0:	91 e0       	ldi	r25, 0x01	; 1
    a0a2:	98 0f       	add	r25, r24
    a0a4:	99 83       	std	Y+1, r25	; 0x01
    a0a6:	88 2f       	mov	r24, r24
    a0a8:	90 e0       	ldi	r25, 0x00	; 0
    a0aa:	2c a1       	ldd	r18, Y+36	; 0x24
    a0ac:	22 2f       	mov	r18, r18
    a0ae:	30 e0       	ldi	r19, 0x00	; 0
    a0b0:	24 5a       	subi	r18, 0xA4	; 164
    a0b2:	3e 4d       	sbci	r19, 0xDE	; 222
    a0b4:	f9 01       	movw	r30, r18
    a0b6:	20 81       	ld	r18, Z
    a0b8:	8b 5d       	subi	r24, 0xDB	; 219
    a0ba:	98 4d       	sbci	r25, 0xD8	; 216
    a0bc:	fc 01       	movw	r30, r24
    a0be:	20 83       	st	Z, r18
    a0c0:	8c a1       	ldd	r24, Y+36	; 0x24
    a0c2:	8f 5f       	subi	r24, 0xFF	; 255
    a0c4:	8c a3       	std	Y+36, r24	; 0x24
    a0c6:	8c a1       	ldd	r24, Y+36	; 0x24
    a0c8:	8b 30       	cpi	r24, 0x0B	; 11
    a0ca:	48 f3       	brcs	.-46     	; 0xa09e <handle_received_USB_cmd+0x1dba>
    a0cc:	89 81       	ldd	r24, Y+1	; 0x01
    a0ce:	91 e0       	ldi	r25, 0x01	; 1
    a0d0:	98 0f       	add	r25, r24
    a0d2:	99 83       	std	Y+1, r25	; 0x01
    a0d4:	88 2f       	mov	r24, r24
    a0d6:	90 e0       	ldi	r25, 0x00	; 0
    a0d8:	8b 5d       	subi	r24, 0xDB	; 219
    a0da:	98 4d       	sbci	r25, 0xD8	; 216
    a0dc:	20 e2       	ldi	r18, 0x20	; 32
    a0de:	fc 01       	movw	r30, r24
    a0e0:	20 83       	st	Z, r18
    a0e2:	1d a2       	std	Y+37, r1	; 0x25
    a0e4:	17 c0       	rjmp	.+46     	; 0xa114 <handle_received_USB_cmd+0x1e30>
    a0e6:	89 81       	ldd	r24, Y+1	; 0x01
    a0e8:	91 e0       	ldi	r25, 0x01	; 1
    a0ea:	98 0f       	add	r25, r24
    a0ec:	99 83       	std	Y+1, r25	; 0x01
    a0ee:	88 2f       	mov	r24, r24
    a0f0:	90 e0       	ldi	r25, 0x00	; 0
    a0f2:	2d a1       	ldd	r18, Y+37	; 0x25
    a0f4:	22 2f       	mov	r18, r18
    a0f6:	30 e0       	ldi	r19, 0x00	; 0
    a0f8:	ae 01       	movw	r20, r28
    a0fa:	41 56       	subi	r20, 0x61	; 97
    a0fc:	5f 4f       	sbci	r21, 0xFF	; 255
    a0fe:	24 0f       	add	r18, r20
    a100:	35 1f       	adc	r19, r21
    a102:	f9 01       	movw	r30, r18
    a104:	20 81       	ld	r18, Z
    a106:	8b 5d       	subi	r24, 0xDB	; 219
    a108:	98 4d       	sbci	r25, 0xD8	; 216
    a10a:	fc 01       	movw	r30, r24
    a10c:	20 83       	st	Z, r18
    a10e:	8d a1       	ldd	r24, Y+37	; 0x25
    a110:	8f 5f       	subi	r24, 0xFF	; 255
    a112:	8d a3       	std	Y+37, r24	; 0x25
    a114:	8d a1       	ldd	r24, Y+37	; 0x25
    a116:	08 2f       	mov	r16, r24
    a118:	10 e0       	ldi	r17, 0x00	; 0
    a11a:	ce 01       	movw	r24, r28
    a11c:	81 56       	subi	r24, 0x61	; 97
    a11e:	9f 4f       	sbci	r25, 0xFF	; 255
    a120:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    a124:	08 17       	cp	r16, r24
    a126:	19 07       	cpc	r17, r25
    a128:	f0 f2       	brcs	.-68     	; 0xa0e6 <handle_received_USB_cmd+0x1e02>
    a12a:	89 81       	ldd	r24, Y+1	; 0x01
    a12c:	91 e0       	ldi	r25, 0x01	; 1
    a12e:	98 0f       	add	r25, r24
    a130:	99 83       	std	Y+1, r25	; 0x01
    a132:	88 2f       	mov	r24, r24
    a134:	90 e0       	ldi	r25, 0x00	; 0
    a136:	8b 5d       	subi	r24, 0xDB	; 219
    a138:	98 4d       	sbci	r25, 0xD8	; 216
    a13a:	2d e0       	ldi	r18, 0x0D	; 13
    a13c:	fc 01       	movw	r30, r24
    a13e:	20 83       	st	Z, r18
    a140:	81 e1       	ldi	r24, 0x11	; 17
    a142:	90 e0       	ldi	r25, 0x00	; 0
    a144:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a148:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a14c:	81 e0       	ldi	r24, 0x01	; 1
    a14e:	8a 83       	std	Y+2, r24	; 0x02
    a150:	15 c4       	rjmp	.+2090   	; 0xa97c <handle_received_USB_cmd+0x2698>
    a152:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a156:	88 23       	and	r24, r24
    a158:	09 f0       	breq	.+2      	; 0xa15c <handle_received_USB_cmd+0x1e78>
    a15a:	73 c0       	rjmp	.+230    	; 0xa242 <handle_received_USB_cmd+0x1f5e>
    a15c:	ce 01       	movw	r24, r28
    a15e:	89 55       	subi	r24, 0x59	; 89
    a160:	9f 4f       	sbci	r25, 0xFF	; 255
    a162:	28 e0       	ldi	r18, 0x08	; 8
    a164:	fc 01       	movw	r30, r24
    a166:	e2 2e       	mov	r14, r18
    a168:	11 92       	st	Z+, r1
    a16a:	ea 94       	dec	r14
    a16c:	e9 f7       	brne	.-6      	; 0xa168 <handle_received_USB_cmd+0x1e84>
    a16e:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <fanDuty>
    a172:	88 2f       	mov	r24, r24
    a174:	90 e0       	ldi	r25, 0x00	; 0
    a176:	a0 e0       	ldi	r26, 0x00	; 0
    a178:	b0 e0       	ldi	r27, 0x00	; 0
    a17a:	9e 01       	movw	r18, r28
    a17c:	29 55       	subi	r18, 0x59	; 89
    a17e:	3f 4f       	sbci	r19, 0xFF	; 255
    a180:	a9 01       	movw	r20, r18
    a182:	bc 01       	movw	r22, r24
    a184:	cd 01       	movw	r24, r26
    a186:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <convert_int_to_string>
    a18a:	1e a2       	std	Y+38, r1	; 0x26
    a18c:	14 c0       	rjmp	.+40     	; 0xa1b6 <handle_received_USB_cmd+0x1ed2>
    a18e:	89 81       	ldd	r24, Y+1	; 0x01
    a190:	91 e0       	ldi	r25, 0x01	; 1
    a192:	98 0f       	add	r25, r24
    a194:	99 83       	std	Y+1, r25	; 0x01
    a196:	88 2f       	mov	r24, r24
    a198:	90 e0       	ldi	r25, 0x00	; 0
    a19a:	2e a1       	ldd	r18, Y+38	; 0x26
    a19c:	22 2f       	mov	r18, r18
    a19e:	30 e0       	ldi	r19, 0x00	; 0
    a1a0:	28 59       	subi	r18, 0x98	; 152
    a1a2:	3e 4d       	sbci	r19, 0xDE	; 222
    a1a4:	f9 01       	movw	r30, r18
    a1a6:	20 81       	ld	r18, Z
    a1a8:	8b 5d       	subi	r24, 0xDB	; 219
    a1aa:	98 4d       	sbci	r25, 0xD8	; 216
    a1ac:	fc 01       	movw	r30, r24
    a1ae:	20 83       	st	Z, r18
    a1b0:	8e a1       	ldd	r24, Y+38	; 0x26
    a1b2:	8f 5f       	subi	r24, 0xFF	; 255
    a1b4:	8e a3       	std	Y+38, r24	; 0x26
    a1b6:	8e a1       	ldd	r24, Y+38	; 0x26
    a1b8:	88 30       	cpi	r24, 0x08	; 8
    a1ba:	48 f3       	brcs	.-46     	; 0xa18e <handle_received_USB_cmd+0x1eaa>
    a1bc:	89 81       	ldd	r24, Y+1	; 0x01
    a1be:	91 e0       	ldi	r25, 0x01	; 1
    a1c0:	98 0f       	add	r25, r24
    a1c2:	99 83       	std	Y+1, r25	; 0x01
    a1c4:	88 2f       	mov	r24, r24
    a1c6:	90 e0       	ldi	r25, 0x00	; 0
    a1c8:	8b 5d       	subi	r24, 0xDB	; 219
    a1ca:	98 4d       	sbci	r25, 0xD8	; 216
    a1cc:	20 e2       	ldi	r18, 0x20	; 32
    a1ce:	fc 01       	movw	r30, r24
    a1d0:	20 83       	st	Z, r18
    a1d2:	1f a2       	std	Y+39, r1	; 0x27
    a1d4:	17 c0       	rjmp	.+46     	; 0xa204 <handle_received_USB_cmd+0x1f20>
    a1d6:	89 81       	ldd	r24, Y+1	; 0x01
    a1d8:	91 e0       	ldi	r25, 0x01	; 1
    a1da:	98 0f       	add	r25, r24
    a1dc:	99 83       	std	Y+1, r25	; 0x01
    a1de:	88 2f       	mov	r24, r24
    a1e0:	90 e0       	ldi	r25, 0x00	; 0
    a1e2:	2f a1       	ldd	r18, Y+39	; 0x27
    a1e4:	22 2f       	mov	r18, r18
    a1e6:	30 e0       	ldi	r19, 0x00	; 0
    a1e8:	ae 01       	movw	r20, r28
    a1ea:	49 55       	subi	r20, 0x59	; 89
    a1ec:	5f 4f       	sbci	r21, 0xFF	; 255
    a1ee:	24 0f       	add	r18, r20
    a1f0:	35 1f       	adc	r19, r21
    a1f2:	f9 01       	movw	r30, r18
    a1f4:	20 81       	ld	r18, Z
    a1f6:	8b 5d       	subi	r24, 0xDB	; 219
    a1f8:	98 4d       	sbci	r25, 0xD8	; 216
    a1fa:	fc 01       	movw	r30, r24
    a1fc:	20 83       	st	Z, r18
    a1fe:	8f a1       	ldd	r24, Y+39	; 0x27
    a200:	8f 5f       	subi	r24, 0xFF	; 255
    a202:	8f a3       	std	Y+39, r24	; 0x27
    a204:	8f a1       	ldd	r24, Y+39	; 0x27
    a206:	08 2f       	mov	r16, r24
    a208:	10 e0       	ldi	r17, 0x00	; 0
    a20a:	ce 01       	movw	r24, r28
    a20c:	89 55       	subi	r24, 0x59	; 89
    a20e:	9f 4f       	sbci	r25, 0xFF	; 255
    a210:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    a214:	08 17       	cp	r16, r24
    a216:	19 07       	cpc	r17, r25
    a218:	f0 f2       	brcs	.-68     	; 0xa1d6 <handle_received_USB_cmd+0x1ef2>
    a21a:	89 81       	ldd	r24, Y+1	; 0x01
    a21c:	91 e0       	ldi	r25, 0x01	; 1
    a21e:	98 0f       	add	r25, r24
    a220:	99 83       	std	Y+1, r25	; 0x01
    a222:	88 2f       	mov	r24, r24
    a224:	90 e0       	ldi	r25, 0x00	; 0
    a226:	8b 5d       	subi	r24, 0xDB	; 219
    a228:	98 4d       	sbci	r25, 0xD8	; 216
    a22a:	2d e0       	ldi	r18, 0x0D	; 13
    a22c:	fc 01       	movw	r30, r24
    a22e:	20 83       	st	Z, r18
    a230:	82 e1       	ldi	r24, 0x12	; 18
    a232:	90 e0       	ldi	r25, 0x00	; 0
    a234:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a238:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a23c:	81 e0       	ldi	r24, 0x01	; 1
    a23e:	8a 83       	std	Y+2, r24	; 0x02
    a240:	9f c3       	rjmp	.+1854   	; 0xa980 <handle_received_USB_cmd+0x269c>
    a242:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a246:	81 30       	cpi	r24, 0x01	; 1
    a248:	09 f0       	breq	.+2      	; 0xa24c <handle_received_USB_cmd+0x1f68>
    a24a:	9a c3       	rjmp	.+1844   	; 0xa980 <handle_received_USB_cmd+0x269c>
    a24c:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a250:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a254:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a258:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a25c:	e1 2c       	mov	r14, r1
    a25e:	f1 2c       	mov	r15, r1
    a260:	08 ec       	ldi	r16, 0xC8	; 200
    a262:	12 e4       	ldi	r17, 0x42	; 66
    a264:	20 e0       	ldi	r18, 0x00	; 0
    a266:	30 e0       	ldi	r19, 0x00	; 0
    a268:	a9 01       	movw	r20, r18
    a26a:	bc 01       	movw	r22, r24
    a26c:	cd 01       	movw	r24, r26
    a26e:	07 d4       	rcall	.+2062   	; 0xaa7e <check_received_data_limits>
    a270:	88 23       	and	r24, r24
    a272:	09 f4       	brne	.+2      	; 0xa276 <handle_received_USB_cmd+0x1f92>
    a274:	85 c3       	rjmp	.+1802   	; 0xa980 <handle_received_USB_cmd+0x269c>
    a276:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a27a:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a27e:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a282:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a286:	bc 01       	movw	r22, r24
    a288:	cd 01       	movw	r24, r26
    a28a:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    a28e:	dc 01       	movw	r26, r24
    a290:	cb 01       	movw	r24, r22
    a292:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <fanDuty>
    a296:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a29a:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a29e:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a2a2:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a2a6:	20 e0       	ldi	r18, 0x00	; 0
    a2a8:	30 e0       	ldi	r19, 0x00	; 0
    a2aa:	a9 01       	movw	r20, r18
    a2ac:	bc 01       	movw	r22, r24
    a2ae:	cd 01       	movw	r24, r26
    a2b0:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    a2b4:	88 23       	and	r24, r24
    a2b6:	21 f0       	breq	.+8      	; 0xa2c0 <handle_received_USB_cmd+0x1fdc>
    a2b8:	81 e0       	ldi	r24, 0x01	; 1
    a2ba:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <fanEnabled>
    a2be:	05 c0       	rjmp	.+10     	; 0xa2ca <handle_received_USB_cmd+0x1fe6>
    a2c0:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <fanEnabled>
    a2c4:	82 e2       	ldi	r24, 0x22	; 34
    a2c6:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    a2ca:	18 a6       	std	Y+40, r1	; 0x28
    a2cc:	14 c0       	rjmp	.+40     	; 0xa2f6 <handle_received_USB_cmd+0x2012>
    a2ce:	89 81       	ldd	r24, Y+1	; 0x01
    a2d0:	91 e0       	ldi	r25, 0x01	; 1
    a2d2:	98 0f       	add	r25, r24
    a2d4:	99 83       	std	Y+1, r25	; 0x01
    a2d6:	88 2f       	mov	r24, r24
    a2d8:	90 e0       	ldi	r25, 0x00	; 0
    a2da:	28 a5       	ldd	r18, Y+40	; 0x28
    a2dc:	22 2f       	mov	r18, r18
    a2de:	30 e0       	ldi	r19, 0x00	; 0
    a2e0:	2f 52       	subi	r18, 0x2F	; 47
    a2e2:	3f 4d       	sbci	r19, 0xDF	; 223
    a2e4:	f9 01       	movw	r30, r18
    a2e6:	20 81       	ld	r18, Z
    a2e8:	8b 5d       	subi	r24, 0xDB	; 219
    a2ea:	98 4d       	sbci	r25, 0xD8	; 216
    a2ec:	fc 01       	movw	r30, r24
    a2ee:	20 83       	st	Z, r18
    a2f0:	88 a5       	ldd	r24, Y+40	; 0x28
    a2f2:	8f 5f       	subi	r24, 0xFF	; 255
    a2f4:	88 a7       	std	Y+40, r24	; 0x28
    a2f6:	88 a5       	ldd	r24, Y+40	; 0x28
    a2f8:	82 30       	cpi	r24, 0x02	; 2
    a2fa:	48 f3       	brcs	.-46     	; 0xa2ce <handle_received_USB_cmd+0x1fea>
    a2fc:	89 81       	ldd	r24, Y+1	; 0x01
    a2fe:	91 e0       	ldi	r25, 0x01	; 1
    a300:	98 0f       	add	r25, r24
    a302:	99 83       	std	Y+1, r25	; 0x01
    a304:	88 2f       	mov	r24, r24
    a306:	90 e0       	ldi	r25, 0x00	; 0
    a308:	8b 5d       	subi	r24, 0xDB	; 219
    a30a:	98 4d       	sbci	r25, 0xD8	; 216
    a30c:	2d e0       	ldi	r18, 0x0D	; 13
    a30e:	fc 01       	movw	r30, r24
    a310:	20 83       	st	Z, r18
    a312:	82 e1       	ldi	r24, 0x12	; 18
    a314:	90 e0       	ldi	r25, 0x00	; 0
    a316:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a31a:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a31e:	81 e0       	ldi	r24, 0x01	; 1
    a320:	8a 83       	std	Y+2, r24	; 0x02
    a322:	2e c3       	rjmp	.+1628   	; 0xa980 <handle_received_USB_cmd+0x269c>
    a324:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a328:	88 23       	and	r24, r24
    a32a:	09 f0       	breq	.+2      	; 0xa32e <handle_received_USB_cmd+0x204a>
    a32c:	75 c0       	rjmp	.+234    	; 0xa418 <handle_received_USB_cmd+0x2134>
    a32e:	ce 01       	movw	r24, r28
    a330:	81 55       	subi	r24, 0x51	; 81
    a332:	9f 4f       	sbci	r25, 0xFF	; 255
    a334:	25 e0       	ldi	r18, 0x05	; 5
    a336:	fc 01       	movw	r30, r24
    a338:	e2 2e       	mov	r14, r18
    a33a:	11 92       	st	Z+, r1
    a33c:	ea 94       	dec	r14
    a33e:	e9 f7       	brne	.-6      	; 0xa33a <handle_received_USB_cmd+0x2056>
    a340:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <WDTResetCountSet>
    a344:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <WDTResetCountSet+0x1>
    a348:	a0 91 d3 21 	lds	r26, 0x21D3	; 0x8021d3 <WDTResetCountSet+0x2>
    a34c:	b0 91 d4 21 	lds	r27, 0x21D4	; 0x8021d4 <WDTResetCountSet+0x3>
    a350:	9e 01       	movw	r18, r28
    a352:	21 55       	subi	r18, 0x51	; 81
    a354:	3f 4f       	sbci	r19, 0xFF	; 255
    a356:	a9 01       	movw	r20, r18
    a358:	bc 01       	movw	r22, r24
    a35a:	cd 01       	movw	r24, r26
    a35c:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <convert_int_to_string>
    a360:	19 a6       	std	Y+41, r1	; 0x29
    a362:	14 c0       	rjmp	.+40     	; 0xa38c <handle_received_USB_cmd+0x20a8>
    a364:	89 81       	ldd	r24, Y+1	; 0x01
    a366:	91 e0       	ldi	r25, 0x01	; 1
    a368:	98 0f       	add	r25, r24
    a36a:	99 83       	std	Y+1, r25	; 0x01
    a36c:	88 2f       	mov	r24, r24
    a36e:	90 e0       	ldi	r25, 0x00	; 0
    a370:	29 a5       	ldd	r18, Y+41	; 0x29
    a372:	22 2f       	mov	r18, r18
    a374:	30 e0       	ldi	r19, 0x00	; 0
    a376:	2f 58       	subi	r18, 0x8F	; 143
    a378:	3e 4d       	sbci	r19, 0xDE	; 222
    a37a:	f9 01       	movw	r30, r18
    a37c:	20 81       	ld	r18, Z
    a37e:	8b 5d       	subi	r24, 0xDB	; 219
    a380:	98 4d       	sbci	r25, 0xD8	; 216
    a382:	fc 01       	movw	r30, r24
    a384:	20 83       	st	Z, r18
    a386:	89 a5       	ldd	r24, Y+41	; 0x29
    a388:	8f 5f       	subi	r24, 0xFF	; 255
    a38a:	89 a7       	std	Y+41, r24	; 0x29
    a38c:	89 a5       	ldd	r24, Y+41	; 0x29
    a38e:	83 30       	cpi	r24, 0x03	; 3
    a390:	48 f3       	brcs	.-46     	; 0xa364 <handle_received_USB_cmd+0x2080>
    a392:	89 81       	ldd	r24, Y+1	; 0x01
    a394:	91 e0       	ldi	r25, 0x01	; 1
    a396:	98 0f       	add	r25, r24
    a398:	99 83       	std	Y+1, r25	; 0x01
    a39a:	88 2f       	mov	r24, r24
    a39c:	90 e0       	ldi	r25, 0x00	; 0
    a39e:	8b 5d       	subi	r24, 0xDB	; 219
    a3a0:	98 4d       	sbci	r25, 0xD8	; 216
    a3a2:	20 e2       	ldi	r18, 0x20	; 32
    a3a4:	fc 01       	movw	r30, r24
    a3a6:	20 83       	st	Z, r18
    a3a8:	1a a6       	std	Y+42, r1	; 0x2a
    a3aa:	17 c0       	rjmp	.+46     	; 0xa3da <handle_received_USB_cmd+0x20f6>
    a3ac:	89 81       	ldd	r24, Y+1	; 0x01
    a3ae:	91 e0       	ldi	r25, 0x01	; 1
    a3b0:	98 0f       	add	r25, r24
    a3b2:	99 83       	std	Y+1, r25	; 0x01
    a3b4:	88 2f       	mov	r24, r24
    a3b6:	90 e0       	ldi	r25, 0x00	; 0
    a3b8:	2a a5       	ldd	r18, Y+42	; 0x2a
    a3ba:	22 2f       	mov	r18, r18
    a3bc:	30 e0       	ldi	r19, 0x00	; 0
    a3be:	ae 01       	movw	r20, r28
    a3c0:	41 55       	subi	r20, 0x51	; 81
    a3c2:	5f 4f       	sbci	r21, 0xFF	; 255
    a3c4:	24 0f       	add	r18, r20
    a3c6:	35 1f       	adc	r19, r21
    a3c8:	f9 01       	movw	r30, r18
    a3ca:	20 81       	ld	r18, Z
    a3cc:	8b 5d       	subi	r24, 0xDB	; 219
    a3ce:	98 4d       	sbci	r25, 0xD8	; 216
    a3d0:	fc 01       	movw	r30, r24
    a3d2:	20 83       	st	Z, r18
    a3d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    a3d6:	8f 5f       	subi	r24, 0xFF	; 255
    a3d8:	8a a7       	std	Y+42, r24	; 0x2a
    a3da:	8a a5       	ldd	r24, Y+42	; 0x2a
    a3dc:	08 2f       	mov	r16, r24
    a3de:	10 e0       	ldi	r17, 0x00	; 0
    a3e0:	ce 01       	movw	r24, r28
    a3e2:	81 55       	subi	r24, 0x51	; 81
    a3e4:	9f 4f       	sbci	r25, 0xFF	; 255
    a3e6:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    a3ea:	08 17       	cp	r16, r24
    a3ec:	19 07       	cpc	r17, r25
    a3ee:	f0 f2       	brcs	.-68     	; 0xa3ac <handle_received_USB_cmd+0x20c8>
    a3f0:	89 81       	ldd	r24, Y+1	; 0x01
    a3f2:	91 e0       	ldi	r25, 0x01	; 1
    a3f4:	98 0f       	add	r25, r24
    a3f6:	99 83       	std	Y+1, r25	; 0x01
    a3f8:	88 2f       	mov	r24, r24
    a3fa:	90 e0       	ldi	r25, 0x00	; 0
    a3fc:	8b 5d       	subi	r24, 0xDB	; 219
    a3fe:	98 4d       	sbci	r25, 0xD8	; 216
    a400:	2d e0       	ldi	r18, 0x0D	; 13
    a402:	fc 01       	movw	r30, r24
    a404:	20 83       	st	Z, r18
    a406:	83 e1       	ldi	r24, 0x13	; 19
    a408:	90 e0       	ldi	r25, 0x00	; 0
    a40a:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a40e:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a412:	81 e0       	ldi	r24, 0x01	; 1
    a414:	8a 83       	std	Y+2, r24	; 0x02
    a416:	b6 c2       	rjmp	.+1388   	; 0xa984 <handle_received_USB_cmd+0x26a0>
    a418:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a41c:	81 30       	cpi	r24, 0x01	; 1
    a41e:	09 f0       	breq	.+2      	; 0xa422 <handle_received_USB_cmd+0x213e>
    a420:	b1 c2       	rjmp	.+1378   	; 0xa984 <handle_received_USB_cmd+0x26a0>
    a422:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a426:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a42a:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a42e:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a432:	e1 2c       	mov	r14, r1
    a434:	f1 2c       	mov	r15, r1
    a436:	06 e9       	ldi	r16, 0x96	; 150
    a438:	13 e4       	ldi	r17, 0x43	; 67
    a43a:	20 e0       	ldi	r18, 0x00	; 0
    a43c:	30 e0       	ldi	r19, 0x00	; 0
    a43e:	a9 01       	movw	r20, r18
    a440:	bc 01       	movw	r22, r24
    a442:	cd 01       	movw	r24, r26
    a444:	1c d3       	rcall	.+1592   	; 0xaa7e <check_received_data_limits>
    a446:	88 23       	and	r24, r24
    a448:	09 f4       	brne	.+2      	; 0xa44c <handle_received_USB_cmd+0x2168>
    a44a:	9c c2       	rjmp	.+1336   	; 0xa984 <handle_received_USB_cmd+0x26a0>
    a44c:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a450:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a454:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a458:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a45c:	20 e0       	ldi	r18, 0x00	; 0
    a45e:	30 e0       	ldi	r19, 0x00	; 0
    a460:	a9 01       	movw	r20, r18
    a462:	bc 01       	movw	r22, r24
    a464:	cd 01       	movw	r24, r26
    a466:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    a46a:	88 23       	and	r24, r24
    a46c:	99 f4       	brne	.+38     	; 0xa494 <handle_received_USB_cmd+0x21b0>
    a46e:	0e 94 f4 5d 	call	0xbbe8	; 0xbbe8 <disable_WDT>
    a472:	10 92 d1 21 	sts	0x21D1, r1	; 0x8021d1 <WDTResetCountSet>
    a476:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <WDTResetCountSet+0x1>
    a47a:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <WDTResetCountSet+0x2>
    a47e:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <WDTResetCountSet+0x3>
    a482:	10 92 cd 21 	sts	0x21CD, r1	; 0x8021cd <WDTResetCount>
    a486:	10 92 ce 21 	sts	0x21CE, r1	; 0x8021ce <WDTResetCount+0x1>
    a48a:	10 92 cf 21 	sts	0x21CF, r1	; 0x8021cf <WDTResetCount+0x2>
    a48e:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <WDTResetCount+0x3>
    a492:	3b c0       	rjmp	.+118    	; 0xa50a <handle_received_USB_cmd+0x2226>
    a494:	87 e0       	ldi	r24, 0x07	; 7
    a496:	0e 94 fe 5d 	call	0xbbfc	; 0xbbfc <set_WDT_timeout>
    a49a:	0e 94 0c 5e 	call	0xbc18	; 0xbc18 <reset_WDT>
    a49e:	0e 94 ea 5d 	call	0xbbd4	; 0xbbd4 <enable_WDT>
    a4a2:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <watchdogTime_ms>
    a4a6:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <watchdogTime_ms+0x1>
    a4aa:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <watchdogTime_ms+0x2>
    a4ae:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <watchdogTime_ms+0x3>
    a4b2:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a4b6:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a4ba:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a4be:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a4c2:	bc 01       	movw	r22, r24
    a4c4:	cd 01       	movw	r24, r26
    a4c6:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    a4ca:	dc 01       	movw	r26, r24
    a4cc:	cb 01       	movw	r24, r22
    a4ce:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <WDTResetCountSet>
    a4d2:	90 93 d2 21 	sts	0x21D2, r25	; 0x8021d2 <WDTResetCountSet+0x1>
    a4d6:	a0 93 d3 21 	sts	0x21D3, r26	; 0x8021d3 <WDTResetCountSet+0x2>
    a4da:	b0 93 d4 21 	sts	0x21D4, r27	; 0x8021d4 <WDTResetCountSet+0x3>
    a4de:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a4e2:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a4e6:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a4ea:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a4ee:	bc 01       	movw	r22, r24
    a4f0:	cd 01       	movw	r24, r26
    a4f2:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    a4f6:	dc 01       	movw	r26, r24
    a4f8:	cb 01       	movw	r24, r22
    a4fa:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <WDTResetCount>
    a4fe:	90 93 ce 21 	sts	0x21CE, r25	; 0x8021ce <WDTResetCount+0x1>
    a502:	a0 93 cf 21 	sts	0x21CF, r26	; 0x8021cf <WDTResetCount+0x2>
    a506:	b0 93 d0 21 	sts	0x21D0, r27	; 0x8021d0 <WDTResetCount+0x3>
    a50a:	1b a6       	std	Y+43, r1	; 0x2b
    a50c:	14 c0       	rjmp	.+40     	; 0xa536 <handle_received_USB_cmd+0x2252>
    a50e:	89 81       	ldd	r24, Y+1	; 0x01
    a510:	91 e0       	ldi	r25, 0x01	; 1
    a512:	98 0f       	add	r25, r24
    a514:	99 83       	std	Y+1, r25	; 0x01
    a516:	88 2f       	mov	r24, r24
    a518:	90 e0       	ldi	r25, 0x00	; 0
    a51a:	2b a5       	ldd	r18, Y+43	; 0x2b
    a51c:	22 2f       	mov	r18, r18
    a51e:	30 e0       	ldi	r19, 0x00	; 0
    a520:	2f 52       	subi	r18, 0x2F	; 47
    a522:	3f 4d       	sbci	r19, 0xDF	; 223
    a524:	f9 01       	movw	r30, r18
    a526:	20 81       	ld	r18, Z
    a528:	8b 5d       	subi	r24, 0xDB	; 219
    a52a:	98 4d       	sbci	r25, 0xD8	; 216
    a52c:	fc 01       	movw	r30, r24
    a52e:	20 83       	st	Z, r18
    a530:	8b a5       	ldd	r24, Y+43	; 0x2b
    a532:	8f 5f       	subi	r24, 0xFF	; 255
    a534:	8b a7       	std	Y+43, r24	; 0x2b
    a536:	8b a5       	ldd	r24, Y+43	; 0x2b
    a538:	82 30       	cpi	r24, 0x02	; 2
    a53a:	48 f3       	brcs	.-46     	; 0xa50e <handle_received_USB_cmd+0x222a>
    a53c:	89 81       	ldd	r24, Y+1	; 0x01
    a53e:	91 e0       	ldi	r25, 0x01	; 1
    a540:	98 0f       	add	r25, r24
    a542:	99 83       	std	Y+1, r25	; 0x01
    a544:	88 2f       	mov	r24, r24
    a546:	90 e0       	ldi	r25, 0x00	; 0
    a548:	8b 5d       	subi	r24, 0xDB	; 219
    a54a:	98 4d       	sbci	r25, 0xD8	; 216
    a54c:	2d e0       	ldi	r18, 0x0D	; 13
    a54e:	fc 01       	movw	r30, r24
    a550:	20 83       	st	Z, r18
    a552:	83 e1       	ldi	r24, 0x13	; 19
    a554:	90 e0       	ldi	r25, 0x00	; 0
    a556:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a55a:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a55e:	81 e0       	ldi	r24, 0x01	; 1
    a560:	8a 83       	std	Y+2, r24	; 0x02
    a562:	10 c2       	rjmp	.+1056   	; 0xa984 <handle_received_USB_cmd+0x26a0>
    a564:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a568:	81 30       	cpi	r24, 0x01	; 1
    a56a:	09 f0       	breq	.+2      	; 0xa56e <handle_received_USB_cmd+0x228a>
    a56c:	0d c2       	rjmp	.+1050   	; 0xa988 <handle_received_USB_cmd+0x26a4>
    a56e:	0e 94 0c 5e 	call	0xbc18	; 0xbc18 <reset_WDT>
    a572:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <watchdogTime_ms>
    a576:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <watchdogTime_ms+0x1>
    a57a:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <watchdogTime_ms+0x2>
    a57e:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <watchdogTime_ms+0x3>
    a582:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <WDTResetCountSet>
    a586:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <WDTResetCountSet+0x1>
    a58a:	a0 91 d3 21 	lds	r26, 0x21D3	; 0x8021d3 <WDTResetCountSet+0x2>
    a58e:	b0 91 d4 21 	lds	r27, 0x21D4	; 0x8021d4 <WDTResetCountSet+0x3>
    a592:	80 93 cd 21 	sts	0x21CD, r24	; 0x8021cd <WDTResetCount>
    a596:	90 93 ce 21 	sts	0x21CE, r25	; 0x8021ce <WDTResetCount+0x1>
    a59a:	a0 93 cf 21 	sts	0x21CF, r26	; 0x8021cf <WDTResetCount+0x2>
    a59e:	b0 93 d0 21 	sts	0x21D0, r27	; 0x8021d0 <WDTResetCount+0x3>
    a5a2:	1c a6       	std	Y+44, r1	; 0x2c
    a5a4:	14 c0       	rjmp	.+40     	; 0xa5ce <handle_received_USB_cmd+0x22ea>
    a5a6:	89 81       	ldd	r24, Y+1	; 0x01
    a5a8:	91 e0       	ldi	r25, 0x01	; 1
    a5aa:	98 0f       	add	r25, r24
    a5ac:	99 83       	std	Y+1, r25	; 0x01
    a5ae:	88 2f       	mov	r24, r24
    a5b0:	90 e0       	ldi	r25, 0x00	; 0
    a5b2:	2c a5       	ldd	r18, Y+44	; 0x2c
    a5b4:	22 2f       	mov	r18, r18
    a5b6:	30 e0       	ldi	r19, 0x00	; 0
    a5b8:	2f 52       	subi	r18, 0x2F	; 47
    a5ba:	3f 4d       	sbci	r19, 0xDF	; 223
    a5bc:	f9 01       	movw	r30, r18
    a5be:	20 81       	ld	r18, Z
    a5c0:	8b 5d       	subi	r24, 0xDB	; 219
    a5c2:	98 4d       	sbci	r25, 0xD8	; 216
    a5c4:	fc 01       	movw	r30, r24
    a5c6:	20 83       	st	Z, r18
    a5c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    a5ca:	8f 5f       	subi	r24, 0xFF	; 255
    a5cc:	8c a7       	std	Y+44, r24	; 0x2c
    a5ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    a5d0:	82 30       	cpi	r24, 0x02	; 2
    a5d2:	48 f3       	brcs	.-46     	; 0xa5a6 <handle_received_USB_cmd+0x22c2>
    a5d4:	89 81       	ldd	r24, Y+1	; 0x01
    a5d6:	91 e0       	ldi	r25, 0x01	; 1
    a5d8:	98 0f       	add	r25, r24
    a5da:	99 83       	std	Y+1, r25	; 0x01
    a5dc:	88 2f       	mov	r24, r24
    a5de:	90 e0       	ldi	r25, 0x00	; 0
    a5e0:	8b 5d       	subi	r24, 0xDB	; 219
    a5e2:	98 4d       	sbci	r25, 0xD8	; 216
    a5e4:	2d e0       	ldi	r18, 0x0D	; 13
    a5e6:	fc 01       	movw	r30, r24
    a5e8:	20 83       	st	Z, r18
    a5ea:	81 e0       	ldi	r24, 0x01	; 1
    a5ec:	8a 83       	std	Y+2, r24	; 0x02
    a5ee:	cc c1       	rjmp	.+920    	; 0xa988 <handle_received_USB_cmd+0x26a4>
    a5f0:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a5f4:	88 23       	and	r24, r24
    a5f6:	09 f0       	breq	.+2      	; 0xa5fa <handle_received_USB_cmd+0x2316>
    a5f8:	4a c0       	rjmp	.+148    	; 0xa68e <handle_received_USB_cmd+0x23aa>
    a5fa:	ce 01       	movw	r24, r28
    a5fc:	84 54       	subi	r24, 0x44	; 68
    a5fe:	9f 4f       	sbci	r25, 0xFF	; 255
    a600:	20 e8       	ldi	r18, 0x80	; 128
    a602:	fc 01       	movw	r30, r24
    a604:	e2 2e       	mov	r14, r18
    a606:	11 92       	st	Z+, r1
    a608:	ea 94       	dec	r14
    a60a:	e9 f7       	brne	.-6      	; 0xa606 <handle_received_USB_cmd+0x2322>
    a60c:	ce 01       	movw	r24, r28
    a60e:	84 54       	subi	r24, 0x44	; 68
    a610:	9f 4f       	sbci	r25, 0xFF	; 255
    a612:	00 e8       	ldi	r16, 0x80	; 128
    a614:	10 e0       	ldi	r17, 0x00	; 0
    a616:	20 e0       	ldi	r18, 0x00	; 0
    a618:	30 e0       	ldi	r19, 0x00	; 0
    a61a:	ac 01       	movw	r20, r24
    a61c:	60 e0       	ldi	r22, 0x00	; 0
    a61e:	70 e0       	ldi	r23, 0x00	; 0
    a620:	cb 01       	movw	r24, r22
    a622:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <read_from_NVM>
    a626:	1d a6       	std	Y+45, r1	; 0x2d
    a628:	1e a6       	std	Y+46, r1	; 0x2e
    a62a:	18 c0       	rjmp	.+48     	; 0xa65c <handle_received_USB_cmd+0x2378>
    a62c:	89 81       	ldd	r24, Y+1	; 0x01
    a62e:	91 e0       	ldi	r25, 0x01	; 1
    a630:	98 0f       	add	r25, r24
    a632:	99 83       	std	Y+1, r25	; 0x01
    a634:	88 2f       	mov	r24, r24
    a636:	90 e0       	ldi	r25, 0x00	; 0
    a638:	ae 01       	movw	r20, r28
    a63a:	44 54       	subi	r20, 0x44	; 68
    a63c:	5f 4f       	sbci	r21, 0xFF	; 255
    a63e:	2d a5       	ldd	r18, Y+45	; 0x2d
    a640:	3e a5       	ldd	r19, Y+46	; 0x2e
    a642:	24 0f       	add	r18, r20
    a644:	35 1f       	adc	r19, r21
    a646:	f9 01       	movw	r30, r18
    a648:	20 81       	ld	r18, Z
    a64a:	8b 5d       	subi	r24, 0xDB	; 219
    a64c:	98 4d       	sbci	r25, 0xD8	; 216
    a64e:	fc 01       	movw	r30, r24
    a650:	20 83       	st	Z, r18
    a652:	8d a5       	ldd	r24, Y+45	; 0x2d
    a654:	9e a5       	ldd	r25, Y+46	; 0x2e
    a656:	01 96       	adiw	r24, 0x01	; 1
    a658:	8d a7       	std	Y+45, r24	; 0x2d
    a65a:	9e a7       	std	Y+46, r25	; 0x2e
    a65c:	8d a5       	ldd	r24, Y+45	; 0x2d
    a65e:	9e a5       	ldd	r25, Y+46	; 0x2e
    a660:	80 38       	cpi	r24, 0x80	; 128
    a662:	91 05       	cpc	r25, r1
    a664:	18 f3       	brcs	.-58     	; 0xa62c <handle_received_USB_cmd+0x2348>
    a666:	89 81       	ldd	r24, Y+1	; 0x01
    a668:	91 e0       	ldi	r25, 0x01	; 1
    a66a:	98 0f       	add	r25, r24
    a66c:	99 83       	std	Y+1, r25	; 0x01
    a66e:	88 2f       	mov	r24, r24
    a670:	90 e0       	ldi	r25, 0x00	; 0
    a672:	8b 5d       	subi	r24, 0xDB	; 219
    a674:	98 4d       	sbci	r25, 0xD8	; 216
    a676:	2d e0       	ldi	r18, 0x0D	; 13
    a678:	fc 01       	movw	r30, r24
    a67a:	20 83       	st	Z, r18
    a67c:	85 e1       	ldi	r24, 0x15	; 21
    a67e:	90 e0       	ldi	r25, 0x00	; 0
    a680:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a684:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a688:	81 e0       	ldi	r24, 0x01	; 1
    a68a:	8a 83       	std	Y+2, r24	; 0x02
    a68c:	7f c1       	rjmp	.+766    	; 0xa98c <handle_received_USB_cmd+0x26a8>
    a68e:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a692:	81 30       	cpi	r24, 0x01	; 1
    a694:	09 f0       	breq	.+2      	; 0xa698 <handle_received_USB_cmd+0x23b4>
    a696:	7a c1       	rjmp	.+756    	; 0xa98c <handle_received_USB_cmd+0x26a8>
    a698:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a69c:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a6a0:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a6a4:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a6a8:	e1 2c       	mov	r14, r1
    a6aa:	f1 2c       	mov	r15, r1
    a6ac:	00 e0       	ldi	r16, 0x00	; 0
    a6ae:	13 e4       	ldi	r17, 0x43	; 67
    a6b0:	20 e0       	ldi	r18, 0x00	; 0
    a6b2:	30 e0       	ldi	r19, 0x00	; 0
    a6b4:	a9 01       	movw	r20, r18
    a6b6:	bc 01       	movw	r22, r24
    a6b8:	cd 01       	movw	r24, r26
    a6ba:	e1 d1       	rcall	.+962    	; 0xaa7e <check_received_data_limits>
    a6bc:	88 23       	and	r24, r24
    a6be:	b9 f0       	breq	.+46     	; 0xa6ee <handle_received_USB_cmd+0x240a>
    a6c0:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a6c4:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a6c8:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a6cc:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a6d0:	bc 01       	movw	r22, r24
    a6d2:	cd 01       	movw	r24, r26
    a6d4:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    a6d8:	dc 01       	movw	r26, r24
    a6da:	cb 01       	movw	r24, r22
    a6dc:	8c 01       	movw	r16, r24
    a6de:	9d 01       	movw	r18, r26
    a6e0:	4f e5       	ldi	r20, 0x5F	; 95
    a6e2:	56 e2       	ldi	r21, 0x26	; 38
    a6e4:	60 e0       	ldi	r22, 0x00	; 0
    a6e6:	70 e0       	ldi	r23, 0x00	; 0
    a6e8:	cb 01       	movw	r24, r22
    a6ea:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <write_to_NVM>
    a6ee:	1f a6       	std	Y+47, r1	; 0x2f
    a6f0:	14 c0       	rjmp	.+40     	; 0xa71a <handle_received_USB_cmd+0x2436>
    a6f2:	89 81       	ldd	r24, Y+1	; 0x01
    a6f4:	91 e0       	ldi	r25, 0x01	; 1
    a6f6:	98 0f       	add	r25, r24
    a6f8:	99 83       	std	Y+1, r25	; 0x01
    a6fa:	88 2f       	mov	r24, r24
    a6fc:	90 e0       	ldi	r25, 0x00	; 0
    a6fe:	2f a5       	ldd	r18, Y+47	; 0x2f
    a700:	22 2f       	mov	r18, r18
    a702:	30 e0       	ldi	r19, 0x00	; 0
    a704:	2f 52       	subi	r18, 0x2F	; 47
    a706:	3f 4d       	sbci	r19, 0xDF	; 223
    a708:	f9 01       	movw	r30, r18
    a70a:	20 81       	ld	r18, Z
    a70c:	8b 5d       	subi	r24, 0xDB	; 219
    a70e:	98 4d       	sbci	r25, 0xD8	; 216
    a710:	fc 01       	movw	r30, r24
    a712:	20 83       	st	Z, r18
    a714:	8f a5       	ldd	r24, Y+47	; 0x2f
    a716:	8f 5f       	subi	r24, 0xFF	; 255
    a718:	8f a7       	std	Y+47, r24	; 0x2f
    a71a:	8f a5       	ldd	r24, Y+47	; 0x2f
    a71c:	82 30       	cpi	r24, 0x02	; 2
    a71e:	48 f3       	brcs	.-46     	; 0xa6f2 <handle_received_USB_cmd+0x240e>
    a720:	89 81       	ldd	r24, Y+1	; 0x01
    a722:	91 e0       	ldi	r25, 0x01	; 1
    a724:	98 0f       	add	r25, r24
    a726:	99 83       	std	Y+1, r25	; 0x01
    a728:	88 2f       	mov	r24, r24
    a72a:	90 e0       	ldi	r25, 0x00	; 0
    a72c:	8b 5d       	subi	r24, 0xDB	; 219
    a72e:	98 4d       	sbci	r25, 0xD8	; 216
    a730:	2d e0       	ldi	r18, 0x0D	; 13
    a732:	fc 01       	movw	r30, r24
    a734:	20 83       	st	Z, r18
    a736:	85 e1       	ldi	r24, 0x15	; 21
    a738:	90 e0       	ldi	r25, 0x00	; 0
    a73a:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a73e:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a742:	81 e0       	ldi	r24, 0x01	; 1
    a744:	8a 83       	std	Y+2, r24	; 0x02
    a746:	22 c1       	rjmp	.+580    	; 0xa98c <handle_received_USB_cmd+0x26a8>
    a748:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a74c:	88 23       	and	r24, r24
    a74e:	09 f0       	breq	.+2      	; 0xa752 <handle_received_USB_cmd+0x246e>
    a750:	88 c0       	rjmp	.+272    	; 0xa862 <handle_received_USB_cmd+0x257e>
    a752:	ce 01       	movw	r24, r28
    a754:	8c 54       	subi	r24, 0x4C	; 76
    a756:	9f 4f       	sbci	r25, 0xFF	; 255
    a758:	28 e0       	ldi	r18, 0x08	; 8
    a75a:	fc 01       	movw	r30, r24
    a75c:	e2 2e       	mov	r14, r18
    a75e:	11 92       	st	Z+, r1
    a760:	ea 94       	dec	r14
    a762:	e9 f7       	brne	.-6      	; 0xa75e <handle_received_USB_cmd+0x247a>
    a764:	61 e0       	ldi	r22, 0x01	; 1
    a766:	80 e4       	ldi	r24, 0x40	; 64
    a768:	99 e0       	ldi	r25, 0x09	; 9
    a76a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <tc_read_cc>
    a76e:	8e af       	std	Y+62, r24	; 0x3e
    a770:	9f af       	std	Y+63, r25	; 0x3f
    a772:	8e ad       	ldd	r24, Y+62	; 0x3e
    a774:	9f ad       	ldd	r25, Y+63	; 0x3f
    a776:	9c 01       	movw	r18, r24
    a778:	ad ec       	ldi	r26, 0xCD	; 205
    a77a:	bc ec       	ldi	r27, 0xCC	; 204
    a77c:	0e 94 50 b7 	call	0x16ea0	; 0x16ea0 <__umulhisi3>
    a780:	96 95       	lsr	r25
    a782:	87 95       	ror	r24
    a784:	96 95       	lsr	r25
    a786:	87 95       	ror	r24
    a788:	24 e6       	ldi	r18, 0x64	; 100
    a78a:	30 e0       	ldi	r19, 0x00	; 0
    a78c:	89 01       	movw	r16, r18
    a78e:	08 1b       	sub	r16, r24
    a790:	19 0b       	sbc	r17, r25
    a792:	c8 01       	movw	r24, r16
    a794:	cc 01       	movw	r24, r24
    a796:	a0 e0       	ldi	r26, 0x00	; 0
    a798:	b0 e0       	ldi	r27, 0x00	; 0
    a79a:	9e 01       	movw	r18, r28
    a79c:	2c 54       	subi	r18, 0x4C	; 76
    a79e:	3f 4f       	sbci	r19, 0xFF	; 255
    a7a0:	a9 01       	movw	r20, r18
    a7a2:	bc 01       	movw	r22, r24
    a7a4:	cd 01       	movw	r24, r26
    a7a6:	0e 94 fa 3f 	call	0x7ff4	; 0x7ff4 <convert_int_to_string>
    a7aa:	18 aa       	std	Y+48, r1	; 0x30
    a7ac:	14 c0       	rjmp	.+40     	; 0xa7d6 <handle_received_USB_cmd+0x24f2>
    a7ae:	89 81       	ldd	r24, Y+1	; 0x01
    a7b0:	91 e0       	ldi	r25, 0x01	; 1
    a7b2:	98 0f       	add	r25, r24
    a7b4:	99 83       	std	Y+1, r25	; 0x01
    a7b6:	88 2f       	mov	r24, r24
    a7b8:	90 e0       	ldi	r25, 0x00	; 0
    a7ba:	28 a9       	ldd	r18, Y+48	; 0x30
    a7bc:	22 2f       	mov	r18, r18
    a7be:	30 e0       	ldi	r19, 0x00	; 0
    a7c0:	2a 57       	subi	r18, 0x7A	; 122
    a7c2:	3e 4d       	sbci	r19, 0xDE	; 222
    a7c4:	f9 01       	movw	r30, r18
    a7c6:	20 81       	ld	r18, Z
    a7c8:	8b 5d       	subi	r24, 0xDB	; 219
    a7ca:	98 4d       	sbci	r25, 0xD8	; 216
    a7cc:	fc 01       	movw	r30, r24
    a7ce:	20 83       	st	Z, r18
    a7d0:	88 a9       	ldd	r24, Y+48	; 0x30
    a7d2:	8f 5f       	subi	r24, 0xFF	; 255
    a7d4:	88 ab       	std	Y+48, r24	; 0x30
    a7d6:	88 a9       	ldd	r24, Y+48	; 0x30
    a7d8:	84 30       	cpi	r24, 0x04	; 4
    a7da:	48 f3       	brcs	.-46     	; 0xa7ae <handle_received_USB_cmd+0x24ca>
    a7dc:	89 81       	ldd	r24, Y+1	; 0x01
    a7de:	91 e0       	ldi	r25, 0x01	; 1
    a7e0:	98 0f       	add	r25, r24
    a7e2:	99 83       	std	Y+1, r25	; 0x01
    a7e4:	88 2f       	mov	r24, r24
    a7e6:	90 e0       	ldi	r25, 0x00	; 0
    a7e8:	8b 5d       	subi	r24, 0xDB	; 219
    a7ea:	98 4d       	sbci	r25, 0xD8	; 216
    a7ec:	20 e2       	ldi	r18, 0x20	; 32
    a7ee:	fc 01       	movw	r30, r24
    a7f0:	20 83       	st	Z, r18
    a7f2:	19 aa       	std	Y+49, r1	; 0x31
    a7f4:	17 c0       	rjmp	.+46     	; 0xa824 <handle_received_USB_cmd+0x2540>
    a7f6:	89 81       	ldd	r24, Y+1	; 0x01
    a7f8:	91 e0       	ldi	r25, 0x01	; 1
    a7fa:	98 0f       	add	r25, r24
    a7fc:	99 83       	std	Y+1, r25	; 0x01
    a7fe:	88 2f       	mov	r24, r24
    a800:	90 e0       	ldi	r25, 0x00	; 0
    a802:	29 a9       	ldd	r18, Y+49	; 0x31
    a804:	22 2f       	mov	r18, r18
    a806:	30 e0       	ldi	r19, 0x00	; 0
    a808:	ae 01       	movw	r20, r28
    a80a:	4c 54       	subi	r20, 0x4C	; 76
    a80c:	5f 4f       	sbci	r21, 0xFF	; 255
    a80e:	24 0f       	add	r18, r20
    a810:	35 1f       	adc	r19, r21
    a812:	f9 01       	movw	r30, r18
    a814:	20 81       	ld	r18, Z
    a816:	8b 5d       	subi	r24, 0xDB	; 219
    a818:	98 4d       	sbci	r25, 0xD8	; 216
    a81a:	fc 01       	movw	r30, r24
    a81c:	20 83       	st	Z, r18
    a81e:	89 a9       	ldd	r24, Y+49	; 0x31
    a820:	8f 5f       	subi	r24, 0xFF	; 255
    a822:	89 ab       	std	Y+49, r24	; 0x31
    a824:	89 a9       	ldd	r24, Y+49	; 0x31
    a826:	08 2f       	mov	r16, r24
    a828:	10 e0       	ldi	r17, 0x00	; 0
    a82a:	ce 01       	movw	r24, r28
    a82c:	8c 54       	subi	r24, 0x4C	; 76
    a82e:	9f 4f       	sbci	r25, 0xFF	; 255
    a830:	0e 94 fc b7 	call	0x16ff8	; 0x16ff8 <strlen>
    a834:	08 17       	cp	r16, r24
    a836:	19 07       	cpc	r17, r25
    a838:	f0 f2       	brcs	.-68     	; 0xa7f6 <handle_received_USB_cmd+0x2512>
    a83a:	89 81       	ldd	r24, Y+1	; 0x01
    a83c:	91 e0       	ldi	r25, 0x01	; 1
    a83e:	98 0f       	add	r25, r24
    a840:	99 83       	std	Y+1, r25	; 0x01
    a842:	88 2f       	mov	r24, r24
    a844:	90 e0       	ldi	r25, 0x00	; 0
    a846:	8b 5d       	subi	r24, 0xDB	; 219
    a848:	98 4d       	sbci	r25, 0xD8	; 216
    a84a:	2d e0       	ldi	r18, 0x0D	; 13
    a84c:	fc 01       	movw	r30, r24
    a84e:	20 83       	st	Z, r18
    a850:	86 e1       	ldi	r24, 0x16	; 22
    a852:	90 e0       	ldi	r25, 0x00	; 0
    a854:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a858:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a85c:	81 e0       	ldi	r24, 0x01	; 1
    a85e:	8a 83       	std	Y+2, r24	; 0x02
    a860:	97 c0       	rjmp	.+302    	; 0xa990 <handle_received_USB_cmd+0x26ac>
    a862:	80 91 3d 26 	lds	r24, 0x263D	; 0x80263d <receivedUSBMsg+0x6>
    a866:	81 30       	cpi	r24, 0x01	; 1
    a868:	09 f0       	breq	.+2      	; 0xa86c <handle_received_USB_cmd+0x2588>
    a86a:	92 c0       	rjmp	.+292    	; 0xa990 <handle_received_USB_cmd+0x26ac>
    a86c:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a870:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a874:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a878:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a87c:	e1 2c       	mov	r14, r1
    a87e:	f1 2c       	mov	r15, r1
    a880:	08 ec       	ldi	r16, 0xC8	; 200
    a882:	12 e4       	ldi	r17, 0x42	; 66
    a884:	20 e0       	ldi	r18, 0x00	; 0
    a886:	30 e0       	ldi	r19, 0x00	; 0
    a888:	a9 01       	movw	r20, r18
    a88a:	bc 01       	movw	r22, r24
    a88c:	cd 01       	movw	r24, r26
    a88e:	f7 d0       	rcall	.+494    	; 0xaa7e <check_received_data_limits>
    a890:	88 23       	and	r24, r24
    a892:	09 f4       	brne	.+2      	; 0xa896 <handle_received_USB_cmd+0x25b2>
    a894:	7d c0       	rjmp	.+250    	; 0xa990 <handle_received_USB_cmd+0x26ac>
    a896:	80 91 15 27 	lds	r24, 0x2715	; 0x802715 <receivedUSBMsg+0xde>
    a89a:	90 91 16 27 	lds	r25, 0x2716	; 0x802716 <receivedUSBMsg+0xdf>
    a89e:	a0 91 17 27 	lds	r26, 0x2717	; 0x802717 <receivedUSBMsg+0xe0>
    a8a2:	b0 91 18 27 	lds	r27, 0x2718	; 0x802718 <receivedUSBMsg+0xe1>
    a8a6:	20 e0       	ldi	r18, 0x00	; 0
    a8a8:	30 e0       	ldi	r19, 0x00	; 0
    a8aa:	40 ea       	ldi	r20, 0xA0	; 160
    a8ac:	50 e4       	ldi	r21, 0x40	; 64
    a8ae:	bc 01       	movw	r22, r24
    a8b0:	cd 01       	movw	r24, r26
    a8b2:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    a8b6:	dc 01       	movw	r26, r24
    a8b8:	cb 01       	movw	r24, r22
    a8ba:	9c 01       	movw	r18, r24
    a8bc:	ad 01       	movw	r20, r26
    a8be:	60 e0       	ldi	r22, 0x00	; 0
    a8c0:	70 e8       	ldi	r23, 0x80	; 128
    a8c2:	8a ef       	ldi	r24, 0xFA	; 250
    a8c4:	93 e4       	ldi	r25, 0x43	; 67
    a8c6:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
    a8ca:	dc 01       	movw	r26, r24
    a8cc:	cb 01       	movw	r24, r22
    a8ce:	bc 01       	movw	r22, r24
    a8d0:	cd 01       	movw	r24, r26
    a8d2:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    a8d6:	dc 01       	movw	r26, r24
    a8d8:	cb 01       	movw	r24, r22
    a8da:	ac 01       	movw	r20, r24
    a8dc:	61 e0       	ldi	r22, 0x01	; 1
    a8de:	80 e4       	ldi	r24, 0x40	; 64
    a8e0:	99 e0       	ldi	r25, 0x09	; 9
    a8e2:	0e 94 3e 32 	call	0x647c	; 0x647c <tc_write_cc>
    a8e6:	1a aa       	std	Y+50, r1	; 0x32
    a8e8:	14 c0       	rjmp	.+40     	; 0xa912 <handle_received_USB_cmd+0x262e>
    a8ea:	89 81       	ldd	r24, Y+1	; 0x01
    a8ec:	91 e0       	ldi	r25, 0x01	; 1
    a8ee:	98 0f       	add	r25, r24
    a8f0:	99 83       	std	Y+1, r25	; 0x01
    a8f2:	88 2f       	mov	r24, r24
    a8f4:	90 e0       	ldi	r25, 0x00	; 0
    a8f6:	2a a9       	ldd	r18, Y+50	; 0x32
    a8f8:	22 2f       	mov	r18, r18
    a8fa:	30 e0       	ldi	r19, 0x00	; 0
    a8fc:	2f 52       	subi	r18, 0x2F	; 47
    a8fe:	3f 4d       	sbci	r19, 0xDF	; 223
    a900:	f9 01       	movw	r30, r18
    a902:	20 81       	ld	r18, Z
    a904:	8b 5d       	subi	r24, 0xDB	; 219
    a906:	98 4d       	sbci	r25, 0xD8	; 216
    a908:	fc 01       	movw	r30, r24
    a90a:	20 83       	st	Z, r18
    a90c:	8a a9       	ldd	r24, Y+50	; 0x32
    a90e:	8f 5f       	subi	r24, 0xFF	; 255
    a910:	8a ab       	std	Y+50, r24	; 0x32
    a912:	8a a9       	ldd	r24, Y+50	; 0x32
    a914:	82 30       	cpi	r24, 0x02	; 2
    a916:	48 f3       	brcs	.-46     	; 0xa8ea <handle_received_USB_cmd+0x2606>
    a918:	89 81       	ldd	r24, Y+1	; 0x01
    a91a:	91 e0       	ldi	r25, 0x01	; 1
    a91c:	98 0f       	add	r25, r24
    a91e:	99 83       	std	Y+1, r25	; 0x01
    a920:	88 2f       	mov	r24, r24
    a922:	90 e0       	ldi	r25, 0x00	; 0
    a924:	8b 5d       	subi	r24, 0xDB	; 219
    a926:	98 4d       	sbci	r25, 0xD8	; 216
    a928:	2d e0       	ldi	r18, 0x0D	; 13
    a92a:	fc 01       	movw	r30, r24
    a92c:	20 83       	st	Z, r18
    a92e:	86 e1       	ldi	r24, 0x16	; 22
    a930:	90 e0       	ldi	r25, 0x00	; 0
    a932:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <LEDBlinkCount>
    a936:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <LEDBlinkCount+0x1>
    a93a:	81 e0       	ldi	r24, 0x01	; 1
    a93c:	8a 83       	std	Y+2, r24	; 0x02
    a93e:	28 c0       	rjmp	.+80     	; 0xa990 <handle_received_USB_cmd+0x26ac>
    a940:	1a 82       	std	Y+2, r1	; 0x02
    a942:	27 c0       	rjmp	.+78     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a944:	00 00       	nop
    a946:	25 c0       	rjmp	.+74     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a948:	00 00       	nop
    a94a:	23 c0       	rjmp	.+70     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a94c:	00 00       	nop
    a94e:	21 c0       	rjmp	.+66     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a950:	00 00       	nop
    a952:	1f c0       	rjmp	.+62     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a954:	00 00       	nop
    a956:	1d c0       	rjmp	.+58     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a958:	00 00       	nop
    a95a:	1b c0       	rjmp	.+54     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a95c:	00 00       	nop
    a95e:	19 c0       	rjmp	.+50     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a960:	00 00       	nop
    a962:	17 c0       	rjmp	.+46     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a964:	00 00       	nop
    a966:	15 c0       	rjmp	.+42     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a968:	00 00       	nop
    a96a:	13 c0       	rjmp	.+38     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a96c:	00 00       	nop
    a96e:	11 c0       	rjmp	.+34     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a970:	00 00       	nop
    a972:	0f c0       	rjmp	.+30     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a974:	00 00       	nop
    a976:	0d c0       	rjmp	.+26     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a978:	00 00       	nop
    a97a:	0b c0       	rjmp	.+22     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a97c:	00 00       	nop
    a97e:	09 c0       	rjmp	.+18     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a980:	00 00       	nop
    a982:	07 c0       	rjmp	.+14     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a984:	00 00       	nop
    a986:	05 c0       	rjmp	.+10     	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a988:	00 00       	nop
    a98a:	03 c0       	rjmp	.+6      	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a98c:	00 00       	nop
    a98e:	01 c0       	rjmp	.+2      	; 0xa992 <handle_received_USB_cmd+0x26ae>
    a990:	00 00       	nop
    a992:	8a 81       	ldd	r24, Y+2	; 0x02
    a994:	88 23       	and	r24, r24
    a996:	49 f0       	breq	.+18     	; 0xa9aa <handle_received_USB_cmd+0x26c6>
    a998:	69 81       	ldd	r22, Y+1	; 0x01
    a99a:	85 e2       	ldi	r24, 0x25	; 37
    a99c:	97 e2       	ldi	r25, 0x27	; 39
    a99e:	0e 94 ff 82 	call	0x105fe	; 0x105fe <send_cmd_response>
    a9a2:	87 e0       	ldi	r24, 0x07	; 7
    a9a4:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <LEDState>
    a9a8:	5b c0       	rjmp	.+182    	; 0xaa60 <handle_received_USB_cmd+0x277c>
    a9aa:	db d1       	rcall	.+950    	; 0xad62 <flush_USB_tx_buffer>
    a9ac:	19 82       	std	Y+1, r1	; 0x01
    a9ae:	1b aa       	std	Y+51, r1	; 0x33
    a9b0:	14 c0       	rjmp	.+40     	; 0xa9da <handle_received_USB_cmd+0x26f6>
    a9b2:	89 81       	ldd	r24, Y+1	; 0x01
    a9b4:	91 e0       	ldi	r25, 0x01	; 1
    a9b6:	98 0f       	add	r25, r24
    a9b8:	99 83       	std	Y+1, r25	; 0x01
    a9ba:	88 2f       	mov	r24, r24
    a9bc:	90 e0       	ldi	r25, 0x00	; 0
    a9be:	2b a9       	ldd	r18, Y+51	; 0x33
    a9c0:	22 2f       	mov	r18, r18
    a9c2:	30 e0       	ldi	r19, 0x00	; 0
    a9c4:	2c 52       	subi	r18, 0x2C	; 44
    a9c6:	3f 4d       	sbci	r19, 0xDF	; 223
    a9c8:	f9 01       	movw	r30, r18
    a9ca:	20 81       	ld	r18, Z
    a9cc:	8b 5d       	subi	r24, 0xDB	; 219
    a9ce:	98 4d       	sbci	r25, 0xD8	; 216
    a9d0:	fc 01       	movw	r30, r24
    a9d2:	20 83       	st	Z, r18
    a9d4:	8b a9       	ldd	r24, Y+51	; 0x33
    a9d6:	8f 5f       	subi	r24, 0xFF	; 255
    a9d8:	8b ab       	std	Y+51, r24	; 0x33
    a9da:	8b a9       	ldd	r24, Y+51	; 0x33
    a9dc:	8b 30       	cpi	r24, 0x0B	; 11
    a9de:	48 f3       	brcs	.-46     	; 0xa9b2 <handle_received_USB_cmd+0x26ce>
    a9e0:	89 81       	ldd	r24, Y+1	; 0x01
    a9e2:	91 e0       	ldi	r25, 0x01	; 1
    a9e4:	98 0f       	add	r25, r24
    a9e6:	99 83       	std	Y+1, r25	; 0x01
    a9e8:	88 2f       	mov	r24, r24
    a9ea:	90 e0       	ldi	r25, 0x00	; 0
    a9ec:	8b 5d       	subi	r24, 0xDB	; 219
    a9ee:	98 4d       	sbci	r25, 0xD8	; 216
    a9f0:	20 e2       	ldi	r18, 0x20	; 32
    a9f2:	fc 01       	movw	r30, r24
    a9f4:	20 83       	st	Z, r18
    a9f6:	1c aa       	std	Y+52, r1	; 0x34
    a9f8:	1d c0       	rjmp	.+58     	; 0xaa34 <handle_received_USB_cmd+0x2750>
    a9fa:	8c a9       	ldd	r24, Y+52	; 0x34
    a9fc:	88 2f       	mov	r24, r24
    a9fe:	90 e0       	ldi	r25, 0x00	; 0
    aa00:	81 59       	subi	r24, 0x91	; 145
    aa02:	9a 4d       	sbci	r25, 0xDA	; 218
    aa04:	fc 01       	movw	r30, r24
    aa06:	80 81       	ld	r24, Z
    aa08:	88 23       	and	r24, r24
    aa0a:	89 f0       	breq	.+34     	; 0xaa2e <handle_received_USB_cmd+0x274a>
    aa0c:	89 81       	ldd	r24, Y+1	; 0x01
    aa0e:	91 e0       	ldi	r25, 0x01	; 1
    aa10:	98 0f       	add	r25, r24
    aa12:	99 83       	std	Y+1, r25	; 0x01
    aa14:	88 2f       	mov	r24, r24
    aa16:	90 e0       	ldi	r25, 0x00	; 0
    aa18:	2c a9       	ldd	r18, Y+52	; 0x34
    aa1a:	22 2f       	mov	r18, r18
    aa1c:	30 e0       	ldi	r19, 0x00	; 0
    aa1e:	21 59       	subi	r18, 0x91	; 145
    aa20:	3a 4d       	sbci	r19, 0xDA	; 218
    aa22:	f9 01       	movw	r30, r18
    aa24:	20 81       	ld	r18, Z
    aa26:	8b 5d       	subi	r24, 0xDB	; 219
    aa28:	98 4d       	sbci	r25, 0xD8	; 216
    aa2a:	fc 01       	movw	r30, r24
    aa2c:	20 83       	st	Z, r18
    aa2e:	8c a9       	ldd	r24, Y+52	; 0x34
    aa30:	8f 5f       	subi	r24, 0xFF	; 255
    aa32:	8c ab       	std	Y+52, r24	; 0x34
    aa34:	8c a9       	ldd	r24, Y+52	; 0x34
    aa36:	80 32       	cpi	r24, 0x20	; 32
    aa38:	00 f3       	brcs	.-64     	; 0xa9fa <handle_received_USB_cmd+0x2716>
    aa3a:	89 81       	ldd	r24, Y+1	; 0x01
    aa3c:	91 e0       	ldi	r25, 0x01	; 1
    aa3e:	98 0f       	add	r25, r24
    aa40:	99 83       	std	Y+1, r25	; 0x01
    aa42:	88 2f       	mov	r24, r24
    aa44:	90 e0       	ldi	r25, 0x00	; 0
    aa46:	8b 5d       	subi	r24, 0xDB	; 219
    aa48:	98 4d       	sbci	r25, 0xD8	; 216
    aa4a:	2d e0       	ldi	r18, 0x0D	; 13
    aa4c:	fc 01       	movw	r30, r24
    aa4e:	20 83       	st	Z, r18
    aa50:	69 81       	ldd	r22, Y+1	; 0x01
    aa52:	85 e2       	ldi	r24, 0x25	; 37
    aa54:	97 e2       	ldi	r25, 0x27	; 39
    aa56:	0e 94 ff 82 	call	0x105fe	; 0x105fe <send_cmd_response>
    aa5a:	85 e0       	ldi	r24, 0x05	; 5
    aa5c:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <LEDState>
    aa60:	67 d1       	rcall	.+718    	; 0xad30 <flush_USB_rx_buffer>
    aa62:	00 00       	nop
    aa64:	c5 5c       	subi	r28, 0xC5	; 197
    aa66:	de 4f       	sbci	r29, 0xFE	; 254
    aa68:	cd bf       	out	0x3d, r28	; 61
    aa6a:	de bf       	out	0x3e, r29	; 62
    aa6c:	df 91       	pop	r29
    aa6e:	cf 91       	pop	r28
    aa70:	1f 91       	pop	r17
    aa72:	0f 91       	pop	r16
    aa74:	ff 90       	pop	r15
    aa76:	ef 90       	pop	r14
    aa78:	df 90       	pop	r13
    aa7a:	cf 90       	pop	r12
    aa7c:	08 95       	ret

0000aa7e <check_received_data_limits>:
    aa7e:	ef 92       	push	r14
    aa80:	ff 92       	push	r15
    aa82:	0f 93       	push	r16
    aa84:	1f 93       	push	r17
    aa86:	cf 93       	push	r28
    aa88:	df 93       	push	r29
    aa8a:	cd b7       	in	r28, 0x3d	; 61
    aa8c:	de b7       	in	r29, 0x3e	; 62
    aa8e:	2c 97       	sbiw	r28, 0x0c	; 12
    aa90:	cd bf       	out	0x3d, r28	; 61
    aa92:	de bf       	out	0x3e, r29	; 62
    aa94:	69 83       	std	Y+1, r22	; 0x01
    aa96:	7a 83       	std	Y+2, r23	; 0x02
    aa98:	8b 83       	std	Y+3, r24	; 0x03
    aa9a:	9c 83       	std	Y+4, r25	; 0x04
    aa9c:	2d 83       	std	Y+5, r18	; 0x05
    aa9e:	3e 83       	std	Y+6, r19	; 0x06
    aaa0:	4f 83       	std	Y+7, r20	; 0x07
    aaa2:	58 87       	std	Y+8, r21	; 0x08
    aaa4:	e9 86       	std	Y+9, r14	; 0x09
    aaa6:	fa 86       	std	Y+10, r15	; 0x0a
    aaa8:	0b 87       	std	Y+11, r16	; 0x0b
    aaaa:	1c 87       	std	Y+12, r17	; 0x0c
    aaac:	2d 81       	ldd	r18, Y+5	; 0x05
    aaae:	3e 81       	ldd	r19, Y+6	; 0x06
    aab0:	4f 81       	ldd	r20, Y+7	; 0x07
    aab2:	58 85       	ldd	r21, Y+8	; 0x08
    aab4:	69 81       	ldd	r22, Y+1	; 0x01
    aab6:	7a 81       	ldd	r23, Y+2	; 0x02
    aab8:	8b 81       	ldd	r24, Y+3	; 0x03
    aaba:	9c 81       	ldd	r25, Y+4	; 0x04
    aabc:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
    aac0:	88 23       	and	r24, r24
    aac2:	74 f0       	brlt	.+28     	; 0xaae0 <check_received_data_limits+0x62>
    aac4:	29 85       	ldd	r18, Y+9	; 0x09
    aac6:	3a 85       	ldd	r19, Y+10	; 0x0a
    aac8:	4b 85       	ldd	r20, Y+11	; 0x0b
    aaca:	5c 85       	ldd	r21, Y+12	; 0x0c
    aacc:	69 81       	ldd	r22, Y+1	; 0x01
    aace:	7a 81       	ldd	r23, Y+2	; 0x02
    aad0:	8b 81       	ldd	r24, Y+3	; 0x03
    aad2:	9c 81       	ldd	r25, Y+4	; 0x04
    aad4:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
    aad8:	18 16       	cp	r1, r24
    aada:	14 f0       	brlt	.+4      	; 0xaae0 <check_received_data_limits+0x62>
    aadc:	81 e0       	ldi	r24, 0x01	; 1
    aade:	01 c0       	rjmp	.+2      	; 0xaae2 <check_received_data_limits+0x64>
    aae0:	80 e0       	ldi	r24, 0x00	; 0
    aae2:	2c 96       	adiw	r28, 0x0c	; 12
    aae4:	cd bf       	out	0x3d, r28	; 61
    aae6:	de bf       	out	0x3e, r29	; 62
    aae8:	df 91       	pop	r29
    aaea:	cf 91       	pop	r28
    aaec:	1f 91       	pop	r17
    aaee:	0f 91       	pop	r16
    aaf0:	ff 90       	pop	r15
    aaf2:	ef 90       	pop	r14
    aaf4:	08 95       	ret

0000aaf6 <calc_temp_from_ADC_reading>:
    aaf6:	cf 93       	push	r28
    aaf8:	df 93       	push	r29
    aafa:	1f 92       	push	r1
    aafc:	1f 92       	push	r1
    aafe:	cd b7       	in	r28, 0x3d	; 61
    ab00:	de b7       	in	r29, 0x3e	; 62
    ab02:	19 82       	std	Y+1, r1	; 0x01
    ab04:	1a 82       	std	Y+2, r1	; 0x02
    ab06:	60 e2       	ldi	r22, 0x20	; 32
    ab08:	70 e0       	ldi	r23, 0x00	; 0
    ab0a:	85 e2       	ldi	r24, 0x25	; 37
    ab0c:	92 e2       	ldi	r25, 0x22	; 34
    ab0e:	0c d5       	rcall	.+2584   	; 0xb528 <calc_buff_average>
    ab10:	dc 01       	movw	r26, r24
    ab12:	cb 01       	movw	r24, r22
    ab14:	bc 01       	movw	r22, r24
    ab16:	cd 01       	movw	r24, r26
    ab18:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    ab1c:	dc 01       	movw	r26, r24
    ab1e:	cb 01       	movw	r24, r22
    ab20:	89 83       	std	Y+1, r24	; 0x01
    ab22:	9a 83       	std	Y+2, r25	; 0x02
    ab24:	89 81       	ldd	r24, Y+1	; 0x01
    ab26:	9a 81       	ldd	r25, Y+2	; 0x02
    ab28:	8c 3d       	cpi	r24, 0xDC	; 220
    ab2a:	91 05       	cpc	r25, r1
    ab2c:	08 f4       	brcc	.+2      	; 0xab30 <calc_temp_from_ADC_reading+0x3a>
    ab2e:	3f c0       	rjmp	.+126    	; 0xabae <calc_temp_from_ADC_reading+0xb8>
    ab30:	89 81       	ldd	r24, Y+1	; 0x01
    ab32:	9a 81       	ldd	r25, Y+2	; 0x02
    ab34:	81 15       	cp	r24, r1
    ab36:	90 41       	sbci	r25, 0x10	; 16
    ab38:	d0 f5       	brcc	.+116    	; 0xabae <calc_temp_from_ADC_reading+0xb8>
    ab3a:	89 81       	ldd	r24, Y+1	; 0x01
    ab3c:	9a 81       	ldd	r25, Y+2	; 0x02
    ab3e:	8c 5d       	subi	r24, 0xDC	; 220
    ab40:	91 09       	sbc	r25, r1
    ab42:	2f e8       	ldi	r18, 0x8F	; 143
    ab44:	32 e0       	ldi	r19, 0x02	; 2
    ab46:	88 0f       	add	r24, r24
    ab48:	99 1f       	adc	r25, r25
    ab4a:	82 0f       	add	r24, r18
    ab4c:	93 1f       	adc	r25, r19
    ab4e:	fc 01       	movw	r30, r24
    ab50:	85 91       	lpm	r24, Z+
    ab52:	95 91       	lpm	r25, Z+
    ab54:	32 97       	sbiw	r30, 0x02	; 2
    ab56:	09 2e       	mov	r0, r25
    ab58:	00 0c       	add	r0, r0
    ab5a:	aa 0b       	sbc	r26, r26
    ab5c:	bb 0b       	sbc	r27, r27
    ab5e:	bc 01       	movw	r22, r24
    ab60:	cd 01       	movw	r24, r26
    ab62:	0e 94 54 b5 	call	0x16aa8	; 0x16aa8 <__floatsisf>
    ab66:	dc 01       	movw	r26, r24
    ab68:	cb 01       	movw	r24, r22
    ab6a:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    ab6e:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    ab72:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    ab76:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    ab7a:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <curTemp>
    ab7e:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <curTemp+0x1>
    ab82:	a0 91 bf 21 	lds	r26, 0x21BF	; 0x8021bf <curTemp+0x2>
    ab86:	b0 91 c0 21 	lds	r27, 0x21C0	; 0x8021c0 <curTemp+0x3>
    ab8a:	20 e0       	ldi	r18, 0x00	; 0
    ab8c:	30 e0       	ldi	r19, 0x00	; 0
    ab8e:	40 e2       	ldi	r20, 0x20	; 32
    ab90:	51 e4       	ldi	r21, 0x41	; 65
    ab92:	bc 01       	movw	r22, r24
    ab94:	cd 01       	movw	r24, r26
    ab96:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    ab9a:	dc 01       	movw	r26, r24
    ab9c:	cb 01       	movw	r24, r22
    ab9e:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    aba2:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    aba6:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    abaa:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    abae:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <curTemp>
    abb2:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <curTemp+0x1>
    abb6:	a0 91 bf 21 	lds	r26, 0x21BF	; 0x8021bf <curTemp+0x2>
    abba:	b0 91 c0 21 	lds	r27, 0x21C0	; 0x8021c0 <curTemp+0x3>
    abbe:	bc 01       	movw	r22, r24
    abc0:	cd 01       	movw	r24, r26
    abc2:	0f 90       	pop	r0
    abc4:	0f 90       	pop	r0
    abc6:	df 91       	pop	r29
    abc8:	cf 91       	pop	r28
    abca:	08 95       	ret

0000abcc <calc_temp_from_RTD_reading>:
    abcc:	cf 93       	push	r28
    abce:	df 93       	push	r29
    abd0:	1f 92       	push	r1
    abd2:	1f 92       	push	r1
    abd4:	cd b7       	in	r28, 0x3d	; 61
    abd6:	de b7       	in	r29, 0x3e	; 62
    abd8:	89 83       	std	Y+1, r24	; 0x01
    abda:	9a 83       	std	Y+2, r25	; 0x02
    abdc:	89 81       	ldd	r24, Y+1	; 0x01
    abde:	9a 81       	ldd	r25, Y+2	; 0x02
    abe0:	81 15       	cp	r24, r1
    abe2:	90 42       	sbci	r25, 0x20	; 32
    abe4:	e8 f1       	brcs	.+122    	; 0xac60 <calc_temp_from_RTD_reading+0x94>
    abe6:	89 81       	ldd	r24, Y+1	; 0x01
    abe8:	9a 81       	ldd	r25, Y+2	; 0x02
    abea:	8f 3d       	cpi	r24, 0xDF	; 223
    abec:	98 43       	sbci	r25, 0x38	; 56
    abee:	c0 f5       	brcc	.+112    	; 0xac60 <calc_temp_from_RTD_reading+0x94>
    abf0:	89 81       	ldd	r24, Y+1	; 0x01
    abf2:	9a 81       	ldd	r25, Y+2	; 0x02
    abf4:	90 52       	subi	r25, 0x20	; 32
    abf6:	27 ed       	ldi	r18, 0xD7	; 215
    abf8:	30 e2       	ldi	r19, 0x20	; 32
    abfa:	88 0f       	add	r24, r24
    abfc:	99 1f       	adc	r25, r25
    abfe:	82 0f       	add	r24, r18
    ac00:	93 1f       	adc	r25, r19
    ac02:	fc 01       	movw	r30, r24
    ac04:	85 91       	lpm	r24, Z+
    ac06:	95 91       	lpm	r25, Z+
    ac08:	32 97       	sbiw	r30, 0x02	; 2
    ac0a:	cc 01       	movw	r24, r24
    ac0c:	a0 e0       	ldi	r26, 0x00	; 0
    ac0e:	b0 e0       	ldi	r27, 0x00	; 0
    ac10:	bc 01       	movw	r22, r24
    ac12:	cd 01       	movw	r24, r26
    ac14:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    ac18:	dc 01       	movw	r26, r24
    ac1a:	cb 01       	movw	r24, r22
    ac1c:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    ac20:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    ac24:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    ac28:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    ac2c:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <curTemp>
    ac30:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <curTemp+0x1>
    ac34:	a0 91 bf 21 	lds	r26, 0x21BF	; 0x8021bf <curTemp+0x2>
    ac38:	b0 91 c0 21 	lds	r27, 0x21C0	; 0x8021c0 <curTemp+0x3>
    ac3c:	20 e0       	ldi	r18, 0x00	; 0
    ac3e:	30 e0       	ldi	r19, 0x00	; 0
    ac40:	48 ec       	ldi	r20, 0xC8	; 200
    ac42:	52 e4       	ldi	r21, 0x42	; 66
    ac44:	bc 01       	movw	r22, r24
    ac46:	cd 01       	movw	r24, r26
    ac48:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    ac4c:	dc 01       	movw	r26, r24
    ac4e:	cb 01       	movw	r24, r22
    ac50:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    ac54:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    ac58:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    ac5c:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    ac60:	80 91 bd 21 	lds	r24, 0x21BD	; 0x8021bd <curTemp>
    ac64:	90 91 be 21 	lds	r25, 0x21BE	; 0x8021be <curTemp+0x1>
    ac68:	a0 91 bf 21 	lds	r26, 0x21BF	; 0x8021bf <curTemp+0x2>
    ac6c:	b0 91 c0 21 	lds	r27, 0x21C0	; 0x8021c0 <curTemp+0x3>
    ac70:	bc 01       	movw	r22, r24
    ac72:	cd 01       	movw	r24, r26
    ac74:	0f 90       	pop	r0
    ac76:	0f 90       	pop	r0
    ac78:	df 91       	pop	r29
    ac7a:	cf 91       	pop	r28
    ac7c:	08 95       	ret

0000ac7e <clear_receivedUSBMsg>:
    ac7e:	cf 93       	push	r28
    ac80:	df 93       	push	r29
    ac82:	cd b7       	in	r28, 0x3d	; 61
    ac84:	de b7       	in	r29, 0x3e	; 62
    ac86:	25 97       	sbiw	r28, 0x05	; 5
    ac88:	cd bf       	out	0x3d, r28	; 61
    ac8a:	de bf       	out	0x3e, r29	; 62
    ac8c:	19 82       	std	Y+1, r1	; 0x01
    ac8e:	0a c0       	rjmp	.+20     	; 0xaca4 <clear_receivedUSBMsg+0x26>
    ac90:	89 81       	ldd	r24, Y+1	; 0x01
    ac92:	88 2f       	mov	r24, r24
    ac94:	90 e0       	ldi	r25, 0x00	; 0
    ac96:	82 5c       	subi	r24, 0xC2	; 194
    ac98:	99 4d       	sbci	r25, 0xD9	; 217
    ac9a:	fc 01       	movw	r30, r24
    ac9c:	10 82       	st	Z, r1
    ac9e:	89 81       	ldd	r24, Y+1	; 0x01
    aca0:	8f 5f       	subi	r24, 0xFF	; 255
    aca2:	89 83       	std	Y+1, r24	; 0x01
    aca4:	89 81       	ldd	r24, Y+1	; 0x01
    aca6:	80 31       	cpi	r24, 0x10	; 16
    aca8:	98 f3       	brcs	.-26     	; 0xac90 <clear_receivedUSBMsg+0x12>
    acaa:	1a 82       	std	Y+2, r1	; 0x02
    acac:	0a c0       	rjmp	.+20     	; 0xacc2 <clear_receivedUSBMsg+0x44>
    acae:	8a 81       	ldd	r24, Y+2	; 0x02
    acb0:	88 2f       	mov	r24, r24
    acb2:	90 e0       	ldi	r25, 0x00	; 0
    acb4:	86 5c       	subi	r24, 0xC6	; 198
    acb6:	99 4d       	sbci	r25, 0xD9	; 217
    acb8:	fc 01       	movw	r30, r24
    acba:	10 82       	st	Z, r1
    acbc:	8a 81       	ldd	r24, Y+2	; 0x02
    acbe:	8f 5f       	subi	r24, 0xFF	; 255
    acc0:	8a 83       	std	Y+2, r24	; 0x02
    acc2:	8a 81       	ldd	r24, Y+2	; 0x02
    acc4:	83 30       	cpi	r24, 0x03	; 3
    acc6:	98 f3       	brcs	.-26     	; 0xacae <clear_receivedUSBMsg+0x30>
    acc8:	1b 82       	std	Y+3, r1	; 0x03
    acca:	0a c0       	rjmp	.+20     	; 0xace0 <clear_receivedUSBMsg+0x62>
    accc:	8b 81       	ldd	r24, Y+3	; 0x03
    acce:	88 2f       	mov	r24, r24
    acd0:	90 e0       	ldi	r25, 0x00	; 0
    acd2:	81 5b       	subi	r24, 0xB1	; 177
    acd4:	99 4d       	sbci	r25, 0xD9	; 217
    acd6:	fc 01       	movw	r30, r24
    acd8:	10 82       	st	Z, r1
    acda:	8b 81       	ldd	r24, Y+3	; 0x03
    acdc:	8f 5f       	subi	r24, 0xFF	; 255
    acde:	8b 83       	std	Y+3, r24	; 0x03
    ace0:	8b 81       	ldd	r24, Y+3	; 0x03
    ace2:	80 31       	cpi	r24, 0x10	; 16
    ace4:	98 f3       	brcs	.-26     	; 0xaccc <clear_receivedUSBMsg+0x4e>
    ace6:	1c 82       	std	Y+4, r1	; 0x04
    ace8:	0a c0       	rjmp	.+20     	; 0xacfe <clear_receivedUSBMsg+0x80>
    acea:	8c 81       	ldd	r24, Y+4	; 0x04
    acec:	88 2f       	mov	r24, r24
    acee:	90 e0       	ldi	r25, 0x00	; 0
    acf0:	81 5a       	subi	r24, 0xA1	; 161
    acf2:	99 4d       	sbci	r25, 0xD9	; 217
    acf4:	fc 01       	movw	r30, r24
    acf6:	10 82       	st	Z, r1
    acf8:	8c 81       	ldd	r24, Y+4	; 0x04
    acfa:	8f 5f       	subi	r24, 0xFF	; 255
    acfc:	8c 83       	std	Y+4, r24	; 0x04
    acfe:	8c 81       	ldd	r24, Y+4	; 0x04
    ad00:	80 31       	cpi	r24, 0x10	; 16
    ad02:	98 f3       	brcs	.-26     	; 0xacea <clear_receivedUSBMsg+0x6c>
    ad04:	1d 82       	std	Y+5, r1	; 0x05
    ad06:	0a c0       	rjmp	.+20     	; 0xad1c <clear_receivedUSBMsg+0x9e>
    ad08:	8d 81       	ldd	r24, Y+5	; 0x05
    ad0a:	88 2f       	mov	r24, r24
    ad0c:	90 e0       	ldi	r25, 0x00	; 0
    ad0e:	81 59       	subi	r24, 0x91	; 145
    ad10:	99 4d       	sbci	r25, 0xD9	; 217
    ad12:	fc 01       	movw	r30, r24
    ad14:	10 82       	st	Z, r1
    ad16:	8d 81       	ldd	r24, Y+5	; 0x05
    ad18:	8f 5f       	subi	r24, 0xFF	; 255
    ad1a:	8d 83       	std	Y+5, r24	; 0x05
    ad1c:	8d 81       	ldd	r24, Y+5	; 0x05
    ad1e:	86 39       	cpi	r24, 0x96	; 150
    ad20:	98 f3       	brcs	.-26     	; 0xad08 <clear_receivedUSBMsg+0x8a>
    ad22:	00 00       	nop
    ad24:	25 96       	adiw	r28, 0x05	; 5
    ad26:	cd bf       	out	0x3d, r28	; 61
    ad28:	de bf       	out	0x3e, r29	; 62
    ad2a:	df 91       	pop	r29
    ad2c:	cf 91       	pop	r28
    ad2e:	08 95       	ret

0000ad30 <flush_USB_rx_buffer>:
    ad30:	cf 93       	push	r28
    ad32:	df 93       	push	r29
    ad34:	1f 92       	push	r1
    ad36:	cd b7       	in	r28, 0x3d	; 61
    ad38:	de b7       	in	r29, 0x3e	; 62
    ad3a:	19 82       	std	Y+1, r1	; 0x01
    ad3c:	0a c0       	rjmp	.+20     	; 0xad52 <flush_USB_rx_buffer+0x22>
    ad3e:	89 81       	ldd	r24, Y+1	; 0x01
    ad40:	88 2f       	mov	r24, r24
    ad42:	90 e0       	ldi	r25, 0x00	; 0
    ad44:	81 59       	subi	r24, 0x91	; 145
    ad46:	9a 4d       	sbci	r25, 0xDA	; 218
    ad48:	fc 01       	movw	r30, r24
    ad4a:	10 82       	st	Z, r1
    ad4c:	89 81       	ldd	r24, Y+1	; 0x01
    ad4e:	8f 5f       	subi	r24, 0xFF	; 255
    ad50:	89 83       	std	Y+1, r24	; 0x01
    ad52:	89 81       	ldd	r24, Y+1	; 0x01
    ad54:	88 3c       	cpi	r24, 0xC8	; 200
    ad56:	98 f3       	brcs	.-26     	; 0xad3e <flush_USB_rx_buffer+0xe>
    ad58:	00 00       	nop
    ad5a:	0f 90       	pop	r0
    ad5c:	df 91       	pop	r29
    ad5e:	cf 91       	pop	r28
    ad60:	08 95       	ret

0000ad62 <flush_USB_tx_buffer>:
    ad62:	cf 93       	push	r28
    ad64:	df 93       	push	r29
    ad66:	1f 92       	push	r1
    ad68:	cd b7       	in	r28, 0x3d	; 61
    ad6a:	de b7       	in	r29, 0x3e	; 62
    ad6c:	19 82       	std	Y+1, r1	; 0x01
    ad6e:	0a c0       	rjmp	.+20     	; 0xad84 <flush_USB_tx_buffer+0x22>
    ad70:	89 81       	ldd	r24, Y+1	; 0x01
    ad72:	88 2f       	mov	r24, r24
    ad74:	90 e0       	ldi	r25, 0x00	; 0
    ad76:	8b 5d       	subi	r24, 0xDB	; 219
    ad78:	98 4d       	sbci	r25, 0xD8	; 216
    ad7a:	fc 01       	movw	r30, r24
    ad7c:	10 82       	st	Z, r1
    ad7e:	89 81       	ldd	r24, Y+1	; 0x01
    ad80:	8f 5f       	subi	r24, 0xFF	; 255
    ad82:	89 83       	std	Y+1, r24	; 0x01
    ad84:	89 81       	ldd	r24, Y+1	; 0x01
    ad86:	88 3c       	cpi	r24, 0xC8	; 200
    ad88:	98 f3       	brcs	.-26     	; 0xad70 <flush_USB_tx_buffer+0xe>
    ad8a:	00 00       	nop
    ad8c:	0f 90       	pop	r0
    ad8e:	df 91       	pop	r29
    ad90:	cf 91       	pop	r28
    ad92:	08 95       	ret

0000ad94 <handle_LEDs>:
    ad94:	cf 93       	push	r28
    ad96:	df 93       	push	r29
    ad98:	cd b7       	in	r28, 0x3d	; 61
    ad9a:	de b7       	in	r29, 0x3e	; 62
    ad9c:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <LEDState>
    ada0:	88 2f       	mov	r24, r24
    ada2:	90 e0       	ldi	r25, 0x00	; 0
    ada4:	09 2e       	mov	r0, r25
    ada6:	00 0c       	add	r0, r0
    ada8:	aa 0b       	sbc	r26, r26
    adaa:	bb 0b       	sbc	r27, r27
    adac:	41 e0       	ldi	r20, 0x01	; 1
    adae:	50 e0       	ldi	r21, 0x00	; 0
    adb0:	26 e0       	ldi	r18, 0x06	; 6
    adb2:	30 e0       	ldi	r19, 0x00	; 0
    adb4:	84 1b       	sub	r24, r20
    adb6:	95 0b       	sbc	r25, r21
    adb8:	28 17       	cp	r18, r24
    adba:	39 07       	cpc	r19, r25
    adbc:	38 f0       	brcs	.+14     	; 0xadcc <handle_LEDs+0x38>
    adbe:	fc 01       	movw	r30, r24
    adc0:	88 27       	eor	r24, r24
    adc2:	ec 5e       	subi	r30, 0xEC	; 236
    adc4:	fe 4f       	sbci	r31, 0xFE	; 254
    adc6:	8f 4f       	sbci	r24, 0xFF	; 255
    adc8:	0c 94 47 b7 	jmp	0x16e8e	; 0x16e8e <__tablejump2__>
    adcc:	8c e1       	ldi	r24, 0x1C	; 28
    adce:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    add2:	8d e1       	ldi	r24, 0x1D	; 29
    add4:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    add8:	39 c1       	rjmp	.+626    	; 0xb04c <handle_LEDs+0x2b8>
    adda:	8c e1       	ldi	r24, 0x1C	; 28
    addc:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    ade0:	8d e1       	ldi	r24, 0x1D	; 29
    ade2:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    ade6:	32 c1       	rjmp	.+612    	; 0xb04c <handle_LEDs+0x2b8>
    ade8:	8c e1       	ldi	r24, 0x1C	; 28
    adea:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    adee:	8d e1       	ldi	r24, 0x1D	; 29
    adf0:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    adf4:	2b c1       	rjmp	.+598    	; 0xb04c <handle_LEDs+0x2b8>
    adf6:	8c e1       	ldi	r24, 0x1C	; 28
    adf8:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    adfc:	8d e1       	ldi	r24, 0x1D	; 29
    adfe:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    ae02:	24 c1       	rjmp	.+584    	; 0xb04c <handle_LEDs+0x2b8>
    ae04:	8c e1       	ldi	r24, 0x1C	; 28
    ae06:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    ae0a:	8d e1       	ldi	r24, 0x1D	; 29
    ae0c:	0e 94 ad 30 	call	0x615a	; 0x615a <ioport_get_pin_level>
    ae10:	88 23       	and	r24, r24
    ae12:	d1 f0       	breq	.+52     	; 0xae48 <handle_LEDs+0xb4>
    ae14:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <LEDOffTime>
    ae18:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <LEDOffTime+0x1>
    ae1c:	9c 01       	movw	r18, r24
    ae1e:	40 e0       	ldi	r20, 0x00	; 0
    ae20:	50 e0       	ldi	r21, 0x00	; 0
    ae22:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    ae26:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    ae2a:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    ae2e:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    ae32:	82 17       	cp	r24, r18
    ae34:	93 07       	cpc	r25, r19
    ae36:	a4 07       	cpc	r26, r20
    ae38:	b5 07       	cpc	r27, r21
    ae3a:	08 f4       	brcc	.+2      	; 0xae3e <handle_LEDs+0xaa>
    ae3c:	00 c1       	rjmp	.+512    	; 0xb03e <handle_LEDs+0x2aa>
    ae3e:	64 d3       	rcall	.+1736   	; 0xb508 <reset_blink_time_LED>
    ae40:	8d e1       	ldi	r24, 0x1D	; 29
    ae42:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    ae46:	fb c0       	rjmp	.+502    	; 0xb03e <handle_LEDs+0x2aa>
    ae48:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <LEDOnTime>
    ae4c:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <LEDOnTime+0x1>
    ae50:	9c 01       	movw	r18, r24
    ae52:	40 e0       	ldi	r20, 0x00	; 0
    ae54:	50 e0       	ldi	r21, 0x00	; 0
    ae56:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    ae5a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    ae5e:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    ae62:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    ae66:	82 17       	cp	r24, r18
    ae68:	93 07       	cpc	r25, r19
    ae6a:	a4 07       	cpc	r26, r20
    ae6c:	b5 07       	cpc	r27, r21
    ae6e:	08 f4       	brcc	.+2      	; 0xae72 <handle_LEDs+0xde>
    ae70:	e6 c0       	rjmp	.+460    	; 0xb03e <handle_LEDs+0x2aa>
    ae72:	4a d3       	rcall	.+1684   	; 0xb508 <reset_blink_time_LED>
    ae74:	8d e1       	ldi	r24, 0x1D	; 29
    ae76:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    ae7a:	e1 c0       	rjmp	.+450    	; 0xb03e <handle_LEDs+0x2aa>
    ae7c:	8d e1       	ldi	r24, 0x1D	; 29
    ae7e:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    ae82:	8c e1       	ldi	r24, 0x1C	; 28
    ae84:	0e 94 ad 30 	call	0x615a	; 0x615a <ioport_get_pin_level>
    ae88:	88 23       	and	r24, r24
    ae8a:	d1 f0       	breq	.+52     	; 0xaec0 <handle_LEDs+0x12c>
    ae8c:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <LEDOffTime>
    ae90:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <LEDOffTime+0x1>
    ae94:	9c 01       	movw	r18, r24
    ae96:	40 e0       	ldi	r20, 0x00	; 0
    ae98:	50 e0       	ldi	r21, 0x00	; 0
    ae9a:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    ae9e:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    aea2:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    aea6:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    aeaa:	82 17       	cp	r24, r18
    aeac:	93 07       	cpc	r25, r19
    aeae:	a4 07       	cpc	r26, r20
    aeb0:	b5 07       	cpc	r27, r21
    aeb2:	08 f4       	brcc	.+2      	; 0xaeb6 <handle_LEDs+0x122>
    aeb4:	c6 c0       	rjmp	.+396    	; 0xb042 <handle_LEDs+0x2ae>
    aeb6:	28 d3       	rcall	.+1616   	; 0xb508 <reset_blink_time_LED>
    aeb8:	8c e1       	ldi	r24, 0x1C	; 28
    aeba:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    aebe:	c1 c0       	rjmp	.+386    	; 0xb042 <handle_LEDs+0x2ae>
    aec0:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <LEDOnTime>
    aec4:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <LEDOnTime+0x1>
    aec8:	9c 01       	movw	r18, r24
    aeca:	40 e0       	ldi	r20, 0x00	; 0
    aecc:	50 e0       	ldi	r21, 0x00	; 0
    aece:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    aed2:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    aed6:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    aeda:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    aede:	82 17       	cp	r24, r18
    aee0:	93 07       	cpc	r25, r19
    aee2:	a4 07       	cpc	r26, r20
    aee4:	b5 07       	cpc	r27, r21
    aee6:	08 f4       	brcc	.+2      	; 0xaeea <handle_LEDs+0x156>
    aee8:	ac c0       	rjmp	.+344    	; 0xb042 <handle_LEDs+0x2ae>
    aeea:	0e d3       	rcall	.+1564   	; 0xb508 <reset_blink_time_LED>
    aeec:	8c e1       	ldi	r24, 0x1C	; 28
    aeee:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    aef2:	a7 c0       	rjmp	.+334    	; 0xb042 <handle_LEDs+0x2ae>
    aef4:	8c e1       	ldi	r24, 0x1C	; 28
    aef6:	0e 94 ad 30 	call	0x615a	; 0x615a <ioport_get_pin_level>
    aefa:	88 23       	and	r24, r24
    aefc:	e9 f0       	breq	.+58     	; 0xaf38 <handle_LEDs+0x1a4>
    aefe:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <LEDOffTime>
    af02:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <LEDOffTime+0x1>
    af06:	9c 01       	movw	r18, r24
    af08:	40 e0       	ldi	r20, 0x00	; 0
    af0a:	50 e0       	ldi	r21, 0x00	; 0
    af0c:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    af10:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    af14:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    af18:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    af1c:	82 17       	cp	r24, r18
    af1e:	93 07       	cpc	r25, r19
    af20:	a4 07       	cpc	r26, r20
    af22:	b5 07       	cpc	r27, r21
    af24:	08 f4       	brcc	.+2      	; 0xaf28 <handle_LEDs+0x194>
    af26:	8f c0       	rjmp	.+286    	; 0xb046 <handle_LEDs+0x2b2>
    af28:	ef d2       	rcall	.+1502   	; 0xb508 <reset_blink_time_LED>
    af2a:	8c e1       	ldi	r24, 0x1C	; 28
    af2c:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    af30:	8d e1       	ldi	r24, 0x1D	; 29
    af32:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    af36:	87 c0       	rjmp	.+270    	; 0xb046 <handle_LEDs+0x2b2>
    af38:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <LEDOnTime>
    af3c:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <LEDOnTime+0x1>
    af40:	9c 01       	movw	r18, r24
    af42:	40 e0       	ldi	r20, 0x00	; 0
    af44:	50 e0       	ldi	r21, 0x00	; 0
    af46:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    af4a:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    af4e:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    af52:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    af56:	82 17       	cp	r24, r18
    af58:	93 07       	cpc	r25, r19
    af5a:	a4 07       	cpc	r26, r20
    af5c:	b5 07       	cpc	r27, r21
    af5e:	08 f4       	brcc	.+2      	; 0xaf62 <handle_LEDs+0x1ce>
    af60:	72 c0       	rjmp	.+228    	; 0xb046 <handle_LEDs+0x2b2>
    af62:	d2 d2       	rcall	.+1444   	; 0xb508 <reset_blink_time_LED>
    af64:	8c e1       	ldi	r24, 0x1C	; 28
    af66:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    af6a:	8d e1       	ldi	r24, 0x1D	; 29
    af6c:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    af70:	6a c0       	rjmp	.+212    	; 0xb046 <handle_LEDs+0x2b2>
    af72:	8c e1       	ldi	r24, 0x1C	; 28
    af74:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    af78:	20 91 b1 21 	lds	r18, 0x21B1	; 0x8021b1 <LEDBlinkCount>
    af7c:	30 91 b2 21 	lds	r19, 0x21B2	; 0x8021b2 <LEDBlinkCount+0x1>
    af80:	80 91 b3 21 	lds	r24, 0x21B3	; 0x8021b3 <curLEDBlinkCount>
    af84:	90 91 b4 21 	lds	r25, 0x21B4	; 0x8021b4 <curLEDBlinkCount+0x1>
    af88:	28 17       	cp	r18, r24
    af8a:	39 07       	cpc	r19, r25
    af8c:	09 f4       	brne	.+2      	; 0xaf90 <handle_LEDs+0x1fc>
    af8e:	41 c0       	rjmp	.+130    	; 0xb012 <handle_LEDs+0x27e>
    af90:	8d e1       	ldi	r24, 0x1D	; 29
    af92:	0e 94 ad 30 	call	0x615a	; 0x615a <ioport_get_pin_level>
    af96:	88 23       	and	r24, r24
    af98:	d1 f0       	breq	.+52     	; 0xafce <handle_LEDs+0x23a>
    af9a:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <LEDOffTime>
    af9e:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <LEDOffTime+0x1>
    afa2:	9c 01       	movw	r18, r24
    afa4:	40 e0       	ldi	r20, 0x00	; 0
    afa6:	50 e0       	ldi	r21, 0x00	; 0
    afa8:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    afac:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    afb0:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    afb4:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    afb8:	82 17       	cp	r24, r18
    afba:	93 07       	cpc	r25, r19
    afbc:	a4 07       	cpc	r26, r20
    afbe:	b5 07       	cpc	r27, r21
    afc0:	08 f4       	brcc	.+2      	; 0xafc4 <handle_LEDs+0x230>
    afc2:	43 c0       	rjmp	.+134    	; 0xb04a <handle_LEDs+0x2b6>
    afc4:	a1 d2       	rcall	.+1346   	; 0xb508 <reset_blink_time_LED>
    afc6:	8d e1       	ldi	r24, 0x1D	; 29
    afc8:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    afcc:	3e c0       	rjmp	.+124    	; 0xb04a <handle_LEDs+0x2b6>
    afce:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <LEDOnTime>
    afd2:	90 91 ae 21 	lds	r25, 0x21AE	; 0x8021ae <LEDOnTime+0x1>
    afd6:	9c 01       	movw	r18, r24
    afd8:	40 e0       	ldi	r20, 0x00	; 0
    afda:	50 e0       	ldi	r21, 0x00	; 0
    afdc:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    afe0:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    afe4:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    afe8:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    afec:	82 17       	cp	r24, r18
    afee:	93 07       	cpc	r25, r19
    aff0:	a4 07       	cpc	r26, r20
    aff2:	b5 07       	cpc	r27, r21
    aff4:	50 f1       	brcs	.+84     	; 0xb04a <handle_LEDs+0x2b6>
    aff6:	88 d2       	rcall	.+1296   	; 0xb508 <reset_blink_time_LED>
    aff8:	8d e1       	ldi	r24, 0x1D	; 29
    affa:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <ioport_set_pin_high>
    affe:	80 91 b3 21 	lds	r24, 0x21B3	; 0x8021b3 <curLEDBlinkCount>
    b002:	90 91 b4 21 	lds	r25, 0x21B4	; 0x8021b4 <curLEDBlinkCount+0x1>
    b006:	01 96       	adiw	r24, 0x01	; 1
    b008:	80 93 b3 21 	sts	0x21B3, r24	; 0x8021b3 <curLEDBlinkCount>
    b00c:	90 93 b4 21 	sts	0x21B4, r25	; 0x8021b4 <curLEDBlinkCount+0x1>
    b010:	1c c0       	rjmp	.+56     	; 0xb04a <handle_LEDs+0x2b6>
    b012:	80 91 90 21 	lds	r24, 0x2190	; 0x802190 <blinkTimeLED_ms>
    b016:	90 91 91 21 	lds	r25, 0x2191	; 0x802191 <blinkTimeLED_ms+0x1>
    b01a:	a0 91 92 21 	lds	r26, 0x2192	; 0x802192 <blinkTimeLED_ms+0x2>
    b01e:	b0 91 93 21 	lds	r27, 0x2193	; 0x802193 <blinkTimeLED_ms+0x3>
    b022:	88 3e       	cpi	r24, 0xE8	; 232
    b024:	93 40       	sbci	r25, 0x03	; 3
    b026:	a1 05       	cpc	r26, r1
    b028:	b1 05       	cpc	r27, r1
    b02a:	78 f0       	brcs	.+30     	; 0xb04a <handle_LEDs+0x2b6>
    b02c:	6d d2       	rcall	.+1242   	; 0xb508 <reset_blink_time_LED>
    b02e:	8d e1       	ldi	r24, 0x1D	; 29
    b030:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    b034:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <curLEDBlinkCount>
    b038:	10 92 b4 21 	sts	0x21B4, r1	; 0x8021b4 <curLEDBlinkCount+0x1>
    b03c:	06 c0       	rjmp	.+12     	; 0xb04a <handle_LEDs+0x2b6>
    b03e:	00 00       	nop
    b040:	05 c0       	rjmp	.+10     	; 0xb04c <handle_LEDs+0x2b8>
    b042:	00 00       	nop
    b044:	03 c0       	rjmp	.+6      	; 0xb04c <handle_LEDs+0x2b8>
    b046:	00 00       	nop
    b048:	01 c0       	rjmp	.+2      	; 0xb04c <handle_LEDs+0x2b8>
    b04a:	00 00       	nop
    b04c:	00 00       	nop
    b04e:	df 91       	pop	r29
    b050:	cf 91       	pop	r28
    b052:	08 95       	ret

0000b054 <handle_temp_PID>:
    b054:	0f 93       	push	r16
    b056:	1f 93       	push	r17
    b058:	cf 93       	push	r28
    b05a:	df 93       	push	r29
    b05c:	cd b7       	in	r28, 0x3d	; 61
    b05e:	de b7       	in	r29, 0x3e	; 62
    b060:	80 91 b7 21 	lds	r24, 0x21B7	; 0x8021b7 <heaterEnabled>
    b064:	88 23       	and	r24, r24
    b066:	09 f4       	brne	.+2      	; 0xb06a <handle_temp_PID+0x16>
    b068:	d5 c0       	rjmp	.+426    	; 0xb214 <handle_temp_PID+0x1c0>
    b06a:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <tempUpdate_ms>
    b06e:	90 91 9d 21 	lds	r25, 0x219D	; 0x80219d <tempUpdate_ms+0x1>
    b072:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <tempUpdate_ms+0x2>
    b076:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <tempUpdate_ms+0x3>
    b07a:	88 3e       	cpi	r24, 0xE8	; 232
    b07c:	93 40       	sbci	r25, 0x03	; 3
    b07e:	a1 05       	cpc	r26, r1
    b080:	b1 05       	cpc	r27, r1
    b082:	e0 f0       	brcs	.+56     	; 0xb0bc <handle_temp_PID+0x68>
    b084:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <tempProbeType>
    b088:	88 23       	and	r24, r24
    b08a:	61 f4       	brne	.+24     	; 0xb0a4 <handle_temp_PID+0x50>
    b08c:	34 dd       	rcall	.-1432   	; 0xaaf6 <calc_temp_from_ADC_reading>
    b08e:	dc 01       	movw	r26, r24
    b090:	cb 01       	movw	r24, r22
    b092:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    b096:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    b09a:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    b09e:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    b0a2:	0c c0       	rjmp	.+24     	; 0xb0bc <handle_temp_PID+0x68>
    b0a4:	a3 d3       	rcall	.+1862   	; 0xb7ec <get_RTD_sensor_reading>
    b0a6:	92 dd       	rcall	.-1244   	; 0xabcc <calc_temp_from_RTD_reading>
    b0a8:	dc 01       	movw	r26, r24
    b0aa:	cb 01       	movw	r24, r22
    b0ac:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <curTemp>
    b0b0:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <curTemp+0x1>
    b0b4:	a0 93 bf 21 	sts	0x21BF, r26	; 0x8021bf <curTemp+0x2>
    b0b8:	b0 93 c0 21 	sts	0x21C0, r27	; 0x8021c0 <curTemp+0x3>
    b0bc:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <tempPIDUpdate_ms>
    b0c0:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <tempPIDUpdate_ms+0x1>
    b0c4:	a0 91 9a 21 	lds	r26, 0x219A	; 0x80219a <tempPIDUpdate_ms+0x2>
    b0c8:	b0 91 9b 21 	lds	r27, 0x219B	; 0x80219b <tempPIDUpdate_ms+0x3>
    b0cc:	80 31       	cpi	r24, 0x10	; 16
    b0ce:	97 42       	sbci	r25, 0x27	; 39
    b0d0:	a1 05       	cpc	r26, r1
    b0d2:	b1 05       	cpc	r27, r1
    b0d4:	08 f4       	brcc	.+2      	; 0xb0d8 <handle_temp_PID+0x84>
    b0d6:	9e c0       	rjmp	.+316    	; 0xb214 <handle_temp_PID+0x1c0>
    b0d8:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <tempProbeType>
    b0dc:	88 23       	and	r24, r24
    b0de:	09 f0       	breq	.+2      	; 0xb0e2 <handle_temp_PID+0x8e>
    b0e0:	49 c0       	rjmp	.+146    	; 0xb174 <handle_temp_PID+0x120>
    b0e2:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <tempSetPoint>
    b0e6:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <tempSetPoint+0x1>
    b0ea:	a0 91 bb 21 	lds	r26, 0x21BB	; 0x8021bb <tempSetPoint+0x2>
    b0ee:	b0 91 bc 21 	lds	r27, 0x21BC	; 0x8021bc <tempSetPoint+0x3>
    b0f2:	20 91 bd 21 	lds	r18, 0x21BD	; 0x8021bd <curTemp>
    b0f6:	30 91 be 21 	lds	r19, 0x21BE	; 0x8021be <curTemp+0x1>
    b0fa:	40 91 bf 21 	lds	r20, 0x21BF	; 0x8021bf <curTemp+0x2>
    b0fe:	50 91 c0 21 	lds	r21, 0x21C0	; 0x8021c0 <curTemp+0x3>
    b102:	bc 01       	movw	r22, r24
    b104:	cd 01       	movw	r24, r26
    b106:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
    b10a:	dc 01       	movw	r26, r24
    b10c:	cb 01       	movw	r24, r22
    b10e:	00 e0       	ldi	r16, 0x00	; 0
    b110:	10 e0       	ldi	r17, 0x00	; 0
    b112:	20 e2       	ldi	r18, 0x20	; 32
    b114:	31 e4       	ldi	r19, 0x41	; 65
    b116:	ac 01       	movw	r20, r24
    b118:	bd 01       	movw	r22, r26
    b11a:	8d ef       	ldi	r24, 0xFD	; 253
    b11c:	97 e2       	ldi	r25, 0x27	; 39
    b11e:	0e 94 0f 81 	call	0x1021e	; 0x1021e <compute_temp_PID_duty>
    b122:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <heaterPID+0x2c>
    b126:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <heaterPID+0x2d>
    b12a:	a0 91 2b 28 	lds	r26, 0x282B	; 0x80282b <heaterPID+0x2e>
    b12e:	b0 91 2c 28 	lds	r27, 0x282C	; 0x80282c <heaterPID+0x2f>
    b132:	20 e0       	ldi	r18, 0x00	; 0
    b134:	30 e0       	ldi	r19, 0x00	; 0
    b136:	40 ea       	ldi	r20, 0xA0	; 160
    b138:	50 e4       	ldi	r21, 0x40	; 64
    b13a:	bc 01       	movw	r22, r24
    b13c:	cd 01       	movw	r24, r26
    b13e:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    b142:	dc 01       	movw	r26, r24
    b144:	cb 01       	movw	r24, r22
    b146:	9c 01       	movw	r18, r24
    b148:	ad 01       	movw	r20, r26
    b14a:	60 e0       	ldi	r22, 0x00	; 0
    b14c:	70 e8       	ldi	r23, 0x80	; 128
    b14e:	8a ef       	ldi	r24, 0xFA	; 250
    b150:	93 e4       	ldi	r25, 0x43	; 67
    b152:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
    b156:	dc 01       	movw	r26, r24
    b158:	cb 01       	movw	r24, r22
    b15a:	bc 01       	movw	r22, r24
    b15c:	cd 01       	movw	r24, r26
    b15e:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    b162:	dc 01       	movw	r26, r24
    b164:	cb 01       	movw	r24, r22
    b166:	ac 01       	movw	r20, r24
    b168:	61 e0       	ldi	r22, 0x01	; 1
    b16a:	80 e4       	ldi	r24, 0x40	; 64
    b16c:	99 e0       	ldi	r25, 0x09	; 9
    b16e:	0e 94 3e 32 	call	0x647c	; 0x647c <tc_write_cc>
    b172:	48 c0       	rjmp	.+144    	; 0xb204 <handle_temp_PID+0x1b0>
    b174:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <tempSetPoint>
    b178:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <tempSetPoint+0x1>
    b17c:	a0 91 bb 21 	lds	r26, 0x21BB	; 0x8021bb <tempSetPoint+0x2>
    b180:	b0 91 bc 21 	lds	r27, 0x21BC	; 0x8021bc <tempSetPoint+0x3>
    b184:	20 91 bd 21 	lds	r18, 0x21BD	; 0x8021bd <curTemp>
    b188:	30 91 be 21 	lds	r19, 0x21BE	; 0x8021be <curTemp+0x1>
    b18c:	40 91 bf 21 	lds	r20, 0x21BF	; 0x8021bf <curTemp+0x2>
    b190:	50 91 c0 21 	lds	r21, 0x21C0	; 0x8021c0 <curTemp+0x3>
    b194:	bc 01       	movw	r22, r24
    b196:	cd 01       	movw	r24, r26
    b198:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
    b19c:	dc 01       	movw	r26, r24
    b19e:	cb 01       	movw	r24, r22
    b1a0:	00 e0       	ldi	r16, 0x00	; 0
    b1a2:	10 e0       	ldi	r17, 0x00	; 0
    b1a4:	20 e2       	ldi	r18, 0x20	; 32
    b1a6:	31 e4       	ldi	r19, 0x41	; 65
    b1a8:	ac 01       	movw	r20, r24
    b1aa:	bd 01       	movw	r22, r26
    b1ac:	8d ef       	ldi	r24, 0xFD	; 253
    b1ae:	97 e2       	ldi	r25, 0x27	; 39
    b1b0:	0e 94 0f 81 	call	0x1021e	; 0x1021e <compute_temp_PID_duty>
    b1b4:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <heaterPID+0x2c>
    b1b8:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <heaterPID+0x2d>
    b1bc:	a0 91 2b 28 	lds	r26, 0x282B	; 0x80282b <heaterPID+0x2e>
    b1c0:	b0 91 2c 28 	lds	r27, 0x282C	; 0x80282c <heaterPID+0x2f>
    b1c4:	20 e0       	ldi	r18, 0x00	; 0
    b1c6:	30 e0       	ldi	r19, 0x00	; 0
    b1c8:	40 ea       	ldi	r20, 0xA0	; 160
    b1ca:	50 e4       	ldi	r21, 0x40	; 64
    b1cc:	bc 01       	movw	r22, r24
    b1ce:	cd 01       	movw	r24, r26
    b1d0:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    b1d4:	dc 01       	movw	r26, r24
    b1d6:	cb 01       	movw	r24, r22
    b1d8:	9c 01       	movw	r18, r24
    b1da:	ad 01       	movw	r20, r26
    b1dc:	60 e0       	ldi	r22, 0x00	; 0
    b1de:	70 e8       	ldi	r23, 0x80	; 128
    b1e0:	8a ef       	ldi	r24, 0xFA	; 250
    b1e2:	93 e4       	ldi	r25, 0x43	; 67
    b1e4:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
    b1e8:	dc 01       	movw	r26, r24
    b1ea:	cb 01       	movw	r24, r22
    b1ec:	bc 01       	movw	r22, r24
    b1ee:	cd 01       	movw	r24, r26
    b1f0:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
    b1f4:	dc 01       	movw	r26, r24
    b1f6:	cb 01       	movw	r24, r22
    b1f8:	ac 01       	movw	r20, r24
    b1fa:	61 e0       	ldi	r22, 0x01	; 1
    b1fc:	80 e4       	ldi	r24, 0x40	; 64
    b1fe:	99 e0       	ldi	r25, 0x09	; 9
    b200:	0e 94 3e 32 	call	0x647c	; 0x647c <tc_write_cc>
    b204:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <tempPIDUpdate_ms>
    b208:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <tempPIDUpdate_ms+0x1>
    b20c:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <tempPIDUpdate_ms+0x2>
    b210:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <tempPIDUpdate_ms+0x3>
    b214:	00 00       	nop
    b216:	df 91       	pop	r29
    b218:	cf 91       	pop	r28
    b21a:	1f 91       	pop	r17
    b21c:	0f 91       	pop	r16
    b21e:	08 95       	ret

0000b220 <handle_pump>:
    b220:	cf 93       	push	r28
    b222:	df 93       	push	r29
    b224:	cd b7       	in	r28, 0x3d	; 61
    b226:	de b7       	in	r29, 0x3e	; 62
    b228:	80 91 b6 21 	lds	r24, 0x21B6	; 0x8021b6 <pumpEnabled>
    b22c:	88 23       	and	r24, r24
    b22e:	21 f1       	breq	.+72     	; 0xb278 <handle_pump+0x58>
    b230:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <pumpDuration_ms>
    b234:	90 91 a1 21 	lds	r25, 0x21A1	; 0x8021a1 <pumpDuration_ms+0x1>
    b238:	a0 91 a2 21 	lds	r26, 0x21A2	; 0x8021a2 <pumpDuration_ms+0x2>
    b23c:	b0 91 a3 21 	lds	r27, 0x21A3	; 0x8021a3 <pumpDuration_ms+0x3>
    b240:	89 2b       	or	r24, r25
    b242:	8a 2b       	or	r24, r26
    b244:	8b 2b       	or	r24, r27
    b246:	c1 f0       	breq	.+48     	; 0xb278 <handle_pump+0x58>
    b248:	20 91 94 21 	lds	r18, 0x2194	; 0x802194 <pumpTime_ms>
    b24c:	30 91 95 21 	lds	r19, 0x2195	; 0x802195 <pumpTime_ms+0x1>
    b250:	40 91 96 21 	lds	r20, 0x2196	; 0x802196 <pumpTime_ms+0x2>
    b254:	50 91 97 21 	lds	r21, 0x2197	; 0x802197 <pumpTime_ms+0x3>
    b258:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <pumpDuration_ms>
    b25c:	90 91 a1 21 	lds	r25, 0x21A1	; 0x8021a1 <pumpDuration_ms+0x1>
    b260:	a0 91 a2 21 	lds	r26, 0x21A2	; 0x8021a2 <pumpDuration_ms+0x2>
    b264:	b0 91 a3 21 	lds	r27, 0x21A3	; 0x8021a3 <pumpDuration_ms+0x3>
    b268:	28 17       	cp	r18, r24
    b26a:	39 07       	cpc	r19, r25
    b26c:	4a 07       	cpc	r20, r26
    b26e:	5b 07       	cpc	r21, r27
    b270:	18 f0       	brcs	.+6      	; 0xb278 <handle_pump+0x58>
    b272:	8e e2       	ldi	r24, 0x2E	; 46
    b274:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <ioport_set_pin_low>
    b278:	00 00       	nop
    b27a:	df 91       	pop	r29
    b27c:	cf 91       	pop	r28
    b27e:	08 95       	ret

0000b280 <handle_fan>:
    b280:	cf 93       	push	r28
    b282:	df 93       	push	r29
    b284:	cd b7       	in	r28, 0x3d	; 61
    b286:	de b7       	in	r29, 0x3e	; 62
    b288:	80 91 b5 21 	lds	r24, 0x21B5	; 0x8021b5 <fanEnabled>
    b28c:	88 23       	and	r24, r24
    b28e:	91 f0       	breq	.+36     	; 0xb2b4 <handle_fan+0x34>
    b290:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <fanDuty>
    b294:	28 2f       	mov	r18, r24
    b296:	30 e0       	ldi	r19, 0x00	; 0
    b298:	4b ef       	ldi	r20, 0xFB	; 251
    b29a:	42 03       	mulsu	r20, r18
    b29c:	c0 01       	movw	r24, r0
    b29e:	43 9f       	mul	r20, r19
    b2a0:	90 0d       	add	r25, r0
    b2a2:	11 24       	eor	r1, r1
    b2a4:	8b 50       	subi	r24, 0x0B	; 11
    b2a6:	9e 4f       	sbci	r25, 0xFE	; 254
    b2a8:	ac 01       	movw	r20, r24
    b2aa:	62 e0       	ldi	r22, 0x02	; 2
    b2ac:	80 e4       	ldi	r24, 0x40	; 64
    b2ae:	99 e0       	ldi	r25, 0x09	; 9
    b2b0:	0e 94 3e 32 	call	0x647c	; 0x647c <tc_write_cc>
    b2b4:	00 00       	nop
    b2b6:	df 91       	pop	r29
    b2b8:	cf 91       	pop	r28
    b2ba:	08 95       	ret

0000b2bc <calc_heater_adj>:
    b2bc:	cf 92       	push	r12
    b2be:	df 92       	push	r13
    b2c0:	ef 92       	push	r14
    b2c2:	ff 92       	push	r15
    b2c4:	0f 93       	push	r16
    b2c6:	1f 93       	push	r17
    b2c8:	cf 93       	push	r28
    b2ca:	df 93       	push	r29
    b2cc:	cd b7       	in	r28, 0x3d	; 61
    b2ce:	de b7       	in	r29, 0x3e	; 62
    b2d0:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <tempSetPoint>
    b2d4:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <tempSetPoint+0x1>
    b2d8:	a0 91 bb 21 	lds	r26, 0x21BB	; 0x8021bb <tempSetPoint+0x2>
    b2dc:	b0 91 bc 21 	lds	r27, 0x21BC	; 0x8021bc <tempSetPoint+0x3>
    b2e0:	22 e4       	ldi	r18, 0x42	; 66
    b2e2:	30 e6       	ldi	r19, 0x60	; 96
    b2e4:	45 e6       	ldi	r20, 0x65	; 101
    b2e6:	5b e3       	ldi	r21, 0x3B	; 59
    b2e8:	bc 01       	movw	r22, r24
    b2ea:	cd 01       	movw	r24, r26
    b2ec:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    b2f0:	dc 01       	movw	r26, r24
    b2f2:	cb 01       	movw	r24, r22
    b2f4:	7c 01       	movw	r14, r24
    b2f6:	8d 01       	movw	r16, r26
    b2f8:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <tempSetPoint>
    b2fc:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <tempSetPoint+0x1>
    b300:	a0 91 bb 21 	lds	r26, 0x21BB	; 0x8021bb <tempSetPoint+0x2>
    b304:	b0 91 bc 21 	lds	r27, 0x21BC	; 0x8021bc <tempSetPoint+0x3>
    b308:	9c 01       	movw	r18, r24
    b30a:	ad 01       	movw	r20, r26
    b30c:	c8 01       	movw	r24, r16
    b30e:	b7 01       	movw	r22, r14
    b310:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    b314:	dc 01       	movw	r26, r24
    b316:	cb 01       	movw	r24, r22
    b318:	6c 01       	movw	r12, r24
    b31a:	7d 01       	movw	r14, r26
    b31c:	80 91 b9 21 	lds	r24, 0x21B9	; 0x8021b9 <tempSetPoint>
    b320:	90 91 ba 21 	lds	r25, 0x21BA	; 0x8021ba <tempSetPoint+0x1>
    b324:	a0 91 bb 21 	lds	r26, 0x21BB	; 0x8021bb <tempSetPoint+0x2>
    b328:	b0 91 bc 21 	lds	r27, 0x21BC	; 0x8021bc <tempSetPoint+0x3>
    b32c:	26 e7       	ldi	r18, 0x76	; 118
    b32e:	30 ee       	ldi	r19, 0xE0	; 224
    b330:	4c e1       	ldi	r20, 0x1C	; 28
    b332:	5d e3       	ldi	r21, 0x3D	; 61
    b334:	bc 01       	movw	r22, r24
    b336:	cd 01       	movw	r24, r26
    b338:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
    b33c:	dc 01       	movw	r26, r24
    b33e:	cb 01       	movw	r24, r22
    b340:	9c 01       	movw	r18, r24
    b342:	ad 01       	movw	r20, r26
    b344:	c7 01       	movw	r24, r14
    b346:	b6 01       	movw	r22, r12
    b348:	0e 94 17 b4 	call	0x1682e	; 0x1682e <__addsf3>
    b34c:	dc 01       	movw	r26, r24
    b34e:	cb 01       	movw	r24, r22
    b350:	2e e5       	ldi	r18, 0x5E	; 94
    b352:	3a eb       	ldi	r19, 0xBA	; 186
    b354:	45 eb       	ldi	r20, 0xB5	; 181
    b356:	50 e4       	ldi	r21, 0x40	; 64
    b358:	bc 01       	movw	r22, r24
    b35a:	cd 01       	movw	r24, r26
    b35c:	0e 94 17 b4 	call	0x1682e	; 0x1682e <__addsf3>
    b360:	dc 01       	movw	r26, r24
    b362:	cb 01       	movw	r24, r22
    b364:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <heaterDCOffset>
    b368:	90 93 c3 21 	sts	0x21C3, r25	; 0x8021c3 <heaterDCOffset+0x1>
    b36c:	a0 93 c4 21 	sts	0x21C4, r26	; 0x8021c4 <heaterDCOffset+0x2>
    b370:	b0 93 c5 21 	sts	0x21C5, r27	; 0x8021c5 <heaterDCOffset+0x3>
    b374:	00 00       	nop
    b376:	df 91       	pop	r29
    b378:	cf 91       	pop	r28
    b37a:	1f 91       	pop	r17
    b37c:	0f 91       	pop	r16
    b37e:	ff 90       	pop	r15
    b380:	ef 90       	pop	r14
    b382:	df 90       	pop	r13
    b384:	cf 90       	pop	r12
    b386:	08 95       	ret

0000b388 <handle_TEC>:
    b388:	cf 93       	push	r28
    b38a:	df 93       	push	r29
    b38c:	cd b7       	in	r28, 0x3d	; 61
    b38e:	de b7       	in	r29, 0x3e	; 62
    b390:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <TECTime_ms>
    b394:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <TECTime_ms+0x1>
    b398:	a0 91 a6 21 	lds	r26, 0x21A6	; 0x8021a6 <TECTime_ms+0x2>
    b39c:	b0 91 a7 21 	lds	r27, 0x21A7	; 0x8021a7 <TECTime_ms+0x3>
    b3a0:	0a 97       	sbiw	r24, 0x0a	; 10
    b3a2:	a1 05       	cpc	r26, r1
    b3a4:	b1 05       	cpc	r27, r1
    b3a6:	08 f4       	brcc	.+2      	; 0xb3aa <handle_TEC+0x22>
    b3a8:	ab c0       	rjmp	.+342    	; 0xb500 <handle_TEC+0x178>
    b3aa:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <TECState>
    b3ae:	88 2f       	mov	r24, r24
    b3b0:	90 e0       	ldi	r25, 0x00	; 0
    b3b2:	81 30       	cpi	r24, 0x01	; 1
    b3b4:	91 05       	cpc	r25, r1
    b3b6:	79 f0       	breq	.+30     	; 0xb3d6 <handle_TEC+0x4e>
    b3b8:	82 30       	cpi	r24, 0x02	; 2
    b3ba:	91 05       	cpc	r25, r1
    b3bc:	24 f4       	brge	.+8      	; 0xb3c6 <handle_TEC+0x3e>
    b3be:	89 2b       	or	r24, r25
    b3c0:	09 f4       	brne	.+2      	; 0xb3c4 <handle_TEC+0x3c>
    b3c2:	93 c0       	rjmp	.+294    	; 0xb4ea <handle_TEC+0x162>
    b3c4:	8f c0       	rjmp	.+286    	; 0xb4e4 <handle_TEC+0x15c>
    b3c6:	82 30       	cpi	r24, 0x02	; 2
    b3c8:	91 05       	cpc	r25, r1
    b3ca:	09 f4       	brne	.+2      	; 0xb3ce <handle_TEC+0x46>
    b3cc:	41 c0       	rjmp	.+130    	; 0xb450 <handle_TEC+0xc8>
    b3ce:	03 97       	sbiw	r24, 0x03	; 3
    b3d0:	09 f4       	brne	.+2      	; 0xb3d4 <handle_TEC+0x4c>
    b3d2:	63 c0       	rjmp	.+198    	; 0xb49a <handle_TEC+0x112>
    b3d4:	87 c0       	rjmp	.+270    	; 0xb4e4 <handle_TEC+0x15c>
    b3d6:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b3da:	88 23       	and	r24, r24
    b3dc:	c9 f0       	breq	.+50     	; 0xb410 <handle_TEC+0x88>
    b3de:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b3e2:	81 50       	subi	r24, 0x01	; 1
    b3e4:	80 93 ca 21 	sts	0x21CA, r24	; 0x8021ca <curTECPWMDutyA>
    b3e8:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b3ec:	0e 94 b6 7d 	call	0xfb6c	; 0xfb6c <set_TEC_pwm_A_duty>
    b3f0:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b3f4:	88 23       	and	r24, r24
    b3f6:	61 f4       	brne	.+24     	; 0xb410 <handle_TEC+0x88>
    b3f8:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b3fc:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <TECPWMDutyB>
    b400:	98 17       	cp	r25, r24
    b402:	21 f0       	breq	.+8      	; 0xb40c <handle_TEC+0x84>
    b404:	83 e0       	ldi	r24, 0x03	; 3
    b406:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <TECState>
    b40a:	02 c0       	rjmp	.+4      	; 0xb410 <handle_TEC+0x88>
    b40c:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <TECState>
    b410:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b414:	88 23       	and	r24, r24
    b416:	09 f4       	brne	.+2      	; 0xb41a <handle_TEC+0x92>
    b418:	6a c0       	rjmp	.+212    	; 0xb4ee <handle_TEC+0x166>
    b41a:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b41e:	81 50       	subi	r24, 0x01	; 1
    b420:	80 93 cb 21 	sts	0x21CB, r24	; 0x8021cb <curTECPWMDutyB>
    b424:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b428:	0e 94 e0 7d 	call	0xfbc0	; 0xfbc0 <set_TEC_pwm_B_duty>
    b42c:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b430:	88 23       	and	r24, r24
    b432:	09 f0       	breq	.+2      	; 0xb436 <handle_TEC+0xae>
    b434:	5c c0       	rjmp	.+184    	; 0xb4ee <handle_TEC+0x166>
    b436:	90 91 ca 21 	lds	r25, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b43a:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <TECPWMDutyA>
    b43e:	98 17       	cp	r25, r24
    b440:	21 f0       	breq	.+8      	; 0xb44a <handle_TEC+0xc2>
    b442:	82 e0       	ldi	r24, 0x02	; 2
    b444:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <TECState>
    b448:	52 c0       	rjmp	.+164    	; 0xb4ee <handle_TEC+0x166>
    b44a:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <TECState>
    b44e:	4f c0       	rjmp	.+158    	; 0xb4ee <handle_TEC+0x166>
    b450:	90 91 ca 21 	lds	r25, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b454:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <TECPWMDutyA>
    b458:	98 17       	cp	r25, r24
    b45a:	e1 f0       	breq	.+56     	; 0xb494 <handle_TEC+0x10c>
    b45c:	90 91 ca 21 	lds	r25, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b460:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <TECPWMDutyA>
    b464:	98 17       	cp	r25, r24
    b466:	30 f4       	brcc	.+12     	; 0xb474 <handle_TEC+0xec>
    b468:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b46c:	8f 5f       	subi	r24, 0xFF	; 255
    b46e:	80 93 ca 21 	sts	0x21CA, r24	; 0x8021ca <curTECPWMDutyA>
    b472:	0b c0       	rjmp	.+22     	; 0xb48a <handle_TEC+0x102>
    b474:	90 91 ca 21 	lds	r25, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b478:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <TECPWMDutyA>
    b47c:	89 17       	cp	r24, r25
    b47e:	28 f4       	brcc	.+10     	; 0xb48a <handle_TEC+0x102>
    b480:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b484:	81 50       	subi	r24, 0x01	; 1
    b486:	80 93 ca 21 	sts	0x21CA, r24	; 0x8021ca <curTECPWMDutyA>
    b48a:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <curTECPWMDutyA>
    b48e:	0e 94 b6 7d 	call	0xfb6c	; 0xfb6c <set_TEC_pwm_A_duty>
    b492:	2e c0       	rjmp	.+92     	; 0xb4f0 <handle_TEC+0x168>
    b494:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <TECState>
    b498:	2b c0       	rjmp	.+86     	; 0xb4f0 <handle_TEC+0x168>
    b49a:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b49e:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <TECPWMDutyB>
    b4a2:	98 17       	cp	r25, r24
    b4a4:	e1 f0       	breq	.+56     	; 0xb4de <handle_TEC+0x156>
    b4a6:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b4aa:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <TECPWMDutyB>
    b4ae:	98 17       	cp	r25, r24
    b4b0:	30 f4       	brcc	.+12     	; 0xb4be <handle_TEC+0x136>
    b4b2:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b4b6:	8f 5f       	subi	r24, 0xFF	; 255
    b4b8:	80 93 cb 21 	sts	0x21CB, r24	; 0x8021cb <curTECPWMDutyB>
    b4bc:	0b c0       	rjmp	.+22     	; 0xb4d4 <handle_TEC+0x14c>
    b4be:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b4c2:	80 91 c9 21 	lds	r24, 0x21C9	; 0x8021c9 <TECPWMDutyB>
    b4c6:	89 17       	cp	r24, r25
    b4c8:	28 f4       	brcc	.+10     	; 0xb4d4 <handle_TEC+0x14c>
    b4ca:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b4ce:	81 50       	subi	r24, 0x01	; 1
    b4d0:	80 93 cb 21 	sts	0x21CB, r24	; 0x8021cb <curTECPWMDutyB>
    b4d4:	80 91 cb 21 	lds	r24, 0x21CB	; 0x8021cb <curTECPWMDutyB>
    b4d8:	0e 94 e0 7d 	call	0xfbc0	; 0xfbc0 <set_TEC_pwm_B_duty>
    b4dc:	09 c0       	rjmp	.+18     	; 0xb4f0 <handle_TEC+0x168>
    b4de:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <TECState>
    b4e2:	06 c0       	rjmp	.+12     	; 0xb4f0 <handle_TEC+0x168>
    b4e4:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <TECState>
    b4e8:	03 c0       	rjmp	.+6      	; 0xb4f0 <handle_TEC+0x168>
    b4ea:	00 00       	nop
    b4ec:	01 c0       	rjmp	.+2      	; 0xb4f0 <handle_TEC+0x168>
    b4ee:	00 00       	nop
    b4f0:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <TECTime_ms>
    b4f4:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <TECTime_ms+0x1>
    b4f8:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <TECTime_ms+0x2>
    b4fc:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <TECTime_ms+0x3>
    b500:	00 00       	nop
    b502:	df 91       	pop	r29
    b504:	cf 91       	pop	r28
    b506:	08 95       	ret

0000b508 <reset_blink_time_LED>:
    b508:	cf 93       	push	r28
    b50a:	df 93       	push	r29
    b50c:	cd b7       	in	r28, 0x3d	; 61
    b50e:	de b7       	in	r29, 0x3e	; 62
    b510:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <blinkTimeLED_ms>
    b514:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <blinkTimeLED_ms+0x1>
    b518:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <blinkTimeLED_ms+0x2>
    b51c:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <blinkTimeLED_ms+0x3>
    b520:	00 00       	nop
    b522:	df 91       	pop	r29
    b524:	cf 91       	pop	r28
    b526:	08 95       	ret

0000b528 <calc_buff_average>:

double calc_buff_average(uint16_t *bufVal, uint16_t bufLen)
{
    b528:	cf 93       	push	r28
    b52a:	df 93       	push	r29
    b52c:	cd b7       	in	r28, 0x3d	; 61
    b52e:	de b7       	in	r29, 0x3e	; 62
    b530:	2a 97       	sbiw	r28, 0x0a	; 10
    b532:	cd bf       	out	0x3d, r28	; 61
    b534:	de bf       	out	0x3e, r29	; 62
    b536:	8f 83       	std	Y+7, r24	; 0x07
    b538:	98 87       	std	Y+8, r25	; 0x08
    b53a:	69 87       	std	Y+9, r22	; 0x09
    b53c:	7a 87       	std	Y+10, r23	; 0x0a
	double avgVal = 0;
    b53e:	19 82       	std	Y+1, r1	; 0x01
    b540:	1a 82       	std	Y+2, r1	; 0x02
    b542:	1b 82       	std	Y+3, r1	; 0x03
    b544:	1c 82       	std	Y+4, r1	; 0x04
	for (uint16_t i = 0; i < bufLen; i++)
    b546:	1d 82       	std	Y+5, r1	; 0x05
    b548:	1e 82       	std	Y+6, r1	; 0x06
    b54a:	26 c0       	rjmp	.+76     	; 0xb598 <calc_buff_average+0x70>
	{
		avgVal += *bufVal;
    b54c:	8f 81       	ldd	r24, Y+7	; 0x07
    b54e:	98 85       	ldd	r25, Y+8	; 0x08
    b550:	fc 01       	movw	r30, r24
    b552:	80 81       	ld	r24, Z
    b554:	91 81       	ldd	r25, Z+1	; 0x01
    b556:	cc 01       	movw	r24, r24
    b558:	a0 e0       	ldi	r26, 0x00	; 0
    b55a:	b0 e0       	ldi	r27, 0x00	; 0
    b55c:	bc 01       	movw	r22, r24
    b55e:	cd 01       	movw	r24, r26
    b560:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    b564:	dc 01       	movw	r26, r24
    b566:	cb 01       	movw	r24, r22
    b568:	9c 01       	movw	r18, r24
    b56a:	ad 01       	movw	r20, r26
    b56c:	69 81       	ldd	r22, Y+1	; 0x01
    b56e:	7a 81       	ldd	r23, Y+2	; 0x02
    b570:	8b 81       	ldd	r24, Y+3	; 0x03
    b572:	9c 81       	ldd	r25, Y+4	; 0x04
    b574:	0e 94 17 b4 	call	0x1682e	; 0x1682e <__addsf3>
    b578:	dc 01       	movw	r26, r24
    b57a:	cb 01       	movw	r24, r22
    b57c:	89 83       	std	Y+1, r24	; 0x01
    b57e:	9a 83       	std	Y+2, r25	; 0x02
    b580:	ab 83       	std	Y+3, r26	; 0x03
    b582:	bc 83       	std	Y+4, r27	; 0x04
		bufVal++;
    b584:	8f 81       	ldd	r24, Y+7	; 0x07
    b586:	98 85       	ldd	r25, Y+8	; 0x08
    b588:	02 96       	adiw	r24, 0x02	; 2
    b58a:	8f 83       	std	Y+7, r24	; 0x07
    b58c:	98 87       	std	Y+8, r25	; 0x08
}

double calc_buff_average(uint16_t *bufVal, uint16_t bufLen)
{
	double avgVal = 0;
	for (uint16_t i = 0; i < bufLen; i++)
    b58e:	8d 81       	ldd	r24, Y+5	; 0x05
    b590:	9e 81       	ldd	r25, Y+6	; 0x06
    b592:	01 96       	adiw	r24, 0x01	; 1
    b594:	8d 83       	std	Y+5, r24	; 0x05
    b596:	9e 83       	std	Y+6, r25	; 0x06
    b598:	2d 81       	ldd	r18, Y+5	; 0x05
    b59a:	3e 81       	ldd	r19, Y+6	; 0x06
    b59c:	89 85       	ldd	r24, Y+9	; 0x09
    b59e:	9a 85       	ldd	r25, Y+10	; 0x0a
    b5a0:	28 17       	cp	r18, r24
    b5a2:	39 07       	cpc	r19, r25
    b5a4:	98 f2       	brcs	.-90     	; 0xb54c <calc_buff_average+0x24>
	{
		avgVal += *bufVal;
		bufVal++;
	}
	avgVal = avgVal / bufLen;
    b5a6:	89 85       	ldd	r24, Y+9	; 0x09
    b5a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b5aa:	cc 01       	movw	r24, r24
    b5ac:	a0 e0       	ldi	r26, 0x00	; 0
    b5ae:	b0 e0       	ldi	r27, 0x00	; 0
    b5b0:	bc 01       	movw	r22, r24
    b5b2:	cd 01       	movw	r24, r26
    b5b4:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
    b5b8:	dc 01       	movw	r26, r24
    b5ba:	cb 01       	movw	r24, r22
    b5bc:	9c 01       	movw	r18, r24
    b5be:	ad 01       	movw	r20, r26
    b5c0:	69 81       	ldd	r22, Y+1	; 0x01
    b5c2:	7a 81       	ldd	r23, Y+2	; 0x02
    b5c4:	8b 81       	ldd	r24, Y+3	; 0x03
    b5c6:	9c 81       	ldd	r25, Y+4	; 0x04
    b5c8:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    b5cc:	dc 01       	movw	r26, r24
    b5ce:	cb 01       	movw	r24, r22
    b5d0:	89 83       	std	Y+1, r24	; 0x01
    b5d2:	9a 83       	std	Y+2, r25	; 0x02
    b5d4:	ab 83       	std	Y+3, r26	; 0x03
    b5d6:	bc 83       	std	Y+4, r27	; 0x04
	return avgVal;
    b5d8:	89 81       	ldd	r24, Y+1	; 0x01
    b5da:	9a 81       	ldd	r25, Y+2	; 0x02
    b5dc:	ab 81       	ldd	r26, Y+3	; 0x03
    b5de:	bc 81       	ldd	r27, Y+4	; 0x04
}
    b5e0:	bc 01       	movw	r22, r24
    b5e2:	cd 01       	movw	r24, r26
    b5e4:	2a 96       	adiw	r28, 0x0a	; 10
    b5e6:	cd bf       	out	0x3d, r28	; 61
    b5e8:	de bf       	out	0x3e, r29	; 62
    b5ea:	df 91       	pop	r29
    b5ec:	cf 91       	pop	r28
    b5ee:	08 95       	ret

0000b5f0 <init_DMA>:

void init_DMA(void)
{	
    b5f0:	cf 93       	push	r28
    b5f2:	df 93       	push	r29
    b5f4:	cd b7       	in	r28, 0x3d	; 61
    b5f6:	de b7       	in	r29, 0x3e	; 62
    b5f8:	a1 97       	sbiw	r28, 0x21	; 33
    b5fa:	cd bf       	out	0x3d, r28	; 61
    b5fc:	de bf       	out	0x3e, r29	; 62
	//DMA setup for fan current sense
	struct dma_channel_config fanSenseDMAConfig;
	memset(&fanSenseDMAConfig, 0, sizeof(fanSenseDMAConfig));
    b5fe:	4b e0       	ldi	r20, 0x0B	; 11
    b600:	50 e0       	ldi	r21, 0x00	; 0
    b602:	60 e0       	ldi	r22, 0x00	; 0
    b604:	70 e0       	ldi	r23, 0x00	; 0
    b606:	ce 01       	movw	r24, r28
    b608:	01 96       	adiw	r24, 0x01	; 1
    b60a:	0e 94 f5 b7 	call	0x16fea	; 0x16fea <memset>
	dma_channel_set_burst_length(&fanSenseDMAConfig, DMA_CH_BURSTLEN_2BYTE_gc);
    b60e:	61 e0       	ldi	r22, 0x01	; 1
    b610:	ce 01       	movw	r24, r28
    b612:	01 96       	adiw	r24, 0x01	; 1
    b614:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <dma_channel_set_burst_length>
	dma_channel_set_transfer_count(&fanSenseDMAConfig, FAN_SENSE_DMA_BUFF_SIZE);
    b618:	60 e4       	ldi	r22, 0x40	; 64
    b61a:	70 e0       	ldi	r23, 0x00	; 0
    b61c:	ce 01       	movw	r24, r28
    b61e:	01 96       	adiw	r24, 0x01	; 1
    b620:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <dma_channel_set_transfer_count>
	dma_channel_set_src_reload_mode(&fanSenseDMAConfig, DMA_CH_SRCRELOAD_BURST_gc);
    b624:	60 e8       	ldi	r22, 0x80	; 128
    b626:	ce 01       	movw	r24, r28
    b628:	01 96       	adiw	r24, 0x01	; 1
    b62a:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <dma_channel_set_src_reload_mode>
	dma_channel_set_dest_reload_mode(&fanSenseDMAConfig, DMA_CH_DESTRELOAD_TRANSACTION_gc);
    b62e:	6c e0       	ldi	r22, 0x0C	; 12
    b630:	ce 01       	movw	r24, r28
    b632:	01 96       	adiw	r24, 0x01	; 1
    b634:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <dma_channel_set_dest_reload_mode>
	dma_channel_set_src_dir_mode(&fanSenseDMAConfig, DMA_CH_SRCDIR_INC_gc);
    b638:	60 e1       	ldi	r22, 0x10	; 16
    b63a:	ce 01       	movw	r24, r28
    b63c:	01 96       	adiw	r24, 0x01	; 1
    b63e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <dma_channel_set_src_dir_mode>
	dma_channel_set_dest_dir_mode(&fanSenseDMAConfig, DMA_CH_DESTDIR_INC_gc);
    b642:	61 e0       	ldi	r22, 0x01	; 1
    b644:	ce 01       	movw	r24, r28
    b646:	01 96       	adiw	r24, 0x01	; 1
    b648:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <dma_channel_set_dest_dir_mode>
	dma_channel_set_source_address(&fanSenseDMAConfig, (uint16_t)(uintptr_t)ADCA.CH0RES); //Get data from ADC CH0
    b64c:	80 e0       	ldi	r24, 0x00	; 0
    b64e:	92 e0       	ldi	r25, 0x02	; 2
    b650:	fc 01       	movw	r30, r24
    b652:	80 89       	ldd	r24, Z+16	; 0x10
    b654:	91 89       	ldd	r25, Z+17	; 0x11
    b656:	bc 01       	movw	r22, r24
    b658:	ce 01       	movw	r24, r28
    b65a:	01 96       	adiw	r24, 0x01	; 1
    b65c:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <dma_channel_set_source_address>
	dma_channel_set_destination_address(&fanSenseDMAConfig, (uint16_t)(uintptr_t)fanSenseDMABuffer);
    b660:	85 ee       	ldi	r24, 0xE5	; 229
    b662:	91 e2       	ldi	r25, 0x21	; 33
    b664:	bc 01       	movw	r22, r24
    b666:	ce 01       	movw	r24, r28
    b668:	01 96       	adiw	r24, 0x01	; 1
    b66a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <dma_channel_set_destination_address>
	dma_channel_set_trigger_source(&fanSenseDMAConfig, DMA_CH_TRIGSRC_ADCA_CH0_gc);
    b66e:	60 e1       	ldi	r22, 0x10	; 16
    b670:	ce 01       	movw	r24, r28
    b672:	01 96       	adiw	r24, 0x01	; 1
    b674:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <dma_channel_set_trigger_source>
	dma_channel_set_repeats(&fanSenseDMAConfig, 0); //Setting repeats to 0 equals infinite repeats
    b678:	60 e0       	ldi	r22, 0x00	; 0
    b67a:	ce 01       	movw	r24, r28
    b67c:	01 96       	adiw	r24, 0x01	; 1
    b67e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <dma_channel_set_repeats>
	dma_enable(); //Resets entire DMA peripheral (only call once)
    b682:	0e 94 39 6d 	call	0xda72	; 0xda72 <dma_enable>
	dma_channel_write_config(FAN_SENSE_DMA_CHANNEL, &fanSenseDMAConfig);
    b686:	ce 01       	movw	r24, r28
    b688:	01 96       	adiw	r24, 0x01	; 1
    b68a:	bc 01       	movw	r22, r24
    b68c:	80 e0       	ldi	r24, 0x00	; 0
    b68e:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <dma_channel_write_config>
	dma_channel_enable(FAN_SENSE_DMA_CHANNEL);
    b692:	80 e0       	ldi	r24, 0x00	; 0
    b694:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <dma_channel_enable>
	
	//DMA setup for thermistor
	struct dma_channel_config thermDMAConfig;
	memset(&thermDMAConfig, 0, sizeof(thermDMAConfig));
    b698:	ce 01       	movw	r24, r28
    b69a:	0c 96       	adiw	r24, 0x0c	; 12
    b69c:	4b e0       	ldi	r20, 0x0B	; 11
    b69e:	50 e0       	ldi	r21, 0x00	; 0
    b6a0:	60 e0       	ldi	r22, 0x00	; 0
    b6a2:	70 e0       	ldi	r23, 0x00	; 0
    b6a4:	0e 94 f5 b7 	call	0x16fea	; 0x16fea <memset>
	dma_channel_set_burst_length(&thermDMAConfig, DMA_CH_BURSTLEN_2BYTE_gc);
    b6a8:	ce 01       	movw	r24, r28
    b6aa:	0c 96       	adiw	r24, 0x0c	; 12
    b6ac:	61 e0       	ldi	r22, 0x01	; 1
    b6ae:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <dma_channel_set_burst_length>
	dma_channel_set_transfer_count(&thermDMAConfig, THERM_DMA_BUFF_SIZE);
    b6b2:	ce 01       	movw	r24, r28
    b6b4:	0c 96       	adiw	r24, 0x0c	; 12
    b6b6:	60 e4       	ldi	r22, 0x40	; 64
    b6b8:	70 e0       	ldi	r23, 0x00	; 0
    b6ba:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <dma_channel_set_transfer_count>
	dma_channel_set_src_reload_mode(&thermDMAConfig, DMA_CH_SRCRELOAD_BURST_gc);
    b6be:	ce 01       	movw	r24, r28
    b6c0:	0c 96       	adiw	r24, 0x0c	; 12
    b6c2:	60 e8       	ldi	r22, 0x80	; 128
    b6c4:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <dma_channel_set_src_reload_mode>
	dma_channel_set_dest_reload_mode(&thermDMAConfig, DMA_CH_DESTRELOAD_TRANSACTION_gc);
    b6c8:	ce 01       	movw	r24, r28
    b6ca:	0c 96       	adiw	r24, 0x0c	; 12
    b6cc:	6c e0       	ldi	r22, 0x0C	; 12
    b6ce:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <dma_channel_set_dest_reload_mode>
	dma_channel_set_src_dir_mode(&thermDMAConfig, DMA_CH_SRCDIR_INC_gc);
    b6d2:	ce 01       	movw	r24, r28
    b6d4:	0c 96       	adiw	r24, 0x0c	; 12
    b6d6:	60 e1       	ldi	r22, 0x10	; 16
    b6d8:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <dma_channel_set_src_dir_mode>
	dma_channel_set_dest_dir_mode(&thermDMAConfig, DMA_CH_DESTDIR_INC_gc);
    b6dc:	ce 01       	movw	r24, r28
    b6de:	0c 96       	adiw	r24, 0x0c	; 12
    b6e0:	61 e0       	ldi	r22, 0x01	; 1
    b6e2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <dma_channel_set_dest_dir_mode>
	dma_channel_set_source_address(&thermDMAConfig, (uint16_t)(uintptr_t)&ADCA.CH1RES); //Get data from ADC CH1
    b6e6:	ce 01       	movw	r24, r28
    b6e8:	0c 96       	adiw	r24, 0x0c	; 12
    b6ea:	62 e1       	ldi	r22, 0x12	; 18
    b6ec:	72 e0       	ldi	r23, 0x02	; 2
    b6ee:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <dma_channel_set_source_address>
	dma_channel_set_destination_address(&thermDMAConfig, (uint16_t)(uintptr_t)thermDMABuffer);
    b6f2:	25 e2       	ldi	r18, 0x25	; 37
    b6f4:	32 e2       	ldi	r19, 0x22	; 34
    b6f6:	ce 01       	movw	r24, r28
    b6f8:	0c 96       	adiw	r24, 0x0c	; 12
    b6fa:	b9 01       	movw	r22, r18
    b6fc:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <dma_channel_set_destination_address>
	dma_channel_set_trigger_source(&thermDMAConfig, DMA_CH_TRIGSRC_ADCA_CH1_gc);
    b700:	ce 01       	movw	r24, r28
    b702:	0c 96       	adiw	r24, 0x0c	; 12
    b704:	61 e1       	ldi	r22, 0x11	; 17
    b706:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <dma_channel_set_trigger_source>
	dma_channel_set_repeats(&thermDMAConfig, 0); //Setting repeats to 0 equals infinite repeats
    b70a:	ce 01       	movw	r24, r28
    b70c:	0c 96       	adiw	r24, 0x0c	; 12
    b70e:	60 e0       	ldi	r22, 0x00	; 0
    b710:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <dma_channel_set_repeats>
	dma_channel_write_config(THERM_DMA_CHANNEL, &thermDMAConfig);
    b714:	ce 01       	movw	r24, r28
    b716:	0c 96       	adiw	r24, 0x0c	; 12
    b718:	bc 01       	movw	r22, r24
    b71a:	81 e0       	ldi	r24, 0x01	; 1
    b71c:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <dma_channel_write_config>
	dma_channel_enable(THERM_DMA_CHANNEL);
    b720:	81 e0       	ldi	r24, 0x01	; 1
    b722:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <dma_channel_enable>
	
	//DMA setup for pump current sense
	struct dma_channel_config pumpSenseDMAConfig;
	memset(&pumpSenseDMAConfig, 0, sizeof(pumpSenseDMAConfig));
    b726:	ce 01       	movw	r24, r28
    b728:	47 96       	adiw	r24, 0x17	; 23
    b72a:	4b e0       	ldi	r20, 0x0B	; 11
    b72c:	50 e0       	ldi	r21, 0x00	; 0
    b72e:	60 e0       	ldi	r22, 0x00	; 0
    b730:	70 e0       	ldi	r23, 0x00	; 0
    b732:	0e 94 f5 b7 	call	0x16fea	; 0x16fea <memset>
	dma_channel_set_burst_length(&pumpSenseDMAConfig, DMA_CH_BURSTLEN_2BYTE_gc);
    b736:	ce 01       	movw	r24, r28
    b738:	47 96       	adiw	r24, 0x17	; 23
    b73a:	61 e0       	ldi	r22, 0x01	; 1
    b73c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <dma_channel_set_burst_length>
	dma_channel_set_transfer_count(&pumpSenseDMAConfig, PUMP_SENSE_DMA_BUFF_SIZE);
    b740:	ce 01       	movw	r24, r28
    b742:	47 96       	adiw	r24, 0x17	; 23
    b744:	60 e4       	ldi	r22, 0x40	; 64
    b746:	70 e0       	ldi	r23, 0x00	; 0
    b748:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <dma_channel_set_transfer_count>
	dma_channel_set_src_reload_mode(&pumpSenseDMAConfig, DMA_CH_SRCRELOAD_BURST_gc);
    b74c:	ce 01       	movw	r24, r28
    b74e:	47 96       	adiw	r24, 0x17	; 23
    b750:	60 e8       	ldi	r22, 0x80	; 128
    b752:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <dma_channel_set_src_reload_mode>
	dma_channel_set_dest_reload_mode(&pumpSenseDMAConfig, DMA_CH_DESTRELOAD_TRANSACTION_gc);
    b756:	ce 01       	movw	r24, r28
    b758:	47 96       	adiw	r24, 0x17	; 23
    b75a:	6c e0       	ldi	r22, 0x0C	; 12
    b75c:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <dma_channel_set_dest_reload_mode>
	dma_channel_set_src_dir_mode(&pumpSenseDMAConfig, DMA_CH_SRCDIR_INC_gc);
    b760:	ce 01       	movw	r24, r28
    b762:	47 96       	adiw	r24, 0x17	; 23
    b764:	60 e1       	ldi	r22, 0x10	; 16
    b766:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <dma_channel_set_src_dir_mode>
	dma_channel_set_dest_dir_mode(&pumpSenseDMAConfig, DMA_CH_DESTDIR_INC_gc);
    b76a:	ce 01       	movw	r24, r28
    b76c:	47 96       	adiw	r24, 0x17	; 23
    b76e:	61 e0       	ldi	r22, 0x01	; 1
    b770:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <dma_channel_set_dest_dir_mode>
	dma_channel_set_source_address(&pumpSenseDMAConfig, (uint16_t)(uintptr_t)&ADCA.CH2RES); //Get data from ADC CH2
    b774:	ce 01       	movw	r24, r28
    b776:	47 96       	adiw	r24, 0x17	; 23
    b778:	64 e1       	ldi	r22, 0x14	; 20
    b77a:	72 e0       	ldi	r23, 0x02	; 2
    b77c:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <dma_channel_set_source_address>
	dma_channel_set_destination_address(&pumpSenseDMAConfig, (uint16_t)(uintptr_t)pumpSenseDMABuffer);
    b780:	25 e6       	ldi	r18, 0x65	; 101
    b782:	32 e2       	ldi	r19, 0x22	; 34
    b784:	ce 01       	movw	r24, r28
    b786:	47 96       	adiw	r24, 0x17	; 23
    b788:	b9 01       	movw	r22, r18
    b78a:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <dma_channel_set_destination_address>
	dma_channel_set_trigger_source(&pumpSenseDMAConfig, DMA_CH_TRIGSRC_ADCA_CH2_gc);
    b78e:	ce 01       	movw	r24, r28
    b790:	47 96       	adiw	r24, 0x17	; 23
    b792:	62 e1       	ldi	r22, 0x12	; 18
    b794:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <dma_channel_set_trigger_source>
	dma_channel_set_repeats(&pumpSenseDMAConfig, 0); //Setting repeats to 0 equals infinite repeats
    b798:	ce 01       	movw	r24, r28
    b79a:	47 96       	adiw	r24, 0x17	; 23
    b79c:	60 e0       	ldi	r22, 0x00	; 0
    b79e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <dma_channel_set_repeats>
	dma_channel_write_config(PUMP_SENSE_DMA_CHANNEL, &pumpSenseDMAConfig);
    b7a2:	ce 01       	movw	r24, r28
    b7a4:	47 96       	adiw	r24, 0x17	; 23
    b7a6:	bc 01       	movw	r22, r24
    b7a8:	82 e0       	ldi	r24, 0x02	; 2
    b7aa:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <dma_channel_write_config>
	dma_channel_enable(PUMP_SENSE_DMA_CHANNEL);
    b7ae:	82 e0       	ldi	r24, 0x02	; 2
    b7b0:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <dma_channel_enable>
	//dma_channel_set_trigger_source(&heaterSenseDMAConfig, (uint16_t)(uintptr_t)heaterSenseDMABuffer);
	//dma_channel_set_trigger_source(&heaterSenseDMAConfig, DMA_CH_TRIGSRC_ADCA_CH3_gc);
	//dma_channel_set_repeats(&heaterSenseDMAConfig, 0); //Setting repeats to 0 equals infinite repeats
	//dma_channel_write_config(HEATER_SENSE_DMA_CHANNEL, &heaterSenseDMAConfig);
	//dma_channel_enable(HEATER_SENSE_DMA_CHANNEL);
    b7b4:	00 00       	nop
    b7b6:	a1 96       	adiw	r28, 0x21	; 33
    b7b8:	cd bf       	out	0x3d, r28	; 61
    b7ba:	de bf       	out	0x3e, r29	; 62
    b7bc:	df 91       	pop	r29
    b7be:	cf 91       	pop	r28
    b7c0:	08 95       	ret

0000b7c2 <init_RTD_sensor>:
	uint8_t RTDLSB = 0;
	RTDTxBuffer[0] = READ_MSB;
	read_msg(&RTD_SPI_PORT, _RTD_CS, RTDTxBuffer, &RTDMSB);
	RTDTxBuffer[1] = READ_LSB;
	read_msg(&RTD_SPI_PORT, _RTD_CS, RTDTxBuffer, &RTDLSB);
}
    b7c2:	cf 93       	push	r28
    b7c4:	df 93       	push	r29
    b7c6:	cd b7       	in	r28, 0x3d	; 61
    b7c8:	de b7       	in	r29, 0x3e	; 62
    b7ca:	80 e8       	ldi	r24, 0x80	; 128
    b7cc:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <RTDTxBuffer>
    b7d0:	82 eb       	ldi	r24, 0xB2	; 178
    b7d2:	80 93 59 29 	sts	0x2959, r24	; 0x802959 <RTDTxBuffer+0x1>
    b7d6:	22 e0       	ldi	r18, 0x02	; 2
    b7d8:	48 e5       	ldi	r20, 0x58	; 88
    b7da:	59 e2       	ldi	r21, 0x29	; 41
    b7dc:	64 e1       	ldi	r22, 0x14	; 20
    b7de:	80 ec       	ldi	r24, 0xC0	; 192
    b7e0:	98 e0       	ldi	r25, 0x08	; 8
    b7e2:	a1 d1       	rcall	.+834    	; 0xbb26 <send_msg>
    b7e4:	00 00       	nop
    b7e6:	df 91       	pop	r29
    b7e8:	cf 91       	pop	r28
    b7ea:	08 95       	ret

0000b7ec <get_RTD_sensor_reading>:

uint16_t get_RTD_sensor_reading(void)
{
    b7ec:	cf 93       	push	r28
    b7ee:	df 93       	push	r29
    b7f0:	1f 92       	push	r1
    b7f2:	1f 92       	push	r1
    b7f4:	cd b7       	in	r28, 0x3d	; 61
    b7f6:	de b7       	in	r29, 0x3e	; 62
	uint16_t sensorVal = 0; //Temp reading is a 15-bit value
    b7f8:	19 82       	std	Y+1, r1	; 0x01
    b7fa:	1a 82       	std	Y+2, r1	; 0x02
	
	RTDTxBuffer[0] = WRITE_CONFIG;
    b7fc:	80 e8       	ldi	r24, 0x80	; 128
    b7fe:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <RTDTxBuffer>
	RTDTxBuffer[1] = VBIAS | ONE_SHOT | MODE_3WIRE | FAULT_CLEAR;
    b802:	82 eb       	ldi	r24, 0xB2	; 178
    b804:	80 93 59 29 	sts	0x2959, r24	; 0x802959 <RTDTxBuffer+0x1>
	send_msg(&RTD_SPI_PORT, _RTD_CS, RTDTxBuffer, 2);
    b808:	22 e0       	ldi	r18, 0x02	; 2
    b80a:	48 e5       	ldi	r20, 0x58	; 88
    b80c:	59 e2       	ldi	r21, 0x29	; 41
    b80e:	64 e1       	ldi	r22, 0x14	; 20
    b810:	80 ec       	ldi	r24, 0xC0	; 192
    b812:	98 e0       	ldi	r25, 0x08	; 8
    b814:	88 d1       	rcall	.+784    	; 0xbb26 <send_msg>
	
	//Read MSB val
	RTDTxBuffer[0] = READ_MSB;
    b816:	81 e0       	ldi	r24, 0x01	; 1
    b818:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <RTDTxBuffer>
	read_msg(&RTD_SPI_PORT, _RTD_CS, &RTDTxBuffer[0], &RTDRxBuffer[0]);
    b81c:	28 e6       	ldi	r18, 0x68	; 104
    b81e:	39 e2       	ldi	r19, 0x29	; 41
    b820:	48 e5       	ldi	r20, 0x58	; 88
    b822:	59 e2       	ldi	r21, 0x29	; 41
    b824:	64 e1       	ldi	r22, 0x14	; 20
    b826:	80 ec       	ldi	r24, 0xC0	; 192
    b828:	98 e0       	ldi	r25, 0x08	; 8
    b82a:	a1 d1       	rcall	.+834    	; 0xbb6e <read_msg>
	sensorVal = (RTDRxBuffer[0] << 8);
    b82c:	80 91 68 29 	lds	r24, 0x2968	; 0x802968 <RTDRxBuffer>
    b830:	88 2f       	mov	r24, r24
    b832:	90 e0       	ldi	r25, 0x00	; 0
    b834:	98 2f       	mov	r25, r24
    b836:	88 27       	eor	r24, r24
    b838:	89 83       	std	Y+1, r24	; 0x01
    b83a:	9a 83       	std	Y+2, r25	; 0x02
	
	//Read LSB val
	RTDTxBuffer[0] = READ_LSB;
    b83c:	82 e0       	ldi	r24, 0x02	; 2
    b83e:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <RTDTxBuffer>
	read_msg(&RTD_SPI_PORT, _RTD_CS, &RTDTxBuffer[0], &RTDRxBuffer[0]);
    b842:	28 e6       	ldi	r18, 0x68	; 104
    b844:	39 e2       	ldi	r19, 0x29	; 41
    b846:	48 e5       	ldi	r20, 0x58	; 88
    b848:	59 e2       	ldi	r21, 0x29	; 41
    b84a:	64 e1       	ldi	r22, 0x14	; 20
    b84c:	80 ec       	ldi	r24, 0xC0	; 192
    b84e:	98 e0       	ldi	r25, 0x08	; 8
    b850:	8e d1       	rcall	.+796    	; 0xbb6e <read_msg>
	sensorVal |= RTDRxBuffer[0];
    b852:	80 91 68 29 	lds	r24, 0x2968	; 0x802968 <RTDRxBuffer>
    b856:	88 2f       	mov	r24, r24
    b858:	90 e0       	ldi	r25, 0x00	; 0
    b85a:	29 81       	ldd	r18, Y+1	; 0x01
    b85c:	3a 81       	ldd	r19, Y+2	; 0x02
    b85e:	82 2b       	or	r24, r18
    b860:	93 2b       	or	r25, r19
    b862:	89 83       	std	Y+1, r24	; 0x01
    b864:	9a 83       	std	Y+2, r25	; 0x02
	
	//Last bit is a fault flag
	if (!(sensorVal & 0x01))
    b866:	89 81       	ldd	r24, Y+1	; 0x01
    b868:	9a 81       	ldd	r25, Y+2	; 0x02
    b86a:	81 70       	andi	r24, 0x01	; 1
    b86c:	99 27       	eor	r25, r25
    b86e:	89 2b       	or	r24, r25
    b870:	39 f4       	brne	.+14     	; 0xb880 <get_RTD_sensor_reading+0x94>
	{
		sensorVal = (sensorVal >> 1); //Shift out fault flag
    b872:	89 81       	ldd	r24, Y+1	; 0x01
    b874:	9a 81       	ldd	r25, Y+2	; 0x02
    b876:	96 95       	lsr	r25
    b878:	87 95       	ror	r24
    b87a:	89 83       	std	Y+1, r24	; 0x01
    b87c:	9a 83       	std	Y+2, r25	; 0x02
    b87e:	02 c0       	rjmp	.+4      	; 0xb884 <get_RTD_sensor_reading+0x98>
	}
	else
	{
		sensorVal = 0;
    b880:	19 82       	std	Y+1, r1	; 0x01
    b882:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return sensorVal;
    b884:	89 81       	ldd	r24, Y+1	; 0x01
    b886:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b888:	0f 90       	pop	r0
    b88a:	0f 90       	pop	r0
    b88c:	df 91       	pop	r29
    b88e:	cf 91       	pop	r28
    b890:	08 95       	ret

0000b892 <ioport_configure_pin>:
}

void disable_SPI(SPI_t *SPIPort)
{
	spi_disable(SPIPort);
}
    b892:	cf 93       	push	r28
    b894:	df 93       	push	r29
    b896:	cd b7       	in	r28, 0x3d	; 61
    b898:	de b7       	in	r29, 0x3e	; 62
    b89a:	27 97       	sbiw	r28, 0x07	; 7
    b89c:	cd bf       	out	0x3d, r28	; 61
    b89e:	de bf       	out	0x3e, r29	; 62
    b8a0:	8d 83       	std	Y+5, r24	; 0x05
    b8a2:	6e 83       	std	Y+6, r22	; 0x06
    b8a4:	7f 83       	std	Y+7, r23	; 0x07
    b8a6:	8d 81       	ldd	r24, Y+5	; 0x05
    b8a8:	89 83       	std	Y+1, r24	; 0x01
    b8aa:	89 81       	ldd	r24, Y+1	; 0x01
    b8ac:	88 2f       	mov	r24, r24
    b8ae:	90 e0       	ldi	r25, 0x00	; 0
    b8b0:	9c 01       	movw	r18, r24
    b8b2:	27 70       	andi	r18, 0x07	; 7
    b8b4:	33 27       	eor	r19, r19
    b8b6:	81 e0       	ldi	r24, 0x01	; 1
    b8b8:	90 e0       	ldi	r25, 0x00	; 0
    b8ba:	02 c0       	rjmp	.+4      	; 0xb8c0 <ioport_configure_pin+0x2e>
    b8bc:	88 0f       	add	r24, r24
    b8be:	99 1f       	adc	r25, r25
    b8c0:	2a 95       	dec	r18
    b8c2:	e2 f7       	brpl	.-8      	; 0xb8bc <ioport_configure_pin+0x2a>
    b8c4:	68 2f       	mov	r22, r24
    b8c6:	8d 81       	ldd	r24, Y+5	; 0x05
    b8c8:	8a 83       	std	Y+2, r24	; 0x02
    b8ca:	8a 81       	ldd	r24, Y+2	; 0x02
    b8cc:	8b 83       	std	Y+3, r24	; 0x03
    b8ce:	8b 81       	ldd	r24, Y+3	; 0x03
    b8d0:	86 95       	lsr	r24
    b8d2:	86 95       	lsr	r24
    b8d4:	86 95       	lsr	r24
    b8d6:	8c 83       	std	Y+4, r24	; 0x04
    b8d8:	8c 81       	ldd	r24, Y+4	; 0x04
    b8da:	88 2f       	mov	r24, r24
    b8dc:	90 e0       	ldi	r25, 0x00	; 0
    b8de:	88 0f       	add	r24, r24
    b8e0:	99 1f       	adc	r25, r25
    b8e2:	82 95       	swap	r24
    b8e4:	92 95       	swap	r25
    b8e6:	90 7f       	andi	r25, 0xF0	; 240
    b8e8:	98 27       	eor	r25, r24
    b8ea:	80 7f       	andi	r24, 0xF0	; 240
    b8ec:	98 27       	eor	r25, r24
    b8ee:	9a 5f       	subi	r25, 0xFA	; 250
    b8f0:	9c 01       	movw	r18, r24
    b8f2:	8e 81       	ldd	r24, Y+6	; 0x06
    b8f4:	9f 81       	ldd	r25, Y+7	; 0x07
    b8f6:	ac 01       	movw	r20, r24
    b8f8:	c9 01       	movw	r24, r18
    b8fa:	0e 94 89 97 	call	0x12f12	; 0x12f12 <ioport_configure_port_pin>
    b8fe:	00 00       	nop
    b900:	27 96       	adiw	r28, 0x07	; 7
    b902:	cd bf       	out	0x3d, r28	; 61
    b904:	de bf       	out	0x3e, r29	; 62
    b906:	df 91       	pop	r29
    b908:	cf 91       	pop	r28
    b90a:	08 95       	ret

0000b90c <spi_enable>:
    b90c:	cf 93       	push	r28
    b90e:	df 93       	push	r29
    b910:	1f 92       	push	r1
    b912:	1f 92       	push	r1
    b914:	cd b7       	in	r28, 0x3d	; 61
    b916:	de b7       	in	r29, 0x3e	; 62
    b918:	89 83       	std	Y+1, r24	; 0x01
    b91a:	9a 83       	std	Y+2, r25	; 0x02
    b91c:	89 81       	ldd	r24, Y+1	; 0x01
    b91e:	9a 81       	ldd	r25, Y+2	; 0x02
    b920:	fc 01       	movw	r30, r24
    b922:	80 81       	ld	r24, Z
    b924:	28 2f       	mov	r18, r24
    b926:	20 64       	ori	r18, 0x40	; 64
    b928:	89 81       	ldd	r24, Y+1	; 0x01
    b92a:	9a 81       	ldd	r25, Y+2	; 0x02
    b92c:	fc 01       	movw	r30, r24
    b92e:	20 83       	st	Z, r18
    b930:	00 00       	nop
    b932:	0f 90       	pop	r0
    b934:	0f 90       	pop	r0
    b936:	df 91       	pop	r29
    b938:	cf 91       	pop	r28
    b93a:	08 95       	ret

0000b93c <spi_get>:
    b93c:	cf 93       	push	r28
    b93e:	df 93       	push	r29
    b940:	1f 92       	push	r1
    b942:	1f 92       	push	r1
    b944:	cd b7       	in	r28, 0x3d	; 61
    b946:	de b7       	in	r29, 0x3e	; 62
    b948:	89 83       	std	Y+1, r24	; 0x01
    b94a:	9a 83       	std	Y+2, r25	; 0x02
    b94c:	89 81       	ldd	r24, Y+1	; 0x01
    b94e:	9a 81       	ldd	r25, Y+2	; 0x02
    b950:	fc 01       	movw	r30, r24
    b952:	83 81       	ldd	r24, Z+3	; 0x03
    b954:	0f 90       	pop	r0
    b956:	0f 90       	pop	r0
    b958:	df 91       	pop	r29
    b95a:	cf 91       	pop	r28
    b95c:	08 95       	ret

0000b95e <spi_read_single>:
    b95e:	cf 93       	push	r28
    b960:	df 93       	push	r29
    b962:	00 d0       	rcall	.+0      	; 0xb964 <spi_read_single+0x6>
    b964:	1f 92       	push	r1
    b966:	cd b7       	in	r28, 0x3d	; 61
    b968:	de b7       	in	r29, 0x3e	; 62
    b96a:	89 83       	std	Y+1, r24	; 0x01
    b96c:	9a 83       	std	Y+2, r25	; 0x02
    b96e:	6b 83       	std	Y+3, r22	; 0x03
    b970:	7c 83       	std	Y+4, r23	; 0x04
    b972:	89 81       	ldd	r24, Y+1	; 0x01
    b974:	9a 81       	ldd	r25, Y+2	; 0x02
    b976:	e2 df       	rcall	.-60     	; 0xb93c <spi_get>
    b978:	28 2f       	mov	r18, r24
    b97a:	8b 81       	ldd	r24, Y+3	; 0x03
    b97c:	9c 81       	ldd	r25, Y+4	; 0x04
    b97e:	fc 01       	movw	r30, r24
    b980:	20 83       	st	Z, r18
    b982:	00 00       	nop
    b984:	24 96       	adiw	r28, 0x04	; 4
    b986:	cd bf       	out	0x3d, r28	; 61
    b988:	de bf       	out	0x3e, r29	; 62
    b98a:	df 91       	pop	r29
    b98c:	cf 91       	pop	r28
    b98e:	08 95       	ret

0000b990 <init_SPI_IO>:
    b990:	cf 93       	push	r28
    b992:	df 93       	push	r29
    b994:	cd b7       	in	r28, 0x3d	; 61
    b996:	de b7       	in	r29, 0x3e	; 62
    b998:	63 e0       	ldi	r22, 0x03	; 3
    b99a:	70 e0       	ldi	r23, 0x00	; 0
    b99c:	84 e1       	ldi	r24, 0x14	; 20
    b99e:	79 df       	rcall	.-270    	; 0xb892 <ioport_configure_pin>
    b9a0:	63 e0       	ldi	r22, 0x03	; 3
    b9a2:	70 e0       	ldi	r23, 0x00	; 0
    b9a4:	85 e1       	ldi	r24, 0x15	; 21
    b9a6:	75 df       	rcall	.-278    	; 0xb892 <ioport_configure_pin>
    b9a8:	60 e0       	ldi	r22, 0x00	; 0
    b9aa:	70 e0       	ldi	r23, 0x00	; 0
    b9ac:	86 e1       	ldi	r24, 0x16	; 22
    b9ae:	71 df       	rcall	.-286    	; 0xb892 <ioport_configure_pin>
    b9b0:	63 e0       	ldi	r22, 0x03	; 3
    b9b2:	70 e0       	ldi	r23, 0x00	; 0
    b9b4:	87 e1       	ldi	r24, 0x17	; 23
    b9b6:	6d df       	rcall	.-294    	; 0xb892 <ioport_configure_pin>
    b9b8:	63 e0       	ldi	r22, 0x03	; 3
    b9ba:	70 e0       	ldi	r23, 0x00	; 0
    b9bc:	84 e2       	ldi	r24, 0x24	; 36
    b9be:	69 df       	rcall	.-302    	; 0xb892 <ioport_configure_pin>
    b9c0:	63 e0       	ldi	r22, 0x03	; 3
    b9c2:	70 e0       	ldi	r23, 0x00	; 0
    b9c4:	8c e3       	ldi	r24, 0x3C	; 60
    b9c6:	65 df       	rcall	.-310    	; 0xb892 <ioport_configure_pin>
    b9c8:	63 e0       	ldi	r22, 0x03	; 3
    b9ca:	70 e0       	ldi	r23, 0x00	; 0
    b9cc:	84 e4       	ldi	r24, 0x44	; 68
    b9ce:	61 df       	rcall	.-318    	; 0xb892 <ioport_configure_pin>
    b9d0:	63 e0       	ldi	r22, 0x03	; 3
    b9d2:	70 e0       	ldi	r23, 0x00	; 0
    b9d4:	8c e4       	ldi	r24, 0x4C	; 76
    b9d6:	5d df       	rcall	.-326    	; 0xb892 <ioport_configure_pin>
    b9d8:	63 e0       	ldi	r22, 0x03	; 3
    b9da:	70 e0       	ldi	r23, 0x00	; 0
    b9dc:	8c e2       	ldi	r24, 0x2C	; 44
    b9de:	59 df       	rcall	.-334    	; 0xb892 <ioport_configure_pin>
    b9e0:	63 e0       	ldi	r22, 0x03	; 3
    b9e2:	70 e0       	ldi	r23, 0x00	; 0
    b9e4:	85 e2       	ldi	r24, 0x25	; 37
    b9e6:	55 df       	rcall	.-342    	; 0xb892 <ioport_configure_pin>
    b9e8:	60 e0       	ldi	r22, 0x00	; 0
    b9ea:	70 e0       	ldi	r23, 0x00	; 0
    b9ec:	86 e2       	ldi	r24, 0x26	; 38
    b9ee:	51 df       	rcall	.-350    	; 0xb892 <ioport_configure_pin>
    b9f0:	63 e0       	ldi	r22, 0x03	; 3
    b9f2:	70 e0       	ldi	r23, 0x00	; 0
    b9f4:	87 e2       	ldi	r24, 0x27	; 39
    b9f6:	4d df       	rcall	.-358    	; 0xb892 <ioport_configure_pin>
    b9f8:	00 00       	nop
    b9fa:	df 91       	pop	r29
    b9fc:	cf 91       	pop	r28
    b9fe:	08 95       	ret

0000ba00 <init_SPI>:
    ba00:	cf 92       	push	r12
    ba02:	df 92       	push	r13
    ba04:	ef 92       	push	r14
    ba06:	ff 92       	push	r15
    ba08:	0f 93       	push	r16
    ba0a:	1f 93       	push	r17
    ba0c:	cf 93       	push	r28
    ba0e:	df 93       	push	r29
    ba10:	cd b7       	in	r28, 0x3d	; 61
    ba12:	de b7       	in	r29, 0x3e	; 62
    ba14:	bd df       	rcall	.-134    	; 0xb990 <init_SPI_IO>
    ba16:	84 e1       	ldi	r24, 0x14	; 20
    ba18:	80 93 78 29 	sts	0x2978, r24	; 0x802978 <RTDSPIConfig>
    ba1c:	84 e2       	ldi	r24, 0x24	; 36
    ba1e:	80 93 79 29 	sts	0x2979, r24	; 0x802979 <stepperSPIConfig>
    ba22:	80 ec       	ldi	r24, 0xC0	; 192
    ba24:	98 e0       	ldi	r25, 0x08	; 8
    ba26:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <spi_master_init>
    ba2a:	80 ec       	ldi	r24, 0xC0	; 192
    ba2c:	9a e0       	ldi	r25, 0x0A	; 10
    ba2e:	0e 94 1d 85 	call	0x10a3a	; 0x10a3a <spi_master_init>
    ba32:	c1 2c       	mov	r12, r1
    ba34:	d1 2c       	mov	r13, r1
    ba36:	76 01       	movw	r14, r12
    ba38:	00 e4       	ldi	r16, 0x40	; 64
    ba3a:	12 e4       	ldi	r17, 0x42	; 66
    ba3c:	2f e0       	ldi	r18, 0x0F	; 15
    ba3e:	30 e0       	ldi	r19, 0x00	; 0
    ba40:	41 e0       	ldi	r20, 0x01	; 1
    ba42:	68 e7       	ldi	r22, 0x78	; 120
    ba44:	79 e2       	ldi	r23, 0x29	; 41
    ba46:	80 ec       	ldi	r24, 0xC0	; 192
    ba48:	98 e0       	ldi	r25, 0x08	; 8
    ba4a:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <spi_master_setup_device>
    ba4e:	c1 2c       	mov	r12, r1
    ba50:	d1 2c       	mov	r13, r1
    ba52:	76 01       	movw	r14, r12
    ba54:	00 e4       	ldi	r16, 0x40	; 64
    ba56:	12 e4       	ldi	r17, 0x42	; 66
    ba58:	2f e0       	ldi	r18, 0x0F	; 15
    ba5a:	30 e0       	ldi	r19, 0x00	; 0
    ba5c:	40 e0       	ldi	r20, 0x00	; 0
    ba5e:	69 e7       	ldi	r22, 0x79	; 121
    ba60:	79 e2       	ldi	r23, 0x29	; 41
    ba62:	80 ec       	ldi	r24, 0xC0	; 192
    ba64:	9a e0       	ldi	r25, 0x0A	; 10
    ba66:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <spi_master_setup_device>
    ba6a:	80 ec       	ldi	r24, 0xC0	; 192
    ba6c:	98 e0       	ldi	r25, 0x08	; 8
    ba6e:	4e df       	rcall	.-356    	; 0xb90c <spi_enable>
    ba70:	80 ec       	ldi	r24, 0xC0	; 192
    ba72:	9a e0       	ldi	r25, 0x0A	; 10
    ba74:	4b df       	rcall	.-362    	; 0xb90c <spi_enable>
    ba76:	00 00       	nop
    ba78:	df 91       	pop	r29
    ba7a:	cf 91       	pop	r28
    ba7c:	1f 91       	pop	r17
    ba7e:	0f 91       	pop	r16
    ba80:	ff 90       	pop	r15
    ba82:	ef 90       	pop	r14
    ba84:	df 90       	pop	r13
    ba86:	cf 90       	pop	r12
    ba88:	08 95       	ret

0000ba8a <select_SPI_device>:

void select_SPI_device(SPI_t *SPIPort, ioport_pin_t chipSelectPin)
{
    ba8a:	cf 93       	push	r28
    ba8c:	df 93       	push	r29
    ba8e:	00 d0       	rcall	.+0      	; 0xba90 <select_SPI_device+0x6>
    ba90:	cd b7       	in	r28, 0x3d	; 61
    ba92:	de b7       	in	r29, 0x3e	; 62
    ba94:	89 83       	std	Y+1, r24	; 0x01
    ba96:	9a 83       	std	Y+2, r25	; 0x02
    ba98:	6b 83       	std	Y+3, r22	; 0x03
	if (SPIPort == &RTD_SPI_PORT)
    ba9a:	89 81       	ldd	r24, Y+1	; 0x01
    ba9c:	9a 81       	ldd	r25, Y+2	; 0x02
    ba9e:	80 3c       	cpi	r24, 0xC0	; 192
    baa0:	98 40       	sbci	r25, 0x08	; 8
    baa2:	39 f4       	brne	.+14     	; 0xbab2 <select_SPI_device+0x28>
	{
		spi_select_device(&RTD_SPI_PORT, &RTDSPIConfig);
    baa4:	68 e7       	ldi	r22, 0x78	; 120
    baa6:	79 e2       	ldi	r23, 0x29	; 41
    baa8:	80 ec       	ldi	r24, 0xC0	; 192
    baaa:	98 e0       	ldi	r25, 0x08	; 8
    baac:	0e 94 d8 85 	call	0x10bb0	; 0x10bb0 <spi_select_device>
	else if (SPIPort == &STEPPER_SPI_PORT)
	{
		stepperSPIConfig.id = chipSelectPin;
		spi_select_device(&STEPPER_SPI_PORT, &stepperSPIConfig);
	}
}
    bab0:	0e c0       	rjmp	.+28     	; 0xbace <select_SPI_device+0x44>
{
	if (SPIPort == &RTD_SPI_PORT)
	{
		spi_select_device(&RTD_SPI_PORT, &RTDSPIConfig);
	}
	else if (SPIPort == &STEPPER_SPI_PORT)
    bab2:	89 81       	ldd	r24, Y+1	; 0x01
    bab4:	9a 81       	ldd	r25, Y+2	; 0x02
    bab6:	80 3c       	cpi	r24, 0xC0	; 192
    bab8:	9a 40       	sbci	r25, 0x0A	; 10
    baba:	49 f4       	brne	.+18     	; 0xbace <select_SPI_device+0x44>
	{
		stepperSPIConfig.id = chipSelectPin;
    babc:	8b 81       	ldd	r24, Y+3	; 0x03
    babe:	80 93 79 29 	sts	0x2979, r24	; 0x802979 <stepperSPIConfig>
		spi_select_device(&STEPPER_SPI_PORT, &stepperSPIConfig);
    bac2:	69 e7       	ldi	r22, 0x79	; 121
    bac4:	79 e2       	ldi	r23, 0x29	; 41
    bac6:	80 ec       	ldi	r24, 0xC0	; 192
    bac8:	9a e0       	ldi	r25, 0x0A	; 10
    baca:	0e 94 d8 85 	call	0x10bb0	; 0x10bb0 <spi_select_device>
	}
}
    bace:	00 00       	nop
    bad0:	23 96       	adiw	r28, 0x03	; 3
    bad2:	cd bf       	out	0x3d, r28	; 61
    bad4:	de bf       	out	0x3e, r29	; 62
    bad6:	df 91       	pop	r29
    bad8:	cf 91       	pop	r28
    bada:	08 95       	ret

0000badc <deselect_SPI_device>:

void deselect_SPI_device(SPI_t *SPIPort)
{
    badc:	cf 93       	push	r28
    bade:	df 93       	push	r29
    bae0:	1f 92       	push	r1
    bae2:	1f 92       	push	r1
    bae4:	cd b7       	in	r28, 0x3d	; 61
    bae6:	de b7       	in	r29, 0x3e	; 62
    bae8:	89 83       	std	Y+1, r24	; 0x01
    baea:	9a 83       	std	Y+2, r25	; 0x02
	if (SPIPort == &RTD_SPI_PORT)
    baec:	89 81       	ldd	r24, Y+1	; 0x01
    baee:	9a 81       	ldd	r25, Y+2	; 0x02
    baf0:	80 3c       	cpi	r24, 0xC0	; 192
    baf2:	98 40       	sbci	r25, 0x08	; 8
    baf4:	39 f4       	brne	.+14     	; 0xbb04 <deselect_SPI_device+0x28>
	{
		spi_deselect_device(&RTD_SPI_PORT, &RTDSPIConfig);
    baf6:	68 e7       	ldi	r22, 0x78	; 120
    baf8:	79 e2       	ldi	r23, 0x29	; 41
    bafa:	80 ec       	ldi	r24, 0xC0	; 192
    bafc:	98 e0       	ldi	r25, 0x08	; 8
    bafe:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <spi_deselect_device>
	}
	else if (SPIPort == &STEPPER_SPI_PORT)
	{
		spi_deselect_device(&STEPPER_SPI_PORT, &stepperSPIConfig);
	}
}
    bb02:	0b c0       	rjmp	.+22     	; 0xbb1a <deselect_SPI_device+0x3e>
{
	if (SPIPort == &RTD_SPI_PORT)
	{
		spi_deselect_device(&RTD_SPI_PORT, &RTDSPIConfig);
	}
	else if (SPIPort == &STEPPER_SPI_PORT)
    bb04:	89 81       	ldd	r24, Y+1	; 0x01
    bb06:	9a 81       	ldd	r25, Y+2	; 0x02
    bb08:	80 3c       	cpi	r24, 0xC0	; 192
    bb0a:	9a 40       	sbci	r25, 0x0A	; 10
    bb0c:	31 f4       	brne	.+12     	; 0xbb1a <deselect_SPI_device+0x3e>
	{
		spi_deselect_device(&STEPPER_SPI_PORT, &stepperSPIConfig);
    bb0e:	69 e7       	ldi	r22, 0x79	; 121
    bb10:	79 e2       	ldi	r23, 0x29	; 41
    bb12:	80 ec       	ldi	r24, 0xC0	; 192
    bb14:	9a e0       	ldi	r25, 0x0A	; 10
    bb16:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <spi_deselect_device>
	}
}
    bb1a:	00 00       	nop
    bb1c:	0f 90       	pop	r0
    bb1e:	0f 90       	pop	r0
    bb20:	df 91       	pop	r29
    bb22:	cf 91       	pop	r28
    bb24:	08 95       	ret

0000bb26 <send_msg>:

void send_msg(SPI_t *SPIPort, ioport_pin_t cs, uint8_t *msgBytes, uint8_t len)
{	
    bb26:	cf 93       	push	r28
    bb28:	df 93       	push	r29
    bb2a:	00 d0       	rcall	.+0      	; 0xbb2c <send_msg+0x6>
    bb2c:	00 d0       	rcall	.+0      	; 0xbb2e <send_msg+0x8>
    bb2e:	cd b7       	in	r28, 0x3d	; 61
    bb30:	de b7       	in	r29, 0x3e	; 62
    bb32:	89 83       	std	Y+1, r24	; 0x01
    bb34:	9a 83       	std	Y+2, r25	; 0x02
    bb36:	6b 83       	std	Y+3, r22	; 0x03
    bb38:	4c 83       	std	Y+4, r20	; 0x04
    bb3a:	5d 83       	std	Y+5, r21	; 0x05
    bb3c:	2e 83       	std	Y+6, r18	; 0x06
	select_SPI_device(SPIPort, cs);
    bb3e:	89 81       	ldd	r24, Y+1	; 0x01
    bb40:	9a 81       	ldd	r25, Y+2	; 0x02
    bb42:	6b 81       	ldd	r22, Y+3	; 0x03
    bb44:	a2 df       	rcall	.-188    	; 0xba8a <select_SPI_device>
	spi_write_packet(SPIPort, msgBytes, len);
    bb46:	8e 81       	ldd	r24, Y+6	; 0x06
    bb48:	48 2f       	mov	r20, r24
    bb4a:	50 e0       	ldi	r21, 0x00	; 0
    bb4c:	2c 81       	ldd	r18, Y+4	; 0x04
    bb4e:	3d 81       	ldd	r19, Y+5	; 0x05
    bb50:	89 81       	ldd	r24, Y+1	; 0x01
    bb52:	9a 81       	ldd	r25, Y+2	; 0x02
    bb54:	b9 01       	movw	r22, r18
    bb56:	0e 94 9f 85 	call	0x10b3e	; 0x10b3e <spi_write_packet>
	deselect_SPI_device(SPIPort);
    bb5a:	89 81       	ldd	r24, Y+1	; 0x01
    bb5c:	9a 81       	ldd	r25, Y+2	; 0x02
    bb5e:	be df       	rcall	.-132    	; 0xbadc <deselect_SPI_device>
}
    bb60:	00 00       	nop
    bb62:	26 96       	adiw	r28, 0x06	; 6
    bb64:	cd bf       	out	0x3d, r28	; 61
    bb66:	de bf       	out	0x3e, r29	; 62
    bb68:	df 91       	pop	r29
    bb6a:	cf 91       	pop	r28
    bb6c:	08 95       	ret

0000bb6e <read_msg>:

void read_msg(SPI_t *SPIPort, ioport_pin_t cs, uint8_t *regAddr, uint8_t *msgBuf)
{
    bb6e:	cf 93       	push	r28
    bb70:	df 93       	push	r29
    bb72:	cd b7       	in	r28, 0x3d	; 61
    bb74:	de b7       	in	r29, 0x3e	; 62
    bb76:	29 97       	sbiw	r28, 0x09	; 9
    bb78:	cd bf       	out	0x3d, r28	; 61
    bb7a:	de bf       	out	0x3e, r29	; 62
    bb7c:	8b 83       	std	Y+3, r24	; 0x03
    bb7e:	9c 83       	std	Y+4, r25	; 0x04
    bb80:	6d 83       	std	Y+5, r22	; 0x05
    bb82:	4e 83       	std	Y+6, r20	; 0x06
    bb84:	5f 83       	std	Y+7, r21	; 0x07
    bb86:	28 87       	std	Y+8, r18	; 0x08
    bb88:	39 87       	std	Y+9, r19	; 0x09
	uint8_t dummyData[2];
	dummyData[0] = *regAddr;
    bb8a:	8e 81       	ldd	r24, Y+6	; 0x06
    bb8c:	9f 81       	ldd	r25, Y+7	; 0x07
    bb8e:	fc 01       	movw	r30, r24
    bb90:	80 81       	ld	r24, Z
    bb92:	89 83       	std	Y+1, r24	; 0x01
	dummyData[1] = 0xFF;
    bb94:	8f ef       	ldi	r24, 0xFF	; 255
    bb96:	8a 83       	std	Y+2, r24	; 0x02
	
	select_SPI_device(SPIPort, cs); //ASF doc says this needs to be done beforehand
    bb98:	8b 81       	ldd	r24, Y+3	; 0x03
    bb9a:	9c 81       	ldd	r25, Y+4	; 0x04
    bb9c:	6d 81       	ldd	r22, Y+5	; 0x05
    bb9e:	75 df       	rcall	.-278    	; 0xba8a <select_SPI_device>
	spi_write_packet(SPIPort, dummyData, 2);
    bba0:	8b 81       	ldd	r24, Y+3	; 0x03
    bba2:	9c 81       	ldd	r25, Y+4	; 0x04
    bba4:	42 e0       	ldi	r20, 0x02	; 2
    bba6:	50 e0       	ldi	r21, 0x00	; 0
    bba8:	9e 01       	movw	r18, r28
    bbaa:	2f 5f       	subi	r18, 0xFF	; 255
    bbac:	3f 4f       	sbci	r19, 0xFF	; 255
    bbae:	b9 01       	movw	r22, r18
    bbb0:	0e 94 9f 85 	call	0x10b3e	; 0x10b3e <spi_write_packet>
	spi_read_single(SPIPort, msgBuf);
    bbb4:	28 85       	ldd	r18, Y+8	; 0x08
    bbb6:	39 85       	ldd	r19, Y+9	; 0x09
    bbb8:	8b 81       	ldd	r24, Y+3	; 0x03
    bbba:	9c 81       	ldd	r25, Y+4	; 0x04
    bbbc:	b9 01       	movw	r22, r18
    bbbe:	cf de       	rcall	.-610    	; 0xb95e <spi_read_single>
	deselect_SPI_device(SPIPort);
    bbc0:	8b 81       	ldd	r24, Y+3	; 0x03
    bbc2:	9c 81       	ldd	r25, Y+4	; 0x04
    bbc4:	8b df       	rcall	.-234    	; 0xbadc <deselect_SPI_device>
}
    bbc6:	00 00       	nop
    bbc8:	29 96       	adiw	r28, 0x09	; 9
    bbca:	cd bf       	out	0x3d, r28	; 61
    bbcc:	de bf       	out	0x3e, r29	; 62
    bbce:	df 91       	pop	r29
    bbd0:	cf 91       	pop	r28
    bbd2:	08 95       	ret

0000bbd4 <enable_WDT>:

#include "wdt.h"
#include "WDT_wrapper.h"

void enable_WDT(void)
{
    bbd4:	cf 93       	push	r28
    bbd6:	df 93       	push	r29
    bbd8:	cd b7       	in	r28, 0x3d	; 61
    bbda:	de b7       	in	r29, 0x3e	; 62
	wdt_enable();
    bbdc:	0e 94 5d af 	call	0x15eba	; 0x15eba <wdt_enable>
}
    bbe0:	00 00       	nop
    bbe2:	df 91       	pop	r29
    bbe4:	cf 91       	pop	r28
    bbe6:	08 95       	ret

0000bbe8 <disable_WDT>:

void disable_WDT(void)
{
    bbe8:	cf 93       	push	r28
    bbea:	df 93       	push	r29
    bbec:	cd b7       	in	r28, 0x3d	; 61
    bbee:	de b7       	in	r29, 0x3e	; 62
	wdt_disable();
    bbf0:	0e 94 48 af 	call	0x15e90	; 0x15e90 <wdt_disable>
}
    bbf4:	00 00       	nop
    bbf6:	df 91       	pop	r29
    bbf8:	cf 91       	pop	r28
    bbfa:	08 95       	ret

0000bbfc <set_WDT_timeout>:

void set_WDT_timeout(uint8_t timeoutIndex)
{
    bbfc:	cf 93       	push	r28
    bbfe:	df 93       	push	r29
    bc00:	1f 92       	push	r1
    bc02:	cd b7       	in	r28, 0x3d	; 61
    bc04:	de b7       	in	r29, 0x3e	; 62
    bc06:	89 83       	std	Y+1, r24	; 0x01
	wdt_set_timeout_period(timeoutIndex);
    bc08:	89 81       	ldd	r24, Y+1	; 0x01
    bc0a:	0e 94 25 af 	call	0x15e4a	; 0x15e4a <wdt_set_timeout_period>
}
    bc0e:	00 00       	nop
    bc10:	0f 90       	pop	r0
    bc12:	df 91       	pop	r29
    bc14:	cf 91       	pop	r28
    bc16:	08 95       	ret

0000bc18 <reset_WDT>:

void reset_WDT(void)
{
    bc18:	cf 93       	push	r28
    bc1a:	df 93       	push	r29
    bc1c:	cd b7       	in	r28, 0x3d	; 61
    bc1e:	de b7       	in	r29, 0x3e	; 62
	wdt_reset();
    bc20:	a8 95       	wdr
    bc22:	00 00       	nop
    bc24:	df 91       	pop	r29
    bc26:	cf 91       	pop	r28
    bc28:	08 95       	ret

0000bc2a <nvm_init>:
	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    bc2a:	cf 93       	push	r28
    bc2c:	df 93       	push	r29
    bc2e:	1f 92       	push	r1
    bc30:	cd b7       	in	r28, 0x3d	; 61
    bc32:	de b7       	in	r29, 0x3e	; 62
    bc34:	89 83       	std	Y+1, r24	; 0x01
    bc36:	89 81       	ldd	r24, Y+1	; 0x01
    bc38:	88 2f       	mov	r24, r24
    bc3a:	90 e0       	ldi	r25, 0x00	; 0
    bc3c:	03 97       	sbiw	r24, 0x03	; 3
    bc3e:	10 f0       	brcs	.+4      	; 0xbc44 <nvm_init+0x1a>
    bc40:	88 ef       	ldi	r24, 0xF8	; 248
    bc42:	02 c0       	rjmp	.+4      	; 0xbc48 <nvm_init+0x1e>
    bc44:	00 00       	nop
    bc46:	80 e0       	ldi	r24, 0x00	; 0
    bc48:	0f 90       	pop	r0
    bc4a:	df 91       	pop	r29
    bc4c:	cf 91       	pop	r28
    bc4e:	08 95       	ret

0000bc50 <nvm_read>:

status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    bc50:	ef 92       	push	r14
    bc52:	ff 92       	push	r15
    bc54:	0f 93       	push	r16
    bc56:	1f 93       	push	r17
    bc58:	cf 93       	push	r28
    bc5a:	df 93       	push	r29
    bc5c:	cd b7       	in	r28, 0x3d	; 61
    bc5e:	de b7       	in	r29, 0x3e	; 62
    bc60:	2b 97       	sbiw	r28, 0x0b	; 11
    bc62:	cd bf       	out	0x3d, r28	; 61
    bc64:	de bf       	out	0x3e, r29	; 62
    bc66:	89 83       	std	Y+1, r24	; 0x01
    bc68:	4a 83       	std	Y+2, r20	; 0x02
    bc6a:	5b 83       	std	Y+3, r21	; 0x03
    bc6c:	6c 83       	std	Y+4, r22	; 0x04
    bc6e:	7d 83       	std	Y+5, r23	; 0x05
    bc70:	2e 83       	std	Y+6, r18	; 0x06
    bc72:	3f 83       	std	Y+7, r19	; 0x07
    bc74:	e8 86       	std	Y+8, r14	; 0x08
    bc76:	f9 86       	std	Y+9, r15	; 0x09
    bc78:	0a 87       	std	Y+10, r16	; 0x0a
    bc7a:	1b 87       	std	Y+11, r17	; 0x0b
	switch (mem) {
    bc7c:	89 81       	ldd	r24, Y+1	; 0x01
    bc7e:	88 2f       	mov	r24, r24
    bc80:	90 e0       	ldi	r25, 0x00	; 0
    bc82:	81 30       	cpi	r24, 0x01	; 1
    bc84:	91 05       	cpc	r25, r1
    bc86:	91 f0       	breq	.+36     	; 0xbcac <nvm_read+0x5c>
    bc88:	82 30       	cpi	r24, 0x02	; 2
    bc8a:	91 05       	cpc	r25, r1
    bc8c:	e1 f0       	breq	.+56     	; 0xbcc6 <nvm_read+0x76>
    bc8e:	89 2b       	or	r24, r25
    bc90:	21 f5       	brne	.+72     	; 0xbcda <nvm_read+0x8a>
	case INT_FLASH:
		nvm_flash_read_buffer((flash_addr_t)address, buffer,
    bc92:	28 85       	ldd	r18, Y+8	; 0x08
    bc94:	39 85       	ldd	r19, Y+9	; 0x09
    bc96:	4e 81       	ldd	r20, Y+6	; 0x06
    bc98:	5f 81       	ldd	r21, Y+7	; 0x07
    bc9a:	8a 81       	ldd	r24, Y+2	; 0x02
    bc9c:	9b 81       	ldd	r25, Y+3	; 0x03
    bc9e:	ac 81       	ldd	r26, Y+4	; 0x04
    bca0:	bd 81       	ldd	r27, Y+5	; 0x05
    bca2:	bc 01       	movw	r22, r24
    bca4:	cd 01       	movw	r24, r26
    bca6:	0e 94 45 9d 	call	0x13a8a	; 0x13a8a <nvm_flash_read_buffer>
				(uint16_t)len);
		break;
    bcaa:	19 c0       	rjmp	.+50     	; 0xbcde <nvm_read+0x8e>

	case INT_USERPAGE:
		nvm_user_sig_read_buffer((flash_addr_t)address, buffer,
    bcac:	28 85       	ldd	r18, Y+8	; 0x08
    bcae:	39 85       	ldd	r19, Y+9	; 0x09
    bcb0:	4e 81       	ldd	r20, Y+6	; 0x06
    bcb2:	5f 81       	ldd	r21, Y+7	; 0x07
    bcb4:	8a 81       	ldd	r24, Y+2	; 0x02
    bcb6:	9b 81       	ldd	r25, Y+3	; 0x03
    bcb8:	ac 81       	ldd	r26, Y+4	; 0x04
    bcba:	bd 81       	ldd	r27, Y+5	; 0x05
    bcbc:	bc 01       	movw	r22, r24
    bcbe:	cd 01       	movw	r24, r26
    bcc0:	0e 94 8a 9d 	call	0x13b14	; 0x13b14 <nvm_user_sig_read_buffer>
				(uint16_t)len);
		break;
    bcc4:	0c c0       	rjmp	.+24     	; 0xbcde <nvm_read+0x8e>

	case INT_EEPROM:
		nvm_eeprom_read_buffer((eeprom_addr_t)address, buffer,
    bcc6:	48 85       	ldd	r20, Y+8	; 0x08
    bcc8:	59 85       	ldd	r21, Y+9	; 0x09
    bcca:	8a 81       	ldd	r24, Y+2	; 0x02
    bccc:	9b 81       	ldd	r25, Y+3	; 0x03
    bcce:	2e 81       	ldd	r18, Y+6	; 0x06
    bcd0:	3f 81       	ldd	r19, Y+7	; 0x07
    bcd2:	b9 01       	movw	r22, r18
    bcd4:	0e 94 14 9c 	call	0x13828	; 0x13828 <nvm_eeprom_read_buffer>
				(uint16_t)len);
		break;
    bcd8:	02 c0       	rjmp	.+4      	; 0xbcde <nvm_read+0x8e>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    bcda:	88 ef       	ldi	r24, 0xF8	; 248
    bcdc:	01 c0       	rjmp	.+2      	; 0xbce0 <nvm_read+0x90>
	}

	return STATUS_OK;
    bcde:	80 e0       	ldi	r24, 0x00	; 0
}
    bce0:	2b 96       	adiw	r28, 0x0b	; 11
    bce2:	cd bf       	out	0x3d, r28	; 61
    bce4:	de bf       	out	0x3e, r29	; 62
    bce6:	df 91       	pop	r29
    bce8:	cf 91       	pop	r28
    bcea:	1f 91       	pop	r17
    bcec:	0f 91       	pop	r16
    bcee:	ff 90       	pop	r15
    bcf0:	ef 90       	pop	r14
    bcf2:	08 95       	ret

0000bcf4 <nvm_write>:

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    bcf4:	ef 92       	push	r14
    bcf6:	ff 92       	push	r15
    bcf8:	0f 93       	push	r16
    bcfa:	1f 93       	push	r17
    bcfc:	cf 93       	push	r28
    bcfe:	df 93       	push	r29
    bd00:	cd b7       	in	r28, 0x3d	; 61
    bd02:	de b7       	in	r29, 0x3e	; 62
    bd04:	2b 97       	sbiw	r28, 0x0b	; 11
    bd06:	cd bf       	out	0x3d, r28	; 61
    bd08:	de bf       	out	0x3e, r29	; 62
    bd0a:	89 83       	std	Y+1, r24	; 0x01
    bd0c:	4a 83       	std	Y+2, r20	; 0x02
    bd0e:	5b 83       	std	Y+3, r21	; 0x03
    bd10:	6c 83       	std	Y+4, r22	; 0x04
    bd12:	7d 83       	std	Y+5, r23	; 0x05
    bd14:	2e 83       	std	Y+6, r18	; 0x06
    bd16:	3f 83       	std	Y+7, r19	; 0x07
    bd18:	e8 86       	std	Y+8, r14	; 0x08
    bd1a:	f9 86       	std	Y+9, r15	; 0x09
    bd1c:	0a 87       	std	Y+10, r16	; 0x0a
    bd1e:	1b 87       	std	Y+11, r17	; 0x0b
	switch (mem) {
    bd20:	89 81       	ldd	r24, Y+1	; 0x01
    bd22:	88 2f       	mov	r24, r24
    bd24:	90 e0       	ldi	r25, 0x00	; 0
    bd26:	81 30       	cpi	r24, 0x01	; 1
    bd28:	91 05       	cpc	r25, r1
    bd2a:	99 f0       	breq	.+38     	; 0xbd52 <nvm_write+0x5e>
    bd2c:	82 30       	cpi	r24, 0x02	; 2
    bd2e:	91 05       	cpc	r25, r1
    bd30:	f1 f0       	breq	.+60     	; 0xbd6e <nvm_write+0x7a>
    bd32:	89 2b       	or	r24, r25
    bd34:	31 f5       	brne	.+76     	; 0xbd82 <nvm_write+0x8e>
	case INT_FLASH:
		nvm_flash_erase_and_write_buffer((flash_addr_t)address,
    bd36:	28 85       	ldd	r18, Y+8	; 0x08
    bd38:	39 85       	ldd	r19, Y+9	; 0x09
    bd3a:	4e 81       	ldd	r20, Y+6	; 0x06
    bd3c:	5f 81       	ldd	r21, Y+7	; 0x07
    bd3e:	8a 81       	ldd	r24, Y+2	; 0x02
    bd40:	9b 81       	ldd	r25, Y+3	; 0x03
    bd42:	ac 81       	ldd	r26, Y+4	; 0x04
    bd44:	bd 81       	ldd	r27, Y+5	; 0x05
    bd46:	01 e0       	ldi	r16, 0x01	; 1
    bd48:	bc 01       	movw	r22, r24
    bd4a:	cd 01       	movw	r24, r26
    bd4c:	0e 94 6f 9e 	call	0x13cde	; 0x13cde <nvm_flash_erase_and_write_buffer>
				(const void *)buffer, len, true);
		break;
    bd50:	1a c0       	rjmp	.+52     	; 0xbd86 <nvm_write+0x92>

	case INT_USERPAGE:
		nvm_user_sig_write_buffer((flash_addr_t)address,
    bd52:	28 85       	ldd	r18, Y+8	; 0x08
    bd54:	39 85       	ldd	r19, Y+9	; 0x09
    bd56:	4e 81       	ldd	r20, Y+6	; 0x06
    bd58:	5f 81       	ldd	r21, Y+7	; 0x07
    bd5a:	8a 81       	ldd	r24, Y+2	; 0x02
    bd5c:	9b 81       	ldd	r25, Y+3	; 0x03
    bd5e:	ac 81       	ldd	r26, Y+4	; 0x04
    bd60:	bd 81       	ldd	r27, Y+5	; 0x05
    bd62:	01 e0       	ldi	r16, 0x01	; 1
    bd64:	bc 01       	movw	r22, r24
    bd66:	cd 01       	movw	r24, r26
    bd68:	0e 94 c1 9d 	call	0x13b82	; 0x13b82 <nvm_user_sig_write_buffer>
				(const void *)buffer, len, true);
		break;
    bd6c:	0c c0       	rjmp	.+24     	; 0xbd86 <nvm_write+0x92>

	case INT_EEPROM:
		nvm_eeprom_erase_and_write_buffer((eeprom_addr_t)address,
    bd6e:	48 85       	ldd	r20, Y+8	; 0x08
    bd70:	59 85       	ldd	r21, Y+9	; 0x09
    bd72:	8a 81       	ldd	r24, Y+2	; 0x02
    bd74:	9b 81       	ldd	r25, Y+3	; 0x03
    bd76:	2e 81       	ldd	r18, Y+6	; 0x06
    bd78:	3f 81       	ldd	r19, Y+7	; 0x07
    bd7a:	b9 01       	movw	r22, r18
    bd7c:	0e 94 6b 9c 	call	0x138d6	; 0x138d6 <nvm_eeprom_erase_and_write_buffer>
				(const void *)buffer, len);
		break;
    bd80:	02 c0       	rjmp	.+4      	; 0xbd86 <nvm_write+0x92>
	}
	break;
#endif

	default:
		return ERR_INVALID_ARG;
    bd82:	88 ef       	ldi	r24, 0xF8	; 248
    bd84:	01 c0       	rjmp	.+2      	; 0xbd88 <nvm_write+0x94>
	}

	return STATUS_OK;
    bd86:	80 e0       	ldi	r24, 0x00	; 0
}
    bd88:	2b 96       	adiw	r28, 0x0b	; 11
    bd8a:	cd bf       	out	0x3d, r28	; 61
    bd8c:	de bf       	out	0x3e, r29	; 62
    bd8e:	df 91       	pop	r29
    bd90:	cf 91       	pop	r28
    bd92:	1f 91       	pop	r17
    bd94:	0f 91       	pop	r16
    bd96:	ff 90       	pop	r15
    bd98:	ef 90       	pop	r14
    bd9a:	08 95       	ret

0000bd9c <cpu_irq_save>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
    bd9c:	cf 93       	push	r28
    bd9e:	df 93       	push	r29
    bda0:	1f 92       	push	r1
    bda2:	cd b7       	in	r28, 0x3d	; 61
    bda4:	de b7       	in	r29, 0x3e	; 62
    bda6:	8f e3       	ldi	r24, 0x3F	; 63
    bda8:	90 e0       	ldi	r25, 0x00	; 0
    bdaa:	fc 01       	movw	r30, r24
    bdac:	80 81       	ld	r24, Z
    bdae:	89 83       	std	Y+1, r24	; 0x01
    bdb0:	f8 94       	cli
    bdb2:	89 81       	ldd	r24, Y+1	; 0x01
    bdb4:	0f 90       	pop	r0
    bdb6:	df 91       	pop	r29
    bdb8:	cf 91       	pop	r28
    bdba:	08 95       	ret

0000bdbc <cpu_irq_restore>:
    bdbc:	cf 93       	push	r28
    bdbe:	df 93       	push	r29
    bdc0:	1f 92       	push	r1
    bdc2:	cd b7       	in	r28, 0x3d	; 61
    bdc4:	de b7       	in	r29, 0x3e	; 62
    bdc6:	89 83       	std	Y+1, r24	; 0x01
    bdc8:	8f e3       	ldi	r24, 0x3F	; 63
    bdca:	90 e0       	ldi	r25, 0x00	; 0
    bdcc:	29 81       	ldd	r18, Y+1	; 0x01
    bdce:	fc 01       	movw	r30, r24
    bdd0:	20 83       	st	Z, r18
    bdd2:	00 00       	nop
    bdd4:	0f 90       	pop	r0
    bdd6:	df 91       	pop	r29
    bdd8:	cf 91       	pop	r28
    bdda:	08 95       	ret

0000bddc <udi_cdc_comm_enable>:
    bddc:	cf 93       	push	r28
    bdde:	df 93       	push	r29
    bde0:	1f 92       	push	r1
    bde2:	1f 92       	push	r1
    bde4:	cd b7       	in	r28, 0x3d	; 61
    bde6:	de b7       	in	r29, 0x3e	; 62
    bde8:	1a 82       	std	Y+2, r1	; 0x02
    bdea:	10 92 ba 22 	sts	0x22BA, r1	; 0x8022ba <udi_cdc_nb_comm_enabled>
    bdee:	8a 81       	ldd	r24, Y+2	; 0x02
    bdf0:	88 2f       	mov	r24, r24
    bdf2:	90 e0       	ldi	r25, 0x00	; 0
    bdf4:	88 0f       	add	r24, r24
    bdf6:	99 1f       	adc	r25, r25
    bdf8:	82 55       	subi	r24, 0x52	; 82
    bdfa:	9d 4d       	sbci	r25, 0xDD	; 221
    bdfc:	fc 01       	movw	r30, r24
    bdfe:	10 82       	st	Z, r1
    be00:	11 82       	std	Z+1, r1	; 0x01
    be02:	8a 81       	ldd	r24, Y+2	; 0x02
    be04:	88 2f       	mov	r24, r24
    be06:	90 e0       	ldi	r25, 0x00	; 0
    be08:	88 0f       	add	r24, r24
    be0a:	99 1f       	adc	r25, r25
    be0c:	9c 01       	movw	r18, r24
    be0e:	22 0f       	add	r18, r18
    be10:	33 1f       	adc	r19, r19
    be12:	22 0f       	add	r18, r18
    be14:	33 1f       	adc	r19, r19
    be16:	82 0f       	add	r24, r18
    be18:	93 1f       	adc	r25, r19
    be1a:	80 55       	subi	r24, 0x50	; 80
    be1c:	9d 4d       	sbci	r25, 0xDD	; 221
    be1e:	21 ea       	ldi	r18, 0xA1	; 161
    be20:	fc 01       	movw	r30, r24
    be22:	20 83       	st	Z, r18
    be24:	8a 81       	ldd	r24, Y+2	; 0x02
    be26:	88 2f       	mov	r24, r24
    be28:	90 e0       	ldi	r25, 0x00	; 0
    be2a:	88 0f       	add	r24, r24
    be2c:	99 1f       	adc	r25, r25
    be2e:	9c 01       	movw	r18, r24
    be30:	22 0f       	add	r18, r18
    be32:	33 1f       	adc	r19, r19
    be34:	22 0f       	add	r18, r18
    be36:	33 1f       	adc	r19, r19
    be38:	82 0f       	add	r24, r18
    be3a:	93 1f       	adc	r25, r19
    be3c:	8f 54       	subi	r24, 0x4F	; 79
    be3e:	9d 4d       	sbci	r25, 0xDD	; 221
    be40:	20 e2       	ldi	r18, 0x20	; 32
    be42:	fc 01       	movw	r30, r24
    be44:	20 83       	st	Z, r18
    be46:	8a 81       	ldd	r24, Y+2	; 0x02
    be48:	88 2f       	mov	r24, r24
    be4a:	90 e0       	ldi	r25, 0x00	; 0
    be4c:	88 0f       	add	r24, r24
    be4e:	99 1f       	adc	r25, r25
    be50:	9c 01       	movw	r18, r24
    be52:	22 0f       	add	r18, r18
    be54:	33 1f       	adc	r19, r19
    be56:	22 0f       	add	r18, r18
    be58:	33 1f       	adc	r19, r19
    be5a:	82 0f       	add	r24, r18
    be5c:	93 1f       	adc	r25, r19
    be5e:	8e 54       	subi	r24, 0x4E	; 78
    be60:	9d 4d       	sbci	r25, 0xDD	; 221
    be62:	fc 01       	movw	r30, r24
    be64:	10 82       	st	Z, r1
    be66:	11 82       	std	Z+1, r1	; 0x01
    be68:	8a 81       	ldd	r24, Y+2	; 0x02
    be6a:	88 2f       	mov	r24, r24
    be6c:	90 e0       	ldi	r25, 0x00	; 0
    be6e:	89 2b       	or	r24, r25
    be70:	11 f4       	brne	.+4      	; 0xbe76 <udi_cdc_comm_enable+0x9a>
    be72:	19 82       	std	Y+1, r1	; 0x01
    be74:	02 c0       	rjmp	.+4      	; 0xbe7a <udi_cdc_comm_enable+0x9e>
    be76:	19 82       	std	Y+1, r1	; 0x01
    be78:	00 00       	nop
    be7a:	8a 81       	ldd	r24, Y+2	; 0x02
    be7c:	88 2f       	mov	r24, r24
    be7e:	90 e0       	ldi	r25, 0x00	; 0
    be80:	29 81       	ldd	r18, Y+1	; 0x01
    be82:	22 2f       	mov	r18, r18
    be84:	30 e0       	ldi	r19, 0x00	; 0
    be86:	88 0f       	add	r24, r24
    be88:	99 1f       	adc	r25, r25
    be8a:	ac 01       	movw	r20, r24
    be8c:	44 0f       	add	r20, r20
    be8e:	55 1f       	adc	r21, r21
    be90:	44 0f       	add	r20, r20
    be92:	55 1f       	adc	r21, r21
    be94:	84 0f       	add	r24, r20
    be96:	95 1f       	adc	r25, r21
    be98:	8c 54       	subi	r24, 0x4C	; 76
    be9a:	9d 4d       	sbci	r25, 0xDD	; 221
    be9c:	fc 01       	movw	r30, r24
    be9e:	20 83       	st	Z, r18
    bea0:	31 83       	std	Z+1, r19	; 0x01
    bea2:	8a 81       	ldd	r24, Y+2	; 0x02
    bea4:	88 2f       	mov	r24, r24
    bea6:	90 e0       	ldi	r25, 0x00	; 0
    bea8:	88 0f       	add	r24, r24
    beaa:	99 1f       	adc	r25, r25
    beac:	9c 01       	movw	r18, r24
    beae:	22 0f       	add	r18, r18
    beb0:	33 1f       	adc	r19, r19
    beb2:	22 0f       	add	r18, r18
    beb4:	33 1f       	adc	r19, r19
    beb6:	82 0f       	add	r24, r18
    beb8:	93 1f       	adc	r25, r19
    beba:	8a 54       	subi	r24, 0x4A	; 74
    bebc:	9d 4d       	sbci	r25, 0xDD	; 221
    bebe:	22 e0       	ldi	r18, 0x02	; 2
    bec0:	30 e0       	ldi	r19, 0x00	; 0
    bec2:	fc 01       	movw	r30, r24
    bec4:	20 83       	st	Z, r18
    bec6:	31 83       	std	Z+1, r19	; 0x01
    bec8:	8a 81       	ldd	r24, Y+2	; 0x02
    beca:	88 2f       	mov	r24, r24
    becc:	90 e0       	ldi	r25, 0x00	; 0
    bece:	88 0f       	add	r24, r24
    bed0:	99 1f       	adc	r25, r25
    bed2:	9c 01       	movw	r18, r24
    bed4:	22 0f       	add	r18, r18
    bed6:	33 1f       	adc	r19, r19
    bed8:	22 0f       	add	r18, r18
    beda:	33 1f       	adc	r19, r19
    bedc:	82 0f       	add	r24, r18
    bede:	93 1f       	adc	r25, r19
    bee0:	88 54       	subi	r24, 0x48	; 72
    bee2:	9d 4d       	sbci	r25, 0xDD	; 221
    bee4:	fc 01       	movw	r30, r24
    bee6:	10 82       	st	Z, r1
    bee8:	11 82       	std	Z+1, r1	; 0x01
    beea:	8a 81       	ldd	r24, Y+2	; 0x02
    beec:	28 2f       	mov	r18, r24
    beee:	30 e0       	ldi	r19, 0x00	; 0
    bef0:	c9 01       	movw	r24, r18
    bef2:	88 0f       	add	r24, r24
    bef4:	99 1f       	adc	r25, r25
    bef6:	88 0f       	add	r24, r24
    bef8:	99 1f       	adc	r25, r25
    befa:	88 0f       	add	r24, r24
    befc:	99 1f       	adc	r25, r25
    befe:	82 1b       	sub	r24, r18
    bf00:	93 0b       	sbc	r25, r19
    bf02:	9c 01       	movw	r18, r24
    bf04:	2a 55       	subi	r18, 0x5A	; 90
    bf06:	3d 4d       	sbci	r19, 0xDD	; 221
    bf08:	80 e0       	ldi	r24, 0x00	; 0
    bf0a:	96 e9       	ldi	r25, 0x96	; 150
    bf0c:	a0 e0       	ldi	r26, 0x00	; 0
    bf0e:	b0 e0       	ldi	r27, 0x00	; 0
    bf10:	f9 01       	movw	r30, r18
    bf12:	80 83       	st	Z, r24
    bf14:	91 83       	std	Z+1, r25	; 0x01
    bf16:	a2 83       	std	Z+2, r26	; 0x02
    bf18:	b3 83       	std	Z+3, r27	; 0x03
    bf1a:	8a 81       	ldd	r24, Y+2	; 0x02
    bf1c:	28 2f       	mov	r18, r24
    bf1e:	30 e0       	ldi	r19, 0x00	; 0
    bf20:	c9 01       	movw	r24, r18
    bf22:	88 0f       	add	r24, r24
    bf24:	99 1f       	adc	r25, r25
    bf26:	88 0f       	add	r24, r24
    bf28:	99 1f       	adc	r25, r25
    bf2a:	88 0f       	add	r24, r24
    bf2c:	99 1f       	adc	r25, r25
    bf2e:	82 1b       	sub	r24, r18
    bf30:	93 0b       	sbc	r25, r19
    bf32:	86 55       	subi	r24, 0x56	; 86
    bf34:	9d 4d       	sbci	r25, 0xDD	; 221
    bf36:	fc 01       	movw	r30, r24
    bf38:	10 82       	st	Z, r1
    bf3a:	8a 81       	ldd	r24, Y+2	; 0x02
    bf3c:	28 2f       	mov	r18, r24
    bf3e:	30 e0       	ldi	r19, 0x00	; 0
    bf40:	c9 01       	movw	r24, r18
    bf42:	88 0f       	add	r24, r24
    bf44:	99 1f       	adc	r25, r25
    bf46:	88 0f       	add	r24, r24
    bf48:	99 1f       	adc	r25, r25
    bf4a:	88 0f       	add	r24, r24
    bf4c:	99 1f       	adc	r25, r25
    bf4e:	82 1b       	sub	r24, r18
    bf50:	93 0b       	sbc	r25, r19
    bf52:	85 55       	subi	r24, 0x55	; 85
    bf54:	9d 4d       	sbci	r25, 0xDD	; 221
    bf56:	fc 01       	movw	r30, r24
    bf58:	10 82       	st	Z, r1
    bf5a:	8a 81       	ldd	r24, Y+2	; 0x02
    bf5c:	28 2f       	mov	r18, r24
    bf5e:	30 e0       	ldi	r19, 0x00	; 0
    bf60:	c9 01       	movw	r24, r18
    bf62:	88 0f       	add	r24, r24
    bf64:	99 1f       	adc	r25, r25
    bf66:	88 0f       	add	r24, r24
    bf68:	99 1f       	adc	r25, r25
    bf6a:	88 0f       	add	r24, r24
    bf6c:	99 1f       	adc	r25, r25
    bf6e:	82 1b       	sub	r24, r18
    bf70:	93 0b       	sbc	r25, r19
    bf72:	84 55       	subi	r24, 0x54	; 84
    bf74:	9d 4d       	sbci	r25, 0xDD	; 221
    bf76:	28 e0       	ldi	r18, 0x08	; 8
    bf78:	fc 01       	movw	r30, r24
    bf7a:	20 83       	st	Z, r18
    bf7c:	0e 94 85 82 	call	0x1050a	; 0x1050a <my_callback_cdc_enable>
    bf80:	98 2f       	mov	r25, r24
    bf82:	81 e0       	ldi	r24, 0x01	; 1
    bf84:	89 27       	eor	r24, r25
    bf86:	88 23       	and	r24, r24
    bf88:	11 f0       	breq	.+4      	; 0xbf8e <udi_cdc_comm_enable+0x1b2>
    bf8a:	80 e0       	ldi	r24, 0x00	; 0
    bf8c:	06 c0       	rjmp	.+12     	; 0xbf9a <udi_cdc_comm_enable+0x1be>
    bf8e:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <udi_cdc_nb_comm_enabled>
    bf92:	8f 5f       	subi	r24, 0xFF	; 255
    bf94:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <udi_cdc_nb_comm_enabled>
    bf98:	81 e0       	ldi	r24, 0x01	; 1
    bf9a:	0f 90       	pop	r0
    bf9c:	0f 90       	pop	r0
    bf9e:	df 91       	pop	r29
    bfa0:	cf 91       	pop	r28
    bfa2:	08 95       	ret

0000bfa4 <udi_cdc_data_enable>:
    bfa4:	cf 93       	push	r28
    bfa6:	df 93       	push	r29
    bfa8:	1f 92       	push	r1
    bfaa:	cd b7       	in	r28, 0x3d	; 61
    bfac:	de b7       	in	r29, 0x3e	; 62
    bfae:	19 82       	std	Y+1, r1	; 0x01
    bfb0:	10 92 bb 22 	sts	0x22BB, r1	; 0x8022bb <udi_cdc_nb_data_enabled>
    bfb4:	89 81       	ldd	r24, Y+1	; 0x01
    bfb6:	88 2f       	mov	r24, r24
    bfb8:	90 e0       	ldi	r25, 0x00	; 0
    bfba:	83 53       	subi	r24, 0x33	; 51
    bfbc:	9c 4d       	sbci	r25, 0xDC	; 220
    bfbe:	fc 01       	movw	r30, r24
    bfc0:	10 82       	st	Z, r1
    bfc2:	89 81       	ldd	r24, Y+1	; 0x01
    bfc4:	88 2f       	mov	r24, r24
    bfc6:	90 e0       	ldi	r25, 0x00	; 0
    bfc8:	82 53       	subi	r24, 0x32	; 50
    bfca:	9c 4d       	sbci	r25, 0xDC	; 220
    bfcc:	fc 01       	movw	r30, r24
    bfce:	10 82       	st	Z, r1
    bfd0:	89 81       	ldd	r24, Y+1	; 0x01
    bfd2:	88 2f       	mov	r24, r24
    bfd4:	90 e0       	ldi	r25, 0x00	; 0
    bfd6:	86 53       	subi	r24, 0x36	; 54
    bfd8:	9c 4d       	sbci	r25, 0xDC	; 220
    bfda:	fc 01       	movw	r30, r24
    bfdc:	10 82       	st	Z, r1
    bfde:	89 81       	ldd	r24, Y+1	; 0x01
    bfe0:	88 2f       	mov	r24, r24
    bfe2:	90 e0       	ldi	r25, 0x00	; 0
    bfe4:	88 0f       	add	r24, r24
    bfe6:	99 1f       	adc	r25, r25
    bfe8:	88 0f       	add	r24, r24
    bfea:	99 1f       	adc	r25, r25
    bfec:	8a 53       	subi	r24, 0x3A	; 58
    bfee:	9c 4d       	sbci	r25, 0xDC	; 220
    bff0:	fc 01       	movw	r30, r24
    bff2:	10 82       	st	Z, r1
    bff4:	11 82       	std	Z+1, r1	; 0x01
    bff6:	89 81       	ldd	r24, Y+1	; 0x01
    bff8:	88 2f       	mov	r24, r24
    bffa:	90 e0       	ldi	r25, 0x00	; 0
    bffc:	88 0f       	add	r24, r24
    bffe:	99 1f       	adc	r25, r25
    c000:	88 0f       	add	r24, r24
    c002:	99 1f       	adc	r25, r25
    c004:	88 53       	subi	r24, 0x38	; 56
    c006:	9c 4d       	sbci	r25, 0xDC	; 220
    c008:	fc 01       	movw	r30, r24
    c00a:	10 82       	st	Z, r1
    c00c:	11 82       	std	Z+1, r1	; 0x01
    c00e:	89 81       	ldd	r24, Y+1	; 0x01
    c010:	88 2f       	mov	r24, r24
    c012:	90 e0       	ldi	r25, 0x00	; 0
    c014:	88 0f       	add	r24, r24
    c016:	99 1f       	adc	r25, r25
    c018:	85 53       	subi	r24, 0x35	; 53
    c01a:	9c 4d       	sbci	r25, 0xDC	; 220
    c01c:	fc 01       	movw	r30, r24
    c01e:	10 82       	st	Z, r1
    c020:	11 82       	std	Z+1, r1	; 0x01
    c022:	89 81       	ldd	r24, Y+1	; 0x01
    c024:	78 d2       	rcall	.+1264   	; 0xc516 <udi_cdc_tx_send>
    c026:	89 81       	ldd	r24, Y+1	; 0x01
    c028:	88 2f       	mov	r24, r24
    c02a:	90 e0       	ldi	r25, 0x00	; 0
    c02c:	8b 5b       	subi	r24, 0xBB	; 187
    c02e:	9c 4d       	sbci	r25, 0xDC	; 220
    c030:	fc 01       	movw	r30, r24
    c032:	10 82       	st	Z, r1
    c034:	89 81       	ldd	r24, Y+1	; 0x01
    c036:	88 2f       	mov	r24, r24
    c038:	90 e0       	ldi	r25, 0x00	; 0
    c03a:	8e 5b       	subi	r24, 0xBE	; 190
    c03c:	9c 4d       	sbci	r25, 0xDC	; 220
    c03e:	fc 01       	movw	r30, r24
    c040:	10 82       	st	Z, r1
    c042:	89 81       	ldd	r24, Y+1	; 0x01
    c044:	88 2f       	mov	r24, r24
    c046:	90 e0       	ldi	r25, 0x00	; 0
    c048:	88 0f       	add	r24, r24
    c04a:	99 1f       	adc	r25, r25
    c04c:	88 0f       	add	r24, r24
    c04e:	99 1f       	adc	r25, r25
    c050:	82 5c       	subi	r24, 0xC2	; 194
    c052:	9c 4d       	sbci	r25, 0xDC	; 220
    c054:	fc 01       	movw	r30, r24
    c056:	10 82       	st	Z, r1
    c058:	11 82       	std	Z+1, r1	; 0x01
    c05a:	89 81       	ldd	r24, Y+1	; 0x01
    c05c:	88 2f       	mov	r24, r24
    c05e:	90 e0       	ldi	r25, 0x00	; 0
    c060:	88 0f       	add	r24, r24
    c062:	99 1f       	adc	r25, r25
    c064:	88 0f       	add	r24, r24
    c066:	99 1f       	adc	r25, r25
    c068:	80 5c       	subi	r24, 0xC0	; 192
    c06a:	9c 4d       	sbci	r25, 0xDC	; 220
    c06c:	fc 01       	movw	r30, r24
    c06e:	10 82       	st	Z, r1
    c070:	11 82       	std	Z+1, r1	; 0x01
    c072:	89 81       	ldd	r24, Y+1	; 0x01
    c074:	88 2f       	mov	r24, r24
    c076:	90 e0       	ldi	r25, 0x00	; 0
    c078:	88 0f       	add	r24, r24
    c07a:	99 1f       	adc	r25, r25
    c07c:	8d 5b       	subi	r24, 0xBD	; 189
    c07e:	9c 4d       	sbci	r25, 0xDC	; 220
    c080:	fc 01       	movw	r30, r24
    c082:	10 82       	st	Z, r1
    c084:	11 82       	std	Z+1, r1	; 0x01
    c086:	89 81       	ldd	r24, Y+1	; 0x01
    c088:	f7 d0       	rcall	.+494    	; 0xc278 <udi_cdc_rx_start>
    c08a:	98 2f       	mov	r25, r24
    c08c:	81 e0       	ldi	r24, 0x01	; 1
    c08e:	89 27       	eor	r24, r25
    c090:	88 23       	and	r24, r24
    c092:	11 f0       	breq	.+4      	; 0xc098 <udi_cdc_data_enable+0xf4>
    c094:	80 e0       	ldi	r24, 0x00	; 0
    c096:	0d c0       	rjmp	.+26     	; 0xc0b2 <udi_cdc_data_enable+0x10e>
    c098:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <udi_cdc_nb_data_enabled>
    c09c:	8f 5f       	subi	r24, 0xFF	; 255
    c09e:	80 93 bb 22 	sts	0x22BB, r24	; 0x8022bb <udi_cdc_nb_data_enabled>
    c0a2:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <udi_cdc_nb_data_enabled>
    c0a6:	81 30       	cpi	r24, 0x01	; 1
    c0a8:	19 f4       	brne	.+6      	; 0xc0b0 <udi_cdc_data_enable+0x10c>
    c0aa:	81 e0       	ldi	r24, 0x01	; 1
    c0ac:	80 93 bc 22 	sts	0x22BC, r24	; 0x8022bc <udi_cdc_data_running>
    c0b0:	81 e0       	ldi	r24, 0x01	; 1
    c0b2:	0f 90       	pop	r0
    c0b4:	df 91       	pop	r29
    c0b6:	cf 91       	pop	r28
    c0b8:	08 95       	ret

0000c0ba <udi_cdc_comm_disable>:
    c0ba:	cf 93       	push	r28
    c0bc:	df 93       	push	r29
    c0be:	cd b7       	in	r28, 0x3d	; 61
    c0c0:	de b7       	in	r29, 0x3e	; 62
    c0c2:	80 91 ba 22 	lds	r24, 0x22BA	; 0x8022ba <udi_cdc_nb_comm_enabled>
    c0c6:	81 50       	subi	r24, 0x01	; 1
    c0c8:	80 93 ba 22 	sts	0x22BA, r24	; 0x8022ba <udi_cdc_nb_comm_enabled>
    c0cc:	00 00       	nop
    c0ce:	df 91       	pop	r29
    c0d0:	cf 91       	pop	r28
    c0d2:	08 95       	ret

0000c0d4 <udi_cdc_data_disable>:
    c0d4:	cf 93       	push	r28
    c0d6:	df 93       	push	r29
    c0d8:	1f 92       	push	r1
    c0da:	cd b7       	in	r28, 0x3d	; 61
    c0dc:	de b7       	in	r29, 0x3e	; 62
    c0de:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <udi_cdc_nb_data_enabled>
    c0e2:	81 50       	subi	r24, 0x01	; 1
    c0e4:	80 93 bb 22 	sts	0x22BB, r24	; 0x8022bb <udi_cdc_nb_data_enabled>
    c0e8:	80 91 bb 22 	lds	r24, 0x22BB	; 0x8022bb <udi_cdc_nb_data_enabled>
    c0ec:	89 83       	std	Y+1, r24	; 0x01
    c0ee:	0e 94 90 82 	call	0x10520	; 0x10520 <my_callback_cdc_disable>
    c0f2:	10 92 bc 22 	sts	0x22BC, r1	; 0x8022bc <udi_cdc_data_running>
    c0f6:	00 00       	nop
    c0f8:	0f 90       	pop	r0
    c0fa:	df 91       	pop	r29
    c0fc:	cf 91       	pop	r28
    c0fe:	08 95       	ret

0000c100 <udi_cdc_comm_setup>:
    c100:	cf 93       	push	r28
    c102:	df 93       	push	r29
    c104:	1f 92       	push	r1
    c106:	cd b7       	in	r28, 0x3d	; 61
    c108:	de b7       	in	r29, 0x3e	; 62
    c10a:	95 d0       	rcall	.+298    	; 0xc236 <udi_cdc_setup_to_port>
    c10c:	89 83       	std	Y+1, r24	; 0x01
    c10e:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    c112:	88 23       	and	r24, r24
    c114:	84 f5       	brge	.+96     	; 0xc176 <udi_cdc_comm_setup+0x76>
    c116:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    c11a:	88 2f       	mov	r24, r24
    c11c:	90 e0       	ldi	r25, 0x00	; 0
    c11e:	80 76       	andi	r24, 0x60	; 96
    c120:	99 27       	eor	r25, r25
    c122:	80 97       	sbiw	r24, 0x20	; 32
    c124:	41 f5       	brne	.+80     	; 0xc176 <udi_cdc_comm_setup+0x76>
    c126:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
    c12a:	88 2f       	mov	r24, r24
    c12c:	90 e0       	ldi	r25, 0x00	; 0
    c12e:	81 97       	sbiw	r24, 0x21	; 33
    c130:	11 f5       	brne	.+68     	; 0xc176 <udi_cdc_comm_setup+0x76>
    c132:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    c136:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    c13a:	07 97       	sbiw	r24, 0x07	; 7
    c13c:	11 f0       	breq	.+4      	; 0xc142 <udi_cdc_comm_setup+0x42>
    c13e:	80 e0       	ldi	r24, 0x00	; 0
    c140:	5b c0       	rjmp	.+182    	; 0xc1f8 <udi_cdc_comm_setup+0xf8>
    c142:	89 81       	ldd	r24, Y+1	; 0x01
    c144:	28 2f       	mov	r18, r24
    c146:	30 e0       	ldi	r19, 0x00	; 0
    c148:	c9 01       	movw	r24, r18
    c14a:	88 0f       	add	r24, r24
    c14c:	99 1f       	adc	r25, r25
    c14e:	88 0f       	add	r24, r24
    c150:	99 1f       	adc	r25, r25
    c152:	88 0f       	add	r24, r24
    c154:	99 1f       	adc	r25, r25
    c156:	82 1b       	sub	r24, r18
    c158:	93 0b       	sbc	r25, r19
    c15a:	8a 55       	subi	r24, 0x5A	; 90
    c15c:	9d 4d       	sbci	r25, 0xDD	; 221
    c15e:	80 93 92 29 	sts	0x2992, r24	; 0x802992 <udd_g_ctrlreq+0x8>
    c162:	90 93 93 29 	sts	0x2993, r25	; 0x802993 <udd_g_ctrlreq+0x9>
    c166:	87 e0       	ldi	r24, 0x07	; 7
    c168:	90 e0       	ldi	r25, 0x00	; 0
    c16a:	80 93 94 29 	sts	0x2994, r24	; 0x802994 <udd_g_ctrlreq+0xa>
    c16e:	90 93 95 29 	sts	0x2995, r25	; 0x802995 <udd_g_ctrlreq+0xb>
    c172:	81 e0       	ldi	r24, 0x01	; 1
    c174:	41 c0       	rjmp	.+130    	; 0xc1f8 <udi_cdc_comm_setup+0xf8>
    c176:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    c17a:	88 23       	and	r24, r24
    c17c:	e4 f1       	brlt	.+120    	; 0xc1f6 <udi_cdc_comm_setup+0xf6>
    c17e:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    c182:	88 2f       	mov	r24, r24
    c184:	90 e0       	ldi	r25, 0x00	; 0
    c186:	80 76       	andi	r24, 0x60	; 96
    c188:	99 27       	eor	r25, r25
    c18a:	80 97       	sbiw	r24, 0x20	; 32
    c18c:	a1 f5       	brne	.+104    	; 0xc1f6 <udi_cdc_comm_setup+0xf6>
    c18e:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
    c192:	88 2f       	mov	r24, r24
    c194:	90 e0       	ldi	r25, 0x00	; 0
    c196:	80 32       	cpi	r24, 0x20	; 32
    c198:	91 05       	cpc	r25, r1
    c19a:	19 f0       	breq	.+6      	; 0xc1a2 <udi_cdc_comm_setup+0xa2>
    c19c:	82 97       	sbiw	r24, 0x22	; 34
    c19e:	49 f1       	breq	.+82     	; 0xc1f2 <udi_cdc_comm_setup+0xf2>
    c1a0:	2a c0       	rjmp	.+84     	; 0xc1f6 <udi_cdc_comm_setup+0xf6>
    c1a2:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    c1a6:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    c1aa:	07 97       	sbiw	r24, 0x07	; 7
    c1ac:	11 f0       	breq	.+4      	; 0xc1b2 <udi_cdc_comm_setup+0xb2>
    c1ae:	80 e0       	ldi	r24, 0x00	; 0
    c1b0:	23 c0       	rjmp	.+70     	; 0xc1f8 <udi_cdc_comm_setup+0xf8>
    c1b2:	80 e3       	ldi	r24, 0x30	; 48
    c1b4:	91 e6       	ldi	r25, 0x61	; 97
    c1b6:	80 93 96 29 	sts	0x2996, r24	; 0x802996 <udd_g_ctrlreq+0xc>
    c1ba:	90 93 97 29 	sts	0x2997, r25	; 0x802997 <udd_g_ctrlreq+0xd>
    c1be:	89 81       	ldd	r24, Y+1	; 0x01
    c1c0:	28 2f       	mov	r18, r24
    c1c2:	30 e0       	ldi	r19, 0x00	; 0
    c1c4:	c9 01       	movw	r24, r18
    c1c6:	88 0f       	add	r24, r24
    c1c8:	99 1f       	adc	r25, r25
    c1ca:	88 0f       	add	r24, r24
    c1cc:	99 1f       	adc	r25, r25
    c1ce:	88 0f       	add	r24, r24
    c1d0:	99 1f       	adc	r25, r25
    c1d2:	82 1b       	sub	r24, r18
    c1d4:	93 0b       	sbc	r25, r19
    c1d6:	8a 55       	subi	r24, 0x5A	; 90
    c1d8:	9d 4d       	sbci	r25, 0xDD	; 221
    c1da:	80 93 92 29 	sts	0x2992, r24	; 0x802992 <udd_g_ctrlreq+0x8>
    c1de:	90 93 93 29 	sts	0x2993, r25	; 0x802993 <udd_g_ctrlreq+0x9>
    c1e2:	87 e0       	ldi	r24, 0x07	; 7
    c1e4:	90 e0       	ldi	r25, 0x00	; 0
    c1e6:	80 93 94 29 	sts	0x2994, r24	; 0x802994 <udd_g_ctrlreq+0xa>
    c1ea:	90 93 95 29 	sts	0x2995, r25	; 0x802995 <udd_g_ctrlreq+0xb>
    c1ee:	81 e0       	ldi	r24, 0x01	; 1
    c1f0:	03 c0       	rjmp	.+6      	; 0xc1f8 <udi_cdc_comm_setup+0xf8>
    c1f2:	81 e0       	ldi	r24, 0x01	; 1
    c1f4:	01 c0       	rjmp	.+2      	; 0xc1f8 <udi_cdc_comm_setup+0xf8>
    c1f6:	80 e0       	ldi	r24, 0x00	; 0
    c1f8:	0f 90       	pop	r0
    c1fa:	df 91       	pop	r29
    c1fc:	cf 91       	pop	r28
    c1fe:	08 95       	ret

0000c200 <udi_cdc_data_setup>:
    c200:	cf 93       	push	r28
    c202:	df 93       	push	r29
    c204:	cd b7       	in	r28, 0x3d	; 61
    c206:	de b7       	in	r29, 0x3e	; 62
    c208:	80 e0       	ldi	r24, 0x00	; 0
    c20a:	df 91       	pop	r29
    c20c:	cf 91       	pop	r28
    c20e:	08 95       	ret

0000c210 <udi_cdc_getsetting>:
    c210:	cf 93       	push	r28
    c212:	df 93       	push	r29
    c214:	cd b7       	in	r28, 0x3d	; 61
    c216:	de b7       	in	r29, 0x3e	; 62
    c218:	80 e0       	ldi	r24, 0x00	; 0
    c21a:	df 91       	pop	r29
    c21c:	cf 91       	pop	r28
    c21e:	08 95       	ret

0000c220 <udi_cdc_data_sof_notify>:
    c220:	cf 93       	push	r28
    c222:	df 93       	push	r29
    c224:	cd b7       	in	r28, 0x3d	; 61
    c226:	de b7       	in	r29, 0x3e	; 62
    c228:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <port_notify.5162>
    c22c:	74 d1       	rcall	.+744    	; 0xc516 <udi_cdc_tx_send>
    c22e:	00 00       	nop
    c230:	df 91       	pop	r29
    c232:	cf 91       	pop	r28
    c234:	08 95       	ret

0000c236 <udi_cdc_setup_to_port>:
    c236:	cf 93       	push	r28
    c238:	df 93       	push	r29
    c23a:	1f 92       	push	r1
    c23c:	cd b7       	in	r28, 0x3d	; 61
    c23e:	de b7       	in	r29, 0x3e	; 62
    c240:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    c244:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    c248:	99 27       	eor	r25, r25
    c24a:	89 2b       	or	r24, r25
    c24c:	11 f4       	brne	.+4      	; 0xc252 <udi_cdc_setup_to_port+0x1c>
    c24e:	19 82       	std	Y+1, r1	; 0x01
    c250:	02 c0       	rjmp	.+4      	; 0xc256 <udi_cdc_setup_to_port+0x20>
    c252:	19 82       	std	Y+1, r1	; 0x01
    c254:	00 00       	nop
    c256:	89 81       	ldd	r24, Y+1	; 0x01
    c258:	0f 90       	pop	r0
    c25a:	df 91       	pop	r29
    c25c:	cf 91       	pop	r28
    c25e:	08 95       	ret

0000c260 <udi_cdc_line_coding_received>:
    c260:	cf 93       	push	r28
    c262:	df 93       	push	r29
    c264:	1f 92       	push	r1
    c266:	cd b7       	in	r28, 0x3d	; 61
    c268:	de b7       	in	r29, 0x3e	; 62
    c26a:	e5 df       	rcall	.-54     	; 0xc236 <udi_cdc_setup_to_port>
    c26c:	89 83       	std	Y+1, r24	; 0x01
    c26e:	00 00       	nop
    c270:	0f 90       	pop	r0
    c272:	df 91       	pop	r29
    c274:	cf 91       	pop	r28
    c276:	08 95       	ret

0000c278 <udi_cdc_rx_start>:
    c278:	0f 93       	push	r16
    c27a:	1f 93       	push	r17
    c27c:	cf 93       	push	r28
    c27e:	df 93       	push	r29
    c280:	00 d0       	rcall	.+0      	; 0xc282 <udi_cdc_rx_start+0xa>
    c282:	1f 92       	push	r1
    c284:	cd b7       	in	r28, 0x3d	; 61
    c286:	de b7       	in	r29, 0x3e	; 62
    c288:	8c 83       	std	Y+4, r24	; 0x04
    c28a:	1c 82       	std	Y+4, r1	; 0x04
    c28c:	87 dd       	rcall	.-1266   	; 0xbd9c <cpu_irq_save>
    c28e:	8a 83       	std	Y+2, r24	; 0x02
    c290:	8c 81       	ldd	r24, Y+4	; 0x04
    c292:	88 2f       	mov	r24, r24
    c294:	90 e0       	ldi	r25, 0x00	; 0
    c296:	8e 5b       	subi	r24, 0xBE	; 190
    c298:	9c 4d       	sbci	r25, 0xDC	; 220
    c29a:	fc 01       	movw	r30, r24
    c29c:	80 81       	ld	r24, Z
    c29e:	8b 83       	std	Y+3, r24	; 0x03
    c2a0:	8c 81       	ldd	r24, Y+4	; 0x04
    c2a2:	88 2f       	mov	r24, r24
    c2a4:	90 e0       	ldi	r25, 0x00	; 0
    c2a6:	8b 5b       	subi	r24, 0xBB	; 187
    c2a8:	9c 4d       	sbci	r25, 0xDC	; 220
    c2aa:	fc 01       	movw	r30, r24
    c2ac:	80 81       	ld	r24, Z
    c2ae:	88 23       	and	r24, r24
    c2b0:	f1 f4       	brne	.+60     	; 0xc2ee <udi_cdc_rx_start+0x76>
    c2b2:	8c 81       	ldd	r24, Y+4	; 0x04
    c2b4:	88 2f       	mov	r24, r24
    c2b6:	90 e0       	ldi	r25, 0x00	; 0
    c2b8:	88 0f       	add	r24, r24
    c2ba:	99 1f       	adc	r25, r25
    c2bc:	8d 5b       	subi	r24, 0xBD	; 189
    c2be:	9c 4d       	sbci	r25, 0xDC	; 220
    c2c0:	fc 01       	movw	r30, r24
    c2c2:	20 81       	ld	r18, Z
    c2c4:	31 81       	ldd	r19, Z+1	; 0x01
    c2c6:	8c 81       	ldd	r24, Y+4	; 0x04
    c2c8:	48 2f       	mov	r20, r24
    c2ca:	50 e0       	ldi	r21, 0x00	; 0
    c2cc:	8b 81       	ldd	r24, Y+3	; 0x03
    c2ce:	88 2f       	mov	r24, r24
    c2d0:	90 e0       	ldi	r25, 0x00	; 0
    c2d2:	44 0f       	add	r20, r20
    c2d4:	55 1f       	adc	r21, r21
    c2d6:	84 0f       	add	r24, r20
    c2d8:	95 1f       	adc	r25, r21
    c2da:	88 0f       	add	r24, r24
    c2dc:	99 1f       	adc	r25, r25
    c2de:	82 5c       	subi	r24, 0xC2	; 194
    c2e0:	9c 4d       	sbci	r25, 0xDC	; 220
    c2e2:	fc 01       	movw	r30, r24
    c2e4:	80 81       	ld	r24, Z
    c2e6:	91 81       	ldd	r25, Z+1	; 0x01
    c2e8:	28 17       	cp	r18, r24
    c2ea:	39 07       	cpc	r19, r25
    c2ec:	20 f4       	brcc	.+8      	; 0xc2f6 <udi_cdc_rx_start+0x7e>
    c2ee:	8a 81       	ldd	r24, Y+2	; 0x02
    c2f0:	65 dd       	rcall	.-1334   	; 0xbdbc <cpu_irq_restore>
    c2f2:	80 e0       	ldi	r24, 0x00	; 0
    c2f4:	4f c0       	rjmp	.+158    	; 0xc394 <udi_cdc_rx_start+0x11c>
    c2f6:	8c 81       	ldd	r24, Y+4	; 0x04
    c2f8:	88 2f       	mov	r24, r24
    c2fa:	90 e0       	ldi	r25, 0x00	; 0
    c2fc:	88 0f       	add	r24, r24
    c2fe:	99 1f       	adc	r25, r25
    c300:	8d 5b       	subi	r24, 0xBD	; 189
    c302:	9c 4d       	sbci	r25, 0xDC	; 220
    c304:	fc 01       	movw	r30, r24
    c306:	10 82       	st	Z, r1
    c308:	11 82       	std	Z+1, r1	; 0x01
    c30a:	8c 81       	ldd	r24, Y+4	; 0x04
    c30c:	88 2f       	mov	r24, r24
    c30e:	90 e0       	ldi	r25, 0x00	; 0
    c310:	21 e0       	ldi	r18, 0x01	; 1
    c312:	3b 81       	ldd	r19, Y+3	; 0x03
    c314:	33 23       	and	r19, r19
    c316:	09 f0       	breq	.+2      	; 0xc31a <udi_cdc_rx_start+0xa2>
    c318:	20 e0       	ldi	r18, 0x00	; 0
    c31a:	8e 5b       	subi	r24, 0xBE	; 190
    c31c:	9c 4d       	sbci	r25, 0xDC	; 220
    c31e:	fc 01       	movw	r30, r24
    c320:	20 83       	st	Z, r18
    c322:	8c 81       	ldd	r24, Y+4	; 0x04
    c324:	88 2f       	mov	r24, r24
    c326:	90 e0       	ldi	r25, 0x00	; 0
    c328:	8b 5b       	subi	r24, 0xBB	; 187
    c32a:	9c 4d       	sbci	r25, 0xDC	; 220
    c32c:	21 e0       	ldi	r18, 0x01	; 1
    c32e:	fc 01       	movw	r30, r24
    c330:	20 83       	st	Z, r18
    c332:	8a 81       	ldd	r24, Y+2	; 0x02
    c334:	43 dd       	rcall	.-1402   	; 0xbdbc <cpu_irq_restore>
    c336:	8c 81       	ldd	r24, Y+4	; 0x04
    c338:	68 d2       	rcall	.+1232   	; 0xc80a <udi_cdc_multi_is_rx_ready>
    c33a:	88 23       	and	r24, r24
    c33c:	11 f0       	breq	.+4      	; 0xc342 <udi_cdc_rx_start+0xca>
    c33e:	0e 94 9a 82 	call	0x10534	; 0x10534 <my_callback_rx_notify>
    c342:	8c 81       	ldd	r24, Y+4	; 0x04
    c344:	88 2f       	mov	r24, r24
    c346:	90 e0       	ldi	r25, 0x00	; 0
    c348:	89 2b       	or	r24, r25
    c34a:	19 f4       	brne	.+6      	; 0xc352 <udi_cdc_rx_start+0xda>
    c34c:	82 e0       	ldi	r24, 0x02	; 2
    c34e:	89 83       	std	Y+1, r24	; 0x01
    c350:	03 c0       	rjmp	.+6      	; 0xc358 <udi_cdc_rx_start+0xe0>
    c352:	82 e0       	ldi	r24, 0x02	; 2
    c354:	89 83       	std	Y+1, r24	; 0x01
    c356:	00 00       	nop
    c358:	8c 81       	ldd	r24, Y+4	; 0x04
    c35a:	28 2f       	mov	r18, r24
    c35c:	30 e0       	ldi	r19, 0x00	; 0
    c35e:	8b 81       	ldd	r24, Y+3	; 0x03
    c360:	88 2f       	mov	r24, r24
    c362:	90 e0       	ldi	r25, 0x00	; 0
    c364:	22 0f       	add	r18, r18
    c366:	33 1f       	adc	r19, r19
    c368:	82 0f       	add	r24, r18
    c36a:	93 1f       	adc	r25, r19
    c36c:	00 24       	eor	r0, r0
    c36e:	96 95       	lsr	r25
    c370:	87 95       	ror	r24
    c372:	07 94       	ror	r0
    c374:	96 95       	lsr	r25
    c376:	87 95       	ror	r24
    c378:	07 94       	ror	r0
    c37a:	98 2f       	mov	r25, r24
    c37c:	80 2d       	mov	r24, r0
    c37e:	82 54       	subi	r24, 0x42	; 66
    c380:	9d 4d       	sbci	r25, 0xDD	; 221
    c382:	02 ed       	ldi	r16, 0xD2	; 210
    c384:	11 e6       	ldi	r17, 0x61	; 97
    c386:	20 e4       	ldi	r18, 0x40	; 64
    c388:	30 e0       	ldi	r19, 0x00	; 0
    c38a:	ac 01       	movw	r20, r24
    c38c:	61 e0       	ldi	r22, 0x01	; 1
    c38e:	89 81       	ldd	r24, Y+1	; 0x01
    c390:	0e 94 1f 73 	call	0xe63e	; 0xe63e <udd_ep_run>
    c394:	24 96       	adiw	r28, 0x04	; 4
    c396:	cd bf       	out	0x3d, r28	; 61
    c398:	de bf       	out	0x3e, r29	; 62
    c39a:	df 91       	pop	r29
    c39c:	cf 91       	pop	r28
    c39e:	1f 91       	pop	r17
    c3a0:	0f 91       	pop	r16
    c3a2:	08 95       	ret

0000c3a4 <udi_cdc_data_received>:
    c3a4:	0f 93       	push	r16
    c3a6:	1f 93       	push	r17
    c3a8:	cf 93       	push	r28
    c3aa:	df 93       	push	r29
    c3ac:	00 d0       	rcall	.+0      	; 0xc3ae <udi_cdc_data_received+0xa>
    c3ae:	00 d0       	rcall	.+0      	; 0xc3b0 <udi_cdc_data_received+0xc>
    c3b0:	cd b7       	in	r28, 0x3d	; 61
    c3b2:	de b7       	in	r29, 0x3e	; 62
    c3b4:	8b 83       	std	Y+3, r24	; 0x03
    c3b6:	6c 83       	std	Y+4, r22	; 0x04
    c3b8:	7d 83       	std	Y+5, r23	; 0x05
    c3ba:	4e 83       	std	Y+6, r20	; 0x06
    c3bc:	8e 81       	ldd	r24, Y+6	; 0x06
    c3be:	88 2f       	mov	r24, r24
    c3c0:	90 e0       	ldi	r25, 0x00	; 0
    c3c2:	02 97       	sbiw	r24, 0x02	; 2
    c3c4:	11 f4       	brne	.+4      	; 0xc3ca <udi_cdc_data_received+0x26>
    c3c6:	19 82       	std	Y+1, r1	; 0x01
    c3c8:	02 c0       	rjmp	.+4      	; 0xc3ce <udi_cdc_data_received+0x2a>
    c3ca:	19 82       	std	Y+1, r1	; 0x01
    c3cc:	00 00       	nop
    c3ce:	8b 81       	ldd	r24, Y+3	; 0x03
    c3d0:	88 23       	and	r24, r24
    c3d2:	09 f0       	breq	.+2      	; 0xc3d6 <udi_cdc_data_received+0x32>
    c3d4:	4c c0       	rjmp	.+152    	; 0xc46e <udi_cdc_data_received+0xca>
    c3d6:	89 81       	ldd	r24, Y+1	; 0x01
    c3d8:	88 2f       	mov	r24, r24
    c3da:	90 e0       	ldi	r25, 0x00	; 0
    c3dc:	8e 5b       	subi	r24, 0xBE	; 190
    c3de:	9c 4d       	sbci	r25, 0xDC	; 220
    c3e0:	fc 01       	movw	r30, r24
    c3e2:	90 81       	ld	r25, Z
    c3e4:	81 e0       	ldi	r24, 0x01	; 1
    c3e6:	99 23       	and	r25, r25
    c3e8:	09 f0       	breq	.+2      	; 0xc3ec <udi_cdc_data_received+0x48>
    c3ea:	80 e0       	ldi	r24, 0x00	; 0
    c3ec:	8a 83       	std	Y+2, r24	; 0x02
    c3ee:	8c 81       	ldd	r24, Y+4	; 0x04
    c3f0:	9d 81       	ldd	r25, Y+5	; 0x05
    c3f2:	89 2b       	or	r24, r25
    c3f4:	f9 f4       	brne	.+62     	; 0xc434 <udi_cdc_data_received+0x90>
    c3f6:	89 81       	ldd	r24, Y+1	; 0x01
    c3f8:	28 2f       	mov	r18, r24
    c3fa:	30 e0       	ldi	r19, 0x00	; 0
    c3fc:	8a 81       	ldd	r24, Y+2	; 0x02
    c3fe:	88 2f       	mov	r24, r24
    c400:	90 e0       	ldi	r25, 0x00	; 0
    c402:	22 0f       	add	r18, r18
    c404:	33 1f       	adc	r19, r19
    c406:	82 0f       	add	r24, r18
    c408:	93 1f       	adc	r25, r19
    c40a:	00 24       	eor	r0, r0
    c40c:	96 95       	lsr	r25
    c40e:	87 95       	ror	r24
    c410:	07 94       	ror	r0
    c412:	96 95       	lsr	r25
    c414:	87 95       	ror	r24
    c416:	07 94       	ror	r0
    c418:	98 2f       	mov	r25, r24
    c41a:	80 2d       	mov	r24, r0
    c41c:	82 54       	subi	r24, 0x42	; 66
    c41e:	9d 4d       	sbci	r25, 0xDD	; 221
    c420:	02 ed       	ldi	r16, 0xD2	; 210
    c422:	11 e6       	ldi	r17, 0x61	; 97
    c424:	20 e4       	ldi	r18, 0x40	; 64
    c426:	30 e0       	ldi	r19, 0x00	; 0
    c428:	ac 01       	movw	r20, r24
    c42a:	61 e0       	ldi	r22, 0x01	; 1
    c42c:	8e 81       	ldd	r24, Y+6	; 0x06
    c42e:	0e 94 1f 73 	call	0xe63e	; 0xe63e <udd_ep_run>
    c432:	1e c0       	rjmp	.+60     	; 0xc470 <udi_cdc_data_received+0xcc>
    c434:	89 81       	ldd	r24, Y+1	; 0x01
    c436:	28 2f       	mov	r18, r24
    c438:	30 e0       	ldi	r19, 0x00	; 0
    c43a:	8a 81       	ldd	r24, Y+2	; 0x02
    c43c:	88 2f       	mov	r24, r24
    c43e:	90 e0       	ldi	r25, 0x00	; 0
    c440:	22 0f       	add	r18, r18
    c442:	33 1f       	adc	r19, r19
    c444:	82 0f       	add	r24, r18
    c446:	93 1f       	adc	r25, r19
    c448:	88 0f       	add	r24, r24
    c44a:	99 1f       	adc	r25, r25
    c44c:	82 5c       	subi	r24, 0xC2	; 194
    c44e:	9c 4d       	sbci	r25, 0xDC	; 220
    c450:	2c 81       	ldd	r18, Y+4	; 0x04
    c452:	3d 81       	ldd	r19, Y+5	; 0x05
    c454:	fc 01       	movw	r30, r24
    c456:	20 83       	st	Z, r18
    c458:	31 83       	std	Z+1, r19	; 0x01
    c45a:	89 81       	ldd	r24, Y+1	; 0x01
    c45c:	88 2f       	mov	r24, r24
    c45e:	90 e0       	ldi	r25, 0x00	; 0
    c460:	8b 5b       	subi	r24, 0xBB	; 187
    c462:	9c 4d       	sbci	r25, 0xDC	; 220
    c464:	fc 01       	movw	r30, r24
    c466:	10 82       	st	Z, r1
    c468:	89 81       	ldd	r24, Y+1	; 0x01
    c46a:	06 df       	rcall	.-500    	; 0xc278 <udi_cdc_rx_start>
    c46c:	01 c0       	rjmp	.+2      	; 0xc470 <udi_cdc_data_received+0xcc>
    c46e:	00 00       	nop
    c470:	26 96       	adiw	r28, 0x06	; 6
    c472:	cd bf       	out	0x3d, r28	; 61
    c474:	de bf       	out	0x3e, r29	; 62
    c476:	df 91       	pop	r29
    c478:	cf 91       	pop	r28
    c47a:	1f 91       	pop	r17
    c47c:	0f 91       	pop	r16
    c47e:	08 95       	ret

0000c480 <udi_cdc_data_sent>:
    c480:	cf 93       	push	r28
    c482:	df 93       	push	r29
    c484:	cd b7       	in	r28, 0x3d	; 61
    c486:	de b7       	in	r29, 0x3e	; 62
    c488:	25 97       	sbiw	r28, 0x05	; 5
    c48a:	cd bf       	out	0x3d, r28	; 61
    c48c:	de bf       	out	0x3e, r29	; 62
    c48e:	8a 83       	std	Y+2, r24	; 0x02
    c490:	6b 83       	std	Y+3, r22	; 0x03
    c492:	7c 83       	std	Y+4, r23	; 0x04
    c494:	4d 83       	std	Y+5, r20	; 0x05
    c496:	8d 81       	ldd	r24, Y+5	; 0x05
    c498:	88 2f       	mov	r24, r24
    c49a:	90 e0       	ldi	r25, 0x00	; 0
    c49c:	81 38       	cpi	r24, 0x81	; 129
    c49e:	91 05       	cpc	r25, r1
    c4a0:	11 f4       	brne	.+4      	; 0xc4a6 <udi_cdc_data_sent+0x26>
    c4a2:	19 82       	std	Y+1, r1	; 0x01
    c4a4:	02 c0       	rjmp	.+4      	; 0xc4aa <udi_cdc_data_sent+0x2a>
    c4a6:	19 82       	std	Y+1, r1	; 0x01
    c4a8:	00 00       	nop
    c4aa:	8a 81       	ldd	r24, Y+2	; 0x02
    c4ac:	88 23       	and	r24, r24
    c4ae:	61 f5       	brne	.+88     	; 0xc508 <udi_cdc_data_sent+0x88>
    c4b0:	89 81       	ldd	r24, Y+1	; 0x01
    c4b2:	28 2f       	mov	r18, r24
    c4b4:	30 e0       	ldi	r19, 0x00	; 0
    c4b6:	89 81       	ldd	r24, Y+1	; 0x01
    c4b8:	88 2f       	mov	r24, r24
    c4ba:	90 e0       	ldi	r25, 0x00	; 0
    c4bc:	86 53       	subi	r24, 0x36	; 54
    c4be:	9c 4d       	sbci	r25, 0xDC	; 220
    c4c0:	fc 01       	movw	r30, r24
    c4c2:	90 81       	ld	r25, Z
    c4c4:	81 e0       	ldi	r24, 0x01	; 1
    c4c6:	99 23       	and	r25, r25
    c4c8:	09 f0       	breq	.+2      	; 0xc4cc <udi_cdc_data_sent+0x4c>
    c4ca:	80 e0       	ldi	r24, 0x00	; 0
    c4cc:	88 2f       	mov	r24, r24
    c4ce:	90 e0       	ldi	r25, 0x00	; 0
    c4d0:	22 0f       	add	r18, r18
    c4d2:	33 1f       	adc	r19, r19
    c4d4:	82 0f       	add	r24, r18
    c4d6:	93 1f       	adc	r25, r19
    c4d8:	88 0f       	add	r24, r24
    c4da:	99 1f       	adc	r25, r25
    c4dc:	8a 53       	subi	r24, 0x3A	; 58
    c4de:	9c 4d       	sbci	r25, 0xDC	; 220
    c4e0:	fc 01       	movw	r30, r24
    c4e2:	10 82       	st	Z, r1
    c4e4:	11 82       	std	Z+1, r1	; 0x01
    c4e6:	89 81       	ldd	r24, Y+1	; 0x01
    c4e8:	88 2f       	mov	r24, r24
    c4ea:	90 e0       	ldi	r25, 0x00	; 0
    c4ec:	82 53       	subi	r24, 0x32	; 50
    c4ee:	9c 4d       	sbci	r25, 0xDC	; 220
    c4f0:	fc 01       	movw	r30, r24
    c4f2:	10 82       	st	Z, r1
    c4f4:	89 81       	ldd	r24, Y+1	; 0x01
    c4f6:	88 2f       	mov	r24, r24
    c4f8:	90 e0       	ldi	r25, 0x00	; 0
    c4fa:	83 53       	subi	r24, 0x33	; 51
    c4fc:	9c 4d       	sbci	r25, 0xDC	; 220
    c4fe:	fc 01       	movw	r30, r24
    c500:	10 82       	st	Z, r1
    c502:	89 81       	ldd	r24, Y+1	; 0x01
    c504:	08 d0       	rcall	.+16     	; 0xc516 <udi_cdc_tx_send>
    c506:	01 c0       	rjmp	.+2      	; 0xc50a <udi_cdc_data_sent+0x8a>
    c508:	00 00       	nop
    c50a:	25 96       	adiw	r28, 0x05	; 5
    c50c:	cd bf       	out	0x3d, r28	; 61
    c50e:	de bf       	out	0x3e, r29	; 62
    c510:	df 91       	pop	r29
    c512:	cf 91       	pop	r28
    c514:	08 95       	ret

0000c516 <udi_cdc_tx_send>:
    c516:	0f 93       	push	r16
    c518:	1f 93       	push	r17
    c51a:	cf 93       	push	r28
    c51c:	df 93       	push	r29
    c51e:	cd b7       	in	r28, 0x3d	; 61
    c520:	de b7       	in	r29, 0x3e	; 62
    c522:	25 97       	sbiw	r28, 0x05	; 5
    c524:	cd bf       	out	0x3d, r28	; 61
    c526:	de bf       	out	0x3e, r29	; 62
    c528:	8d 83       	std	Y+5, r24	; 0x05
    c52a:	1d 82       	std	Y+5, r1	; 0x05
    c52c:	8d 81       	ldd	r24, Y+5	; 0x05
    c52e:	88 2f       	mov	r24, r24
    c530:	90 e0       	ldi	r25, 0x00	; 0
    c532:	83 53       	subi	r24, 0x33	; 51
    c534:	9c 4d       	sbci	r25, 0xDC	; 220
    c536:	fc 01       	movw	r30, r24
    c538:	80 81       	ld	r24, Z
    c53a:	88 23       	and	r24, r24
    c53c:	09 f0       	breq	.+2      	; 0xc540 <udi_cdc_tx_send+0x2a>
    c53e:	12 c1       	rjmp	.+548    	; 0xc764 <udi_cdc_tx_send+0x24e>
    c540:	0e 94 e9 71 	call	0xe3d2	; 0xe3d2 <udd_is_high_speed>
    c544:	88 23       	and	r24, r24
    c546:	81 f0       	breq	.+32     	; 0xc568 <udi_cdc_tx_send+0x52>
    c548:	8d 81       	ldd	r24, Y+5	; 0x05
    c54a:	88 2f       	mov	r24, r24
    c54c:	90 e0       	ldi	r25, 0x00	; 0
    c54e:	88 0f       	add	r24, r24
    c550:	99 1f       	adc	r25, r25
    c552:	85 53       	subi	r24, 0x35	; 53
    c554:	9c 4d       	sbci	r25, 0xDC	; 220
    c556:	fc 01       	movw	r30, r24
    c558:	00 81       	ld	r16, Z
    c55a:	11 81       	ldd	r17, Z+1	; 0x01
    c55c:	0e 94 17 72 	call	0xe42e	; 0xe42e <udd_get_micro_frame_number>
    c560:	08 17       	cp	r16, r24
    c562:	19 07       	cpc	r17, r25
    c564:	89 f4       	brne	.+34     	; 0xc588 <udi_cdc_tx_send+0x72>
    c566:	01 c1       	rjmp	.+514    	; 0xc76a <udi_cdc_tx_send+0x254>
    c568:	8d 81       	ldd	r24, Y+5	; 0x05
    c56a:	88 2f       	mov	r24, r24
    c56c:	90 e0       	ldi	r25, 0x00	; 0
    c56e:	88 0f       	add	r24, r24
    c570:	99 1f       	adc	r25, r25
    c572:	85 53       	subi	r24, 0x35	; 53
    c574:	9c 4d       	sbci	r25, 0xDC	; 220
    c576:	fc 01       	movw	r30, r24
    c578:	00 81       	ld	r16, Z
    c57a:	11 81       	ldd	r17, Z+1	; 0x01
    c57c:	0e 94 0c 72 	call	0xe418	; 0xe418 <udd_get_frame_number>
    c580:	08 17       	cp	r16, r24
    c582:	19 07       	cpc	r17, r25
    c584:	09 f4       	brne	.+2      	; 0xc588 <udi_cdc_tx_send+0x72>
    c586:	f0 c0       	rjmp	.+480    	; 0xc768 <udi_cdc_tx_send+0x252>
    c588:	09 dc       	rcall	.-2030   	; 0xbd9c <cpu_irq_save>
    c58a:	8b 83       	std	Y+3, r24	; 0x03
    c58c:	8d 81       	ldd	r24, Y+5	; 0x05
    c58e:	88 2f       	mov	r24, r24
    c590:	90 e0       	ldi	r25, 0x00	; 0
    c592:	86 53       	subi	r24, 0x36	; 54
    c594:	9c 4d       	sbci	r25, 0xDC	; 220
    c596:	fc 01       	movw	r30, r24
    c598:	80 81       	ld	r24, Z
    c59a:	89 83       	std	Y+1, r24	; 0x01
    c59c:	8d 81       	ldd	r24, Y+5	; 0x05
    c59e:	28 2f       	mov	r18, r24
    c5a0:	30 e0       	ldi	r19, 0x00	; 0
    c5a2:	89 81       	ldd	r24, Y+1	; 0x01
    c5a4:	88 2f       	mov	r24, r24
    c5a6:	90 e0       	ldi	r25, 0x00	; 0
    c5a8:	22 0f       	add	r18, r18
    c5aa:	33 1f       	adc	r19, r19
    c5ac:	82 0f       	add	r24, r18
    c5ae:	93 1f       	adc	r25, r19
    c5b0:	88 0f       	add	r24, r24
    c5b2:	99 1f       	adc	r25, r25
    c5b4:	8a 53       	subi	r24, 0x3A	; 58
    c5b6:	9c 4d       	sbci	r25, 0xDC	; 220
    c5b8:	fc 01       	movw	r30, r24
    c5ba:	80 81       	ld	r24, Z
    c5bc:	91 81       	ldd	r25, Z+1	; 0x01
    c5be:	89 2b       	or	r24, r25
    c5c0:	29 f5       	brne	.+74     	; 0xc60c <udi_cdc_tx_send+0xf6>
    c5c2:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <sof_zlp_counter.5232>
    c5c6:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <sof_zlp_counter.5232+0x1>
    c5ca:	01 96       	adiw	r24, 0x01	; 1
    c5cc:	80 93 d0 23 	sts	0x23D0, r24	; 0x8023d0 <sof_zlp_counter.5232>
    c5d0:	90 93 d1 23 	sts	0x23D1, r25	; 0x8023d1 <sof_zlp_counter.5232+0x1>
    c5d4:	0e 94 e9 71 	call	0xe3d2	; 0xe3d2 <udd_is_high_speed>
    c5d8:	98 2f       	mov	r25, r24
    c5da:	81 e0       	ldi	r24, 0x01	; 1
    c5dc:	89 27       	eor	r24, r25
    c5de:	88 23       	and	r24, r24
    c5e0:	39 f0       	breq	.+14     	; 0xc5f0 <udi_cdc_tx_send+0xda>
    c5e2:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <sof_zlp_counter.5232>
    c5e6:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <sof_zlp_counter.5232+0x1>
    c5ea:	84 36       	cpi	r24, 0x64	; 100
    c5ec:	91 05       	cpc	r25, r1
    c5ee:	58 f0       	brcs	.+22     	; 0xc606 <udi_cdc_tx_send+0xf0>
    c5f0:	0e 94 e9 71 	call	0xe3d2	; 0xe3d2 <udd_is_high_speed>
    c5f4:	88 23       	and	r24, r24
    c5f6:	51 f0       	breq	.+20     	; 0xc60c <udi_cdc_tx_send+0xf6>
    c5f8:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <sof_zlp_counter.5232>
    c5fc:	90 91 d1 23 	lds	r25, 0x23D1	; 0x8023d1 <sof_zlp_counter.5232+0x1>
    c600:	80 32       	cpi	r24, 0x20	; 32
    c602:	93 40       	sbci	r25, 0x03	; 3
    c604:	18 f4       	brcc	.+6      	; 0xc60c <udi_cdc_tx_send+0xf6>
    c606:	8b 81       	ldd	r24, Y+3	; 0x03
    c608:	d9 db       	rcall	.-2126   	; 0xbdbc <cpu_irq_restore>
    c60a:	af c0       	rjmp	.+350    	; 0xc76a <udi_cdc_tx_send+0x254>
    c60c:	10 92 d0 23 	sts	0x23D0, r1	; 0x8023d0 <sof_zlp_counter.5232>
    c610:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <sof_zlp_counter.5232+0x1>
    c614:	8d 81       	ldd	r24, Y+5	; 0x05
    c616:	88 2f       	mov	r24, r24
    c618:	90 e0       	ldi	r25, 0x00	; 0
    c61a:	82 53       	subi	r24, 0x32	; 50
    c61c:	9c 4d       	sbci	r25, 0xDC	; 220
    c61e:	fc 01       	movw	r30, r24
    c620:	90 81       	ld	r25, Z
    c622:	81 e0       	ldi	r24, 0x01	; 1
    c624:	89 27       	eor	r24, r25
    c626:	88 23       	and	r24, r24
    c628:	69 f0       	breq	.+26     	; 0xc644 <udi_cdc_tx_send+0x12e>
    c62a:	8d 81       	ldd	r24, Y+5	; 0x05
    c62c:	88 2f       	mov	r24, r24
    c62e:	90 e0       	ldi	r25, 0x00	; 0
    c630:	21 e0       	ldi	r18, 0x01	; 1
    c632:	39 81       	ldd	r19, Y+1	; 0x01
    c634:	33 23       	and	r19, r19
    c636:	09 f0       	breq	.+2      	; 0xc63a <udi_cdc_tx_send+0x124>
    c638:	20 e0       	ldi	r18, 0x00	; 0
    c63a:	86 53       	subi	r24, 0x36	; 54
    c63c:	9c 4d       	sbci	r25, 0xDC	; 220
    c63e:	fc 01       	movw	r30, r24
    c640:	20 83       	st	Z, r18
    c642:	06 c0       	rjmp	.+12     	; 0xc650 <udi_cdc_tx_send+0x13a>
    c644:	81 e0       	ldi	r24, 0x01	; 1
    c646:	99 81       	ldd	r25, Y+1	; 0x01
    c648:	99 23       	and	r25, r25
    c64a:	09 f0       	breq	.+2      	; 0xc64e <udi_cdc_tx_send+0x138>
    c64c:	80 e0       	ldi	r24, 0x00	; 0
    c64e:	89 83       	std	Y+1, r24	; 0x01
    c650:	8d 81       	ldd	r24, Y+5	; 0x05
    c652:	88 2f       	mov	r24, r24
    c654:	90 e0       	ldi	r25, 0x00	; 0
    c656:	83 53       	subi	r24, 0x33	; 51
    c658:	9c 4d       	sbci	r25, 0xDC	; 220
    c65a:	21 e0       	ldi	r18, 0x01	; 1
    c65c:	fc 01       	movw	r30, r24
    c65e:	20 83       	st	Z, r18
    c660:	8b 81       	ldd	r24, Y+3	; 0x03
    c662:	ac db       	rcall	.-2216   	; 0xbdbc <cpu_irq_restore>
    c664:	8d 81       	ldd	r24, Y+5	; 0x05
    c666:	28 2f       	mov	r18, r24
    c668:	30 e0       	ldi	r19, 0x00	; 0
    c66a:	89 81       	ldd	r24, Y+1	; 0x01
    c66c:	88 2f       	mov	r24, r24
    c66e:	90 e0       	ldi	r25, 0x00	; 0
    c670:	22 0f       	add	r18, r18
    c672:	33 1f       	adc	r19, r19
    c674:	82 0f       	add	r24, r18
    c676:	93 1f       	adc	r25, r19
    c678:	88 0f       	add	r24, r24
    c67a:	99 1f       	adc	r25, r25
    c67c:	8a 53       	subi	r24, 0x3A	; 58
    c67e:	9c 4d       	sbci	r25, 0xDC	; 220
    c680:	fc 01       	movw	r30, r24
    c682:	80 81       	ld	r24, Z
    c684:	91 81       	ldd	r25, Z+1	; 0x01
    c686:	21 e0       	ldi	r18, 0x01	; 1
    c688:	80 34       	cpi	r24, 0x40	; 64
    c68a:	91 05       	cpc	r25, r1
    c68c:	09 f4       	brne	.+2      	; 0xc690 <udi_cdc_tx_send+0x17a>
    c68e:	20 e0       	ldi	r18, 0x00	; 0
    c690:	2c 83       	std	Y+4, r18	; 0x04
    c692:	8c 81       	ldd	r24, Y+4	; 0x04
    c694:	88 23       	and	r24, r24
    c696:	11 f1       	breq	.+68     	; 0xc6dc <udi_cdc_tx_send+0x1c6>
    c698:	0e 94 e9 71 	call	0xe3d2	; 0xe3d2 <udd_is_high_speed>
    c69c:	88 23       	and	r24, r24
    c69e:	79 f0       	breq	.+30     	; 0xc6be <udi_cdc_tx_send+0x1a8>
    c6a0:	8d 81       	ldd	r24, Y+5	; 0x05
    c6a2:	08 2f       	mov	r16, r24
    c6a4:	10 e0       	ldi	r17, 0x00	; 0
    c6a6:	0e 94 17 72 	call	0xe42e	; 0xe42e <udd_get_micro_frame_number>
    c6aa:	9c 01       	movw	r18, r24
    c6ac:	c8 01       	movw	r24, r16
    c6ae:	88 0f       	add	r24, r24
    c6b0:	99 1f       	adc	r25, r25
    c6b2:	85 53       	subi	r24, 0x35	; 53
    c6b4:	9c 4d       	sbci	r25, 0xDC	; 220
    c6b6:	fc 01       	movw	r30, r24
    c6b8:	20 83       	st	Z, r18
    c6ba:	31 83       	std	Z+1, r19	; 0x01
    c6bc:	19 c0       	rjmp	.+50     	; 0xc6f0 <udi_cdc_tx_send+0x1da>
    c6be:	8d 81       	ldd	r24, Y+5	; 0x05
    c6c0:	08 2f       	mov	r16, r24
    c6c2:	10 e0       	ldi	r17, 0x00	; 0
    c6c4:	0e 94 0c 72 	call	0xe418	; 0xe418 <udd_get_frame_number>
    c6c8:	9c 01       	movw	r18, r24
    c6ca:	c8 01       	movw	r24, r16
    c6cc:	88 0f       	add	r24, r24
    c6ce:	99 1f       	adc	r25, r25
    c6d0:	85 53       	subi	r24, 0x35	; 53
    c6d2:	9c 4d       	sbci	r25, 0xDC	; 220
    c6d4:	fc 01       	movw	r30, r24
    c6d6:	20 83       	st	Z, r18
    c6d8:	31 83       	std	Z+1, r19	; 0x01
    c6da:	0a c0       	rjmp	.+20     	; 0xc6f0 <udi_cdc_tx_send+0x1da>
    c6dc:	8d 81       	ldd	r24, Y+5	; 0x05
    c6de:	88 2f       	mov	r24, r24
    c6e0:	90 e0       	ldi	r25, 0x00	; 0
    c6e2:	88 0f       	add	r24, r24
    c6e4:	99 1f       	adc	r25, r25
    c6e6:	85 53       	subi	r24, 0x35	; 53
    c6e8:	9c 4d       	sbci	r25, 0xDC	; 220
    c6ea:	fc 01       	movw	r30, r24
    c6ec:	10 82       	st	Z, r1
    c6ee:	11 82       	std	Z+1, r1	; 0x01
    c6f0:	8d 81       	ldd	r24, Y+5	; 0x05
    c6f2:	88 2f       	mov	r24, r24
    c6f4:	90 e0       	ldi	r25, 0x00	; 0
    c6f6:	89 2b       	or	r24, r25
    c6f8:	19 f4       	brne	.+6      	; 0xc700 <udi_cdc_tx_send+0x1ea>
    c6fa:	81 e8       	ldi	r24, 0x81	; 129
    c6fc:	8a 83       	std	Y+2, r24	; 0x02
    c6fe:	03 c0       	rjmp	.+6      	; 0xc706 <udi_cdc_tx_send+0x1f0>
    c700:	81 e8       	ldi	r24, 0x81	; 129
    c702:	8a 83       	std	Y+2, r24	; 0x02
    c704:	00 00       	nop
    c706:	8d 81       	ldd	r24, Y+5	; 0x05
    c708:	28 2f       	mov	r18, r24
    c70a:	30 e0       	ldi	r19, 0x00	; 0
    c70c:	89 81       	ldd	r24, Y+1	; 0x01
    c70e:	88 2f       	mov	r24, r24
    c710:	90 e0       	ldi	r25, 0x00	; 0
    c712:	22 0f       	add	r18, r18
    c714:	33 1f       	adc	r19, r19
    c716:	82 0f       	add	r24, r18
    c718:	93 1f       	adc	r25, r19
    c71a:	88 0f       	add	r24, r24
    c71c:	99 1f       	adc	r25, r25
    c71e:	8a 53       	subi	r24, 0x3A	; 58
    c720:	9c 4d       	sbci	r25, 0xDC	; 220
    c722:	fc 01       	movw	r30, r24
    c724:	40 81       	ld	r20, Z
    c726:	51 81       	ldd	r21, Z+1	; 0x01
    c728:	8d 81       	ldd	r24, Y+5	; 0x05
    c72a:	28 2f       	mov	r18, r24
    c72c:	30 e0       	ldi	r19, 0x00	; 0
    c72e:	89 81       	ldd	r24, Y+1	; 0x01
    c730:	88 2f       	mov	r24, r24
    c732:	90 e0       	ldi	r25, 0x00	; 0
    c734:	22 0f       	add	r18, r18
    c736:	33 1f       	adc	r19, r19
    c738:	82 0f       	add	r24, r18
    c73a:	93 1f       	adc	r25, r19
    c73c:	00 24       	eor	r0, r0
    c73e:	96 95       	lsr	r25
    c740:	87 95       	ror	r24
    c742:	07 94       	ror	r0
    c744:	96 95       	lsr	r25
    c746:	87 95       	ror	r24
    c748:	07 94       	ror	r0
    c74a:	98 2f       	mov	r25, r24
    c74c:	80 2d       	mov	r24, r0
    c74e:	8a 5b       	subi	r24, 0xBA	; 186
    c750:	9c 4d       	sbci	r25, 0xDC	; 220
    c752:	00 e4       	ldi	r16, 0x40	; 64
    c754:	12 e6       	ldi	r17, 0x62	; 98
    c756:	9a 01       	movw	r18, r20
    c758:	ac 01       	movw	r20, r24
    c75a:	6c 81       	ldd	r22, Y+4	; 0x04
    c75c:	8a 81       	ldd	r24, Y+2	; 0x02
    c75e:	0e 94 1f 73 	call	0xe63e	; 0xe63e <udd_ep_run>
    c762:	03 c0       	rjmp	.+6      	; 0xc76a <udi_cdc_tx_send+0x254>
    c764:	00 00       	nop
    c766:	01 c0       	rjmp	.+2      	; 0xc76a <udi_cdc_tx_send+0x254>
    c768:	00 00       	nop
    c76a:	25 96       	adiw	r28, 0x05	; 5
    c76c:	cd bf       	out	0x3d, r28	; 61
    c76e:	de bf       	out	0x3e, r29	; 62
    c770:	df 91       	pop	r29
    c772:	cf 91       	pop	r28
    c774:	1f 91       	pop	r17
    c776:	0f 91       	pop	r16
    c778:	08 95       	ret

0000c77a <udi_cdc_multi_get_nb_received_data>:
    c77a:	cf 93       	push	r28
    c77c:	df 93       	push	r29
    c77e:	00 d0       	rcall	.+0      	; 0xc780 <udi_cdc_multi_get_nb_received_data+0x6>
    c780:	00 d0       	rcall	.+0      	; 0xc782 <udi_cdc_multi_get_nb_received_data+0x8>
    c782:	cd b7       	in	r28, 0x3d	; 61
    c784:	de b7       	in	r29, 0x3e	; 62
    c786:	8e 83       	std	Y+6, r24	; 0x06
    c788:	1e 82       	std	Y+6, r1	; 0x06
    c78a:	08 db       	rcall	.-2544   	; 0xbd9c <cpu_irq_save>
    c78c:	89 83       	std	Y+1, r24	; 0x01
    c78e:	8e 81       	ldd	r24, Y+6	; 0x06
    c790:	88 2f       	mov	r24, r24
    c792:	90 e0       	ldi	r25, 0x00	; 0
    c794:	88 0f       	add	r24, r24
    c796:	99 1f       	adc	r25, r25
    c798:	8d 5b       	subi	r24, 0xBD	; 189
    c79a:	9c 4d       	sbci	r25, 0xDC	; 220
    c79c:	fc 01       	movw	r30, r24
    c79e:	80 81       	ld	r24, Z
    c7a0:	91 81       	ldd	r25, Z+1	; 0x01
    c7a2:	8a 83       	std	Y+2, r24	; 0x02
    c7a4:	9b 83       	std	Y+3, r25	; 0x03
    c7a6:	8e 81       	ldd	r24, Y+6	; 0x06
    c7a8:	28 2f       	mov	r18, r24
    c7aa:	30 e0       	ldi	r19, 0x00	; 0
    c7ac:	8e 81       	ldd	r24, Y+6	; 0x06
    c7ae:	88 2f       	mov	r24, r24
    c7b0:	90 e0       	ldi	r25, 0x00	; 0
    c7b2:	8e 5b       	subi	r24, 0xBE	; 190
    c7b4:	9c 4d       	sbci	r25, 0xDC	; 220
    c7b6:	fc 01       	movw	r30, r24
    c7b8:	80 81       	ld	r24, Z
    c7ba:	88 2f       	mov	r24, r24
    c7bc:	90 e0       	ldi	r25, 0x00	; 0
    c7be:	22 0f       	add	r18, r18
    c7c0:	33 1f       	adc	r19, r19
    c7c2:	82 0f       	add	r24, r18
    c7c4:	93 1f       	adc	r25, r19
    c7c6:	88 0f       	add	r24, r24
    c7c8:	99 1f       	adc	r25, r25
    c7ca:	82 5c       	subi	r24, 0xC2	; 194
    c7cc:	9c 4d       	sbci	r25, 0xDC	; 220
    c7ce:	fc 01       	movw	r30, r24
    c7d0:	20 81       	ld	r18, Z
    c7d2:	31 81       	ldd	r19, Z+1	; 0x01
    c7d4:	8a 81       	ldd	r24, Y+2	; 0x02
    c7d6:	9b 81       	ldd	r25, Y+3	; 0x03
    c7d8:	a9 01       	movw	r20, r18
    c7da:	48 1b       	sub	r20, r24
    c7dc:	59 0b       	sbc	r21, r25
    c7de:	ca 01       	movw	r24, r20
    c7e0:	8c 83       	std	Y+4, r24	; 0x04
    c7e2:	9d 83       	std	Y+5, r25	; 0x05
    c7e4:	89 81       	ldd	r24, Y+1	; 0x01
    c7e6:	ea da       	rcall	.-2604   	; 0xbdbc <cpu_irq_restore>
    c7e8:	8c 81       	ldd	r24, Y+4	; 0x04
    c7ea:	9d 81       	ldd	r25, Y+5	; 0x05
    c7ec:	26 96       	adiw	r28, 0x06	; 6
    c7ee:	cd bf       	out	0x3d, r28	; 61
    c7f0:	de bf       	out	0x3e, r29	; 62
    c7f2:	df 91       	pop	r29
    c7f4:	cf 91       	pop	r28
    c7f6:	08 95       	ret

0000c7f8 <udi_cdc_get_nb_received_data>:
    c7f8:	cf 93       	push	r28
    c7fa:	df 93       	push	r29
    c7fc:	cd b7       	in	r28, 0x3d	; 61
    c7fe:	de b7       	in	r29, 0x3e	; 62
    c800:	80 e0       	ldi	r24, 0x00	; 0
    c802:	bb df       	rcall	.-138    	; 0xc77a <udi_cdc_multi_get_nb_received_data>
    c804:	df 91       	pop	r29
    c806:	cf 91       	pop	r28
    c808:	08 95       	ret

0000c80a <udi_cdc_multi_is_rx_ready>:
    c80a:	cf 93       	push	r28
    c80c:	df 93       	push	r29
    c80e:	1f 92       	push	r1
    c810:	cd b7       	in	r28, 0x3d	; 61
    c812:	de b7       	in	r29, 0x3e	; 62
    c814:	89 83       	std	Y+1, r24	; 0x01
    c816:	89 81       	ldd	r24, Y+1	; 0x01
    c818:	b0 df       	rcall	.-160    	; 0xc77a <udi_cdc_multi_get_nb_received_data>
    c81a:	21 e0       	ldi	r18, 0x01	; 1
    c81c:	89 2b       	or	r24, r25
    c81e:	09 f4       	brne	.+2      	; 0xc822 <udi_cdc_multi_is_rx_ready+0x18>
    c820:	20 e0       	ldi	r18, 0x00	; 0
    c822:	82 2f       	mov	r24, r18
    c824:	0f 90       	pop	r0
    c826:	df 91       	pop	r29
    c828:	cf 91       	pop	r28
    c82a:	08 95       	ret

0000c82c <udi_cdc_is_rx_ready>:
    c82c:	cf 93       	push	r28
    c82e:	df 93       	push	r29
    c830:	cd b7       	in	r28, 0x3d	; 61
    c832:	de b7       	in	r29, 0x3e	; 62
    c834:	80 e0       	ldi	r24, 0x00	; 0
    c836:	e9 df       	rcall	.-46     	; 0xc80a <udi_cdc_multi_is_rx_ready>
    c838:	df 91       	pop	r29
    c83a:	cf 91       	pop	r28
    c83c:	08 95       	ret

0000c83e <udi_cdc_multi_getc>:
    c83e:	cf 93       	push	r28
    c840:	df 93       	push	r29
    c842:	cd b7       	in	r28, 0x3d	; 61
    c844:	de b7       	in	r29, 0x3e	; 62
    c846:	29 97       	sbiw	r28, 0x09	; 9
    c848:	cd bf       	out	0x3d, r28	; 61
    c84a:	de bf       	out	0x3e, r29	; 62
    c84c:	89 87       	std	Y+9, r24	; 0x09
    c84e:	19 82       	std	Y+1, r1	; 0x01
    c850:	1a 82       	std	Y+2, r1	; 0x02
    c852:	19 86       	std	Y+9, r1	; 0x09
    c854:	89 85       	ldd	r24, Y+9	; 0x09
    c856:	28 2f       	mov	r18, r24
    c858:	30 e0       	ldi	r19, 0x00	; 0
    c85a:	c9 01       	movw	r24, r18
    c85c:	88 0f       	add	r24, r24
    c85e:	99 1f       	adc	r25, r25
    c860:	88 0f       	add	r24, r24
    c862:	99 1f       	adc	r25, r25
    c864:	88 0f       	add	r24, r24
    c866:	99 1f       	adc	r25, r25
    c868:	82 1b       	sub	r24, r18
    c86a:	93 0b       	sbc	r25, r19
    c86c:	84 55       	subi	r24, 0x54	; 84
    c86e:	9d 4d       	sbci	r25, 0xDD	; 221
    c870:	fc 01       	movw	r30, r24
    c872:	90 81       	ld	r25, Z
    c874:	81 e0       	ldi	r24, 0x01	; 1
    c876:	99 30       	cpi	r25, 0x09	; 9
    c878:	09 f0       	breq	.+2      	; 0xc87c <udi_cdc_multi_getc+0x3e>
    c87a:	80 e0       	ldi	r24, 0x00	; 0
    c87c:	8b 83       	std	Y+3, r24	; 0x03
    c87e:	8e da       	rcall	.-2788   	; 0xbd9c <cpu_irq_save>
    c880:	8c 83       	std	Y+4, r24	; 0x04
    c882:	89 85       	ldd	r24, Y+9	; 0x09
    c884:	88 2f       	mov	r24, r24
    c886:	90 e0       	ldi	r25, 0x00	; 0
    c888:	88 0f       	add	r24, r24
    c88a:	99 1f       	adc	r25, r25
    c88c:	8d 5b       	subi	r24, 0xBD	; 189
    c88e:	9c 4d       	sbci	r25, 0xDC	; 220
    c890:	fc 01       	movw	r30, r24
    c892:	80 81       	ld	r24, Z
    c894:	91 81       	ldd	r25, Z+1	; 0x01
    c896:	8d 83       	std	Y+5, r24	; 0x05
    c898:	9e 83       	std	Y+6, r25	; 0x06
    c89a:	89 85       	ldd	r24, Y+9	; 0x09
    c89c:	88 2f       	mov	r24, r24
    c89e:	90 e0       	ldi	r25, 0x00	; 0
    c8a0:	8e 5b       	subi	r24, 0xBE	; 190
    c8a2:	9c 4d       	sbci	r25, 0xDC	; 220
    c8a4:	fc 01       	movw	r30, r24
    c8a6:	80 81       	ld	r24, Z
    c8a8:	8f 83       	std	Y+7, r24	; 0x07
    c8aa:	89 85       	ldd	r24, Y+9	; 0x09
    c8ac:	28 2f       	mov	r18, r24
    c8ae:	30 e0       	ldi	r19, 0x00	; 0
    c8b0:	8f 81       	ldd	r24, Y+7	; 0x07
    c8b2:	88 2f       	mov	r24, r24
    c8b4:	90 e0       	ldi	r25, 0x00	; 0
    c8b6:	22 0f       	add	r18, r18
    c8b8:	33 1f       	adc	r19, r19
    c8ba:	82 0f       	add	r24, r18
    c8bc:	93 1f       	adc	r25, r19
    c8be:	88 0f       	add	r24, r24
    c8c0:	99 1f       	adc	r25, r25
    c8c2:	82 5c       	subi	r24, 0xC2	; 194
    c8c4:	9c 4d       	sbci	r25, 0xDC	; 220
    c8c6:	fc 01       	movw	r30, r24
    c8c8:	20 81       	ld	r18, Z
    c8ca:	31 81       	ldd	r19, Z+1	; 0x01
    c8cc:	41 e0       	ldi	r20, 0x01	; 1
    c8ce:	8d 81       	ldd	r24, Y+5	; 0x05
    c8d0:	9e 81       	ldd	r25, Y+6	; 0x06
    c8d2:	82 17       	cp	r24, r18
    c8d4:	93 07       	cpc	r25, r19
    c8d6:	08 f4       	brcc	.+2      	; 0xc8da <udi_cdc_multi_getc+0x9c>
    c8d8:	40 e0       	ldi	r20, 0x00	; 0
    c8da:	48 87       	std	Y+8, r20	; 0x08
    c8dc:	8c 81       	ldd	r24, Y+4	; 0x04
    c8de:	6e da       	rcall	.-2852   	; 0xbdbc <cpu_irq_restore>
    c8e0:	88 85       	ldd	r24, Y+8	; 0x08
    c8e2:	88 23       	and	r24, r24
    c8e4:	49 f0       	breq	.+18     	; 0xc8f8 <udi_cdc_multi_getc+0xba>
    c8e6:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <udi_cdc_data_running>
    c8ea:	81 e0       	ldi	r24, 0x01	; 1
    c8ec:	89 27       	eor	r24, r25
    c8ee:	88 23       	and	r24, r24
    c8f0:	31 f2       	breq	.-116    	; 0xc87e <udi_cdc_multi_getc+0x40>
    c8f2:	80 e0       	ldi	r24, 0x00	; 0
    c8f4:	90 e0       	ldi	r25, 0x00	; 0
    c8f6:	41 c0       	rjmp	.+130    	; 0xc97a <udi_cdc_multi_getc+0x13c>
    c8f8:	89 85       	ldd	r24, Y+9	; 0x09
    c8fa:	28 2f       	mov	r18, r24
    c8fc:	30 e0       	ldi	r19, 0x00	; 0
    c8fe:	8f 81       	ldd	r24, Y+7	; 0x07
    c900:	88 2f       	mov	r24, r24
    c902:	90 e0       	ldi	r25, 0x00	; 0
    c904:	22 0f       	add	r18, r18
    c906:	33 1f       	adc	r19, r19
    c908:	82 0f       	add	r24, r18
    c90a:	93 1f       	adc	r25, r19
    c90c:	9c 01       	movw	r18, r24
    c90e:	00 24       	eor	r0, r0
    c910:	36 95       	lsr	r19
    c912:	27 95       	ror	r18
    c914:	07 94       	ror	r0
    c916:	36 95       	lsr	r19
    c918:	27 95       	ror	r18
    c91a:	07 94       	ror	r0
    c91c:	32 2f       	mov	r19, r18
    c91e:	20 2d       	mov	r18, r0
    c920:	8d 81       	ldd	r24, Y+5	; 0x05
    c922:	9e 81       	ldd	r25, Y+6	; 0x06
    c924:	82 0f       	add	r24, r18
    c926:	93 1f       	adc	r25, r19
    c928:	82 54       	subi	r24, 0x42	; 66
    c92a:	9d 4d       	sbci	r25, 0xDD	; 221
    c92c:	fc 01       	movw	r30, r24
    c92e:	80 81       	ld	r24, Z
    c930:	88 2f       	mov	r24, r24
    c932:	90 e0       	ldi	r25, 0x00	; 0
    c934:	29 81       	ldd	r18, Y+1	; 0x01
    c936:	3a 81       	ldd	r19, Y+2	; 0x02
    c938:	82 2b       	or	r24, r18
    c93a:	93 2b       	or	r25, r19
    c93c:	89 83       	std	Y+1, r24	; 0x01
    c93e:	9a 83       	std	Y+2, r25	; 0x02
    c940:	89 85       	ldd	r24, Y+9	; 0x09
    c942:	88 2f       	mov	r24, r24
    c944:	90 e0       	ldi	r25, 0x00	; 0
    c946:	2d 81       	ldd	r18, Y+5	; 0x05
    c948:	3e 81       	ldd	r19, Y+6	; 0x06
    c94a:	2f 5f       	subi	r18, 0xFF	; 255
    c94c:	3f 4f       	sbci	r19, 0xFF	; 255
    c94e:	88 0f       	add	r24, r24
    c950:	99 1f       	adc	r25, r25
    c952:	8d 5b       	subi	r24, 0xBD	; 189
    c954:	9c 4d       	sbci	r25, 0xDC	; 220
    c956:	fc 01       	movw	r30, r24
    c958:	20 83       	st	Z, r18
    c95a:	31 83       	std	Z+1, r19	; 0x01
    c95c:	89 85       	ldd	r24, Y+9	; 0x09
    c95e:	8c dc       	rcall	.-1768   	; 0xc278 <udi_cdc_rx_start>
    c960:	8b 81       	ldd	r24, Y+3	; 0x03
    c962:	88 23       	and	r24, r24
    c964:	41 f0       	breq	.+16     	; 0xc976 <udi_cdc_multi_getc+0x138>
    c966:	1b 82       	std	Y+3, r1	; 0x03
    c968:	89 81       	ldd	r24, Y+1	; 0x01
    c96a:	9a 81       	ldd	r25, Y+2	; 0x02
    c96c:	98 2f       	mov	r25, r24
    c96e:	88 27       	eor	r24, r24
    c970:	89 83       	std	Y+1, r24	; 0x01
    c972:	9a 83       	std	Y+2, r25	; 0x02
    c974:	84 cf       	rjmp	.-248    	; 0xc87e <udi_cdc_multi_getc+0x40>
    c976:	89 81       	ldd	r24, Y+1	; 0x01
    c978:	9a 81       	ldd	r25, Y+2	; 0x02
    c97a:	29 96       	adiw	r28, 0x09	; 9
    c97c:	cd bf       	out	0x3d, r28	; 61
    c97e:	de bf       	out	0x3e, r29	; 62
    c980:	df 91       	pop	r29
    c982:	cf 91       	pop	r28
    c984:	08 95       	ret

0000c986 <udi_cdc_getc>:
    c986:	cf 93       	push	r28
    c988:	df 93       	push	r29
    c98a:	cd b7       	in	r28, 0x3d	; 61
    c98c:	de b7       	in	r29, 0x3e	; 62
    c98e:	80 e0       	ldi	r24, 0x00	; 0
    c990:	56 df       	rcall	.-340    	; 0xc83e <udi_cdc_multi_getc>
    c992:	df 91       	pop	r29
    c994:	cf 91       	pop	r28
    c996:	08 95       	ret

0000c998 <udi_cdc_multi_get_free_tx_buffer>:
    c998:	cf 93       	push	r28
    c99a:	df 93       	push	r29
    c99c:	cd b7       	in	r28, 0x3d	; 61
    c99e:	de b7       	in	r29, 0x3e	; 62
    c9a0:	27 97       	sbiw	r28, 0x07	; 7
    c9a2:	cd bf       	out	0x3d, r28	; 61
    c9a4:	de bf       	out	0x3e, r29	; 62
    c9a6:	8f 83       	std	Y+7, r24	; 0x07
    c9a8:	1f 82       	std	Y+7, r1	; 0x07
    c9aa:	f8 d9       	rcall	.-3088   	; 0xbd9c <cpu_irq_save>
    c9ac:	8b 83       	std	Y+3, r24	; 0x03
    c9ae:	8f 81       	ldd	r24, Y+7	; 0x07
    c9b0:	88 2f       	mov	r24, r24
    c9b2:	90 e0       	ldi	r25, 0x00	; 0
    c9b4:	86 53       	subi	r24, 0x36	; 54
    c9b6:	9c 4d       	sbci	r25, 0xDC	; 220
    c9b8:	fc 01       	movw	r30, r24
    c9ba:	80 81       	ld	r24, Z
    c9bc:	8c 83       	std	Y+4, r24	; 0x04
    c9be:	8f 81       	ldd	r24, Y+7	; 0x07
    c9c0:	28 2f       	mov	r18, r24
    c9c2:	30 e0       	ldi	r19, 0x00	; 0
    c9c4:	8c 81       	ldd	r24, Y+4	; 0x04
    c9c6:	88 2f       	mov	r24, r24
    c9c8:	90 e0       	ldi	r25, 0x00	; 0
    c9ca:	22 0f       	add	r18, r18
    c9cc:	33 1f       	adc	r19, r19
    c9ce:	82 0f       	add	r24, r18
    c9d0:	93 1f       	adc	r25, r19
    c9d2:	88 0f       	add	r24, r24
    c9d4:	99 1f       	adc	r25, r25
    c9d6:	8a 53       	subi	r24, 0x3A	; 58
    c9d8:	9c 4d       	sbci	r25, 0xDC	; 220
    c9da:	fc 01       	movw	r30, r24
    c9dc:	80 81       	ld	r24, Z
    c9de:	91 81       	ldd	r25, Z+1	; 0x01
    c9e0:	89 83       	std	Y+1, r24	; 0x01
    c9e2:	9a 83       	std	Y+2, r25	; 0x02
    c9e4:	89 81       	ldd	r24, Y+1	; 0x01
    c9e6:	9a 81       	ldd	r25, Y+2	; 0x02
    c9e8:	80 34       	cpi	r24, 0x40	; 64
    c9ea:	91 05       	cpc	r25, r1
    c9ec:	61 f5       	brne	.+88     	; 0xca46 <udi_cdc_multi_get_free_tx_buffer+0xae>
    c9ee:	8f 81       	ldd	r24, Y+7	; 0x07
    c9f0:	88 2f       	mov	r24, r24
    c9f2:	90 e0       	ldi	r25, 0x00	; 0
    c9f4:	83 53       	subi	r24, 0x33	; 51
    c9f6:	9c 4d       	sbci	r25, 0xDC	; 220
    c9f8:	fc 01       	movw	r30, r24
    c9fa:	90 81       	ld	r25, Z
    c9fc:	81 e0       	ldi	r24, 0x01	; 1
    c9fe:	89 27       	eor	r24, r25
    ca00:	88 23       	and	r24, r24
    ca02:	09 f1       	breq	.+66     	; 0xca46 <udi_cdc_multi_get_free_tx_buffer+0xae>
    ca04:	8f 81       	ldd	r24, Y+7	; 0x07
    ca06:	88 2f       	mov	r24, r24
    ca08:	90 e0       	ldi	r25, 0x00	; 0
    ca0a:	82 53       	subi	r24, 0x32	; 50
    ca0c:	9c 4d       	sbci	r25, 0xDC	; 220
    ca0e:	fc 01       	movw	r30, r24
    ca10:	90 81       	ld	r25, Z
    ca12:	81 e0       	ldi	r24, 0x01	; 1
    ca14:	89 27       	eor	r24, r25
    ca16:	88 23       	and	r24, r24
    ca18:	b1 f0       	breq	.+44     	; 0xca46 <udi_cdc_multi_get_free_tx_buffer+0xae>
    ca1a:	8f 81       	ldd	r24, Y+7	; 0x07
    ca1c:	88 2f       	mov	r24, r24
    ca1e:	90 e0       	ldi	r25, 0x00	; 0
    ca20:	82 53       	subi	r24, 0x32	; 50
    ca22:	9c 4d       	sbci	r25, 0xDC	; 220
    ca24:	21 e0       	ldi	r18, 0x01	; 1
    ca26:	fc 01       	movw	r30, r24
    ca28:	20 83       	st	Z, r18
    ca2a:	8f 81       	ldd	r24, Y+7	; 0x07
    ca2c:	88 2f       	mov	r24, r24
    ca2e:	90 e0       	ldi	r25, 0x00	; 0
    ca30:	21 e0       	ldi	r18, 0x01	; 1
    ca32:	3c 81       	ldd	r19, Y+4	; 0x04
    ca34:	33 23       	and	r19, r19
    ca36:	09 f0       	breq	.+2      	; 0xca3a <udi_cdc_multi_get_free_tx_buffer+0xa2>
    ca38:	20 e0       	ldi	r18, 0x00	; 0
    ca3a:	86 53       	subi	r24, 0x36	; 54
    ca3c:	9c 4d       	sbci	r25, 0xDC	; 220
    ca3e:	fc 01       	movw	r30, r24
    ca40:	20 83       	st	Z, r18
    ca42:	19 82       	std	Y+1, r1	; 0x01
    ca44:	1a 82       	std	Y+2, r1	; 0x02
    ca46:	20 e4       	ldi	r18, 0x40	; 64
    ca48:	30 e0       	ldi	r19, 0x00	; 0
    ca4a:	89 81       	ldd	r24, Y+1	; 0x01
    ca4c:	9a 81       	ldd	r25, Y+2	; 0x02
    ca4e:	a9 01       	movw	r20, r18
    ca50:	48 1b       	sub	r20, r24
    ca52:	59 0b       	sbc	r21, r25
    ca54:	ca 01       	movw	r24, r20
    ca56:	8d 83       	std	Y+5, r24	; 0x05
    ca58:	9e 83       	std	Y+6, r25	; 0x06
    ca5a:	8b 81       	ldd	r24, Y+3	; 0x03
    ca5c:	af d9       	rcall	.-3234   	; 0xbdbc <cpu_irq_restore>
    ca5e:	8d 81       	ldd	r24, Y+5	; 0x05
    ca60:	9e 81       	ldd	r25, Y+6	; 0x06
    ca62:	27 96       	adiw	r28, 0x07	; 7
    ca64:	cd bf       	out	0x3d, r28	; 61
    ca66:	de bf       	out	0x3e, r29	; 62
    ca68:	df 91       	pop	r29
    ca6a:	cf 91       	pop	r28
    ca6c:	08 95       	ret

0000ca6e <udi_cdc_multi_is_tx_ready>:
    ca6e:	cf 93       	push	r28
    ca70:	df 93       	push	r29
    ca72:	1f 92       	push	r1
    ca74:	cd b7       	in	r28, 0x3d	; 61
    ca76:	de b7       	in	r29, 0x3e	; 62
    ca78:	89 83       	std	Y+1, r24	; 0x01
    ca7a:	89 81       	ldd	r24, Y+1	; 0x01
    ca7c:	8d df       	rcall	.-230    	; 0xc998 <udi_cdc_multi_get_free_tx_buffer>
    ca7e:	21 e0       	ldi	r18, 0x01	; 1
    ca80:	89 2b       	or	r24, r25
    ca82:	09 f4       	brne	.+2      	; 0xca86 <udi_cdc_multi_is_tx_ready+0x18>
    ca84:	20 e0       	ldi	r18, 0x00	; 0
    ca86:	82 2f       	mov	r24, r18
    ca88:	0f 90       	pop	r0
    ca8a:	df 91       	pop	r29
    ca8c:	cf 91       	pop	r28
    ca8e:	08 95       	ret

0000ca90 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    ca90:	cf 93       	push	r28
    ca92:	df 93       	push	r29
    ca94:	cd b7       	in	r28, 0x3d	; 61
    ca96:	de b7       	in	r29, 0x3e	; 62
    ca98:	28 97       	sbiw	r28, 0x08	; 8
    ca9a:	cd bf       	out	0x3d, r28	; 61
    ca9c:	de bf       	out	0x3e, r29	; 62
    ca9e:	8c 83       	std	Y+4, r24	; 0x04
    caa0:	6d 83       	std	Y+5, r22	; 0x05
    caa2:	7e 83       	std	Y+6, r23	; 0x06
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    caa4:	1c 82       	std	Y+4, r1	; 0x04
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    caa6:	8c 81       	ldd	r24, Y+4	; 0x04
    caa8:	28 2f       	mov	r18, r24
    caaa:	30 e0       	ldi	r19, 0x00	; 0
    caac:	c9 01       	movw	r24, r18
    caae:	88 0f       	add	r24, r24
    cab0:	99 1f       	adc	r25, r25
    cab2:	88 0f       	add	r24, r24
    cab4:	99 1f       	adc	r25, r25
    cab6:	88 0f       	add	r24, r24
    cab8:	99 1f       	adc	r25, r25
    caba:	82 1b       	sub	r24, r18
    cabc:	93 0b       	sbc	r25, r19
    cabe:	84 55       	subi	r24, 0x54	; 84
    cac0:	9d 4d       	sbci	r25, 0xDD	; 221
    cac2:	dc 01       	movw	r26, r24
    cac4:	9c 91       	ld	r25, X
    cac6:	81 e0       	ldi	r24, 0x01	; 1
    cac8:	99 30       	cpi	r25, 0x09	; 9
    caca:	09 f0       	breq	.+2      	; 0xcace <udi_cdc_multi_putc+0x3e>
    cacc:	80 e0       	ldi	r24, 0x00	; 0
    cace:	89 83       	std	Y+1, r24	; 0x01

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    cad0:	8c 81       	ldd	r24, Y+4	; 0x04
    cad2:	cd df       	rcall	.-102    	; 0xca6e <udi_cdc_multi_is_tx_ready>
    cad4:	98 2f       	mov	r25, r24
    cad6:	81 e0       	ldi	r24, 0x01	; 1
    cad8:	89 27       	eor	r24, r25
    cada:	88 23       	and	r24, r24
    cadc:	49 f0       	breq	.+18     	; 0xcaf0 <udi_cdc_multi_putc+0x60>
		if (!udi_cdc_data_running) {
    cade:	90 91 bc 22 	lds	r25, 0x22BC	; 0x8022bc <udi_cdc_data_running>
    cae2:	81 e0       	ldi	r24, 0x01	; 1
    cae4:	89 27       	eor	r24, r25
    cae6:	88 23       	and	r24, r24
    cae8:	99 f3       	breq	.-26     	; 0xcad0 <udi_cdc_multi_putc+0x40>
			return false;
    caea:	80 e0       	ldi	r24, 0x00	; 0
    caec:	90 e0       	ldi	r25, 0x00	; 0
		}
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
    caee:	57 c0       	rjmp	.+174    	; 0xcb9e <udi_cdc_multi_putc+0x10e>
    caf0:	55 d9       	rcall	.-3414   	; 0xbd9c <cpu_irq_save>
    caf2:	8a 83       	std	Y+2, r24	; 0x02
	buf_sel = udi_cdc_tx_buf_sel[port];
    caf4:	8c 81       	ldd	r24, Y+4	; 0x04
    caf6:	88 2f       	mov	r24, r24
    caf8:	90 e0       	ldi	r25, 0x00	; 0
    cafa:	86 53       	subi	r24, 0x36	; 54
    cafc:	9c 4d       	sbci	r25, 0xDC	; 220
    cafe:	fc 01       	movw	r30, r24
    cb00:	80 81       	ld	r24, Z
    cb02:	8b 83       	std	Y+3, r24	; 0x03
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    cb04:	8c 81       	ldd	r24, Y+4	; 0x04
    cb06:	28 2f       	mov	r18, r24
    cb08:	30 e0       	ldi	r19, 0x00	; 0
    cb0a:	2f 83       	std	Y+7, r18	; 0x07
    cb0c:	38 87       	std	Y+8, r19	; 0x08
    cb0e:	8b 81       	ldd	r24, Y+3	; 0x03
    cb10:	68 2f       	mov	r22, r24
    cb12:	70 e0       	ldi	r23, 0x00	; 0
    cb14:	8c 81       	ldd	r24, Y+4	; 0x04
    cb16:	48 2f       	mov	r20, r24
    cb18:	50 e0       	ldi	r21, 0x00	; 0
    cb1a:	8b 81       	ldd	r24, Y+3	; 0x03
    cb1c:	28 2f       	mov	r18, r24
    cb1e:	30 e0       	ldi	r19, 0x00	; 0
    cb20:	ca 01       	movw	r24, r20
    cb22:	88 0f       	add	r24, r24
    cb24:	99 1f       	adc	r25, r25
    cb26:	82 0f       	add	r24, r18
    cb28:	93 1f       	adc	r25, r19
    cb2a:	88 0f       	add	r24, r24
    cb2c:	99 1f       	adc	r25, r25
    cb2e:	8a 53       	subi	r24, 0x3A	; 58
    cb30:	9c 4d       	sbci	r25, 0xDC	; 220
    cb32:	dc 01       	movw	r26, r24
    cb34:	8d 91       	ld	r24, X+
    cb36:	9c 91       	ld	r25, X
    cb38:	dc 01       	movw	r26, r24
    cb3a:	11 96       	adiw	r26, 0x01	; 1
    cb3c:	44 0f       	add	r20, r20
    cb3e:	55 1f       	adc	r21, r21
    cb40:	24 0f       	add	r18, r20
    cb42:	35 1f       	adc	r19, r21
    cb44:	22 0f       	add	r18, r18
    cb46:	33 1f       	adc	r19, r19
    cb48:	2a 53       	subi	r18, 0x3A	; 58
    cb4a:	3c 4d       	sbci	r19, 0xDC	; 220
    cb4c:	f9 01       	movw	r30, r18
    cb4e:	a0 83       	st	Z, r26
    cb50:	b1 83       	std	Z+1, r27	; 0x01
    cb52:	4d 81       	ldd	r20, Y+5	; 0x05
    cb54:	2f 81       	ldd	r18, Y+7	; 0x07
    cb56:	38 85       	ldd	r19, Y+8	; 0x08
    cb58:	22 0f       	add	r18, r18
    cb5a:	33 1f       	adc	r19, r19
    cb5c:	26 0f       	add	r18, r22
    cb5e:	37 1f       	adc	r19, r23
    cb60:	00 24       	eor	r0, r0
    cb62:	36 95       	lsr	r19
    cb64:	27 95       	ror	r18
    cb66:	07 94       	ror	r0
    cb68:	36 95       	lsr	r19
    cb6a:	27 95       	ror	r18
    cb6c:	07 94       	ror	r0
    cb6e:	32 2f       	mov	r19, r18
    cb70:	20 2d       	mov	r18, r0
    cb72:	82 0f       	add	r24, r18
    cb74:	93 1f       	adc	r25, r19
    cb76:	8a 5b       	subi	r24, 0xBA	; 186
    cb78:	9c 4d       	sbci	r25, 0xDC	; 220
    cb7a:	dc 01       	movw	r26, r24
	cpu_irq_restore(flags);
    cb7c:	4c 93       	st	X, r20
    cb7e:	8a 81       	ldd	r24, Y+2	; 0x02
    cb80:	1d d9       	rcall	.-3526   	; 0xbdbc <cpu_irq_restore>

	if (b_databit_9) {
    cb82:	89 81       	ldd	r24, Y+1	; 0x01
    cb84:	88 23       	and	r24, r24
    cb86:	49 f0       	breq	.+18     	; 0xcb9a <udi_cdc_multi_putc+0x10a>
		// Send MSB
		b_databit_9 = false;
    cb88:	19 82       	std	Y+1, r1	; 0x01
		value = value >> 8;
    cb8a:	8d 81       	ldd	r24, Y+5	; 0x05
    cb8c:	9e 81       	ldd	r25, Y+6	; 0x06
    cb8e:	89 2f       	mov	r24, r25
    cb90:	99 0f       	add	r25, r25
    cb92:	99 0b       	sbc	r25, r25
    cb94:	8d 83       	std	Y+5, r24	; 0x05
    cb96:	9e 83       	std	Y+6, r25	; 0x06
		goto udi_cdc_putc_process_one_byte;
    cb98:	9b cf       	rjmp	.-202    	; 0xcad0 <udi_cdc_multi_putc+0x40>
	}
	return true;
    cb9a:	81 e0       	ldi	r24, 0x01	; 1
    cb9c:	90 e0       	ldi	r25, 0x00	; 0
}
    cb9e:	28 96       	adiw	r28, 0x08	; 8
    cba0:	cd bf       	out	0x3d, r28	; 61
    cba2:	de bf       	out	0x3e, r29	; 62
    cba4:	df 91       	pop	r29
    cba6:	cf 91       	pop	r28
    cba8:	08 95       	ret

0000cbaa <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    cbaa:	cf 93       	push	r28
    cbac:	df 93       	push	r29
    cbae:	1f 92       	push	r1
    cbb0:	1f 92       	push	r1
    cbb2:	cd b7       	in	r28, 0x3d	; 61
    cbb4:	de b7       	in	r29, 0x3e	; 62
    cbb6:	89 83       	std	Y+1, r24	; 0x01
    cbb8:	9a 83       	std	Y+2, r25	; 0x02
	return udi_cdc_multi_putc(0, value);
    cbba:	89 81       	ldd	r24, Y+1	; 0x01
    cbbc:	9a 81       	ldd	r25, Y+2	; 0x02
    cbbe:	bc 01       	movw	r22, r24
    cbc0:	80 e0       	ldi	r24, 0x00	; 0
    cbc2:	66 df       	rcall	.-308    	; 0xca90 <udi_cdc_multi_putc>
}
    cbc4:	0f 90       	pop	r0
    cbc6:	0f 90       	pop	r0
    cbc8:	df 91       	pop	r29
    cbca:	cf 91       	pop	r28
    cbcc:	08 95       	ret

0000cbce <udc_get_string_serial_name>:
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
}
    cbce:	cf 93       	push	r28
    cbd0:	df 93       	push	r29
    cbd2:	cd b7       	in	r28, 0x3d	; 61
    cbd4:	de b7       	in	r29, 0x3e	; 62
    cbd6:	81 ec       	ldi	r24, 0xC1	; 193
    cbd8:	90 e2       	ldi	r25, 0x20	; 32
    cbda:	df 91       	pop	r29
    cbdc:	cf 91       	pop	r28
    cbde:	08 95       	ret

0000cbe0 <udc_get_eof_conf>:
    cbe0:	cf 93       	push	r28
    cbe2:	df 93       	push	r29
    cbe4:	cd b7       	in	r28, 0x3d	; 61
    cbe6:	de b7       	in	r29, 0x3e	; 62
    cbe8:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cbec:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cbf0:	fc 01       	movw	r30, r24
    cbf2:	20 81       	ld	r18, Z
    cbf4:	31 81       	ldd	r19, Z+1	; 0x01
    cbf6:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cbfa:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cbfe:	fc 01       	movw	r30, r24
    cc00:	80 81       	ld	r24, Z
    cc02:	91 81       	ldd	r25, Z+1	; 0x01
    cc04:	fc 01       	movw	r30, r24
    cc06:	82 81       	ldd	r24, Z+2	; 0x02
    cc08:	93 81       	ldd	r25, Z+3	; 0x03
    cc0a:	82 0f       	add	r24, r18
    cc0c:	93 1f       	adc	r25, r19
    cc0e:	df 91       	pop	r29
    cc10:	cf 91       	pop	r28
    cc12:	08 95       	ret

0000cc14 <udc_next_desc_in_iface>:
    cc14:	cf 93       	push	r28
    cc16:	df 93       	push	r29
    cc18:	cd b7       	in	r28, 0x3d	; 61
    cc1a:	de b7       	in	r29, 0x3e	; 62
    cc1c:	25 97       	sbiw	r28, 0x05	; 5
    cc1e:	cd bf       	out	0x3d, r28	; 61
    cc20:	de bf       	out	0x3e, r29	; 62
    cc22:	8b 83       	std	Y+3, r24	; 0x03
    cc24:	9c 83       	std	Y+4, r25	; 0x04
    cc26:	6d 83       	std	Y+5, r22	; 0x05
    cc28:	db df       	rcall	.-74     	; 0xcbe0 <udc_get_eof_conf>
    cc2a:	89 83       	std	Y+1, r24	; 0x01
    cc2c:	9a 83       	std	Y+2, r25	; 0x02
    cc2e:	8b 81       	ldd	r24, Y+3	; 0x03
    cc30:	9c 81       	ldd	r25, Y+4	; 0x04
    cc32:	fc 01       	movw	r30, r24
    cc34:	80 81       	ld	r24, Z
    cc36:	88 2f       	mov	r24, r24
    cc38:	90 e0       	ldi	r25, 0x00	; 0
    cc3a:	2b 81       	ldd	r18, Y+3	; 0x03
    cc3c:	3c 81       	ldd	r19, Y+4	; 0x04
    cc3e:	82 0f       	add	r24, r18
    cc40:	93 1f       	adc	r25, r19
    cc42:	8b 83       	std	Y+3, r24	; 0x03
    cc44:	9c 83       	std	Y+4, r25	; 0x04
    cc46:	1c c0       	rjmp	.+56     	; 0xcc80 <udc_next_desc_in_iface+0x6c>
    cc48:	8b 81       	ldd	r24, Y+3	; 0x03
    cc4a:	9c 81       	ldd	r25, Y+4	; 0x04
    cc4c:	fc 01       	movw	r30, r24
    cc4e:	81 81       	ldd	r24, Z+1	; 0x01
    cc50:	84 30       	cpi	r24, 0x04	; 4
    cc52:	f1 f0       	breq	.+60     	; 0xcc90 <udc_next_desc_in_iface+0x7c>
    cc54:	8b 81       	ldd	r24, Y+3	; 0x03
    cc56:	9c 81       	ldd	r25, Y+4	; 0x04
    cc58:	fc 01       	movw	r30, r24
    cc5a:	91 81       	ldd	r25, Z+1	; 0x01
    cc5c:	8d 81       	ldd	r24, Y+5	; 0x05
    cc5e:	98 17       	cp	r25, r24
    cc60:	19 f4       	brne	.+6      	; 0xcc68 <udc_next_desc_in_iface+0x54>
    cc62:	8b 81       	ldd	r24, Y+3	; 0x03
    cc64:	9c 81       	ldd	r25, Y+4	; 0x04
    cc66:	17 c0       	rjmp	.+46     	; 0xcc96 <udc_next_desc_in_iface+0x82>
    cc68:	8b 81       	ldd	r24, Y+3	; 0x03
    cc6a:	9c 81       	ldd	r25, Y+4	; 0x04
    cc6c:	fc 01       	movw	r30, r24
    cc6e:	80 81       	ld	r24, Z
    cc70:	88 2f       	mov	r24, r24
    cc72:	90 e0       	ldi	r25, 0x00	; 0
    cc74:	2b 81       	ldd	r18, Y+3	; 0x03
    cc76:	3c 81       	ldd	r19, Y+4	; 0x04
    cc78:	82 0f       	add	r24, r18
    cc7a:	93 1f       	adc	r25, r19
    cc7c:	8b 83       	std	Y+3, r24	; 0x03
    cc7e:	9c 83       	std	Y+4, r25	; 0x04
    cc80:	29 81       	ldd	r18, Y+1	; 0x01
    cc82:	3a 81       	ldd	r19, Y+2	; 0x02
    cc84:	8b 81       	ldd	r24, Y+3	; 0x03
    cc86:	9c 81       	ldd	r25, Y+4	; 0x04
    cc88:	82 17       	cp	r24, r18
    cc8a:	93 07       	cpc	r25, r19
    cc8c:	e8 f2       	brcs	.-70     	; 0xcc48 <udc_next_desc_in_iface+0x34>
    cc8e:	01 c0       	rjmp	.+2      	; 0xcc92 <udc_next_desc_in_iface+0x7e>
    cc90:	00 00       	nop
    cc92:	80 e0       	ldi	r24, 0x00	; 0
    cc94:	90 e0       	ldi	r25, 0x00	; 0
    cc96:	25 96       	adiw	r28, 0x05	; 5
    cc98:	cd bf       	out	0x3d, r28	; 61
    cc9a:	de bf       	out	0x3e, r29	; 62
    cc9c:	df 91       	pop	r29
    cc9e:	cf 91       	pop	r28
    cca0:	08 95       	ret

0000cca2 <udc_update_iface_desc>:
    cca2:	cf 93       	push	r28
    cca4:	df 93       	push	r29
    cca6:	00 d0       	rcall	.+0      	; 0xcca8 <udc_update_iface_desc+0x6>
    cca8:	1f 92       	push	r1
    ccaa:	cd b7       	in	r28, 0x3d	; 61
    ccac:	de b7       	in	r29, 0x3e	; 62
    ccae:	8b 83       	std	Y+3, r24	; 0x03
    ccb0:	6c 83       	std	Y+4, r22	; 0x04
    ccb2:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    ccb6:	88 23       	and	r24, r24
    ccb8:	11 f4       	brne	.+4      	; 0xccbe <udc_update_iface_desc+0x1c>
    ccba:	80 e0       	ldi	r24, 0x00	; 0
    ccbc:	55 c0       	rjmp	.+170    	; 0xcd68 <udc_update_iface_desc+0xc6>
    ccbe:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    ccc2:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    ccc6:	fc 01       	movw	r30, r24
    ccc8:	80 81       	ld	r24, Z
    ccca:	91 81       	ldd	r25, Z+1	; 0x01
    cccc:	fc 01       	movw	r30, r24
    ccce:	94 81       	ldd	r25, Z+4	; 0x04
    ccd0:	8b 81       	ldd	r24, Y+3	; 0x03
    ccd2:	89 17       	cp	r24, r25
    ccd4:	10 f0       	brcs	.+4      	; 0xccda <udc_update_iface_desc+0x38>
    ccd6:	80 e0       	ldi	r24, 0x00	; 0
    ccd8:	47 c0       	rjmp	.+142    	; 0xcd68 <udc_update_iface_desc+0xc6>
    ccda:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    ccde:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cce2:	fc 01       	movw	r30, r24
    cce4:	80 81       	ld	r24, Z
    cce6:	91 81       	ldd	r25, Z+1	; 0x01
    cce8:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <udc_ptr_iface>
    ccec:	90 93 db 23 	sts	0x23DB, r25	; 0x8023db <udc_ptr_iface+0x1>
    ccf0:	77 df       	rcall	.-274    	; 0xcbe0 <udc_get_eof_conf>
    ccf2:	89 83       	std	Y+1, r24	; 0x01
    ccf4:	9a 83       	std	Y+2, r25	; 0x02
    ccf6:	2e c0       	rjmp	.+92     	; 0xcd54 <udc_update_iface_desc+0xb2>
    ccf8:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_ptr_iface>
    ccfc:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    cd00:	fc 01       	movw	r30, r24
    cd02:	81 81       	ldd	r24, Z+1	; 0x01
    cd04:	84 30       	cpi	r24, 0x04	; 4
    cd06:	a1 f4       	brne	.+40     	; 0xcd30 <udc_update_iface_desc+0x8e>
    cd08:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_ptr_iface>
    cd0c:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    cd10:	fc 01       	movw	r30, r24
    cd12:	92 81       	ldd	r25, Z+2	; 0x02
    cd14:	8b 81       	ldd	r24, Y+3	; 0x03
    cd16:	98 17       	cp	r25, r24
    cd18:	59 f4       	brne	.+22     	; 0xcd30 <udc_update_iface_desc+0x8e>
    cd1a:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_ptr_iface>
    cd1e:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    cd22:	fc 01       	movw	r30, r24
    cd24:	93 81       	ldd	r25, Z+3	; 0x03
    cd26:	8c 81       	ldd	r24, Y+4	; 0x04
    cd28:	98 17       	cp	r25, r24
    cd2a:	11 f4       	brne	.+4      	; 0xcd30 <udc_update_iface_desc+0x8e>
    cd2c:	81 e0       	ldi	r24, 0x01	; 1
    cd2e:	1c c0       	rjmp	.+56     	; 0xcd68 <udc_update_iface_desc+0xc6>
    cd30:	20 91 da 23 	lds	r18, 0x23DA	; 0x8023da <udc_ptr_iface>
    cd34:	30 91 db 23 	lds	r19, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    cd38:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_ptr_iface>
    cd3c:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    cd40:	fc 01       	movw	r30, r24
    cd42:	80 81       	ld	r24, Z
    cd44:	88 2f       	mov	r24, r24
    cd46:	90 e0       	ldi	r25, 0x00	; 0
    cd48:	82 0f       	add	r24, r18
    cd4a:	93 1f       	adc	r25, r19
    cd4c:	80 93 da 23 	sts	0x23DA, r24	; 0x8023da <udc_ptr_iface>
    cd50:	90 93 db 23 	sts	0x23DB, r25	; 0x8023db <udc_ptr_iface+0x1>
    cd54:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_ptr_iface>
    cd58:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    cd5c:	29 81       	ldd	r18, Y+1	; 0x01
    cd5e:	3a 81       	ldd	r19, Y+2	; 0x02
    cd60:	82 17       	cp	r24, r18
    cd62:	93 07       	cpc	r25, r19
    cd64:	48 f2       	brcs	.-110    	; 0xccf8 <udc_update_iface_desc+0x56>
    cd66:	80 e0       	ldi	r24, 0x00	; 0
    cd68:	24 96       	adiw	r28, 0x04	; 4
    cd6a:	cd bf       	out	0x3d, r28	; 61
    cd6c:	de bf       	out	0x3e, r29	; 62
    cd6e:	df 91       	pop	r29
    cd70:	cf 91       	pop	r28
    cd72:	08 95       	ret

0000cd74 <udc_iface_disable>:
    cd74:	cf 93       	push	r28
    cd76:	df 93       	push	r29
    cd78:	cd b7       	in	r28, 0x3d	; 61
    cd7a:	de b7       	in	r29, 0x3e	; 62
    cd7c:	25 97       	sbiw	r28, 0x05	; 5
    cd7e:	cd bf       	out	0x3d, r28	; 61
    cd80:	de bf       	out	0x3e, r29	; 62
    cd82:	8d 83       	std	Y+5, r24	; 0x05
    cd84:	60 e0       	ldi	r22, 0x00	; 0
    cd86:	8d 81       	ldd	r24, Y+5	; 0x05
    cd88:	8c df       	rcall	.-232    	; 0xcca2 <udc_update_iface_desc>
    cd8a:	98 2f       	mov	r25, r24
    cd8c:	81 e0       	ldi	r24, 0x01	; 1
    cd8e:	89 27       	eor	r24, r25
    cd90:	88 23       	and	r24, r24
    cd92:	11 f0       	breq	.+4      	; 0xcd98 <udc_iface_disable+0x24>
    cd94:	80 e0       	ldi	r24, 0x00	; 0
    cd96:	44 c0       	rjmp	.+136    	; 0xce20 <udc_iface_disable+0xac>
    cd98:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cd9c:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cda0:	fc 01       	movw	r30, r24
    cda2:	22 81       	ldd	r18, Z+2	; 0x02
    cda4:	33 81       	ldd	r19, Z+3	; 0x03
    cda6:	8d 81       	ldd	r24, Y+5	; 0x05
    cda8:	88 2f       	mov	r24, r24
    cdaa:	90 e0       	ldi	r25, 0x00	; 0
    cdac:	88 0f       	add	r24, r24
    cdae:	99 1f       	adc	r25, r25
    cdb0:	82 0f       	add	r24, r18
    cdb2:	93 1f       	adc	r25, r19
    cdb4:	fc 01       	movw	r30, r24
    cdb6:	80 81       	ld	r24, Z
    cdb8:	91 81       	ldd	r25, Z+1	; 0x01
    cdba:	8b 83       	std	Y+3, r24	; 0x03
    cdbc:	9c 83       	std	Y+4, r25	; 0x04
    cdbe:	8b 81       	ldd	r24, Y+3	; 0x03
    cdc0:	9c 81       	ldd	r25, Y+4	; 0x04
    cdc2:	fc 01       	movw	r30, r24
    cdc4:	86 81       	ldd	r24, Z+6	; 0x06
    cdc6:	97 81       	ldd	r25, Z+7	; 0x07
    cdc8:	fc 01       	movw	r30, r24
    cdca:	19 95       	eicall
    cdcc:	68 2f       	mov	r22, r24
    cdce:	8d 81       	ldd	r24, Y+5	; 0x05
    cdd0:	68 df       	rcall	.-304    	; 0xcca2 <udc_update_iface_desc>
    cdd2:	98 2f       	mov	r25, r24
    cdd4:	81 e0       	ldi	r24, 0x01	; 1
    cdd6:	89 27       	eor	r24, r25
    cdd8:	88 23       	and	r24, r24
    cdda:	11 f0       	breq	.+4      	; 0xcde0 <udc_iface_disable+0x6c>
    cddc:	80 e0       	ldi	r24, 0x00	; 0
    cdde:	20 c0       	rjmp	.+64     	; 0xce20 <udc_iface_disable+0xac>
    cde0:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_ptr_iface>
    cde4:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    cde8:	89 83       	std	Y+1, r24	; 0x01
    cdea:	9a 83       	std	Y+2, r25	; 0x02
    cdec:	89 81       	ldd	r24, Y+1	; 0x01
    cdee:	9a 81       	ldd	r25, Y+2	; 0x02
    cdf0:	65 e0       	ldi	r22, 0x05	; 5
    cdf2:	10 df       	rcall	.-480    	; 0xcc14 <udc_next_desc_in_iface>
    cdf4:	89 83       	std	Y+1, r24	; 0x01
    cdf6:	9a 83       	std	Y+2, r25	; 0x02
    cdf8:	89 81       	ldd	r24, Y+1	; 0x01
    cdfa:	9a 81       	ldd	r25, Y+2	; 0x02
    cdfc:	89 2b       	or	r24, r25
    cdfe:	39 f0       	breq	.+14     	; 0xce0e <udc_iface_disable+0x9a>
    ce00:	89 81       	ldd	r24, Y+1	; 0x01
    ce02:	9a 81       	ldd	r25, Y+2	; 0x02
    ce04:	fc 01       	movw	r30, r24
    ce06:	82 81       	ldd	r24, Z+2	; 0x02
    ce08:	0e 94 85 72 	call	0xe50a	; 0xe50a <udd_ep_free>
    ce0c:	ef cf       	rjmp	.-34     	; 0xcdec <udc_iface_disable+0x78>
    ce0e:	00 00       	nop
    ce10:	8b 81       	ldd	r24, Y+3	; 0x03
    ce12:	9c 81       	ldd	r25, Y+4	; 0x04
    ce14:	fc 01       	movw	r30, r24
    ce16:	82 81       	ldd	r24, Z+2	; 0x02
    ce18:	93 81       	ldd	r25, Z+3	; 0x03
    ce1a:	fc 01       	movw	r30, r24
    ce1c:	19 95       	eicall
    ce1e:	81 e0       	ldi	r24, 0x01	; 1
    ce20:	25 96       	adiw	r28, 0x05	; 5
    ce22:	cd bf       	out	0x3d, r28	; 61
    ce24:	de bf       	out	0x3e, r29	; 62
    ce26:	df 91       	pop	r29
    ce28:	cf 91       	pop	r28
    ce2a:	08 95       	ret

0000ce2c <udc_iface_enable>:
    ce2c:	cf 93       	push	r28
    ce2e:	df 93       	push	r29
    ce30:	00 d0       	rcall	.+0      	; 0xce32 <udc_iface_enable+0x6>
    ce32:	1f 92       	push	r1
    ce34:	cd b7       	in	r28, 0x3d	; 61
    ce36:	de b7       	in	r29, 0x3e	; 62
    ce38:	8b 83       	std	Y+3, r24	; 0x03
    ce3a:	6c 83       	std	Y+4, r22	; 0x04
    ce3c:	6c 81       	ldd	r22, Y+4	; 0x04
    ce3e:	8b 81       	ldd	r24, Y+3	; 0x03
    ce40:	30 df       	rcall	.-416    	; 0xcca2 <udc_update_iface_desc>
    ce42:	98 2f       	mov	r25, r24
    ce44:	81 e0       	ldi	r24, 0x01	; 1
    ce46:	89 27       	eor	r24, r25
    ce48:	88 23       	and	r24, r24
    ce4a:	11 f0       	breq	.+4      	; 0xce50 <udc_iface_enable+0x24>
    ce4c:	80 e0       	ldi	r24, 0x00	; 0
    ce4e:	3e c0       	rjmp	.+124    	; 0xcecc <udc_iface_enable+0xa0>
    ce50:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <udc_ptr_iface>
    ce54:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <udc_ptr_iface+0x1>
    ce58:	89 83       	std	Y+1, r24	; 0x01
    ce5a:	9a 83       	std	Y+2, r25	; 0x02
    ce5c:	89 81       	ldd	r24, Y+1	; 0x01
    ce5e:	9a 81       	ldd	r25, Y+2	; 0x02
    ce60:	65 e0       	ldi	r22, 0x05	; 5
    ce62:	d8 de       	rcall	.-592    	; 0xcc14 <udc_next_desc_in_iface>
    ce64:	89 83       	std	Y+1, r24	; 0x01
    ce66:	9a 83       	std	Y+2, r25	; 0x02
    ce68:	89 81       	ldd	r24, Y+1	; 0x01
    ce6a:	9a 81       	ldd	r25, Y+2	; 0x02
    ce6c:	89 2b       	or	r24, r25
    ce6e:	b9 f0       	breq	.+46     	; 0xce9e <udc_iface_enable+0x72>
    ce70:	89 81       	ldd	r24, Y+1	; 0x01
    ce72:	9a 81       	ldd	r25, Y+2	; 0x02
    ce74:	fc 01       	movw	r30, r24
    ce76:	24 81       	ldd	r18, Z+4	; 0x04
    ce78:	35 81       	ldd	r19, Z+5	; 0x05
    ce7a:	89 81       	ldd	r24, Y+1	; 0x01
    ce7c:	9a 81       	ldd	r25, Y+2	; 0x02
    ce7e:	fc 01       	movw	r30, r24
    ce80:	63 81       	ldd	r22, Z+3	; 0x03
    ce82:	89 81       	ldd	r24, Y+1	; 0x01
    ce84:	9a 81       	ldd	r25, Y+2	; 0x02
    ce86:	fc 01       	movw	r30, r24
    ce88:	82 81       	ldd	r24, Z+2	; 0x02
    ce8a:	a9 01       	movw	r20, r18
    ce8c:	0e 94 3d 72 	call	0xe47a	; 0xe47a <udd_ep_alloc>
    ce90:	98 2f       	mov	r25, r24
    ce92:	81 e0       	ldi	r24, 0x01	; 1
    ce94:	89 27       	eor	r24, r25
    ce96:	88 23       	and	r24, r24
    ce98:	09 f3       	breq	.-62     	; 0xce5c <udc_iface_enable+0x30>
    ce9a:	80 e0       	ldi	r24, 0x00	; 0
    ce9c:	17 c0       	rjmp	.+46     	; 0xcecc <udc_iface_enable+0xa0>
    ce9e:	00 00       	nop
    cea0:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cea4:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cea8:	fc 01       	movw	r30, r24
    ceaa:	22 81       	ldd	r18, Z+2	; 0x02
    ceac:	33 81       	ldd	r19, Z+3	; 0x03
    ceae:	8b 81       	ldd	r24, Y+3	; 0x03
    ceb0:	88 2f       	mov	r24, r24
    ceb2:	90 e0       	ldi	r25, 0x00	; 0
    ceb4:	88 0f       	add	r24, r24
    ceb6:	99 1f       	adc	r25, r25
    ceb8:	82 0f       	add	r24, r18
    ceba:	93 1f       	adc	r25, r19
    cebc:	fc 01       	movw	r30, r24
    cebe:	80 81       	ld	r24, Z
    cec0:	91 81       	ldd	r25, Z+1	; 0x01
    cec2:	fc 01       	movw	r30, r24
    cec4:	80 81       	ld	r24, Z
    cec6:	91 81       	ldd	r25, Z+1	; 0x01
    cec8:	fc 01       	movw	r30, r24
    ceca:	19 95       	eicall
    cecc:	24 96       	adiw	r28, 0x04	; 4
    cece:	cd bf       	out	0x3d, r28	; 61
    ced0:	de bf       	out	0x3e, r29	; 62
    ced2:	df 91       	pop	r29
    ced4:	cf 91       	pop	r28
    ced6:	08 95       	ret

0000ced8 <udc_start>:
    ced8:	cf 93       	push	r28
    ceda:	df 93       	push	r29
    cedc:	cd b7       	in	r28, 0x3d	; 61
    cede:	de b7       	in	r29, 0x3e	; 62
    cee0:	0e 94 0e 71 	call	0xe21c	; 0xe21c <udd_enable>
    cee4:	00 00       	nop
    cee6:	df 91       	pop	r29
    cee8:	cf 91       	pop	r28
    ceea:	08 95       	ret

0000ceec <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    ceec:	cf 93       	push	r28
    ceee:	df 93       	push	r29
    cef0:	1f 92       	push	r1
    cef2:	cd b7       	in	r28, 0x3d	; 61
    cef4:	de b7       	in	r29, 0x3e	; 62
	uint8_t iface_num;

	if (udc_num_configuration) {
    cef6:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    cefa:	88 23       	and	r24, r24
    cefc:	99 f0       	breq	.+38     	; 0xcf24 <udc_reset+0x38>
		for (iface_num = 0;
    cefe:	19 82       	std	Y+1, r1	; 0x01
    cf00:	05 c0       	rjmp	.+10     	; 0xcf0c <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    cf02:	89 81       	ldd	r24, Y+1	; 0x01
    cf04:	37 df       	rcall	.-402    	; 0xcd74 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    cf06:	89 81       	ldd	r24, Y+1	; 0x01
    cf08:	8f 5f       	subi	r24, 0xFF	; 255
    cf0a:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    cf0c:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cf10:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cf14:	fc 01       	movw	r30, r24
    cf16:	80 81       	ld	r24, Z
    cf18:	91 81       	ldd	r25, Z+1	; 0x01
    cf1a:	fc 01       	movw	r30, r24
    cf1c:	94 81       	ldd	r25, Z+4	; 0x04
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    cf1e:	89 81       	ldd	r24, Y+1	; 0x01
    cf20:	89 17       	cp	r24, r25
    cf22:	78 f3       	brcs	.-34     	; 0xcf02 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    cf24:	10 92 d6 23 	sts	0x23D6, r1	; 0x8023d6 <udc_num_configuration>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    cf28:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udc_device_status>
    cf2c:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    cf30:	00 00       	nop
    cf32:	0f 90       	pop	r0
    cf34:	df 91       	pop	r29
    cf36:	cf 91       	pop	r28
    cf38:	08 95       	ret

0000cf3a <udc_sof_notify>:

void udc_sof_notify(void)
{
    cf3a:	cf 93       	push	r28
    cf3c:	df 93       	push	r29
    cf3e:	1f 92       	push	r1
    cf40:	cd b7       	in	r28, 0x3d	; 61
    cf42:	de b7       	in	r29, 0x3e	; 62
	uint8_t iface_num;

	if (udc_num_configuration) {
    cf44:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    cf48:	88 23       	and	r24, r24
    cf4a:	e9 f1       	breq	.+122    	; 0xcfc6 <udc_sof_notify+0x8c>
		for (iface_num = 0;
    cf4c:	19 82       	std	Y+1, r1	; 0x01
    cf4e:	2f c0       	rjmp	.+94     	; 0xcfae <udc_sof_notify+0x74>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    cf50:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cf54:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cf58:	fc 01       	movw	r30, r24
    cf5a:	22 81       	ldd	r18, Z+2	; 0x02
    cf5c:	33 81       	ldd	r19, Z+3	; 0x03
    cf5e:	89 81       	ldd	r24, Y+1	; 0x01
    cf60:	88 2f       	mov	r24, r24
    cf62:	90 e0       	ldi	r25, 0x00	; 0
    cf64:	88 0f       	add	r24, r24
    cf66:	99 1f       	adc	r25, r25
    cf68:	82 0f       	add	r24, r18
    cf6a:	93 1f       	adc	r25, r19
    cf6c:	fc 01       	movw	r30, r24
    cf6e:	80 81       	ld	r24, Z
    cf70:	91 81       	ldd	r25, Z+1	; 0x01
    cf72:	fc 01       	movw	r30, r24
    cf74:	80 85       	ldd	r24, Z+8	; 0x08
    cf76:	91 85       	ldd	r25, Z+9	; 0x09
    cf78:	89 2b       	or	r24, r25
    cf7a:	b1 f0       	breq	.+44     	; 0xcfa8 <udc_sof_notify+0x6e>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    cf7c:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cf80:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cf84:	fc 01       	movw	r30, r24
    cf86:	22 81       	ldd	r18, Z+2	; 0x02
    cf88:	33 81       	ldd	r19, Z+3	; 0x03
    cf8a:	89 81       	ldd	r24, Y+1	; 0x01
    cf8c:	88 2f       	mov	r24, r24
    cf8e:	90 e0       	ldi	r25, 0x00	; 0
    cf90:	88 0f       	add	r24, r24
    cf92:	99 1f       	adc	r25, r25
    cf94:	82 0f       	add	r24, r18
    cf96:	93 1f       	adc	r25, r19
    cf98:	fc 01       	movw	r30, r24
    cf9a:	80 81       	ld	r24, Z
    cf9c:	91 81       	ldd	r25, Z+1	; 0x01
    cf9e:	fc 01       	movw	r30, r24
    cfa0:	80 85       	ldd	r24, Z+8	; 0x08
    cfa2:	91 85       	ldd	r25, Z+9	; 0x09
    cfa4:	fc 01       	movw	r30, r24
    cfa6:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    cfa8:	89 81       	ldd	r24, Y+1	; 0x01
    cfaa:	8f 5f       	subi	r24, 0xFF	; 255
    cfac:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    cfae:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    cfb2:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    cfb6:	fc 01       	movw	r30, r24
    cfb8:	80 81       	ld	r24, Z
    cfba:	91 81       	ldd	r25, Z+1	; 0x01
    cfbc:	fc 01       	movw	r30, r24
    cfbe:	94 81       	ldd	r25, Z+4	; 0x04
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    cfc0:	89 81       	ldd	r24, Y+1	; 0x01
    cfc2:	89 17       	cp	r24, r25
    cfc4:	28 f2       	brcs	.-118    	; 0xcf50 <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    cfc6:	00 00       	nop
    cfc8:	0f 90       	pop	r0
    cfca:	df 91       	pop	r29
    cfcc:	cf 91       	pop	r28
    cfce:	08 95       	ret

0000cfd0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    cfd0:	cf 93       	push	r28
    cfd2:	df 93       	push	r29
    cfd4:	cd b7       	in	r28, 0x3d	; 61
    cfd6:	de b7       	in	r29, 0x3e	; 62
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    cfd8:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    cfdc:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    cfe0:	02 97       	sbiw	r24, 0x02	; 2
    cfe2:	11 f0       	breq	.+4      	; 0xcfe8 <udc_req_std_dev_get_status+0x18>
		return false;
    cfe4:	80 e0       	ldi	r24, 0x00	; 0
    cfe6:	07 c0       	rjmp	.+14     	; 0xcff6 <udc_req_std_dev_get_status+0x26>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    cfe8:	62 e0       	ldi	r22, 0x02	; 2
    cfea:	70 e0       	ldi	r23, 0x00	; 0
    cfec:	82 ed       	ldi	r24, 0xD2	; 210
    cfee:	93 e2       	ldi	r25, 0x23	; 35
    cff0:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    cff4:	81 e0       	ldi	r24, 0x01	; 1
}
    cff6:	df 91       	pop	r29
    cff8:	cf 91       	pop	r28
    cffa:	08 95       	ret

0000cffc <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    cffc:	cf 93       	push	r28
    cffe:	df 93       	push	r29
    d000:	cd b7       	in	r28, 0x3d	; 61
    d002:	de b7       	in	r29, 0x3e	; 62
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    d004:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d008:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d00c:	02 97       	sbiw	r24, 0x02	; 2
    d00e:	11 f0       	breq	.+4      	; 0xd014 <udc_req_std_ep_get_status+0x18>
		return false;
    d010:	80 e0       	ldi	r24, 0x00	; 0
    d012:	13 c0       	rjmp	.+38     	; 0xd03a <udc_req_std_ep_get_status+0x3e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    d014:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d018:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d01c:	0e 94 9c 72 	call	0xe538	; 0xe538 <udd_ep_is_halted>
    d020:	88 2f       	mov	r24, r24
    d022:	90 e0       	ldi	r25, 0x00	; 0
    d024:	80 93 dc 23 	sts	0x23DC, r24	; 0x8023dc <udc_ep_status.4931>
    d028:	90 93 dd 23 	sts	0x23DD, r25	; 0x8023dd <udc_ep_status.4931+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    d02c:	62 e0       	ldi	r22, 0x02	; 2
    d02e:	70 e0       	ldi	r23, 0x00	; 0
    d030:	8c ed       	ldi	r24, 0xDC	; 220
    d032:	93 e2       	ldi	r25, 0x23	; 35
    d034:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    d038:	81 e0       	ldi	r24, 0x01	; 1
}
    d03a:	df 91       	pop	r29
    d03c:	cf 91       	pop	r28
    d03e:	08 95       	ret

0000d040 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    d040:	cf 93       	push	r28
    d042:	df 93       	push	r29
    d044:	cd b7       	in	r28, 0x3d	; 61
    d046:	de b7       	in	r29, 0x3e	; 62
	if (udd_g_ctrlreq.req.wLength) {
    d048:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d04c:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d050:	89 2b       	or	r24, r25
    d052:	11 f0       	breq	.+4      	; 0xd058 <udc_req_std_dev_clear_feature+0x18>
		return false;
    d054:	80 e0       	ldi	r24, 0x00	; 0
    d056:	12 c0       	rjmp	.+36     	; 0xd07c <udc_req_std_dev_clear_feature+0x3c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    d058:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d05c:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d060:	01 97       	sbiw	r24, 0x01	; 1
    d062:	59 f4       	brne	.+22     	; 0xd07a <udc_req_std_dev_clear_feature+0x3a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    d064:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udc_device_status>
    d068:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <udc_device_status+0x1>
    d06c:	8d 7f       	andi	r24, 0xFD	; 253
    d06e:	80 93 d2 23 	sts	0x23D2, r24	; 0x8023d2 <udc_device_status>
    d072:	90 93 d3 23 	sts	0x23D3, r25	; 0x8023d3 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    d076:	81 e0       	ldi	r24, 0x01	; 1
    d078:	01 c0       	rjmp	.+2      	; 0xd07c <udc_req_std_dev_clear_feature+0x3c>
	}
	return false;
    d07a:	80 e0       	ldi	r24, 0x00	; 0
}
    d07c:	df 91       	pop	r29
    d07e:	cf 91       	pop	r28
    d080:	08 95       	ret

0000d082 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    d082:	cf 93       	push	r28
    d084:	df 93       	push	r29
    d086:	cd b7       	in	r28, 0x3d	; 61
    d088:	de b7       	in	r29, 0x3e	; 62
	if (udd_g_ctrlreq.req.wLength) {
    d08a:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d08e:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d092:	89 2b       	or	r24, r25
    d094:	11 f0       	breq	.+4      	; 0xd09a <udc_req_std_ep_clear_feature+0x18>
		return false;
    d096:	80 e0       	ldi	r24, 0x00	; 0
    d098:	0e c0       	rjmp	.+28     	; 0xd0b6 <udc_req_std_ep_clear_feature+0x34>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    d09a:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d09e:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d0a2:	89 2b       	or	r24, r25
    d0a4:	39 f4       	brne	.+14     	; 0xd0b4 <udc_req_std_ep_clear_feature+0x32>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    d0a6:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d0aa:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d0ae:	0e 94 dd 72 	call	0xe5ba	; 0xe5ba <udd_ep_clear_halt>
    d0b2:	01 c0       	rjmp	.+2      	; 0xd0b6 <udc_req_std_ep_clear_feature+0x34>
	}
	return false;
    d0b4:	80 e0       	ldi	r24, 0x00	; 0
}
    d0b6:	df 91       	pop	r29
    d0b8:	cf 91       	pop	r28
    d0ba:	08 95       	ret

0000d0bc <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    d0bc:	cf 93       	push	r28
    d0be:	df 93       	push	r29
    d0c0:	cd b7       	in	r28, 0x3d	; 61
    d0c2:	de b7       	in	r29, 0x3e	; 62
	if (udd_g_ctrlreq.req.wLength) {
    d0c4:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d0c8:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d0cc:	89 2b       	or	r24, r25
    d0ce:	11 f0       	breq	.+4      	; 0xd0d4 <udc_req_std_dev_set_feature+0x18>
		return false;
    d0d0:	80 e0       	ldi	r24, 0x00	; 0
    d0d2:	0a c0       	rjmp	.+20     	; 0xd0e8 <udc_req_std_dev_set_feature+0x2c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    d0d4:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d0d8:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d0dc:	01 97       	sbiw	r24, 0x01	; 1
    d0de:	19 f0       	breq	.+6      	; 0xd0e6 <udc_req_std_dev_set_feature+0x2a>
			break;
		}
		break;
#endif
	default:
		break;
    d0e0:	00 00       	nop
	}
	return false;
    d0e2:	80 e0       	ldi	r24, 0x00	; 0
    d0e4:	01 c0       	rjmp	.+2      	; 0xd0e8 <udc_req_std_dev_set_feature+0x2c>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
    d0e6:	80 e0       	ldi	r24, 0x00	; 0
#endif
	default:
		break;
	}
	return false;
}
    d0e8:	df 91       	pop	r29
    d0ea:	cf 91       	pop	r28
    d0ec:	08 95       	ret

0000d0ee <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    d0ee:	cf 93       	push	r28
    d0f0:	df 93       	push	r29
    d0f2:	cd b7       	in	r28, 0x3d	; 61
    d0f4:	de b7       	in	r29, 0x3e	; 62
	if (udd_g_ctrlreq.req.wLength) {
    d0f6:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d0fa:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d0fe:	89 2b       	or	r24, r25
    d100:	11 f0       	breq	.+4      	; 0xd106 <udc_req_std_ep_set_feature+0x18>
		return false;
    d102:	80 e0       	ldi	r24, 0x00	; 0
    d104:	14 c0       	rjmp	.+40     	; 0xd12e <udc_req_std_ep_set_feature+0x40>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    d106:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d10a:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d10e:	89 2b       	or	r24, r25
    d110:	69 f4       	brne	.+26     	; 0xd12c <udc_req_std_ep_set_feature+0x3e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    d112:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d116:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d11a:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    d11e:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d122:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d126:	0e 94 b9 72 	call	0xe572	; 0xe572 <udd_ep_set_halt>
    d12a:	01 c0       	rjmp	.+2      	; 0xd12e <udc_req_std_ep_set_feature+0x40>
	}
	return false;
    d12c:	80 e0       	ldi	r24, 0x00	; 0
}
    d12e:	df 91       	pop	r29
    d130:	cf 91       	pop	r28
    d132:	08 95       	ret

0000d134 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    d134:	cf 93       	push	r28
    d136:	df 93       	push	r29
    d138:	cd b7       	in	r28, 0x3d	; 61
    d13a:	de b7       	in	r29, 0x3e	; 62
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    d13c:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d140:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d144:	8f 77       	andi	r24, 0x7F	; 127
    d146:	0e 94 f1 71 	call	0xe3e2	; 0xe3e2 <udd_set_address>
}
    d14a:	00 00       	nop
    d14c:	df 91       	pop	r29
    d14e:	cf 91       	pop	r28
    d150:	08 95       	ret

0000d152 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    d152:	cf 93       	push	r28
    d154:	df 93       	push	r29
    d156:	cd b7       	in	r28, 0x3d	; 61
    d158:	de b7       	in	r29, 0x3e	; 62
	if (udd_g_ctrlreq.req.wLength) {
    d15a:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d15e:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d162:	89 2b       	or	r24, r25
    d164:	11 f0       	breq	.+4      	; 0xd16a <udc_req_std_dev_set_address+0x18>
		return false;
    d166:	80 e0       	ldi	r24, 0x00	; 0
    d168:	07 c0       	rjmp	.+14     	; 0xd178 <udc_req_std_dev_set_address+0x26>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    d16a:	8a e9       	ldi	r24, 0x9A	; 154
    d16c:	98 e6       	ldi	r25, 0x68	; 104
    d16e:	80 93 96 29 	sts	0x2996, r24	; 0x802996 <udd_g_ctrlreq+0xc>
    d172:	90 93 97 29 	sts	0x2997, r25	; 0x802997 <udd_g_ctrlreq+0xd>
	return true;
    d176:	81 e0       	ldi	r24, 0x01	; 1
}
    d178:	df 91       	pop	r29
    d17a:	cf 91       	pop	r28
    d17c:	08 95       	ret

0000d17e <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    d17e:	cf 93       	push	r28
    d180:	df 93       	push	r29
    d182:	00 d0       	rcall	.+0      	; 0xd184 <udc_req_std_dev_get_str_desc+0x6>
    d184:	1f 92       	push	r1
    d186:	cd b7       	in	r28, 0x3d	; 61
    d188:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    d18a:	1c 82       	std	Y+4, r1	; 0x04

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    d18c:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d190:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d194:	99 27       	eor	r25, r25
    d196:	00 97       	sbiw	r24, 0x00	; 0
    d198:	19 f0       	breq	.+6      	; 0xd1a0 <udc_req_std_dev_get_str_desc+0x22>
    d19a:	03 97       	sbiw	r24, 0x03	; 3
    d19c:	41 f0       	breq	.+16     	; 0xd1ae <udc_req_std_dev_get_str_desc+0x30>
    d19e:	0d c0       	rjmp	.+26     	; 0xd1ba <udc_req_std_dev_get_str_desc+0x3c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    d1a0:	64 e0       	ldi	r22, 0x04	; 4
    d1a2:	70 e0       	ldi	r23, 0x00	; 0
    d1a4:	86 ea       	ldi	r24, 0xA6	; 166
    d1a6:	90 e2       	ldi	r25, 0x20	; 32
    d1a8:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
				sizeof(udc_string_desc_languageid));
		break;
    d1ac:	08 c0       	rjmp	.+16     	; 0xd1be <udc_req_std_dev_get_str_desc+0x40>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    d1ae:	87 e0       	ldi	r24, 0x07	; 7
    d1b0:	8c 83       	std	Y+4, r24	; 0x04
		str = udc_get_string_serial_name();
    d1b2:	0d dd       	rcall	.-1510   	; 0xcbce <udc_get_string_serial_name>
    d1b4:	8a 83       	std	Y+2, r24	; 0x02
    d1b6:	9b 83       	std	Y+3, r25	; 0x03
		break;
    d1b8:	02 c0       	rjmp	.+4      	; 0xd1be <udc_req_std_dev_get_str_desc+0x40>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    d1ba:	80 e0       	ldi	r24, 0x00	; 0
    d1bc:	33 c0       	rjmp	.+102    	; 0xd224 <udc_req_std_dev_get_str_desc+0xa6>
	}

	if (str_length) {
    d1be:	8c 81       	ldd	r24, Y+4	; 0x04
    d1c0:	88 23       	and	r24, r24
    d1c2:	79 f1       	breq	.+94     	; 0xd222 <udc_req_std_dev_get_str_desc+0xa4>
		for(i = 0; i < str_length; i++) {
    d1c4:	19 82       	std	Y+1, r1	; 0x01
    d1c6:	19 c0       	rjmp	.+50     	; 0xd1fa <udc_req_std_dev_get_str_desc+0x7c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    d1c8:	89 81       	ldd	r24, Y+1	; 0x01
    d1ca:	88 2f       	mov	r24, r24
    d1cc:	90 e0       	ldi	r25, 0x00	; 0
    d1ce:	29 81       	ldd	r18, Y+1	; 0x01
    d1d0:	22 2f       	mov	r18, r18
    d1d2:	30 e0       	ldi	r19, 0x00	; 0
    d1d4:	4a 81       	ldd	r20, Y+2	; 0x02
    d1d6:	5b 81       	ldd	r21, Y+3	; 0x03
    d1d8:	24 0f       	add	r18, r20
    d1da:	35 1f       	adc	r19, r21
    d1dc:	f9 01       	movw	r30, r18
    d1de:	20 81       	ld	r18, Z
    d1e0:	22 2f       	mov	r18, r18
    d1e2:	30 e0       	ldi	r19, 0x00	; 0
    d1e4:	01 96       	adiw	r24, 0x01	; 1
    d1e6:	88 0f       	add	r24, r24
    d1e8:	99 1f       	adc	r25, r25
    d1ea:	86 55       	subi	r24, 0x56	; 86
    d1ec:	9f 4d       	sbci	r25, 0xDF	; 223
    d1ee:	fc 01       	movw	r30, r24
    d1f0:	20 83       	st	Z, r18
    d1f2:	31 83       	std	Z+1, r19	; 0x01
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    d1f4:	89 81       	ldd	r24, Y+1	; 0x01
    d1f6:	8f 5f       	subi	r24, 0xFF	; 255
    d1f8:	89 83       	std	Y+1, r24	; 0x01
    d1fa:	99 81       	ldd	r25, Y+1	; 0x01
    d1fc:	8c 81       	ldd	r24, Y+4	; 0x04
    d1fe:	98 17       	cp	r25, r24
    d200:	18 f3       	brcs	.-58     	; 0xd1c8 <udc_req_std_dev_get_str_desc+0x4a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    d202:	8c 81       	ldd	r24, Y+4	; 0x04
    d204:	88 2f       	mov	r24, r24
    d206:	90 e0       	ldi	r25, 0x00	; 0
    d208:	01 96       	adiw	r24, 0x01	; 1
    d20a:	88 0f       	add	r24, r24
    d20c:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <udc_string_desc>
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    d210:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <udc_string_desc>
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    d214:	88 2f       	mov	r24, r24
    d216:	90 e0       	ldi	r25, 0x00	; 0
    d218:	bc 01       	movw	r22, r24
    d21a:	8a ea       	ldi	r24, 0xAA	; 170
    d21c:	90 e2       	ldi	r25, 0x20	; 32
    d21e:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    d222:	81 e0       	ldi	r24, 0x01	; 1
}
    d224:	24 96       	adiw	r28, 0x04	; 4
    d226:	cd bf       	out	0x3d, r28	; 61
    d228:	de bf       	out	0x3e, r29	; 62
    d22a:	df 91       	pop	r29
    d22c:	cf 91       	pop	r28
    d22e:	08 95       	ret

0000d230 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    d230:	cf 93       	push	r28
    d232:	df 93       	push	r29
    d234:	1f 92       	push	r1
    d236:	cd b7       	in	r28, 0x3d	; 61
    d238:	de b7       	in	r29, 0x3e	; 62
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    d23a:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d23e:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d242:	89 83       	std	Y+1, r24	; 0x01

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    d244:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d248:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d24c:	89 2f       	mov	r24, r25
    d24e:	99 27       	eor	r25, r25
    d250:	82 30       	cpi	r24, 0x02	; 2
    d252:	91 05       	cpc	r25, r1
    d254:	f1 f0       	breq	.+60     	; 0xd292 <udc_req_std_dev_get_descriptor+0x62>
    d256:	83 30       	cpi	r24, 0x03	; 3
    d258:	91 05       	cpc	r25, r1
    d25a:	1c f4       	brge	.+6      	; 0xd262 <udc_req_std_dev_get_descriptor+0x32>
    d25c:	01 97       	sbiw	r24, 0x01	; 1
    d25e:	49 f0       	breq	.+18     	; 0xd272 <udc_req_std_dev_get_descriptor+0x42>
    d260:	70 c0       	rjmp	.+224    	; 0xd342 <udc_req_std_dev_get_descriptor+0x112>
    d262:	83 30       	cpi	r24, 0x03	; 3
    d264:	91 05       	cpc	r25, r1
    d266:	09 f4       	brne	.+2      	; 0xd26a <udc_req_std_dev_get_descriptor+0x3a>
    d268:	64 c0       	rjmp	.+200    	; 0xd332 <udc_req_std_dev_get_descriptor+0x102>
    d26a:	0f 97       	sbiw	r24, 0x0f	; 15
    d26c:	09 f4       	brne	.+2      	; 0xd270 <udc_req_std_dev_get_descriptor+0x40>
    d26e:	4a c0       	rjmp	.+148    	; 0xd304 <udc_req_std_dev_get_descriptor+0xd4>
    d270:	68 c0       	rjmp	.+208    	; 0xd342 <udc_req_std_dev_get_descriptor+0x112>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    d272:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <udc_config>
    d276:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <udc_config+0x1>
    d27a:	fc 01       	movw	r30, r24
    d27c:	80 81       	ld	r24, Z
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    d27e:	28 2f       	mov	r18, r24
    d280:	30 e0       	ldi	r19, 0x00	; 0
				(uint8_t *) udc_config.confdev_lsfs,
    d282:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <udc_config>
    d286:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    d28a:	b9 01       	movw	r22, r18
    d28c:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    d290:	5b c0       	rjmp	.+182    	; 0xd348 <udc_req_std_dev_get_descriptor+0x118>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    d292:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <udc_config>
    d296:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <udc_config+0x1>
    d29a:	fc 01       	movw	r30, r24
    d29c:	91 89       	ldd	r25, Z+17	; 0x11
    d29e:	89 81       	ldd	r24, Y+1	; 0x01
    d2a0:	89 17       	cp	r24, r25
    d2a2:	10 f0       	brcs	.+4      	; 0xd2a8 <udc_req_std_dev_get_descriptor+0x78>
					bNumConfigurations) {
				return false;
    d2a4:	80 e0       	ldi	r24, 0x00	; 0
    d2a6:	64 c0       	rjmp	.+200    	; 0xd370 <udc_req_std_dev_get_descriptor+0x140>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    d2a8:	20 91 a2 20 	lds	r18, 0x20A2	; 0x8020a2 <udc_config+0x2>
    d2ac:	30 91 a3 20 	lds	r19, 0x20A3	; 0x8020a3 <udc_config+0x3>
    d2b0:	89 81       	ldd	r24, Y+1	; 0x01
    d2b2:	88 2f       	mov	r24, r24
    d2b4:	90 e0       	ldi	r25, 0x00	; 0
    d2b6:	88 0f       	add	r24, r24
    d2b8:	99 1f       	adc	r25, r25
    d2ba:	88 0f       	add	r24, r24
    d2bc:	99 1f       	adc	r25, r25
    d2be:	82 0f       	add	r24, r18
    d2c0:	93 1f       	adc	r25, r19
    d2c2:	fc 01       	movw	r30, r24
    d2c4:	80 81       	ld	r24, Z
    d2c6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    d2c8:	fc 01       	movw	r30, r24
    d2ca:	42 81       	ldd	r20, Z+2	; 0x02
    d2cc:	53 81       	ldd	r21, Z+3	; 0x03
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    d2ce:	20 91 a2 20 	lds	r18, 0x20A2	; 0x8020a2 <udc_config+0x2>
    d2d2:	30 91 a3 20 	lds	r19, 0x20A3	; 0x8020a3 <udc_config+0x3>
    d2d6:	89 81       	ldd	r24, Y+1	; 0x01
    d2d8:	88 2f       	mov	r24, r24
    d2da:	90 e0       	ldi	r25, 0x00	; 0
    d2dc:	88 0f       	add	r24, r24
    d2de:	99 1f       	adc	r25, r25
    d2e0:	88 0f       	add	r24, r24
    d2e2:	99 1f       	adc	r25, r25
    d2e4:	82 0f       	add	r24, r18
    d2e6:	93 1f       	adc	r25, r19
    d2e8:	fc 01       	movw	r30, r24
    d2ea:	80 81       	ld	r24, Z
    d2ec:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    d2ee:	ba 01       	movw	r22, r20
    d2f0:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    d2f4:	80 91 92 29 	lds	r24, 0x2992	; 0x802992 <udd_g_ctrlreq+0x8>
    d2f8:	90 91 93 29 	lds	r25, 0x2993	; 0x802993 <udd_g_ctrlreq+0x9>
    d2fc:	22 e0       	ldi	r18, 0x02	; 2
    d2fe:	fc 01       	movw	r30, r24
    d300:	21 83       	std	Z+1, r18	; 0x01
				USB_DT_CONFIGURATION;
		break;
    d302:	22 c0       	rjmp	.+68     	; 0xd348 <udc_req_std_dev_get_descriptor+0x118>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    d304:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <udc_config+0x4>
    d308:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <udc_config+0x5>
    d30c:	89 2b       	or	r24, r25
    d30e:	11 f4       	brne	.+4      	; 0xd314 <udc_req_std_dev_get_descriptor+0xe4>
			return false;
    d310:	80 e0       	ldi	r24, 0x00	; 0
    d312:	2e c0       	rjmp	.+92     	; 0xd370 <udc_req_std_dev_get_descriptor+0x140>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
				udc_config.conf_bos->wTotalLength);
    d314:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <udc_config+0x4>
    d318:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <udc_config+0x5>
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    d31c:	fc 01       	movw	r30, r24
    d31e:	22 81       	ldd	r18, Z+2	; 0x02
    d320:	33 81       	ldd	r19, Z+3	; 0x03
    d322:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <udc_config+0x4>
    d326:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <udc_config+0x5>
    d32a:	b9 01       	movw	r22, r18
    d32c:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
				udc_config.conf_bos->wTotalLength);
		break;
    d330:	0b c0       	rjmp	.+22     	; 0xd348 <udc_req_std_dev_get_descriptor+0x118>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    d332:	25 df       	rcall	.-438    	; 0xd17e <udc_req_std_dev_get_str_desc>
    d334:	98 2f       	mov	r25, r24
    d336:	81 e0       	ldi	r24, 0x01	; 1
    d338:	89 27       	eor	r24, r25
    d33a:	88 23       	and	r24, r24
    d33c:	21 f0       	breq	.+8      	; 0xd346 <udc_req_std_dev_get_descriptor+0x116>
			return false;
    d33e:	80 e0       	ldi	r24, 0x00	; 0
    d340:	17 c0       	rjmp	.+46     	; 0xd370 <udc_req_std_dev_get_descriptor+0x140>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    d342:	80 e0       	ldi	r24, 0x00	; 0
    d344:	15 c0       	rjmp	.+42     	; 0xd370 <udc_req_std_dev_get_descriptor+0x140>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
    d346:	00 00       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    d348:	20 91 90 29 	lds	r18, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d34c:	30 91 91 29 	lds	r19, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d350:	80 91 94 29 	lds	r24, 0x2994	; 0x802994 <udd_g_ctrlreq+0xa>
    d354:	90 91 95 29 	lds	r25, 0x2995	; 0x802995 <udd_g_ctrlreq+0xb>
    d358:	28 17       	cp	r18, r24
    d35a:	39 07       	cpc	r19, r25
    d35c:	40 f4       	brcc	.+16     	; 0xd36e <udc_req_std_dev_get_descriptor+0x13e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    d35e:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d362:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d366:	80 93 94 29 	sts	0x2994, r24	; 0x802994 <udd_g_ctrlreq+0xa>
    d36a:	90 93 95 29 	sts	0x2995, r25	; 0x802995 <udd_g_ctrlreq+0xb>
	}
	return true;
    d36e:	81 e0       	ldi	r24, 0x01	; 1
}
    d370:	0f 90       	pop	r0
    d372:	df 91       	pop	r29
    d374:	cf 91       	pop	r28
    d376:	08 95       	ret

0000d378 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    d378:	cf 93       	push	r28
    d37a:	df 93       	push	r29
    d37c:	cd b7       	in	r28, 0x3d	; 61
    d37e:	de b7       	in	r29, 0x3e	; 62
	if (udd_g_ctrlreq.req.wLength != 1) {
    d380:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d384:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d388:	01 97       	sbiw	r24, 0x01	; 1
    d38a:	11 f0       	breq	.+4      	; 0xd390 <udc_req_std_dev_get_configuration+0x18>
		return false;
    d38c:	80 e0       	ldi	r24, 0x00	; 0
    d38e:	07 c0       	rjmp	.+14     	; 0xd39e <udc_req_std_dev_get_configuration+0x26>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    d390:	61 e0       	ldi	r22, 0x01	; 1
    d392:	70 e0       	ldi	r23, 0x00	; 0
    d394:	86 ed       	ldi	r24, 0xD6	; 214
    d396:	93 e2       	ldi	r25, 0x23	; 35
    d398:	0e 94 20 72 	call	0xe440	; 0xe440 <udd_set_setup_payload>
	return true;
    d39c:	81 e0       	ldi	r24, 0x01	; 1
}
    d39e:	df 91       	pop	r29
    d3a0:	cf 91       	pop	r28
    d3a2:	08 95       	ret

0000d3a4 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    d3a4:	cf 93       	push	r28
    d3a6:	df 93       	push	r29
    d3a8:	1f 92       	push	r1
    d3aa:	cd b7       	in	r28, 0x3d	; 61
    d3ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    d3ae:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d3b2:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d3b6:	89 2b       	or	r24, r25
    d3b8:	11 f0       	breq	.+4      	; 0xd3be <udc_req_std_dev_set_configuration+0x1a>
		return false;
    d3ba:	80 e0       	ldi	r24, 0x00	; 0
    d3bc:	56 c0       	rjmp	.+172    	; 0xd46a <udc_req_std_dev_set_configuration+0xc6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    d3be:	0e 94 01 72 	call	0xe402	; 0xe402 <udd_getaddress>
    d3c2:	88 23       	and	r24, r24
    d3c4:	11 f4       	brne	.+4      	; 0xd3ca <udc_req_std_dev_set_configuration+0x26>
		return false;
    d3c6:	80 e0       	ldi	r24, 0x00	; 0
    d3c8:	50 c0       	rjmp	.+160    	; 0xd46a <udc_req_std_dev_set_configuration+0xc6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    d3ca:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d3ce:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d3d2:	9c 01       	movw	r18, r24
    d3d4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    d3d6:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <udc_config>
    d3da:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <udc_config+0x1>
    d3de:	fc 01       	movw	r30, r24
    d3e0:	81 89       	ldd	r24, Z+17	; 0x11
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    d3e2:	88 2f       	mov	r24, r24
    d3e4:	90 e0       	ldi	r25, 0x00	; 0
    d3e6:	82 17       	cp	r24, r18
    d3e8:	93 07       	cpc	r25, r19
    d3ea:	10 f4       	brcc	.+4      	; 0xd3f0 <udc_req_std_dev_set_configuration+0x4c>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    d3ec:	80 e0       	ldi	r24, 0x00	; 0
    d3ee:	3d c0       	rjmp	.+122    	; 0xd46a <udc_req_std_dev_set_configuration+0xc6>
		}
	}

	// Reset current configuration
	udc_reset();
    d3f0:	7d dd       	rcall	.-1286   	; 0xceec <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    d3f2:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d3f6:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d3fa:	80 93 d6 23 	sts	0x23D6, r24	; 0x8023d6 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    d3fe:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    d402:	88 23       	and	r24, r24
    d404:	11 f4       	brne	.+4      	; 0xd40a <udc_req_std_dev_set_configuration+0x66>
		return true; // Default empty configuration requested
    d406:	81 e0       	ldi	r24, 0x01	; 1
    d408:	30 c0       	rjmp	.+96     	; 0xd46a <udc_req_std_dev_set_configuration+0xc6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    d40a:	20 91 a2 20 	lds	r18, 0x20A2	; 0x8020a2 <udc_config+0x2>
    d40e:	30 91 a3 20 	lds	r19, 0x20A3	; 0x8020a3 <udc_config+0x3>
    d412:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    d416:	88 2f       	mov	r24, r24
    d418:	90 e0       	ldi	r25, 0x00	; 0
    d41a:	81 50       	subi	r24, 0x01	; 1
    d41c:	90 4c       	sbci	r25, 0xC0	; 192
    d41e:	88 0f       	add	r24, r24
    d420:	99 1f       	adc	r25, r25
    d422:	88 0f       	add	r24, r24
    d424:	99 1f       	adc	r25, r25
    d426:	82 0f       	add	r24, r18
    d428:	93 1f       	adc	r25, r19
    d42a:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <udc_ptr_conf>
    d42e:	90 93 d9 23 	sts	0x23D9, r25	; 0x8023d9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    d432:	19 82       	std	Y+1, r1	; 0x01
    d434:	0d c0       	rjmp	.+26     	; 0xd450 <udc_req_std_dev_set_configuration+0xac>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    d436:	60 e0       	ldi	r22, 0x00	; 0
    d438:	89 81       	ldd	r24, Y+1	; 0x01
    d43a:	f8 dc       	rcall	.-1552   	; 0xce2c <udc_iface_enable>
    d43c:	98 2f       	mov	r25, r24
    d43e:	81 e0       	ldi	r24, 0x01	; 1
    d440:	89 27       	eor	r24, r25
    d442:	88 23       	and	r24, r24
    d444:	11 f0       	breq	.+4      	; 0xd44a <udc_req_std_dev_set_configuration+0xa6>
			return false;
    d446:	80 e0       	ldi	r24, 0x00	; 0
    d448:	10 c0       	rjmp	.+32     	; 0xd46a <udc_req_std_dev_set_configuration+0xc6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    d44a:	89 81       	ldd	r24, Y+1	; 0x01
    d44c:	8f 5f       	subi	r24, 0xFF	; 255
    d44e:	89 83       	std	Y+1, r24	; 0x01
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    d450:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    d454:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    d458:	fc 01       	movw	r30, r24
    d45a:	80 81       	ld	r24, Z
    d45c:	91 81       	ldd	r25, Z+1	; 0x01
    d45e:	fc 01       	movw	r30, r24
    d460:	94 81       	ldd	r25, Z+4	; 0x04
    d462:	89 81       	ldd	r24, Y+1	; 0x01
    d464:	89 17       	cp	r24, r25
    d466:	38 f3       	brcs	.-50     	; 0xd436 <udc_req_std_dev_set_configuration+0x92>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    d468:	81 e0       	ldi	r24, 0x01	; 1
}
    d46a:	0f 90       	pop	r0
    d46c:	df 91       	pop	r29
    d46e:	cf 91       	pop	r28
    d470:	08 95       	ret

0000d472 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    d472:	cf 93       	push	r28
    d474:	df 93       	push	r29
    d476:	00 d0       	rcall	.+0      	; 0xd478 <udc_req_std_iface_get_setting+0x6>
    d478:	cd b7       	in	r28, 0x3d	; 61
    d47a:	de b7       	in	r29, 0x3e	; 62
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    d47c:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d480:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d484:	01 97       	sbiw	r24, 0x01	; 1
    d486:	11 f0       	breq	.+4      	; 0xd48c <udc_req_std_iface_get_setting+0x1a>
		return false; // Error in request
    d488:	80 e0       	ldi	r24, 0x00	; 0
    d48a:	45 c0       	rjmp	.+138    	; 0xd516 <udc_req_std_iface_get_setting+0xa4>
	}
	if (!udc_num_configuration) {
    d48c:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    d490:	88 23       	and	r24, r24
    d492:	11 f4       	brne	.+4      	; 0xd498 <udc_req_std_iface_get_setting+0x26>
		return false; // The device is not is configured state yet
    d494:	80 e0       	ldi	r24, 0x00	; 0
    d496:	3f c0       	rjmp	.+126    	; 0xd516 <udc_req_std_iface_get_setting+0xa4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    d498:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d49c:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d4a0:	89 83       	std	Y+1, r24	; 0x01
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    d4a2:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    d4a6:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    d4aa:	fc 01       	movw	r30, r24
    d4ac:	80 81       	ld	r24, Z
    d4ae:	91 81       	ldd	r25, Z+1	; 0x01
    d4b0:	fc 01       	movw	r30, r24
    d4b2:	94 81       	ldd	r25, Z+4	; 0x04
    d4b4:	89 81       	ldd	r24, Y+1	; 0x01
    d4b6:	89 17       	cp	r24, r25
    d4b8:	10 f0       	brcs	.+4      	; 0xd4be <udc_req_std_iface_get_setting+0x4c>
		return false;
    d4ba:	80 e0       	ldi	r24, 0x00	; 0
    d4bc:	2c c0       	rjmp	.+88     	; 0xd516 <udc_req_std_iface_get_setting+0xa4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    d4be:	60 e0       	ldi	r22, 0x00	; 0
    d4c0:	89 81       	ldd	r24, Y+1	; 0x01
    d4c2:	ef db       	rcall	.-2082   	; 0xcca2 <udc_update_iface_desc>
    d4c4:	98 2f       	mov	r25, r24
    d4c6:	81 e0       	ldi	r24, 0x01	; 1
    d4c8:	89 27       	eor	r24, r25
    d4ca:	88 23       	and	r24, r24
    d4cc:	11 f0       	breq	.+4      	; 0xd4d2 <udc_req_std_iface_get_setting+0x60>
		return false;
    d4ce:	80 e0       	ldi	r24, 0x00	; 0
    d4d0:	22 c0       	rjmp	.+68     	; 0xd516 <udc_req_std_iface_get_setting+0xa4>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    d4d2:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    d4d6:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    d4da:	fc 01       	movw	r30, r24
    d4dc:	22 81       	ldd	r18, Z+2	; 0x02
    d4de:	33 81       	ldd	r19, Z+3	; 0x03
    d4e0:	89 81       	ldd	r24, Y+1	; 0x01
    d4e2:	88 2f       	mov	r24, r24
    d4e4:	90 e0       	ldi	r25, 0x00	; 0
    d4e6:	88 0f       	add	r24, r24
    d4e8:	99 1f       	adc	r25, r25
    d4ea:	82 0f       	add	r24, r18
    d4ec:	93 1f       	adc	r25, r19
    d4ee:	fc 01       	movw	r30, r24
    d4f0:	80 81       	ld	r24, Z
    d4f2:	91 81       	ldd	r25, Z+1	; 0x01
    d4f4:	8a 83       	std	Y+2, r24	; 0x02
    d4f6:	9b 83       	std	Y+3, r25	; 0x03
	udc_iface_setting = udi_api->getsetting();
    d4f8:	8a 81       	ldd	r24, Y+2	; 0x02
    d4fa:	9b 81       	ldd	r25, Y+3	; 0x03
    d4fc:	fc 01       	movw	r30, r24
    d4fe:	86 81       	ldd	r24, Z+6	; 0x06
    d500:	97 81       	ldd	r25, Z+7	; 0x07
    d502:	fc 01       	movw	r30, r24
    d504:	19 95       	eicall
    d506:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    d50a:	61 e0       	ldi	r22, 0x01	; 1
    d50c:	70 e0       	ldi	r23, 0x00	; 0
    d50e:	84 ed       	ldi	r24, 0xD4	; 212
    d510:	93 e2       	ldi	r25, 0x23	; 35
    d512:	96 d7       	rcall	.+3884   	; 0xe440 <udd_set_setup_payload>
	return true;
    d514:	81 e0       	ldi	r24, 0x01	; 1
}
    d516:	23 96       	adiw	r28, 0x03	; 3
    d518:	cd bf       	out	0x3d, r28	; 61
    d51a:	de bf       	out	0x3e, r29	; 62
    d51c:	df 91       	pop	r29
    d51e:	cf 91       	pop	r28
    d520:	08 95       	ret

0000d522 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    d522:	cf 93       	push	r28
    d524:	df 93       	push	r29
    d526:	1f 92       	push	r1
    d528:	1f 92       	push	r1
    d52a:	cd b7       	in	r28, 0x3d	; 61
    d52c:	de b7       	in	r29, 0x3e	; 62
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    d52e:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d532:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d536:	89 2b       	or	r24, r25
    d538:	11 f0       	breq	.+4      	; 0xd53e <udc_req_std_iface_set_setting+0x1c>
		return false; // Error in request
    d53a:	80 e0       	ldi	r24, 0x00	; 0
    d53c:	1c c0       	rjmp	.+56     	; 0xd576 <udc_req_std_iface_set_setting+0x54>
	}
	if (!udc_num_configuration) {
    d53e:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    d542:	88 23       	and	r24, r24
    d544:	11 f4       	brne	.+4      	; 0xd54a <udc_req_std_iface_set_setting+0x28>
		return false; // The device is not is configured state yet
    d546:	80 e0       	ldi	r24, 0x00	; 0
    d548:	16 c0       	rjmp	.+44     	; 0xd576 <udc_req_std_iface_set_setting+0x54>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    d54a:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d54e:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d552:	89 83       	std	Y+1, r24	; 0x01
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    d554:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <udd_g_ctrlreq+0x2>
    d558:	90 91 8d 29 	lds	r25, 0x298D	; 0x80298d <udd_g_ctrlreq+0x3>
    d55c:	8a 83       	std	Y+2, r24	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    d55e:	89 81       	ldd	r24, Y+1	; 0x01
    d560:	09 dc       	rcall	.-2030   	; 0xcd74 <udc_iface_disable>
    d562:	98 2f       	mov	r25, r24
    d564:	81 e0       	ldi	r24, 0x01	; 1
    d566:	89 27       	eor	r24, r25
    d568:	88 23       	and	r24, r24
    d56a:	11 f0       	breq	.+4      	; 0xd570 <udc_req_std_iface_set_setting+0x4e>
		return false;
    d56c:	80 e0       	ldi	r24, 0x00	; 0
    d56e:	03 c0       	rjmp	.+6      	; 0xd576 <udc_req_std_iface_set_setting+0x54>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    d570:	6a 81       	ldd	r22, Y+2	; 0x02
    d572:	89 81       	ldd	r24, Y+1	; 0x01
    d574:	5b dc       	rcall	.-1866   	; 0xce2c <udc_iface_enable>
}
    d576:	0f 90       	pop	r0
    d578:	0f 90       	pop	r0
    d57a:	df 91       	pop	r29
    d57c:	cf 91       	pop	r28
    d57e:	08 95       	ret

0000d580 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    d580:	cf 93       	push	r28
    d582:	df 93       	push	r29
    d584:	cd b7       	in	r28, 0x3d	; 61
    d586:	de b7       	in	r29, 0x3e	; 62
	if (Udd_setup_is_in()) {
    d588:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    d58c:	88 23       	and	r24, r24
    d58e:	0c f0       	brlt	.+2      	; 0xd592 <udc_reqstd+0x12>
    d590:	46 c0       	rjmp	.+140    	; 0xd61e <udc_reqstd+0x9e>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    d592:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d596:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d59a:	89 2b       	or	r24, r25
    d59c:	11 f4       	brne	.+4      	; 0xd5a2 <udc_reqstd+0x22>
			return false; // Error for USB host
    d59e:	80 e0       	ldi	r24, 0x00	; 0
    d5a0:	8d c0       	rjmp	.+282    	; 0xd6bc <udc_reqstd+0x13c>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    d5a2:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    d5a6:	88 2f       	mov	r24, r24
    d5a8:	90 e0       	ldi	r25, 0x00	; 0
    d5aa:	8f 71       	andi	r24, 0x1F	; 31
    d5ac:	99 27       	eor	r25, r25
    d5ae:	89 2b       	or	r24, r25
    d5b0:	99 f4       	brne	.+38     	; 0xd5d8 <udc_reqstd+0x58>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    d5b2:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
    d5b6:	88 2f       	mov	r24, r24
    d5b8:	90 e0       	ldi	r25, 0x00	; 0
    d5ba:	86 30       	cpi	r24, 0x06	; 6
    d5bc:	91 05       	cpc	r25, r1
    d5be:	41 f0       	breq	.+16     	; 0xd5d0 <udc_reqstd+0x50>
    d5c0:	88 30       	cpi	r24, 0x08	; 8
    d5c2:	91 05       	cpc	r25, r1
    d5c4:	39 f0       	breq	.+14     	; 0xd5d4 <udc_reqstd+0x54>
    d5c6:	89 2b       	or	r24, r25
    d5c8:	09 f0       	breq	.+2      	; 0xd5cc <udc_reqstd+0x4c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    d5ca:	06 c0       	rjmp	.+12     	; 0xd5d8 <udc_reqstd+0x58>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    d5cc:	01 dd       	rcall	.-1534   	; 0xcfd0 <udc_req_std_dev_get_status>
    d5ce:	76 c0       	rjmp	.+236    	; 0xd6bc <udc_reqstd+0x13c>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    d5d0:	2f de       	rcall	.-930    	; 0xd230 <udc_req_std_dev_get_descriptor>
    d5d2:	74 c0       	rjmp	.+232    	; 0xd6bc <udc_reqstd+0x13c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    d5d4:	d1 de       	rcall	.-606    	; 0xd378 <udc_req_std_dev_get_configuration>
    d5d6:	72 c0       	rjmp	.+228    	; 0xd6bc <udc_reqstd+0x13c>
    d5d8:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    d5dc:	88 2f       	mov	r24, r24
    d5de:	90 e0       	ldi	r25, 0x00	; 0
    d5e0:	8f 71       	andi	r24, 0x1F	; 31
    d5e2:	99 27       	eor	r25, r25
    d5e4:	01 97       	sbiw	r24, 0x01	; 1
    d5e6:	49 f4       	brne	.+18     	; 0xd5fa <udc_reqstd+0x7a>
    d5e8:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    d5ec:	88 2f       	mov	r24, r24
    d5ee:	90 e0       	ldi	r25, 0x00	; 0
    d5f0:	0a 97       	sbiw	r24, 0x0a	; 10
    d5f2:	09 f0       	breq	.+2      	; 0xd5f6 <udc_reqstd+0x76>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    d5f4:	02 c0       	rjmp	.+4      	; 0xd5fa <udc_reqstd+0x7a>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    d5f6:	3d df       	rcall	.-390    	; 0xd472 <udc_req_std_iface_get_setting>
    d5f8:	61 c0       	rjmp	.+194    	; 0xd6bc <udc_reqstd+0x13c>
    d5fa:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    d5fe:	88 2f       	mov	r24, r24
    d600:	90 e0       	ldi	r25, 0x00	; 0
    d602:	8f 71       	andi	r24, 0x1F	; 31
    d604:	99 27       	eor	r25, r25
    d606:	02 97       	sbiw	r24, 0x02	; 2
    d608:	09 f0       	breq	.+2      	; 0xd60c <udc_reqstd+0x8c>
    d60a:	57 c0       	rjmp	.+174    	; 0xd6ba <udc_reqstd+0x13a>
    d60c:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    d610:	88 2f       	mov	r24, r24
    d612:	90 e0       	ldi	r25, 0x00	; 0
    d614:	89 2b       	or	r24, r25
    d616:	09 f0       	breq	.+2      	; 0xd61a <udc_reqstd+0x9a>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    d618:	50 c0       	rjmp	.+160    	; 0xd6ba <udc_reqstd+0x13a>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    d61a:	f0 dc       	rcall	.-1568   	; 0xcffc <udc_req_std_ep_get_status>
    d61c:	4f c0       	rjmp	.+158    	; 0xd6bc <udc_reqstd+0x13c>
    d61e:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    d622:	88 2f       	mov	r24, r24
    d624:	90 e0       	ldi	r25, 0x00	; 0
    d626:	8f 71       	andi	r24, 0x1F	; 31
    d628:	99 27       	eor	r25, r25
    d62a:	89 2b       	or	r24, r25
    d62c:	f9 f4       	brne	.+62     	; 0xd66c <udc_reqstd+0xec>
    d62e:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    d632:	88 2f       	mov	r24, r24
    d634:	90 e0       	ldi	r25, 0x00	; 0
    d636:	85 30       	cpi	r24, 0x05	; 5
    d638:	91 05       	cpc	r25, r1
    d63a:	79 f0       	breq	.+30     	; 0xd65a <udc_reqstd+0xda>
    d63c:	86 30       	cpi	r24, 0x06	; 6
    d63e:	91 05       	cpc	r25, r1
    d640:	34 f4       	brge	.+12     	; 0xd64e <udc_reqstd+0xce>
    d642:	81 30       	cpi	r24, 0x01	; 1
    d644:	91 05       	cpc	r25, r1
    d646:	59 f0       	breq	.+22     	; 0xd65e <udc_reqstd+0xde>
    d648:	03 97       	sbiw	r24, 0x03	; 3
    d64a:	59 f0       	breq	.+22     	; 0xd662 <udc_reqstd+0xe2>
    d64c:	0f c0       	rjmp	.+30     	; 0xd66c <udc_reqstd+0xec>
				return udc_req_std_dev_set_configuration();
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    d64e:	87 30       	cpi	r24, 0x07	; 7
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    d650:	91 05       	cpc	r25, r1
    d652:	59 f0       	breq	.+22     	; 0xd66a <udc_reqstd+0xea>
    d654:	09 97       	sbiw	r24, 0x09	; 9
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    d656:	39 f0       	breq	.+14     	; 0xd666 <udc_reqstd+0xe6>
    d658:	09 c0       	rjmp	.+18     	; 0xd66c <udc_reqstd+0xec>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    d65a:	7b dd       	rcall	.-1290   	; 0xd152 <udc_req_std_dev_set_address>
    d65c:	2f c0       	rjmp	.+94     	; 0xd6bc <udc_reqstd+0x13c>
    d65e:	f0 dc       	rcall	.-1568   	; 0xd040 <udc_req_std_dev_clear_feature>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    d660:	2d c0       	rjmp	.+90     	; 0xd6bc <udc_reqstd+0x13c>
    d662:	2c dd       	rcall	.-1448   	; 0xd0bc <udc_req_std_dev_set_feature>
    d664:	2b c0       	rjmp	.+86     	; 0xd6bc <udc_reqstd+0x13c>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    d666:	9e de       	rcall	.-708    	; 0xd3a4 <udc_req_std_dev_set_configuration>
    d668:	29 c0       	rjmp	.+82     	; 0xd6bc <udc_reqstd+0x13c>
    d66a:	00 00       	nop
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
    d66c:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    d670:	88 2f       	mov	r24, r24
    d672:	90 e0       	ldi	r25, 0x00	; 0
    d674:	8f 71       	andi	r24, 0x1F	; 31
    d676:	99 27       	eor	r25, r25
    d678:	01 97       	sbiw	r24, 0x01	; 1
    d67a:	49 f4       	brne	.+18     	; 0xd68e <udc_reqstd+0x10e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    d67c:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
    d680:	88 2f       	mov	r24, r24
    d682:	90 e0       	ldi	r25, 0x00	; 0
    d684:	0b 97       	sbiw	r24, 0x0b	; 11
    d686:	09 f0       	breq	.+2      	; 0xd68a <udc_reqstd+0x10a>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    d688:	02 c0       	rjmp	.+4      	; 0xd68e <udc_reqstd+0x10e>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    d68a:	4b df       	rcall	.-362    	; 0xd522 <udc_req_std_iface_set_setting>
    d68c:	17 c0       	rjmp	.+46     	; 0xd6bc <udc_reqstd+0x13c>
    d68e:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    d692:	88 2f       	mov	r24, r24
    d694:	90 e0       	ldi	r25, 0x00	; 0
    d696:	8f 71       	andi	r24, 0x1F	; 31
    d698:	99 27       	eor	r25, r25
    d69a:	02 97       	sbiw	r24, 0x02	; 2
    d69c:	71 f4       	brne	.+28     	; 0xd6ba <udc_reqstd+0x13a>
    d69e:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <udd_g_ctrlreq+0x1>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    d6a2:	88 2f       	mov	r24, r24
    d6a4:	90 e0       	ldi	r25, 0x00	; 0
    d6a6:	81 30       	cpi	r24, 0x01	; 1
    d6a8:	91 05       	cpc	r25, r1
    d6aa:	19 f0       	breq	.+6      	; 0xd6b2 <udc_reqstd+0x132>
    d6ac:	03 97       	sbiw	r24, 0x03	; 3
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    d6ae:	19 f0       	breq	.+6      	; 0xd6b6 <udc_reqstd+0x136>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    d6b0:	04 c0       	rjmp	.+8      	; 0xd6ba <udc_reqstd+0x13a>
    d6b2:	e7 dc       	rcall	.-1586   	; 0xd082 <udc_req_std_ep_clear_feature>
    d6b4:	03 c0       	rjmp	.+6      	; 0xd6bc <udc_reqstd+0x13c>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    d6b6:	1b dd       	rcall	.-1482   	; 0xd0ee <udc_req_std_ep_set_feature>
    d6b8:	01 c0       	rjmp	.+2      	; 0xd6bc <udc_reqstd+0x13c>
    d6ba:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
#endif
	}
	return false;
    d6bc:	df 91       	pop	r29
}
    d6be:	cf 91       	pop	r28
    d6c0:	08 95       	ret

0000d6c2 <udc_req_iface>:
    d6c2:	cf 93       	push	r28
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    d6c4:	df 93       	push	r29
    d6c6:	00 d0       	rcall	.+0      	; 0xd6c8 <udc_req_iface+0x6>
    d6c8:	cd b7       	in	r28, 0x3d	; 61
    d6ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    d6cc:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    d6d0:	88 23       	and	r24, r24
    d6d2:	11 f4       	brne	.+4      	; 0xd6d8 <udc_req_iface+0x16>
		return false; // The device is not is configured state yet
    d6d4:	80 e0       	ldi	r24, 0x00	; 0
    d6d6:	48 c0       	rjmp	.+144    	; 0xd768 <udc_req_iface+0xa6>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    d6d8:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d6dc:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d6e0:	89 83       	std	Y+1, r24	; 0x01
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    d6e2:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    d6e6:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    d6ea:	fc 01       	movw	r30, r24
    d6ec:	80 81       	ld	r24, Z
    d6ee:	91 81       	ldd	r25, Z+1	; 0x01
    d6f0:	fc 01       	movw	r30, r24
    d6f2:	94 81       	ldd	r25, Z+4	; 0x04
    d6f4:	89 81       	ldd	r24, Y+1	; 0x01
    d6f6:	89 17       	cp	r24, r25
    d6f8:	10 f0       	brcs	.+4      	; 0xd6fe <udc_req_iface+0x3c>
		return false;
    d6fa:	80 e0       	ldi	r24, 0x00	; 0
    d6fc:	35 c0       	rjmp	.+106    	; 0xd768 <udc_req_iface+0xa6>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    d6fe:	60 e0       	ldi	r22, 0x00	; 0
    d700:	89 81       	ldd	r24, Y+1	; 0x01
    d702:	cf da       	rcall	.-2658   	; 0xcca2 <udc_update_iface_desc>
    d704:	98 2f       	mov	r25, r24
    d706:	81 e0       	ldi	r24, 0x01	; 1
    d708:	89 27       	eor	r24, r25
    d70a:	88 23       	and	r24, r24
    d70c:	11 f0       	breq	.+4      	; 0xd712 <udc_req_iface+0x50>
		return false;
    d70e:	80 e0       	ldi	r24, 0x00	; 0
    d710:	2b c0       	rjmp	.+86     	; 0xd768 <udc_req_iface+0xa6>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    d712:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    d716:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    d71a:	fc 01       	movw	r30, r24
    d71c:	22 81       	ldd	r18, Z+2	; 0x02
    d71e:	33 81       	ldd	r19, Z+3	; 0x03
    d720:	89 81       	ldd	r24, Y+1	; 0x01
    d722:	88 2f       	mov	r24, r24
    d724:	90 e0       	ldi	r25, 0x00	; 0
    d726:	88 0f       	add	r24, r24
    d728:	99 1f       	adc	r25, r25
    d72a:	82 0f       	add	r24, r18
    d72c:	93 1f       	adc	r25, r19
    d72e:	fc 01       	movw	r30, r24
    d730:	80 81       	ld	r24, Z
    d732:	91 81       	ldd	r25, Z+1	; 0x01
    d734:	8a 83       	std	Y+2, r24	; 0x02
    d736:	9b 83       	std	Y+3, r25	; 0x03
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    d738:	8a 81       	ldd	r24, Y+2	; 0x02
    d73a:	9b 81       	ldd	r25, Y+3	; 0x03
    d73c:	fc 01       	movw	r30, r24
    d73e:	86 81       	ldd	r24, Z+6	; 0x06
    d740:	97 81       	ldd	r25, Z+7	; 0x07
    d742:	fc 01       	movw	r30, r24
    d744:	19 95       	eicall
    d746:	68 2f       	mov	r22, r24
    d748:	89 81       	ldd	r24, Y+1	; 0x01
    d74a:	ab da       	rcall	.-2730   	; 0xcca2 <udc_update_iface_desc>
    d74c:	98 2f       	mov	r25, r24
    d74e:	81 e0       	ldi	r24, 0x01	; 1
    d750:	89 27       	eor	r24, r25
    d752:	88 23       	and	r24, r24
    d754:	11 f0       	breq	.+4      	; 0xd75a <udc_req_iface+0x98>
		return false;
    d756:	80 e0       	ldi	r24, 0x00	; 0
    d758:	07 c0       	rjmp	.+14     	; 0xd768 <udc_req_iface+0xa6>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    d75a:	8a 81       	ldd	r24, Y+2	; 0x02
    d75c:	9b 81       	ldd	r25, Y+3	; 0x03
    d75e:	fc 01       	movw	r30, r24
    d760:	84 81       	ldd	r24, Z+4	; 0x04
    d762:	95 81       	ldd	r25, Z+5	; 0x05
    d764:	fc 01       	movw	r30, r24
    d766:	19 95       	eicall
}
    d768:	23 96       	adiw	r28, 0x03	; 3
    d76a:	cd bf       	out	0x3d, r28	; 61
    d76c:	de bf       	out	0x3e, r29	; 62
    d76e:	df 91       	pop	r29
    d770:	cf 91       	pop	r28
    d772:	08 95       	ret

0000d774 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    d774:	cf 93       	push	r28
    d776:	df 93       	push	r29
    d778:	00 d0       	rcall	.+0      	; 0xd77a <udc_req_ep+0x6>
    d77a:	cd b7       	in	r28, 0x3d	; 61
    d77c:	de b7       	in	r29, 0x3e	; 62
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    d77e:	80 91 d6 23 	lds	r24, 0x23D6	; 0x8023d6 <udc_num_configuration>
    d782:	88 23       	and	r24, r24
    d784:	11 f4       	brne	.+4      	; 0xd78a <udc_req_ep+0x16>
		return false; // The device is not is configured state yet
    d786:	80 e0       	ldi	r24, 0x00	; 0
    d788:	46 c0       	rjmp	.+140    	; 0xd816 <udc_req_ep+0xa2>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    d78a:	80 91 8e 29 	lds	r24, 0x298E	; 0x80298e <udd_g_ctrlreq+0x4>
    d78e:	90 91 8f 29 	lds	r25, 0x298F	; 0x80298f <udd_g_ctrlreq+0x5>
    d792:	89 83       	std	Y+1, r24	; 0x01
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    d794:	19 82       	std	Y+1, r1	; 0x01
    d796:	32 c0       	rjmp	.+100    	; 0xd7fc <udc_req_ep+0x88>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    d798:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    d79c:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    d7a0:	fc 01       	movw	r30, r24
    d7a2:	22 81       	ldd	r18, Z+2	; 0x02
    d7a4:	33 81       	ldd	r19, Z+3	; 0x03
    d7a6:	89 81       	ldd	r24, Y+1	; 0x01
    d7a8:	88 2f       	mov	r24, r24
    d7aa:	90 e0       	ldi	r25, 0x00	; 0
    d7ac:	88 0f       	add	r24, r24
    d7ae:	99 1f       	adc	r25, r25
    d7b0:	82 0f       	add	r24, r18
    d7b2:	93 1f       	adc	r25, r19
    d7b4:	fc 01       	movw	r30, r24
    d7b6:	80 81       	ld	r24, Z
    d7b8:	91 81       	ldd	r25, Z+1	; 0x01
    d7ba:	8a 83       	std	Y+2, r24	; 0x02
    d7bc:	9b 83       	std	Y+3, r25	; 0x03
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    d7be:	8a 81       	ldd	r24, Y+2	; 0x02
    d7c0:	9b 81       	ldd	r25, Y+3	; 0x03
    d7c2:	fc 01       	movw	r30, r24
    d7c4:	86 81       	ldd	r24, Z+6	; 0x06
    d7c6:	97 81       	ldd	r25, Z+7	; 0x07
    d7c8:	fc 01       	movw	r30, r24
    d7ca:	19 95       	eicall
    d7cc:	68 2f       	mov	r22, r24
    d7ce:	89 81       	ldd	r24, Y+1	; 0x01
    d7d0:	68 da       	rcall	.-2864   	; 0xcca2 <udc_update_iface_desc>
    d7d2:	98 2f       	mov	r25, r24
    d7d4:	81 e0       	ldi	r24, 0x01	; 1
    d7d6:	89 27       	eor	r24, r25
    d7d8:	88 23       	and	r24, r24
    d7da:	11 f0       	breq	.+4      	; 0xd7e0 <udc_req_ep+0x6c>
			return false;
    d7dc:	80 e0       	ldi	r24, 0x00	; 0
    d7de:	1b c0       	rjmp	.+54     	; 0xd816 <udc_req_ep+0xa2>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    d7e0:	8a 81       	ldd	r24, Y+2	; 0x02
    d7e2:	9b 81       	ldd	r25, Y+3	; 0x03
    d7e4:	fc 01       	movw	r30, r24
    d7e6:	84 81       	ldd	r24, Z+4	; 0x04
    d7e8:	95 81       	ldd	r25, Z+5	; 0x05
    d7ea:	fc 01       	movw	r30, r24
    d7ec:	19 95       	eicall
    d7ee:	88 23       	and	r24, r24
    d7f0:	11 f0       	breq	.+4      	; 0xd7f6 <udc_req_ep+0x82>
			return true;
    d7f2:	81 e0       	ldi	r24, 0x01	; 1
    d7f4:	10 c0       	rjmp	.+32     	; 0xd816 <udc_req_ep+0xa2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    d7f6:	89 81       	ldd	r24, Y+1	; 0x01
    d7f8:	8f 5f       	subi	r24, 0xFF	; 255
    d7fa:	89 83       	std	Y+1, r24	; 0x01
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    d7fc:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_ptr_conf>
    d800:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_ptr_conf+0x1>
    d804:	fc 01       	movw	r30, r24
    d806:	80 81       	ld	r24, Z
    d808:	91 81       	ldd	r25, Z+1	; 0x01
    d80a:	fc 01       	movw	r30, r24
    d80c:	94 81       	ldd	r25, Z+4	; 0x04
    d80e:	89 81       	ldd	r24, Y+1	; 0x01
    d810:	89 17       	cp	r24, r25
    d812:	10 f2       	brcs	.-124    	; 0xd798 <udc_req_ep+0x24>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    d814:	80 e0       	ldi	r24, 0x00	; 0
}
    d816:	23 96       	adiw	r28, 0x03	; 3
    d818:	cd bf       	out	0x3d, r28	; 61
    d81a:	de bf       	out	0x3e, r29	; 62
    d81c:	df 91       	pop	r29
    d81e:	cf 91       	pop	r28
    d820:	08 95       	ret

0000d822 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    d822:	cf 93       	push	r28
    d824:	df 93       	push	r29
    d826:	cd b7       	in	r28, 0x3d	; 61
    d828:	de b7       	in	r29, 0x3e	; 62
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    d82a:	10 92 94 29 	sts	0x2994, r1	; 0x802994 <udd_g_ctrlreq+0xa>
    d82e:	10 92 95 29 	sts	0x2995, r1	; 0x802995 <udd_g_ctrlreq+0xb>
	udd_g_ctrlreq.callback = NULL;
    d832:	10 92 96 29 	sts	0x2996, r1	; 0x802996 <udd_g_ctrlreq+0xc>
    d836:	10 92 97 29 	sts	0x2997, r1	; 0x802997 <udd_g_ctrlreq+0xd>
	udd_g_ctrlreq.over_under_run = NULL;
    d83a:	10 92 98 29 	sts	0x2998, r1	; 0x802998 <udd_g_ctrlreq+0xe>
    d83e:	10 92 99 29 	sts	0x2999, r1	; 0x802999 <udd_g_ctrlreq+0xf>

	if (Udd_setup_is_in()) {
    d842:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    d846:	88 23       	and	r24, r24
    d848:	44 f4       	brge	.+16     	; 0xd85a <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wLength == 0) {
    d84a:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    d84e:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    d852:	89 2b       	or	r24, r25
    d854:	11 f4       	brne	.+4      	; 0xd85a <udc_process_setup+0x38>
			return false; // Error from USB host
    d856:	80 e0       	ldi	r24, 0x00	; 0
    d858:	28 c0       	rjmp	.+80     	; 0xd8aa <udc_process_setup+0x88>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    d85a:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    d85e:	88 2f       	mov	r24, r24
    d860:	90 e0       	ldi	r25, 0x00	; 0
    d862:	80 76       	andi	r24, 0x60	; 96
    d864:	99 27       	eor	r25, r25
    d866:	89 2b       	or	r24, r25
    d868:	29 f4       	brne	.+10     	; 0xd874 <udc_process_setup+0x52>
		if (udc_reqstd()) {
    d86a:	8a de       	rcall	.-748    	; 0xd580 <udc_reqstd>
    d86c:	88 23       	and	r24, r24
    d86e:	11 f0       	breq	.+4      	; 0xd874 <udc_process_setup+0x52>
			return true;
    d870:	81 e0       	ldi	r24, 0x01	; 1
    d872:	1b c0       	rjmp	.+54     	; 0xd8aa <udc_process_setup+0x88>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    d874:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    d878:	88 2f       	mov	r24, r24
    d87a:	90 e0       	ldi	r25, 0x00	; 0
    d87c:	8f 71       	andi	r24, 0x1F	; 31
    d87e:	99 27       	eor	r25, r25
    d880:	01 97       	sbiw	r24, 0x01	; 1
		if (udc_req_iface()) {
    d882:	29 f4       	brne	.+10     	; 0xd88e <udc_process_setup+0x6c>
    d884:	1e df       	rcall	.-452    	; 0xd6c2 <udc_req_iface>
    d886:	88 23       	and	r24, r24
    d888:	11 f0       	breq	.+4      	; 0xd88e <udc_process_setup+0x6c>
			return true;
    d88a:	81 e0       	ldi	r24, 0x01	; 1
    d88c:	0e c0       	rjmp	.+28     	; 0xd8aa <udc_process_setup+0x88>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    d88e:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    d892:	88 2f       	mov	r24, r24
    d894:	90 e0       	ldi	r25, 0x00	; 0
    d896:	8f 71       	andi	r24, 0x1F	; 31
    d898:	99 27       	eor	r25, r25
    d89a:	02 97       	sbiw	r24, 0x02	; 2
		if (udc_req_ep()) {
    d89c:	29 f4       	brne	.+10     	; 0xd8a8 <udc_process_setup+0x86>
    d89e:	6a df       	rcall	.-300    	; 0xd774 <udc_req_ep>
    d8a0:	88 23       	and	r24, r24
    d8a2:	11 f0       	breq	.+4      	; 0xd8a8 <udc_process_setup+0x86>
			return true;
    d8a4:	81 e0       	ldi	r24, 0x01	; 1
    d8a6:	01 c0       	rjmp	.+2      	; 0xd8aa <udc_process_setup+0x88>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    d8a8:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    d8aa:	df 91       	pop	r29
    d8ac:	cf 91       	pop	r28
    d8ae:	08 95       	ret

0000d8b0 <cpu_irq_save>:
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
}
    d8b0:	cf 93       	push	r28
    d8b2:	df 93       	push	r29
    d8b4:	1f 92       	push	r1
    d8b6:	cd b7       	in	r28, 0x3d	; 61
    d8b8:	de b7       	in	r29, 0x3e	; 62
    d8ba:	8f e3       	ldi	r24, 0x3F	; 63
    d8bc:	90 e0       	ldi	r25, 0x00	; 0
    d8be:	fc 01       	movw	r30, r24
    d8c0:	80 81       	ld	r24, Z
    d8c2:	89 83       	std	Y+1, r24	; 0x01
    d8c4:	f8 94       	cli
    d8c6:	89 81       	ldd	r24, Y+1	; 0x01
    d8c8:	0f 90       	pop	r0
    d8ca:	df 91       	pop	r29
    d8cc:	cf 91       	pop	r28
    d8ce:	08 95       	ret

0000d8d0 <cpu_irq_restore>:
    d8d0:	cf 93       	push	r28
    d8d2:	df 93       	push	r29
    d8d4:	1f 92       	push	r1
    d8d6:	cd b7       	in	r28, 0x3d	; 61
    d8d8:	de b7       	in	r29, 0x3e	; 62
    d8da:	89 83       	std	Y+1, r24	; 0x01
    d8dc:	8f e3       	ldi	r24, 0x3F	; 63
    d8de:	90 e0       	ldi	r25, 0x00	; 0
    d8e0:	29 81       	ldd	r18, Y+1	; 0x01
    d8e2:	fc 01       	movw	r30, r24
    d8e4:	20 83       	st	Z, r18
    d8e6:	00 00       	nop
    d8e8:	0f 90       	pop	r0
    d8ea:	df 91       	pop	r29
    d8ec:	cf 91       	pop	r28
    d8ee:	08 95       	ret

0000d8f0 <sleepmgr_lock_mode>:
    d8f0:	cf 93       	push	r28
    d8f2:	df 93       	push	r29
    d8f4:	1f 92       	push	r1
    d8f6:	1f 92       	push	r1
    d8f8:	cd b7       	in	r28, 0x3d	; 61
    d8fa:	de b7       	in	r29, 0x3e	; 62
    d8fc:	8a 83       	std	Y+2, r24	; 0x02
    d8fe:	8a 81       	ldd	r24, Y+2	; 0x02
    d900:	88 2f       	mov	r24, r24
    d902:	90 e0       	ldi	r25, 0x00	; 0
    d904:	89 54       	subi	r24, 0x49	; 73
    d906:	96 4d       	sbci	r25, 0xD6	; 214
    d908:	fc 01       	movw	r30, r24
    d90a:	80 81       	ld	r24, Z
    d90c:	8f 3f       	cpi	r24, 0xFF	; 255
    d90e:	09 f4       	brne	.+2      	; 0xd912 <sleepmgr_lock_mode+0x22>
    d910:	ff cf       	rjmp	.-2      	; 0xd910 <sleepmgr_lock_mode+0x20>
    d912:	ce df       	rcall	.-100    	; 0xd8b0 <cpu_irq_save>
    d914:	89 83       	std	Y+1, r24	; 0x01
    d916:	8a 81       	ldd	r24, Y+2	; 0x02
    d918:	88 2f       	mov	r24, r24
    d91a:	90 e0       	ldi	r25, 0x00	; 0
    d91c:	9c 01       	movw	r18, r24
    d91e:	29 54       	subi	r18, 0x49	; 73
    d920:	36 4d       	sbci	r19, 0xD6	; 214
    d922:	f9 01       	movw	r30, r18
    d924:	20 81       	ld	r18, Z
    d926:	2f 5f       	subi	r18, 0xFF	; 255
    d928:	89 54       	subi	r24, 0x49	; 73
    d92a:	96 4d       	sbci	r25, 0xD6	; 214
    d92c:	fc 01       	movw	r30, r24
    d92e:	20 83       	st	Z, r18
    d930:	89 81       	ldd	r24, Y+1	; 0x01
    d932:	ce df       	rcall	.-100    	; 0xd8d0 <cpu_irq_restore>
    d934:	00 00       	nop
    d936:	0f 90       	pop	r0
    d938:	0f 90       	pop	r0
    d93a:	df 91       	pop	r29
    d93c:	cf 91       	pop	r28
    d93e:	08 95       	ret

0000d940 <dma_get_channel_status>:
    d940:	cf 93       	push	r28
    d942:	df 93       	push	r29
    d944:	00 d0       	rcall	.+0      	; 0xd946 <dma_get_channel_status+0x6>
    d946:	cd b7       	in	r28, 0x3d	; 61
    d948:	de b7       	in	r29, 0x3e	; 62
    d94a:	8b 83       	std	Y+3, r24	; 0x03
    d94c:	80 e0       	ldi	r24, 0x00	; 0
    d94e:	91 e0       	ldi	r25, 0x01	; 1
    d950:	fc 01       	movw	r30, r24
    d952:	84 81       	ldd	r24, Z+4	; 0x04
    d954:	89 83       	std	Y+1, r24	; 0x01
    d956:	80 e0       	ldi	r24, 0x00	; 0
    d958:	91 e0       	ldi	r25, 0x01	; 1
    d95a:	fc 01       	movw	r30, r24
    d95c:	83 81       	ldd	r24, Z+3	; 0x03
    d95e:	8a 83       	std	Y+2, r24	; 0x02
    d960:	8b 81       	ldd	r24, Y+3	; 0x03
    d962:	28 2f       	mov	r18, r24
    d964:	30 e0       	ldi	r19, 0x00	; 0
    d966:	81 e0       	ldi	r24, 0x01	; 1
    d968:	90 e0       	ldi	r25, 0x00	; 0
    d96a:	02 c0       	rjmp	.+4      	; 0xd970 <dma_get_channel_status+0x30>
    d96c:	88 0f       	add	r24, r24
    d96e:	99 1f       	adc	r25, r25
    d970:	2a 95       	dec	r18
    d972:	e2 f7       	brpl	.-8      	; 0xd96c <dma_get_channel_status+0x2c>
    d974:	48 2f       	mov	r20, r24
    d976:	8b 81       	ldd	r24, Y+3	; 0x03
    d978:	88 2f       	mov	r24, r24
    d97a:	90 e0       	ldi	r25, 0x00	; 0
    d97c:	9c 01       	movw	r18, r24
    d97e:	2c 5f       	subi	r18, 0xFC	; 252
    d980:	3f 4f       	sbci	r19, 0xFF	; 255
    d982:	81 e0       	ldi	r24, 0x01	; 1
    d984:	90 e0       	ldi	r25, 0x00	; 0
    d986:	02 c0       	rjmp	.+4      	; 0xd98c <dma_get_channel_status+0x4c>
    d988:	88 0f       	add	r24, r24
    d98a:	99 1f       	adc	r25, r25
    d98c:	2a 95       	dec	r18
    d98e:	e2 f7       	brpl	.-8      	; 0xd988 <dma_get_channel_status+0x48>
    d990:	94 2f       	mov	r25, r20
    d992:	98 2b       	or	r25, r24
    d994:	8a 81       	ldd	r24, Y+2	; 0x02
    d996:	89 23       	and	r24, r25
    d998:	8a 83       	std	Y+2, r24	; 0x02
    d99a:	8a 81       	ldd	r24, Y+2	; 0x02
    d99c:	88 2f       	mov	r24, r24
    d99e:	90 e0       	ldi	r25, 0x00	; 0
    d9a0:	2b 81       	ldd	r18, Y+3	; 0x03
    d9a2:	22 2f       	mov	r18, r18
    d9a4:	30 e0       	ldi	r19, 0x00	; 0
    d9a6:	2c 5f       	subi	r18, 0xFC	; 252
    d9a8:	3f 4f       	sbci	r19, 0xFF	; 255
    d9aa:	02 c0       	rjmp	.+4      	; 0xd9b0 <dma_get_channel_status+0x70>
    d9ac:	95 95       	asr	r25
    d9ae:	87 95       	ror	r24
    d9b0:	2a 95       	dec	r18
    d9b2:	e2 f7       	brpl	.-8      	; 0xd9ac <dma_get_channel_status+0x6c>
    d9b4:	81 70       	andi	r24, 0x01	; 1
    d9b6:	99 27       	eor	r25, r25
    d9b8:	89 2b       	or	r24, r25
    d9ba:	11 f0       	breq	.+4      	; 0xd9c0 <dma_get_channel_status+0x80>
    d9bc:	84 e0       	ldi	r24, 0x04	; 4
    d9be:	53 c0       	rjmp	.+166    	; 0xda66 <dma_get_channel_status+0x126>
    d9c0:	8a 81       	ldd	r24, Y+2	; 0x02
    d9c2:	88 2f       	mov	r24, r24
    d9c4:	90 e0       	ldi	r25, 0x00	; 0
    d9c6:	2b 81       	ldd	r18, Y+3	; 0x03
    d9c8:	22 2f       	mov	r18, r18
    d9ca:	30 e0       	ldi	r19, 0x00	; 0
    d9cc:	02 c0       	rjmp	.+4      	; 0xd9d2 <dma_get_channel_status+0x92>
    d9ce:	95 95       	asr	r25
    d9d0:	87 95       	ror	r24
    d9d2:	2a 95       	dec	r18
    d9d4:	e2 f7       	brpl	.-8      	; 0xd9ce <dma_get_channel_status+0x8e>
    d9d6:	81 70       	andi	r24, 0x01	; 1
    d9d8:	99 27       	eor	r25, r25
    d9da:	89 2b       	or	r24, r25
    d9dc:	11 f0       	breq	.+4      	; 0xd9e2 <dma_get_channel_status+0xa2>
    d9de:	83 e0       	ldi	r24, 0x03	; 3
    d9e0:	42 c0       	rjmp	.+132    	; 0xda66 <dma_get_channel_status+0x126>
    d9e2:	8b 81       	ldd	r24, Y+3	; 0x03
    d9e4:	28 2f       	mov	r18, r24
    d9e6:	30 e0       	ldi	r19, 0x00	; 0
    d9e8:	81 e0       	ldi	r24, 0x01	; 1
    d9ea:	90 e0       	ldi	r25, 0x00	; 0
    d9ec:	02 c0       	rjmp	.+4      	; 0xd9f2 <dma_get_channel_status+0xb2>
    d9ee:	88 0f       	add	r24, r24
    d9f0:	99 1f       	adc	r25, r25
    d9f2:	2a 95       	dec	r18
    d9f4:	e2 f7       	brpl	.-8      	; 0xd9ee <dma_get_channel_status+0xae>
    d9f6:	48 2f       	mov	r20, r24
    d9f8:	8b 81       	ldd	r24, Y+3	; 0x03
    d9fa:	88 2f       	mov	r24, r24
    d9fc:	90 e0       	ldi	r25, 0x00	; 0
    d9fe:	9c 01       	movw	r18, r24
    da00:	2c 5f       	subi	r18, 0xFC	; 252
    da02:	3f 4f       	sbci	r19, 0xFF	; 255
    da04:	81 e0       	ldi	r24, 0x01	; 1
    da06:	90 e0       	ldi	r25, 0x00	; 0
    da08:	02 c0       	rjmp	.+4      	; 0xda0e <dma_get_channel_status+0xce>
    da0a:	88 0f       	add	r24, r24
    da0c:	99 1f       	adc	r25, r25
    da0e:	2a 95       	dec	r18
    da10:	e2 f7       	brpl	.-8      	; 0xda0a <dma_get_channel_status+0xca>
    da12:	94 2f       	mov	r25, r20
    da14:	98 2b       	or	r25, r24
    da16:	89 81       	ldd	r24, Y+1	; 0x01
    da18:	89 23       	and	r24, r25
    da1a:	89 83       	std	Y+1, r24	; 0x01
    da1c:	89 81       	ldd	r24, Y+1	; 0x01
    da1e:	88 2f       	mov	r24, r24
    da20:	90 e0       	ldi	r25, 0x00	; 0
    da22:	2b 81       	ldd	r18, Y+3	; 0x03
    da24:	22 2f       	mov	r18, r18
    da26:	30 e0       	ldi	r19, 0x00	; 0
    da28:	2c 5f       	subi	r18, 0xFC	; 252
    da2a:	3f 4f       	sbci	r19, 0xFF	; 255
    da2c:	02 c0       	rjmp	.+4      	; 0xda32 <dma_get_channel_status+0xf2>
    da2e:	95 95       	asr	r25
    da30:	87 95       	ror	r24
    da32:	2a 95       	dec	r18
    da34:	e2 f7       	brpl	.-8      	; 0xda2e <dma_get_channel_status+0xee>
    da36:	81 70       	andi	r24, 0x01	; 1
    da38:	99 27       	eor	r25, r25
    da3a:	89 2b       	or	r24, r25
    da3c:	11 f0       	breq	.+4      	; 0xda42 <dma_get_channel_status+0x102>
    da3e:	82 e0       	ldi	r24, 0x02	; 2
    da40:	12 c0       	rjmp	.+36     	; 0xda66 <dma_get_channel_status+0x126>
    da42:	89 81       	ldd	r24, Y+1	; 0x01
    da44:	88 2f       	mov	r24, r24
    da46:	90 e0       	ldi	r25, 0x00	; 0
    da48:	2b 81       	ldd	r18, Y+3	; 0x03
    da4a:	22 2f       	mov	r18, r18
    da4c:	30 e0       	ldi	r19, 0x00	; 0
    da4e:	02 c0       	rjmp	.+4      	; 0xda54 <dma_get_channel_status+0x114>
    da50:	95 95       	asr	r25
    da52:	87 95       	ror	r24
    da54:	2a 95       	dec	r18
    da56:	e2 f7       	brpl	.-8      	; 0xda50 <dma_get_channel_status+0x110>
    da58:	81 70       	andi	r24, 0x01	; 1
    da5a:	99 27       	eor	r25, r25
    da5c:	89 2b       	or	r24, r25
    da5e:	11 f0       	breq	.+4      	; 0xda64 <dma_get_channel_status+0x124>
    da60:	81 e0       	ldi	r24, 0x01	; 1
    da62:	01 c0       	rjmp	.+2      	; 0xda66 <dma_get_channel_status+0x126>
    da64:	80 e0       	ldi	r24, 0x00	; 0
    da66:	23 96       	adiw	r28, 0x03	; 3
    da68:	cd bf       	out	0x3d, r28	; 61
    da6a:	de bf       	out	0x3e, r29	; 62
    da6c:	df 91       	pop	r29
    da6e:	cf 91       	pop	r28
    da70:	08 95       	ret

0000da72 <dma_enable>:
    da72:	cf 93       	push	r28
    da74:	df 93       	push	r29
    da76:	cd b7       	in	r28, 0x3d	; 61
    da78:	de b7       	in	r29, 0x3e	; 62
    da7a:	61 e0       	ldi	r22, 0x01	; 1
    da7c:	80 e0       	ldi	r24, 0x00	; 0
    da7e:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
    da82:	81 e0       	ldi	r24, 0x01	; 1
    da84:	35 df       	rcall	.-406    	; 0xd8f0 <sleepmgr_lock_mode>
    da86:	80 e0       	ldi	r24, 0x00	; 0
    da88:	91 e0       	ldi	r25, 0x01	; 1
    da8a:	20 e4       	ldi	r18, 0x40	; 64
    da8c:	fc 01       	movw	r30, r24
    da8e:	20 83       	st	Z, r18
    da90:	80 e0       	ldi	r24, 0x00	; 0
    da92:	91 e0       	ldi	r25, 0x01	; 1
    da94:	20 e8       	ldi	r18, 0x80	; 128
    da96:	fc 01       	movw	r30, r24
    da98:	20 83       	st	Z, r18
    da9a:	00 00       	nop
    da9c:	df 91       	pop	r29
    da9e:	cf 91       	pop	r28
    daa0:	08 95       	ret

0000daa2 <dma_interrupt>:
 * dma_set_callback() function.
 *
 * \param num DMA channel number to handle interrupt for
 */
static void dma_interrupt(const dma_channel_num_t num)
{
    daa2:	cf 93       	push	r28
    daa4:	df 93       	push	r29
    daa6:	00 d0       	rcall	.+0      	; 0xdaa8 <dma_interrupt+0x6>
    daa8:	1f 92       	push	r1
    daaa:	cd b7       	in	r28, 0x3d	; 61
    daac:	de b7       	in	r29, 0x3e	; 62
    daae:	8c 83       	std	Y+4, r24	; 0x04
	enum dma_channel_status status;
	DMA_CH_t *channel;

	channel = dma_get_channel_address_from_num(num);
    dab0:	8c 81       	ldd	r24, Y+4	; 0x04
    dab2:	88 2f       	mov	r24, r24
    dab4:	90 e0       	ldi	r25, 0x00	; 0
    dab6:	41 96       	adiw	r24, 0x11	; 17
    dab8:	82 95       	swap	r24
    daba:	92 95       	swap	r25
    dabc:	90 7f       	andi	r25, 0xF0	; 240
    dabe:	98 27       	eor	r25, r24
    dac0:	80 7f       	andi	r24, 0xF0	; 240
    dac2:	98 27       	eor	r25, r24
    dac4:	89 83       	std	Y+1, r24	; 0x01
    dac6:	9a 83       	std	Y+2, r25	; 0x02
	status  = dma_get_channel_status(num);
    dac8:	8c 81       	ldd	r24, Y+4	; 0x04
    daca:	3a df       	rcall	.-396    	; 0xd940 <dma_get_channel_status>
    dacc:	8b 83       	std	Y+3, r24	; 0x03

	/* Clear all interrupt flags to be sure */
	channel->CTRLB |= DMA_CH_TRNIF_bm | DMA_CH_ERRIF_bm;
    dace:	89 81       	ldd	r24, Y+1	; 0x01
    dad0:	9a 81       	ldd	r25, Y+2	; 0x02
    dad2:	fc 01       	movw	r30, r24
    dad4:	81 81       	ldd	r24, Z+1	; 0x01
    dad6:	28 2f       	mov	r18, r24
    dad8:	20 63       	ori	r18, 0x30	; 48
    dada:	89 81       	ldd	r24, Y+1	; 0x01
    dadc:	9a 81       	ldd	r25, Y+2	; 0x02
    dade:	fc 01       	movw	r30, r24
    dae0:	21 83       	std	Z+1, r18	; 0x01

	if (dma_data[num].callback) {
    dae2:	8c 81       	ldd	r24, Y+4	; 0x04
    dae4:	88 2f       	mov	r24, r24
    dae6:	90 e0       	ldi	r25, 0x00	; 0
    dae8:	88 0f       	add	r24, r24
    daea:	99 1f       	adc	r25, r25
    daec:	86 58       	subi	r24, 0x86	; 134
    daee:	96 4d       	sbci	r25, 0xD6	; 214
    daf0:	fc 01       	movw	r30, r24
    daf2:	80 81       	ld	r24, Z
    daf4:	91 81       	ldd	r25, Z+1	; 0x01
    daf6:	89 2b       	or	r24, r25
    daf8:	69 f0       	breq	.+26     	; 0xdb14 <dma_interrupt+0x72>
		dma_data[num].callback(status);
    dafa:	8c 81       	ldd	r24, Y+4	; 0x04
    dafc:	88 2f       	mov	r24, r24
    dafe:	90 e0       	ldi	r25, 0x00	; 0
    db00:	88 0f       	add	r24, r24
    db02:	99 1f       	adc	r25, r25
    db04:	86 58       	subi	r24, 0x86	; 134
    db06:	96 4d       	sbci	r25, 0xD6	; 214
    db08:	fc 01       	movw	r30, r24
    db0a:	20 81       	ld	r18, Z
    db0c:	31 81       	ldd	r19, Z+1	; 0x01
    db0e:	8b 81       	ldd	r24, Y+3	; 0x03
    db10:	f9 01       	movw	r30, r18
    db12:	19 95       	eicall
	}
}
    db14:	00 00       	nop
    db16:	24 96       	adiw	r28, 0x04	; 4
    db18:	cd bf       	out	0x3d, r28	; 61
    db1a:	de bf       	out	0x3e, r29	; 62
    db1c:	df 91       	pop	r29
    db1e:	cf 91       	pop	r28
    db20:	08 95       	ret

0000db22 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    db22:	1f 92       	push	r1
    db24:	0f 92       	push	r0
    db26:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    db2a:	0f 92       	push	r0
    db2c:	11 24       	eor	r1, r1
    db2e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    db32:	0f 92       	push	r0
    db34:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    db38:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    db3c:	0f 92       	push	r0
    db3e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    db42:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    db46:	0f 92       	push	r0
    db48:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    db4c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    db50:	0f 92       	push	r0
    db52:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    db56:	2f 93       	push	r18
    db58:	3f 93       	push	r19
    db5a:	4f 93       	push	r20
    db5c:	5f 93       	push	r21
    db5e:	6f 93       	push	r22
    db60:	7f 93       	push	r23
    db62:	8f 93       	push	r24
    db64:	9f 93       	push	r25
    db66:	af 93       	push	r26
    db68:	bf 93       	push	r27
    db6a:	ef 93       	push	r30
    db6c:	ff 93       	push	r31
    db6e:	cf 93       	push	r28
    db70:	df 93       	push	r29
    db72:	cd b7       	in	r28, 0x3d	; 61
    db74:	de b7       	in	r29, 0x3e	; 62
	dma_interrupt(0);
    db76:	80 e0       	ldi	r24, 0x00	; 0
    db78:	94 df       	rcall	.-216    	; 0xdaa2 <dma_interrupt>
}
    db7a:	00 00       	nop
    db7c:	df 91       	pop	r29
    db7e:	cf 91       	pop	r28
    db80:	ff 91       	pop	r31
    db82:	ef 91       	pop	r30
    db84:	bf 91       	pop	r27
    db86:	af 91       	pop	r26
    db88:	9f 91       	pop	r25
    db8a:	8f 91       	pop	r24
    db8c:	7f 91       	pop	r23
    db8e:	6f 91       	pop	r22
    db90:	5f 91       	pop	r21
    db92:	4f 91       	pop	r20
    db94:	3f 91       	pop	r19
    db96:	2f 91       	pop	r18
    db98:	0f 90       	pop	r0
    db9a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    db9e:	0f 90       	pop	r0
    dba0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dba4:	0f 90       	pop	r0
    dba6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dbaa:	0f 90       	pop	r0
    dbac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dbb0:	0f 90       	pop	r0
    dbb2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dbb6:	0f 90       	pop	r0
    dbb8:	1f 90       	pop	r1
    dbba:	18 95       	reti

0000dbbc <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    dbbc:	1f 92       	push	r1
    dbbe:	0f 92       	push	r0
    dbc0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dbc4:	0f 92       	push	r0
    dbc6:	11 24       	eor	r1, r1
    dbc8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dbcc:	0f 92       	push	r0
    dbce:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dbd2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dbd6:	0f 92       	push	r0
    dbd8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dbdc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dbe0:	0f 92       	push	r0
    dbe2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dbe6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dbea:	0f 92       	push	r0
    dbec:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dbf0:	2f 93       	push	r18
    dbf2:	3f 93       	push	r19
    dbf4:	4f 93       	push	r20
    dbf6:	5f 93       	push	r21
    dbf8:	6f 93       	push	r22
    dbfa:	7f 93       	push	r23
    dbfc:	8f 93       	push	r24
    dbfe:	9f 93       	push	r25
    dc00:	af 93       	push	r26
    dc02:	bf 93       	push	r27
    dc04:	ef 93       	push	r30
    dc06:	ff 93       	push	r31
    dc08:	cf 93       	push	r28
    dc0a:	df 93       	push	r29
    dc0c:	cd b7       	in	r28, 0x3d	; 61
    dc0e:	de b7       	in	r29, 0x3e	; 62
	dma_interrupt(1);
    dc10:	81 e0       	ldi	r24, 0x01	; 1
    dc12:	47 df       	rcall	.-370    	; 0xdaa2 <dma_interrupt>
}
    dc14:	00 00       	nop
    dc16:	df 91       	pop	r29
    dc18:	cf 91       	pop	r28
    dc1a:	ff 91       	pop	r31
    dc1c:	ef 91       	pop	r30
    dc1e:	bf 91       	pop	r27
    dc20:	af 91       	pop	r26
    dc22:	9f 91       	pop	r25
    dc24:	8f 91       	pop	r24
    dc26:	7f 91       	pop	r23
    dc28:	6f 91       	pop	r22
    dc2a:	5f 91       	pop	r21
    dc2c:	4f 91       	pop	r20
    dc2e:	3f 91       	pop	r19
    dc30:	2f 91       	pop	r18
    dc32:	0f 90       	pop	r0
    dc34:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dc38:	0f 90       	pop	r0
    dc3a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dc3e:	0f 90       	pop	r0
    dc40:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dc44:	0f 90       	pop	r0
    dc46:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dc4a:	0f 90       	pop	r0
    dc4c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dc50:	0f 90       	pop	r0
    dc52:	1f 90       	pop	r1
    dc54:	18 95       	reti

0000dc56 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    dc56:	1f 92       	push	r1
    dc58:	0f 92       	push	r0
    dc5a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dc5e:	0f 92       	push	r0
    dc60:	11 24       	eor	r1, r1
    dc62:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dc66:	0f 92       	push	r0
    dc68:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dc6c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dc70:	0f 92       	push	r0
    dc72:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dc76:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dc7a:	0f 92       	push	r0
    dc7c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dc80:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dc84:	0f 92       	push	r0
    dc86:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dc8a:	2f 93       	push	r18
    dc8c:	3f 93       	push	r19
    dc8e:	4f 93       	push	r20
    dc90:	5f 93       	push	r21
    dc92:	6f 93       	push	r22
    dc94:	7f 93       	push	r23
    dc96:	8f 93       	push	r24
    dc98:	9f 93       	push	r25
    dc9a:	af 93       	push	r26
    dc9c:	bf 93       	push	r27
    dc9e:	ef 93       	push	r30
    dca0:	ff 93       	push	r31
    dca2:	cf 93       	push	r28
    dca4:	df 93       	push	r29
    dca6:	cd b7       	in	r28, 0x3d	; 61
    dca8:	de b7       	in	r29, 0x3e	; 62
	dma_interrupt(2);
    dcaa:	82 e0       	ldi	r24, 0x02	; 2
    dcac:	fa de       	rcall	.-524    	; 0xdaa2 <dma_interrupt>
}
    dcae:	00 00       	nop
    dcb0:	df 91       	pop	r29
    dcb2:	cf 91       	pop	r28
    dcb4:	ff 91       	pop	r31
    dcb6:	ef 91       	pop	r30
    dcb8:	bf 91       	pop	r27
    dcba:	af 91       	pop	r26
    dcbc:	9f 91       	pop	r25
    dcbe:	8f 91       	pop	r24
    dcc0:	7f 91       	pop	r23
    dcc2:	6f 91       	pop	r22
    dcc4:	5f 91       	pop	r21
    dcc6:	4f 91       	pop	r20
    dcc8:	3f 91       	pop	r19
    dcca:	2f 91       	pop	r18
    dccc:	0f 90       	pop	r0
    dcce:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dcd2:	0f 90       	pop	r0
    dcd4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dcd8:	0f 90       	pop	r0
    dcda:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dcde:	0f 90       	pop	r0
    dce0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dce4:	0f 90       	pop	r0
    dce6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dcea:	0f 90       	pop	r0
    dcec:	1f 90       	pop	r1
    dcee:	18 95       	reti

0000dcf0 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    dcf0:	1f 92       	push	r1
    dcf2:	0f 92       	push	r0
    dcf4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dcf8:	0f 92       	push	r0
    dcfa:	11 24       	eor	r1, r1
    dcfc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dd00:	0f 92       	push	r0
    dd02:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dd06:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dd0a:	0f 92       	push	r0
    dd0c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dd10:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dd14:	0f 92       	push	r0
    dd16:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dd1a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dd1e:	0f 92       	push	r0
    dd20:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dd24:	2f 93       	push	r18
    dd26:	3f 93       	push	r19
    dd28:	4f 93       	push	r20
    dd2a:	5f 93       	push	r21
    dd2c:	6f 93       	push	r22
    dd2e:	7f 93       	push	r23
    dd30:	8f 93       	push	r24
    dd32:	9f 93       	push	r25
    dd34:	af 93       	push	r26
    dd36:	bf 93       	push	r27
    dd38:	ef 93       	push	r30
    dd3a:	ff 93       	push	r31
    dd3c:	cf 93       	push	r28
    dd3e:	df 93       	push	r29
    dd40:	cd b7       	in	r28, 0x3d	; 61
    dd42:	de b7       	in	r29, 0x3e	; 62
	dma_interrupt(3);
    dd44:	83 e0       	ldi	r24, 0x03	; 3
    dd46:	ad de       	rcall	.-678    	; 0xdaa2 <dma_interrupt>
}
    dd48:	00 00       	nop
    dd4a:	df 91       	pop	r29
    dd4c:	cf 91       	pop	r28
    dd4e:	ff 91       	pop	r31
    dd50:	ef 91       	pop	r30
    dd52:	bf 91       	pop	r27
    dd54:	af 91       	pop	r26
    dd56:	9f 91       	pop	r25
    dd58:	8f 91       	pop	r24
    dd5a:	7f 91       	pop	r23
    dd5c:	6f 91       	pop	r22
    dd5e:	5f 91       	pop	r21
    dd60:	4f 91       	pop	r20
    dd62:	3f 91       	pop	r19
    dd64:	2f 91       	pop	r18
    dd66:	0f 90       	pop	r0
    dd68:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    dd6c:	0f 90       	pop	r0
    dd6e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dd72:	0f 90       	pop	r0
    dd74:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    dd78:	0f 90       	pop	r0
    dd7a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    dd7e:	0f 90       	pop	r0
    dd80:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dd84:	0f 90       	pop	r0
    dd86:	1f 90       	pop	r1
    dd88:	18 95       	reti

0000dd8a <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
    dd8a:	cf 93       	push	r28
    dd8c:	df 93       	push	r29
    dd8e:	00 d0       	rcall	.+0      	; 0xdd90 <dma_channel_write_config+0x6>
    dd90:	00 d0       	rcall	.+0      	; 0xdd92 <dma_channel_write_config+0x8>
    dd92:	cd b7       	in	r28, 0x3d	; 61
    dd94:	de b7       	in	r29, 0x3e	; 62
    dd96:	8c 83       	std	Y+4, r24	; 0x04
    dd98:	6d 83       	std	Y+5, r22	; 0x05
    dd9a:	7e 83       	std	Y+6, r23	; 0x06
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
    dd9c:	8c 81       	ldd	r24, Y+4	; 0x04
    dd9e:	88 2f       	mov	r24, r24
    dda0:	90 e0       	ldi	r25, 0x00	; 0
    dda2:	41 96       	adiw	r24, 0x11	; 17
    dda4:	82 95       	swap	r24
    dda6:	92 95       	swap	r25
    dda8:	90 7f       	andi	r25, 0xF0	; 240
    ddaa:	98 27       	eor	r25, r24
    ddac:	80 7f       	andi	r24, 0xF0	; 240
    ddae:	98 27       	eor	r25, r24
    ddb0:	89 83       	std	Y+1, r24	; 0x01
    ddb2:	9a 83       	std	Y+2, r25	; 0x02
	irqflags_t iflags = cpu_irq_save();
    ddb4:	7d dd       	rcall	.-1286   	; 0xd8b0 <cpu_irq_save>
    ddb6:	8b 83       	std	Y+3, r24	; 0x03
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
    ddb8:	8d 81       	ldd	r24, Y+5	; 0x05
    ddba:	9e 81       	ldd	r25, Y+6	; 0x06
    ddbc:	fc 01       	movw	r30, r24
    ddbe:	81 85       	ldd	r24, Z+9	; 0x09
    ddc0:	92 85       	ldd	r25, Z+10	; 0x0a
    ddc2:	28 2f       	mov	r18, r24
    ddc4:	89 81       	ldd	r24, Y+1	; 0x01
    ddc6:	9a 81       	ldd	r25, Y+2	; 0x02
    ddc8:	fc 01       	movw	r30, r24
    ddca:	24 87       	std	Z+12, r18	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
    ddcc:	8d 81       	ldd	r24, Y+5	; 0x05
    ddce:	9e 81       	ldd	r25, Y+6	; 0x06
    ddd0:	fc 01       	movw	r30, r24
    ddd2:	81 85       	ldd	r24, Z+9	; 0x09
    ddd4:	92 85       	ldd	r25, Z+10	; 0x0a
    ddd6:	89 2f       	mov	r24, r25
    ddd8:	99 27       	eor	r25, r25
    ddda:	28 2f       	mov	r18, r24
    dddc:	89 81       	ldd	r24, Y+1	; 0x01
    ddde:	9a 81       	ldd	r25, Y+2	; 0x02
    dde0:	fc 01       	movw	r30, r24
    dde2:	25 87       	std	Z+13, r18	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
    dde4:	89 81       	ldd	r24, Y+1	; 0x01
    dde6:	9a 81       	ldd	r25, Y+2	; 0x02
    dde8:	fc 01       	movw	r30, r24
    ddea:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
    ddec:	8d 81       	ldd	r24, Y+5	; 0x05
    ddee:	9e 81       	ldd	r25, Y+6	; 0x06
    ddf0:	fc 01       	movw	r30, r24
    ddf2:	87 81       	ldd	r24, Z+7	; 0x07
    ddf4:	90 85       	ldd	r25, Z+8	; 0x08
    ddf6:	28 2f       	mov	r18, r24
    ddf8:	89 81       	ldd	r24, Y+1	; 0x01
    ddfa:	9a 81       	ldd	r25, Y+2	; 0x02
    ddfc:	fc 01       	movw	r30, r24
    ddfe:	20 87       	std	Z+8, r18	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
    de00:	8d 81       	ldd	r24, Y+5	; 0x05
    de02:	9e 81       	ldd	r25, Y+6	; 0x06
    de04:	fc 01       	movw	r30, r24
    de06:	87 81       	ldd	r24, Z+7	; 0x07
    de08:	90 85       	ldd	r25, Z+8	; 0x08
    de0a:	89 2f       	mov	r24, r25
    de0c:	99 27       	eor	r25, r25
    de0e:	28 2f       	mov	r18, r24
    de10:	89 81       	ldd	r24, Y+1	; 0x01
    de12:	9a 81       	ldd	r25, Y+2	; 0x02
    de14:	fc 01       	movw	r30, r24
    de16:	21 87       	std	Z+9, r18	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
    de18:	89 81       	ldd	r24, Y+1	; 0x01
    de1a:	9a 81       	ldd	r25, Y+2	; 0x02
    de1c:	fc 01       	movw	r30, r24
    de1e:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
    de20:	8d 81       	ldd	r24, Y+5	; 0x05
    de22:	9e 81       	ldd	r25, Y+6	; 0x06
    de24:	fc 01       	movw	r30, r24
    de26:	22 81       	ldd	r18, Z+2	; 0x02
    de28:	89 81       	ldd	r24, Y+1	; 0x01
    de2a:	9a 81       	ldd	r25, Y+2	; 0x02
    de2c:	fc 01       	movw	r30, r24
    de2e:	22 83       	std	Z+2, r18	; 0x02
	channel->TRIGSRC = config->trigsrc;
    de30:	8d 81       	ldd	r24, Y+5	; 0x05
    de32:	9e 81       	ldd	r25, Y+6	; 0x06
    de34:	fc 01       	movw	r30, r24
    de36:	23 81       	ldd	r18, Z+3	; 0x03
    de38:	89 81       	ldd	r24, Y+1	; 0x01
    de3a:	9a 81       	ldd	r25, Y+2	; 0x02
    de3c:	fc 01       	movw	r30, r24
    de3e:	23 83       	std	Z+3, r18	; 0x03
	channel->TRFCNT = config->trfcnt;
    de40:	8d 81       	ldd	r24, Y+5	; 0x05
    de42:	9e 81       	ldd	r25, Y+6	; 0x06
    de44:	fc 01       	movw	r30, r24
    de46:	24 81       	ldd	r18, Z+4	; 0x04
    de48:	35 81       	ldd	r19, Z+5	; 0x05
    de4a:	89 81       	ldd	r24, Y+1	; 0x01
    de4c:	9a 81       	ldd	r25, Y+2	; 0x02
    de4e:	fc 01       	movw	r30, r24
    de50:	24 83       	std	Z+4, r18	; 0x04
    de52:	35 83       	std	Z+5, r19	; 0x05
	channel->REPCNT = config->repcnt;
    de54:	8d 81       	ldd	r24, Y+5	; 0x05
    de56:	9e 81       	ldd	r25, Y+6	; 0x06
    de58:	fc 01       	movw	r30, r24
    de5a:	26 81       	ldd	r18, Z+6	; 0x06
    de5c:	89 81       	ldd	r24, Y+1	; 0x01
    de5e:	9a 81       	ldd	r25, Y+2	; 0x02
    de60:	fc 01       	movw	r30, r24
    de62:	26 83       	std	Z+6, r18	; 0x06

	channel->CTRLB = config->ctrlb;
    de64:	8d 81       	ldd	r24, Y+5	; 0x05
    de66:	9e 81       	ldd	r25, Y+6	; 0x06
    de68:	fc 01       	movw	r30, r24
    de6a:	21 81       	ldd	r18, Z+1	; 0x01
    de6c:	89 81       	ldd	r24, Y+1	; 0x01
    de6e:	9a 81       	ldd	r25, Y+2	; 0x02
    de70:	fc 01       	movw	r30, r24
    de72:	21 83       	std	Z+1, r18	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
    de74:	8d 81       	ldd	r24, Y+5	; 0x05
    de76:	9e 81       	ldd	r25, Y+6	; 0x06
    de78:	fc 01       	movw	r30, r24
    de7a:	80 81       	ld	r24, Z
    de7c:	28 2f       	mov	r18, r24
    de7e:	2f 77       	andi	r18, 0x7F	; 127
    de80:	89 81       	ldd	r24, Y+1	; 0x01
    de82:	9a 81       	ldd	r25, Y+2	; 0x02
    de84:	fc 01       	movw	r30, r24
    de86:	20 83       	st	Z, r18
#else
	channel->CTRLA = config->ctrla & ~DMA_CH_CHEN_bm;
#endif

	cpu_irq_restore(iflags);
    de88:	8b 81       	ldd	r24, Y+3	; 0x03
    de8a:	22 dd       	rcall	.-1468   	; 0xd8d0 <cpu_irq_restore>
}
    de8c:	00 00       	nop
    de8e:	26 96       	adiw	r28, 0x06	; 6
    de90:	cd bf       	out	0x3d, r28	; 61
    de92:	de bf       	out	0x3e, r29	; 62
    de94:	df 91       	pop	r29
    de96:	cf 91       	pop	r28
    de98:	08 95       	ret

0000de9a <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
    de9a:	1f 92       	push	r1
    de9c:	0f 92       	push	r0
    de9e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    dea2:	0f 92       	push	r0
    dea4:	11 24       	eor	r1, r1
    dea6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    deaa:	0f 92       	push	r0
    deac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    deb0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    deb4:	0f 92       	push	r0
    deb6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    deba:	8f 93       	push	r24
    debc:	9f 93       	push	r25
    debe:	cf 93       	push	r28
    dec0:	df 93       	push	r29
    dec2:	cd b7       	in	r28, 0x3d	; 61
    dec4:	de b7       	in	r29, 0x3e	; 62
	rtc_data.counter_high++;
    dec6:	80 91 82 29 	lds	r24, 0x2982	; 0x802982 <rtc_data>
    deca:	90 91 83 29 	lds	r25, 0x2983	; 0x802983 <rtc_data+0x1>
    dece:	01 96       	adiw	r24, 0x01	; 1
    ded0:	80 93 82 29 	sts	0x2982, r24	; 0x802982 <rtc_data>
    ded4:	90 93 83 29 	sts	0x2983, r25	; 0x802983 <rtc_data+0x1>
}
    ded8:	00 00       	nop
    deda:	df 91       	pop	r29
    dedc:	cf 91       	pop	r28
    dede:	9f 91       	pop	r25
    dee0:	8f 91       	pop	r24
    dee2:	0f 90       	pop	r0
    dee4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    dee8:	0f 90       	pop	r0
    deea:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    deee:	0f 90       	pop	r0
    def0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    def4:	0f 90       	pop	r0
    def6:	1f 90       	pop	r1
    def8:	18 95       	reti

0000defa <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
    defa:	1f 92       	push	r1
    defc:	0f 92       	push	r0
    defe:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    df02:	0f 92       	push	r0
    df04:	11 24       	eor	r1, r1
    df06:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    df0a:	0f 92       	push	r0
    df0c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    df10:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    df14:	0f 92       	push	r0
    df16:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    df1a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    df1e:	0f 92       	push	r0
    df20:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    df24:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    df28:	0f 92       	push	r0
    df2a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    df2e:	2f 93       	push	r18
    df30:	3f 93       	push	r19
    df32:	4f 93       	push	r20
    df34:	5f 93       	push	r21
    df36:	6f 93       	push	r22
    df38:	7f 93       	push	r23
    df3a:	8f 93       	push	r24
    df3c:	9f 93       	push	r25
    df3e:	af 93       	push	r26
    df40:	bf 93       	push	r27
    df42:	ef 93       	push	r30
    df44:	ff 93       	push	r31
    df46:	cf 93       	push	r28
    df48:	df 93       	push	r29
    df4a:	cd b7       	in	r28, 0x3d	; 61
    df4c:	de b7       	in	r29, 0x3e	; 62
    df4e:	28 97       	sbiw	r28, 0x08	; 8
    df50:	cd bf       	out	0x3d, r28	; 61
    df52:	de bf       	out	0x3e, r29	; 62
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
    df54:	20 91 82 29 	lds	r18, 0x2982	; 0x802982 <rtc_data>
    df58:	30 91 83 29 	lds	r19, 0x2983	; 0x802983 <rtc_data+0x1>
    df5c:	80 91 84 29 	lds	r24, 0x2984	; 0x802984 <rtc_data+0x2>
    df60:	90 91 85 29 	lds	r25, 0x2985	; 0x802985 <rtc_data+0x3>
    df64:	28 17       	cp	r18, r24
    df66:	39 07       	cpc	r19, r25
    df68:	08 f4       	brcc	.+2      	; 0xdf6c <__vector_11+0x72>
    df6a:	63 c0       	rjmp	.+198    	; 0xe032 <__vector_11+0x138>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    df6c:	80 e0       	ldi	r24, 0x00	; 0
    df6e:	94 e0       	ldi	r25, 0x04	; 4
    df70:	21 e0       	ldi	r18, 0x01	; 1
    df72:	fc 01       	movw	r30, r24
    df74:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    df76:	80 91 88 29 	lds	r24, 0x2988	; 0x802988 <rtc_data+0x6>
    df7a:	90 91 89 29 	lds	r25, 0x2989	; 0x802989 <rtc_data+0x7>
    df7e:	89 2b       	or	r24, r25
    df80:	09 f4       	brne	.+2      	; 0xdf84 <__vector_11+0x8a>
    df82:	57 c0       	rjmp	.+174    	; 0xe032 <__vector_11+0x138>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    df84:	80 91 82 29 	lds	r24, 0x2982	; 0x802982 <rtc_data>
    df88:	90 91 83 29 	lds	r25, 0x2983	; 0x802983 <rtc_data+0x1>
    df8c:	cc 01       	movw	r24, r24
    df8e:	a0 e0       	ldi	r26, 0x00	; 0
    df90:	b0 e0       	ldi	r27, 0x00	; 0
    df92:	ac 01       	movw	r20, r24
    df94:	33 27       	eor	r19, r19
    df96:	22 27       	eor	r18, r18
					| RTC.CNT;
    df98:	80 e0       	ldi	r24, 0x00	; 0
    df9a:	94 e0       	ldi	r25, 0x04	; 4
    df9c:	fc 01       	movw	r30, r24
    df9e:	80 85       	ldd	r24, Z+8	; 0x08
    dfa0:	91 85       	ldd	r25, Z+9	; 0x09
    dfa2:	cc 01       	movw	r24, r24
    dfa4:	a0 e0       	ldi	r26, 0x00	; 0
    dfa6:	b0 e0       	ldi	r27, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    dfa8:	82 2b       	or	r24, r18
    dfaa:	93 2b       	or	r25, r19
    dfac:	a4 2b       	or	r26, r20
    dfae:	b5 2b       	or	r27, r21
    dfb0:	89 83       	std	Y+1, r24	; 0x01
    dfb2:	9a 83       	std	Y+2, r25	; 0x02
    dfb4:	ab 83       	std	Y+3, r26	; 0x03
    dfb6:	bc 83       	std	Y+4, r27	; 0x04
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    dfb8:	80 91 84 29 	lds	r24, 0x2984	; 0x802984 <rtc_data+0x2>
    dfbc:	90 91 85 29 	lds	r25, 0x2985	; 0x802985 <rtc_data+0x3>
    dfc0:	cc 01       	movw	r24, r24
    dfc2:	a0 e0       	ldi	r26, 0x00	; 0
    dfc4:	b0 e0       	ldi	r27, 0x00	; 0
    dfc6:	ac 01       	movw	r20, r24
    dfc8:	33 27       	eor	r19, r19
    dfca:	22 27       	eor	r18, r18
					| rtc_data.alarm_low;
    dfcc:	80 91 86 29 	lds	r24, 0x2986	; 0x802986 <rtc_data+0x4>
    dfd0:	90 91 87 29 	lds	r25, 0x2987	; 0x802987 <rtc_data+0x5>
    dfd4:	cc 01       	movw	r24, r24
    dfd6:	a0 e0       	ldi	r26, 0x00	; 0
    dfd8:	b0 e0       	ldi	r27, 0x00	; 0
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    dfda:	82 2b       	or	r24, r18
    dfdc:	93 2b       	or	r25, r19
    dfde:	a4 2b       	or	r26, r20
    dfe0:	b5 2b       	or	r27, r21
    dfe2:	8d 83       	std	Y+5, r24	; 0x05
    dfe4:	9e 83       	std	Y+6, r25	; 0x06
    dfe6:	af 83       	std	Y+7, r26	; 0x07
    dfe8:	b8 87       	std	Y+8, r27	; 0x08
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    dfea:	2d 81       	ldd	r18, Y+5	; 0x05
    dfec:	3e 81       	ldd	r19, Y+6	; 0x06
    dfee:	4f 81       	ldd	r20, Y+7	; 0x07
    dff0:	58 85       	ldd	r21, Y+8	; 0x08
    dff2:	89 81       	ldd	r24, Y+1	; 0x01
    dff4:	9a 81       	ldd	r25, Y+2	; 0x02
    dff6:	ab 81       	ldd	r26, Y+3	; 0x03
    dff8:	bc 81       	ldd	r27, Y+4	; 0x04
    dffa:	28 17       	cp	r18, r24
    dffc:	39 07       	cpc	r19, r25
    dffe:	4a 07       	cpc	r20, r26
    e000:	5b 07       	cpc	r21, r27
    e002:	58 f0       	brcs	.+22     	; 0xe01a <__vector_11+0x120>
				count = alarm + 1;
    e004:	8d 81       	ldd	r24, Y+5	; 0x05
    e006:	9e 81       	ldd	r25, Y+6	; 0x06
    e008:	af 81       	ldd	r26, Y+7	; 0x07
    e00a:	b8 85       	ldd	r27, Y+8	; 0x08
    e00c:	01 96       	adiw	r24, 0x01	; 1
    e00e:	a1 1d       	adc	r26, r1
    e010:	b1 1d       	adc	r27, r1
    e012:	89 83       	std	Y+1, r24	; 0x01
    e014:	9a 83       	std	Y+2, r25	; 0x02
    e016:	ab 83       	std	Y+3, r26	; 0x03
    e018:	bc 83       	std	Y+4, r27	; 0x04
			rtc_data.callback(count);
    e01a:	20 91 88 29 	lds	r18, 0x2988	; 0x802988 <rtc_data+0x6>
    e01e:	30 91 89 29 	lds	r19, 0x2989	; 0x802989 <rtc_data+0x7>
    e022:	89 81       	ldd	r24, Y+1	; 0x01
    e024:	9a 81       	ldd	r25, Y+2	; 0x02
    e026:	ab 81       	ldd	r26, Y+3	; 0x03
    e028:	bc 81       	ldd	r27, Y+4	; 0x04
    e02a:	bc 01       	movw	r22, r24
    e02c:	cd 01       	movw	r24, r26
    e02e:	f9 01       	movw	r30, r18
    e030:	19 95       	eicall
		}
	}
}
    e032:	00 00       	nop
    e034:	28 96       	adiw	r28, 0x08	; 8
    e036:	cd bf       	out	0x3d, r28	; 61
    e038:	de bf       	out	0x3e, r29	; 62
    e03a:	df 91       	pop	r29
    e03c:	cf 91       	pop	r28
    e03e:	ff 91       	pop	r31
    e040:	ef 91       	pop	r30
    e042:	bf 91       	pop	r27
    e044:	af 91       	pop	r26
    e046:	9f 91       	pop	r25
    e048:	8f 91       	pop	r24
    e04a:	7f 91       	pop	r23
    e04c:	6f 91       	pop	r22
    e04e:	5f 91       	pop	r21
    e050:	4f 91       	pop	r20
    e052:	3f 91       	pop	r19
    e054:	2f 91       	pop	r18
    e056:	0f 90       	pop	r0
    e058:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    e05c:	0f 90       	pop	r0
    e05e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    e062:	0f 90       	pop	r0
    e064:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    e068:	0f 90       	pop	r0
    e06a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    e06e:	0f 90       	pop	r0
    e070:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    e074:	0f 90       	pop	r0
    e076:	1f 90       	pop	r1
    e078:	18 95       	reti

0000e07a <cpu_irq_save>:
	ep &= USB_EP_ADDR_MASK;
	if (ep == 0) {
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
}
    e07a:	cf 93       	push	r28
    e07c:	df 93       	push	r29
    e07e:	1f 92       	push	r1
    e080:	cd b7       	in	r28, 0x3d	; 61
    e082:	de b7       	in	r29, 0x3e	; 62
    e084:	8f e3       	ldi	r24, 0x3F	; 63
    e086:	90 e0       	ldi	r25, 0x00	; 0
    e088:	fc 01       	movw	r30, r24
    e08a:	80 81       	ld	r24, Z
    e08c:	89 83       	std	Y+1, r24	; 0x01
    e08e:	f8 94       	cli
    e090:	89 81       	ldd	r24, Y+1	; 0x01
    e092:	0f 90       	pop	r0
    e094:	df 91       	pop	r29
    e096:	cf 91       	pop	r28
    e098:	08 95       	ret

0000e09a <cpu_irq_restore>:
    e09a:	cf 93       	push	r28
    e09c:	df 93       	push	r29
    e09e:	1f 92       	push	r1
    e0a0:	cd b7       	in	r28, 0x3d	; 61
    e0a2:	de b7       	in	r29, 0x3e	; 62
    e0a4:	89 83       	std	Y+1, r24	; 0x01
    e0a6:	8f e3       	ldi	r24, 0x3F	; 63
    e0a8:	90 e0       	ldi	r25, 0x00	; 0
    e0aa:	29 81       	ldd	r18, Y+1	; 0x01
    e0ac:	fc 01       	movw	r30, r24
    e0ae:	20 83       	st	Z, r18
    e0b0:	00 00       	nop
    e0b2:	0f 90       	pop	r0
    e0b4:	df 91       	pop	r29
    e0b6:	cf 91       	pop	r28
    e0b8:	08 95       	ret

0000e0ba <nvm_read_production_signature_row>:
    e0ba:	cf 93       	push	r28
    e0bc:	df 93       	push	r29
    e0be:	1f 92       	push	r1
    e0c0:	cd b7       	in	r28, 0x3d	; 61
    e0c2:	de b7       	in	r29, 0x3e	; 62
    e0c4:	89 83       	std	Y+1, r24	; 0x01
    e0c6:	89 81       	ldd	r24, Y+1	; 0x01
    e0c8:	88 2f       	mov	r24, r24
    e0ca:	90 e0       	ldi	r25, 0x00	; 0
    e0cc:	bc 01       	movw	r22, r24
    e0ce:	82 e0       	ldi	r24, 0x02	; 2
    e0d0:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <nvm_read_byte>
    e0d4:	0f 90       	pop	r0
    e0d6:	df 91       	pop	r29
    e0d8:	cf 91       	pop	r28
    e0da:	08 95       	ret

0000e0dc <usb_pad_init>:
    e0dc:	cf 93       	push	r28
    e0de:	df 93       	push	r29
    e0e0:	1f 92       	push	r1
    e0e2:	cd b7       	in	r28, 0x3d	; 61
    e0e4:	de b7       	in	r29, 0x3e	; 62
    e0e6:	8a e1       	ldi	r24, 0x1A	; 26
    e0e8:	e8 df       	rcall	.-48     	; 0xe0ba <nvm_read_production_signature_row>
    e0ea:	89 83       	std	Y+1, r24	; 0x01
    e0ec:	89 81       	ldd	r24, Y+1	; 0x01
    e0ee:	8f 3f       	cpi	r24, 0xFF	; 255
    e0f0:	31 f0       	breq	.+12     	; 0xe0fe <usb_pad_init+0x22>
    e0f2:	8a ef       	ldi	r24, 0xFA	; 250
    e0f4:	94 e0       	ldi	r25, 0x04	; 4
    e0f6:	29 81       	ldd	r18, Y+1	; 0x01
    e0f8:	fc 01       	movw	r30, r24
    e0fa:	20 83       	st	Z, r18
    e0fc:	05 c0       	rjmp	.+10     	; 0xe108 <usb_pad_init+0x2c>
    e0fe:	8a ef       	ldi	r24, 0xFA	; 250
    e100:	94 e0       	ldi	r25, 0x04	; 4
    e102:	2f e1       	ldi	r18, 0x1F	; 31
    e104:	fc 01       	movw	r30, r24
    e106:	20 83       	st	Z, r18
    e108:	8b e1       	ldi	r24, 0x1B	; 27
    e10a:	d7 df       	rcall	.-82     	; 0xe0ba <nvm_read_production_signature_row>
    e10c:	89 83       	std	Y+1, r24	; 0x01
    e10e:	89 81       	ldd	r24, Y+1	; 0x01
    e110:	8f 3f       	cpi	r24, 0xFF	; 255
    e112:	31 f0       	breq	.+12     	; 0xe120 <usb_pad_init+0x44>
    e114:	8b ef       	ldi	r24, 0xFB	; 251
    e116:	94 e0       	ldi	r25, 0x04	; 4
    e118:	29 81       	ldd	r18, Y+1	; 0x01
    e11a:	fc 01       	movw	r30, r24
    e11c:	20 83       	st	Z, r18
    e11e:	05 c0       	rjmp	.+10     	; 0xe12a <usb_pad_init+0x4e>
    e120:	8b ef       	ldi	r24, 0xFB	; 251
    e122:	94 e0       	ldi	r25, 0x04	; 4
    e124:	2f e1       	ldi	r18, 0x1F	; 31
    e126:	fc 01       	movw	r30, r24
    e128:	20 83       	st	Z, r18
    e12a:	00 00       	nop
    e12c:	0f 90       	pop	r0
    e12e:	df 91       	pop	r29
    e130:	cf 91       	pop	r28
    e132:	08 95       	ret

0000e134 <sleepmgr_lock_mode>:
    e134:	cf 93       	push	r28
    e136:	df 93       	push	r29
    e138:	1f 92       	push	r1
    e13a:	1f 92       	push	r1
    e13c:	cd b7       	in	r28, 0x3d	; 61
    e13e:	de b7       	in	r29, 0x3e	; 62
    e140:	8a 83       	std	Y+2, r24	; 0x02
    e142:	8a 81       	ldd	r24, Y+2	; 0x02
    e144:	88 2f       	mov	r24, r24
    e146:	90 e0       	ldi	r25, 0x00	; 0
    e148:	89 54       	subi	r24, 0x49	; 73
    e14a:	96 4d       	sbci	r25, 0xD6	; 214
    e14c:	fc 01       	movw	r30, r24
    e14e:	80 81       	ld	r24, Z
    e150:	8f 3f       	cpi	r24, 0xFF	; 255
    e152:	09 f4       	brne	.+2      	; 0xe156 <sleepmgr_lock_mode+0x22>
    e154:	ff cf       	rjmp	.-2      	; 0xe154 <sleepmgr_lock_mode+0x20>
    e156:	91 df       	rcall	.-222    	; 0xe07a <cpu_irq_save>
    e158:	89 83       	std	Y+1, r24	; 0x01
    e15a:	8a 81       	ldd	r24, Y+2	; 0x02
    e15c:	88 2f       	mov	r24, r24
    e15e:	90 e0       	ldi	r25, 0x00	; 0
    e160:	9c 01       	movw	r18, r24
    e162:	29 54       	subi	r18, 0x49	; 73
    e164:	36 4d       	sbci	r19, 0xD6	; 214
    e166:	f9 01       	movw	r30, r18
    e168:	20 81       	ld	r18, Z
    e16a:	2f 5f       	subi	r18, 0xFF	; 255
    e16c:	89 54       	subi	r24, 0x49	; 73
    e16e:	96 4d       	sbci	r25, 0xD6	; 214
    e170:	fc 01       	movw	r30, r24
    e172:	20 83       	st	Z, r18
    e174:	89 81       	ldd	r24, Y+1	; 0x01
    e176:	91 df       	rcall	.-222    	; 0xe09a <cpu_irq_restore>
    e178:	00 00       	nop
    e17a:	0f 90       	pop	r0
    e17c:	0f 90       	pop	r0
    e17e:	df 91       	pop	r29
    e180:	cf 91       	pop	r28
    e182:	08 95       	ret

0000e184 <sleepmgr_unlock_mode>:
    e184:	cf 93       	push	r28
    e186:	df 93       	push	r29
    e188:	1f 92       	push	r1
    e18a:	1f 92       	push	r1
    e18c:	cd b7       	in	r28, 0x3d	; 61
    e18e:	de b7       	in	r29, 0x3e	; 62
    e190:	8a 83       	std	Y+2, r24	; 0x02
    e192:	8a 81       	ldd	r24, Y+2	; 0x02
    e194:	88 2f       	mov	r24, r24
    e196:	90 e0       	ldi	r25, 0x00	; 0
    e198:	89 54       	subi	r24, 0x49	; 73
    e19a:	96 4d       	sbci	r25, 0xD6	; 214
    e19c:	fc 01       	movw	r30, r24
    e19e:	80 81       	ld	r24, Z
    e1a0:	88 23       	and	r24, r24
    e1a2:	09 f4       	brne	.+2      	; 0xe1a6 <sleepmgr_unlock_mode+0x22>
    e1a4:	ff cf       	rjmp	.-2      	; 0xe1a4 <sleepmgr_unlock_mode+0x20>
    e1a6:	69 df       	rcall	.-302    	; 0xe07a <cpu_irq_save>
    e1a8:	89 83       	std	Y+1, r24	; 0x01
    e1aa:	8a 81       	ldd	r24, Y+2	; 0x02
    e1ac:	88 2f       	mov	r24, r24
    e1ae:	90 e0       	ldi	r25, 0x00	; 0
    e1b0:	9c 01       	movw	r18, r24
    e1b2:	29 54       	subi	r18, 0x49	; 73
    e1b4:	36 4d       	sbci	r19, 0xD6	; 214
    e1b6:	f9 01       	movw	r30, r18
    e1b8:	20 81       	ld	r18, Z
    e1ba:	21 50       	subi	r18, 0x01	; 1
    e1bc:	89 54       	subi	r24, 0x49	; 73
    e1be:	96 4d       	sbci	r25, 0xD6	; 214
    e1c0:	fc 01       	movw	r30, r24
    e1c2:	20 83       	st	Z, r18
    e1c4:	89 81       	ldd	r24, Y+1	; 0x01
    e1c6:	69 df       	rcall	.-302    	; 0xe09a <cpu_irq_restore>
    e1c8:	00 00       	nop
    e1ca:	0f 90       	pop	r0
    e1cc:	0f 90       	pop	r0
    e1ce:	df 91       	pop	r29
    e1d0:	cf 91       	pop	r28
    e1d2:	08 95       	ret

0000e1d4 <udd_sleep_mode>:
    e1d4:	cf 93       	push	r28
    e1d6:	df 93       	push	r29
    e1d8:	1f 92       	push	r1
    e1da:	cd b7       	in	r28, 0x3d	; 61
    e1dc:	de b7       	in	r29, 0x3e	; 62
    e1de:	89 83       	std	Y+1, r24	; 0x01
    e1e0:	99 81       	ldd	r25, Y+1	; 0x01
    e1e2:	81 e0       	ldi	r24, 0x01	; 1
    e1e4:	89 27       	eor	r24, r25
    e1e6:	88 23       	and	r24, r24
    e1e8:	31 f0       	breq	.+12     	; 0xe1f6 <udd_sleep_mode+0x22>
    e1ea:	80 91 de 23 	lds	r24, 0x23DE	; 0x8023de <udd_b_idle>
    e1ee:	88 23       	and	r24, r24
    e1f0:	11 f0       	breq	.+4      	; 0xe1f6 <udd_sleep_mode+0x22>
    e1f2:	81 e0       	ldi	r24, 0x01	; 1
    e1f4:	c7 df       	rcall	.-114    	; 0xe184 <sleepmgr_unlock_mode>
    e1f6:	89 81       	ldd	r24, Y+1	; 0x01
    e1f8:	88 23       	and	r24, r24
    e1fa:	41 f0       	breq	.+16     	; 0xe20c <udd_sleep_mode+0x38>
    e1fc:	90 91 de 23 	lds	r25, 0x23DE	; 0x8023de <udd_b_idle>
    e200:	81 e0       	ldi	r24, 0x01	; 1
    e202:	89 27       	eor	r24, r25
    e204:	88 23       	and	r24, r24
    e206:	11 f0       	breq	.+4      	; 0xe20c <udd_sleep_mode+0x38>
    e208:	81 e0       	ldi	r24, 0x01	; 1
    e20a:	94 df       	rcall	.-216    	; 0xe134 <sleepmgr_lock_mode>
    e20c:	89 81       	ldd	r24, Y+1	; 0x01
    e20e:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <udd_b_idle>
    e212:	00 00       	nop
    e214:	0f 90       	pop	r0
    e216:	df 91       	pop	r29
    e218:	cf 91       	pop	r28
    e21a:	08 95       	ret

0000e21c <udd_enable>:
    e21c:	cf 93       	push	r28
    e21e:	df 93       	push	r29
    e220:	1f 92       	push	r1
    e222:	1f 92       	push	r1
    e224:	cd b7       	in	r28, 0x3d	; 61
    e226:	de b7       	in	r29, 0x3e	; 62
    e228:	80 e6       	ldi	r24, 0x60	; 96
    e22a:	90 e0       	ldi	r25, 0x00	; 0
    e22c:	fc 01       	movw	r30, r24
    e22e:	10 82       	st	Z, r1
    e230:	80 e3       	ldi	r24, 0x30	; 48
    e232:	0e 94 d7 9a 	call	0x135ae	; 0x135ae <sysclk_enable_usb>
    e236:	80 ec       	ldi	r24, 0xC0	; 192
    e238:	94 e0       	ldi	r25, 0x04	; 4
    e23a:	20 ec       	ldi	r18, 0xC0	; 192
    e23c:	34 e0       	ldi	r19, 0x04	; 4
    e23e:	f9 01       	movw	r30, r18
    e240:	20 81       	ld	r18, Z
    e242:	20 64       	ori	r18, 0x40	; 64
    e244:	fc 01       	movw	r30, r24
    e246:	20 83       	st	Z, r18
    e248:	80 e6       	ldi	r24, 0x60	; 96
    e24a:	90 e0       	ldi	r25, 0x00	; 0
    e24c:	21 e0       	ldi	r18, 0x01	; 1
    e24e:	fc 01       	movw	r30, r24
    e250:	20 83       	st	Z, r18
    e252:	13 df       	rcall	.-474    	; 0xe07a <cpu_irq_save>
    e254:	8a 83       	std	Y+2, r24	; 0x02
    e256:	19 82       	std	Y+1, r1	; 0x01
    e258:	10 c0       	rjmp	.+32     	; 0xe27a <udd_enable+0x5e>
    e25a:	89 81       	ldd	r24, Y+1	; 0x01
    e25c:	88 2f       	mov	r24, r24
    e25e:	90 e0       	ldi	r25, 0x00	; 0
    e260:	88 0f       	add	r24, r24
    e262:	99 1f       	adc	r25, r25
    e264:	88 0f       	add	r24, r24
    e266:	99 1f       	adc	r25, r25
    e268:	88 0f       	add	r24, r24
    e26a:	99 1f       	adc	r25, r25
    e26c:	8f 50       	subi	r24, 0x0F	; 15
    e26e:	9c 4d       	sbci	r25, 0xDC	; 220
    e270:	fc 01       	movw	r30, r24
    e272:	10 82       	st	Z, r1
    e274:	89 81       	ldd	r24, Y+1	; 0x01
    e276:	8f 5f       	subi	r24, 0xFF	; 255
    e278:	89 83       	std	Y+1, r24	; 0x01
    e27a:	89 81       	ldd	r24, Y+1	; 0x01
    e27c:	86 30       	cpi	r24, 0x06	; 6
    e27e:	68 f3       	brcs	.-38     	; 0xe25a <udd_enable+0x3e>
    e280:	19 82       	std	Y+1, r1	; 0x01
    e282:	16 c0       	rjmp	.+44     	; 0xe2b0 <udd_enable+0x94>
    e284:	89 81       	ldd	r24, Y+1	; 0x01
    e286:	28 2f       	mov	r18, r24
    e288:	30 e0       	ldi	r19, 0x00	; 0
    e28a:	c9 01       	movw	r24, r18
    e28c:	88 0f       	add	r24, r24
    e28e:	99 1f       	adc	r25, r25
    e290:	88 0f       	add	r24, r24
    e292:	99 1f       	adc	r25, r25
    e294:	88 0f       	add	r24, r24
    e296:	99 1f       	adc	r25, r25
    e298:	82 0f       	add	r24, r18
    e29a:	93 1f       	adc	r25, r19
    e29c:	8b 58       	subi	r24, 0x8B	; 139
    e29e:	9b 4d       	sbci	r25, 0xDB	; 219
    e2a0:	fc 01       	movw	r30, r24
    e2a2:	20 81       	ld	r18, Z
    e2a4:	2e 7f       	andi	r18, 0xFE	; 254
    e2a6:	fc 01       	movw	r30, r24
    e2a8:	20 83       	st	Z, r18
    e2aa:	89 81       	ldd	r24, Y+1	; 0x01
    e2ac:	8f 5f       	subi	r24, 0xFF	; 255
    e2ae:	89 83       	std	Y+1, r24	; 0x01
    e2b0:	89 81       	ldd	r24, Y+1	; 0x01
    e2b2:	84 30       	cpi	r24, 0x04	; 4
    e2b4:	38 f3       	brcs	.-50     	; 0xe284 <udd_enable+0x68>
    e2b6:	12 df       	rcall	.-476    	; 0xe0dc <usb_pad_init>
    e2b8:	80 ec       	ldi	r24, 0xC0	; 192
    e2ba:	94 e0       	ldi	r25, 0x04	; 4
    e2bc:	20 ec       	ldi	r18, 0xC0	; 192
    e2be:	34 e0       	ldi	r19, 0x04	; 4
    e2c0:	f9 01       	movw	r30, r18
    e2c2:	20 81       	ld	r18, Z
    e2c4:	22 60       	ori	r18, 0x02	; 2
    e2c6:	fc 01       	movw	r30, r24
    e2c8:	20 83       	st	Z, r18
    e2ca:	80 ec       	ldi	r24, 0xC0	; 192
    e2cc:	94 e0       	ldi	r25, 0x04	; 4
    e2ce:	20 ec       	ldi	r18, 0xC0	; 192
    e2d0:	34 e0       	ldi	r19, 0x04	; 4
    e2d2:	f9 01       	movw	r30, r18
    e2d4:	20 81       	ld	r18, Z
    e2d6:	20 68       	ori	r18, 0x80	; 128
    e2d8:	fc 01       	movw	r30, r24
    e2da:	20 83       	st	Z, r18
    e2dc:	80 ec       	ldi	r24, 0xC0	; 192
    e2de:	94 e0       	ldi	r25, 0x04	; 4
    e2e0:	20 ec       	ldi	r18, 0xC0	; 192
    e2e2:	34 e0       	ldi	r19, 0x04	; 4
    e2e4:	f9 01       	movw	r30, r18
    e2e6:	20 81       	ld	r18, Z
    e2e8:	20 61       	ori	r18, 0x10	; 16
    e2ea:	fc 01       	movw	r30, r24
    e2ec:	20 83       	st	Z, r18
    e2ee:	80 ec       	ldi	r24, 0xC0	; 192
    e2f0:	94 e0       	ldi	r25, 0x04	; 4
    e2f2:	20 ef       	ldi	r18, 0xF0	; 240
    e2f4:	33 e2       	ldi	r19, 0x23	; 35
    e2f6:	fc 01       	movw	r30, r24
    e2f8:	26 83       	std	Z+6, r18	; 0x06
    e2fa:	37 83       	std	Z+7, r19	; 0x07
    e2fc:	80 ec       	ldi	r24, 0xC0	; 192
    e2fe:	94 e0       	ldi	r25, 0x04	; 4
    e300:	20 ec       	ldi	r18, 0xC0	; 192
    e302:	34 e0       	ldi	r19, 0x04	; 4
    e304:	f9 01       	movw	r30, r18
    e306:	20 81       	ld	r18, Z
    e308:	20 62       	ori	r18, 0x20	; 32
    e30a:	fc 01       	movw	r30, r24
    e30c:	20 83       	st	Z, r18
    e30e:	85 ec       	ldi	r24, 0xC5	; 197
    e310:	94 e0       	ldi	r25, 0x04	; 4
    e312:	2f ef       	ldi	r18, 0xFF	; 255
    e314:	fc 01       	movw	r30, r24
    e316:	20 83       	st	Z, r18
    e318:	88 ec       	ldi	r24, 0xC8	; 200
    e31a:	94 e0       	ldi	r25, 0x04	; 4
    e31c:	28 ec       	ldi	r18, 0xC8	; 200
    e31e:	34 e0       	ldi	r19, 0x04	; 4
    e320:	f9 01       	movw	r30, r18
    e322:	20 81       	ld	r18, Z
    e324:	21 60       	ori	r18, 0x01	; 1
    e326:	fc 01       	movw	r30, r24
    e328:	20 83       	st	Z, r18
    e32a:	10 92 de 23 	sts	0x23DE, r1	; 0x8023de <udd_b_idle>
    e32e:	85 e0       	ldi	r24, 0x05	; 5
    e330:	01 df       	rcall	.-510    	; 0xe134 <sleepmgr_lock_mode>
    e332:	08 d0       	rcall	.+16     	; 0xe344 <udd_attach>
    e334:	8a 81       	ldd	r24, Y+2	; 0x02
    e336:	b1 de       	rcall	.-670    	; 0xe09a <cpu_irq_restore>
    e338:	00 00       	nop
    e33a:	0f 90       	pop	r0
    e33c:	0f 90       	pop	r0
    e33e:	df 91       	pop	r29
    e340:	cf 91       	pop	r28
    e342:	08 95       	ret

0000e344 <udd_attach>:
    e344:	cf 93       	push	r28
    e346:	df 93       	push	r29
    e348:	1f 92       	push	r1
    e34a:	cd b7       	in	r28, 0x3d	; 61
    e34c:	de b7       	in	r29, 0x3e	; 62
    e34e:	95 de       	rcall	.-726    	; 0xe07a <cpu_irq_save>
    e350:	89 83       	std	Y+1, r24	; 0x01
    e352:	81 e0       	ldi	r24, 0x01	; 1
    e354:	3f df       	rcall	.-386    	; 0xe1d4 <udd_sleep_mode>
    e356:	8a ec       	ldi	r24, 0xCA	; 202
    e358:	94 e0       	ldi	r25, 0x04	; 4
    e35a:	20 e4       	ldi	r18, 0x40	; 64
    e35c:	fc 01       	movw	r30, r24
    e35e:	20 83       	st	Z, r18
    e360:	8a ec       	ldi	r24, 0xCA	; 202
    e362:	94 e0       	ldi	r25, 0x04	; 4
    e364:	20 e2       	ldi	r18, 0x20	; 32
    e366:	fc 01       	movw	r30, r24
    e368:	20 83       	st	Z, r18
    e36a:	81 ec       	ldi	r24, 0xC1	; 193
    e36c:	94 e0       	ldi	r25, 0x04	; 4
    e36e:	21 ec       	ldi	r18, 0xC1	; 193
    e370:	34 e0       	ldi	r19, 0x04	; 4
    e372:	f9 01       	movw	r30, r18
    e374:	20 81       	ld	r18, Z
    e376:	21 60       	ori	r18, 0x01	; 1
    e378:	fc 01       	movw	r30, r24
    e37a:	20 83       	st	Z, r18
    e37c:	89 ec       	ldi	r24, 0xC9	; 201
    e37e:	94 e0       	ldi	r25, 0x04	; 4
    e380:	29 ec       	ldi	r18, 0xC9	; 201
    e382:	34 e0       	ldi	r19, 0x04	; 4
    e384:	f9 01       	movw	r30, r18
    e386:	20 81       	ld	r18, Z
    e388:	22 60       	ori	r18, 0x02	; 2
    e38a:	fc 01       	movw	r30, r24
    e38c:	20 83       	st	Z, r18
    e38e:	88 ec       	ldi	r24, 0xC8	; 200
    e390:	94 e0       	ldi	r25, 0x04	; 4
    e392:	28 ec       	ldi	r18, 0xC8	; 200
    e394:	34 e0       	ldi	r19, 0x04	; 4
    e396:	f9 01       	movw	r30, r18
    e398:	20 81       	ld	r18, Z
    e39a:	20 64       	ori	r18, 0x40	; 64
    e39c:	fc 01       	movw	r30, r24
    e39e:	20 83       	st	Z, r18
    e3a0:	89 ec       	ldi	r24, 0xC9	; 201
    e3a2:	94 e0       	ldi	r25, 0x04	; 4
    e3a4:	29 ec       	ldi	r18, 0xC9	; 201
    e3a6:	34 e0       	ldi	r19, 0x04	; 4
    e3a8:	f9 01       	movw	r30, r18
    e3aa:	20 81       	ld	r18, Z
    e3ac:	21 60       	ori	r18, 0x01	; 1
    e3ae:	fc 01       	movw	r30, r24
    e3b0:	20 83       	st	Z, r18
    e3b2:	88 ec       	ldi	r24, 0xC8	; 200
    e3b4:	94 e0       	ldi	r25, 0x04	; 4
    e3b6:	28 ec       	ldi	r18, 0xC8	; 200
    e3b8:	34 e0       	ldi	r19, 0x04	; 4
    e3ba:	f9 01       	movw	r30, r18
    e3bc:	20 81       	ld	r18, Z
    e3be:	20 68       	ori	r18, 0x80	; 128
    e3c0:	fc 01       	movw	r30, r24
    e3c2:	20 83       	st	Z, r18
    e3c4:	89 81       	ldd	r24, Y+1	; 0x01
    e3c6:	69 de       	rcall	.-814    	; 0xe09a <cpu_irq_restore>
    e3c8:	00 00       	nop
    e3ca:	0f 90       	pop	r0
    e3cc:	df 91       	pop	r29
    e3ce:	cf 91       	pop	r28
    e3d0:	08 95       	ret

0000e3d2 <udd_is_high_speed>:
    e3d2:	cf 93       	push	r28
    e3d4:	df 93       	push	r29
    e3d6:	cd b7       	in	r28, 0x3d	; 61
    e3d8:	de b7       	in	r29, 0x3e	; 62
    e3da:	80 e0       	ldi	r24, 0x00	; 0
    e3dc:	df 91       	pop	r29
    e3de:	cf 91       	pop	r28
    e3e0:	08 95       	ret

0000e3e2 <udd_set_address>:
    e3e2:	cf 93       	push	r28
    e3e4:	df 93       	push	r29
    e3e6:	1f 92       	push	r1
    e3e8:	cd b7       	in	r28, 0x3d	; 61
    e3ea:	de b7       	in	r29, 0x3e	; 62
    e3ec:	89 83       	std	Y+1, r24	; 0x01
    e3ee:	83 ec       	ldi	r24, 0xC3	; 195
    e3f0:	94 e0       	ldi	r25, 0x04	; 4
    e3f2:	29 81       	ldd	r18, Y+1	; 0x01
    e3f4:	fc 01       	movw	r30, r24
    e3f6:	20 83       	st	Z, r18
    e3f8:	00 00       	nop
    e3fa:	0f 90       	pop	r0
    e3fc:	df 91       	pop	r29
    e3fe:	cf 91       	pop	r28
    e400:	08 95       	ret

0000e402 <udd_getaddress>:
    e402:	cf 93       	push	r28
    e404:	df 93       	push	r29
    e406:	cd b7       	in	r28, 0x3d	; 61
    e408:	de b7       	in	r29, 0x3e	; 62
    e40a:	83 ec       	ldi	r24, 0xC3	; 195
    e40c:	94 e0       	ldi	r25, 0x04	; 4
    e40e:	fc 01       	movw	r30, r24
    e410:	80 81       	ld	r24, Z
    e412:	df 91       	pop	r29
    e414:	cf 91       	pop	r28
    e416:	08 95       	ret

0000e418 <udd_get_frame_number>:
    e418:	cf 93       	push	r28
    e41a:	df 93       	push	r29
    e41c:	cd b7       	in	r28, 0x3d	; 61
    e41e:	de b7       	in	r29, 0x3e	; 62
    e420:	80 91 20 24 	lds	r24, 0x2420	; 0x802420 <udd_sram+0x40>
    e424:	90 91 21 24 	lds	r25, 0x2421	; 0x802421 <udd_sram+0x41>
    e428:	df 91       	pop	r29
    e42a:	cf 91       	pop	r28
    e42c:	08 95       	ret

0000e42e <udd_get_micro_frame_number>:
    e42e:	cf 93       	push	r28
    e430:	df 93       	push	r29
    e432:	cd b7       	in	r28, 0x3d	; 61
    e434:	de b7       	in	r29, 0x3e	; 62
    e436:	80 e0       	ldi	r24, 0x00	; 0
    e438:	90 e0       	ldi	r25, 0x00	; 0
    e43a:	df 91       	pop	r29
    e43c:	cf 91       	pop	r28
    e43e:	08 95       	ret

0000e440 <udd_set_setup_payload>:
    e440:	cf 93       	push	r28
    e442:	df 93       	push	r29
    e444:	00 d0       	rcall	.+0      	; 0xe446 <udd_set_setup_payload+0x6>
    e446:	1f 92       	push	r1
    e448:	cd b7       	in	r28, 0x3d	; 61
    e44a:	de b7       	in	r29, 0x3e	; 62
    e44c:	89 83       	std	Y+1, r24	; 0x01
    e44e:	9a 83       	std	Y+2, r25	; 0x02
    e450:	6b 83       	std	Y+3, r22	; 0x03
    e452:	7c 83       	std	Y+4, r23	; 0x04
    e454:	89 81       	ldd	r24, Y+1	; 0x01
    e456:	9a 81       	ldd	r25, Y+2	; 0x02
    e458:	80 93 92 29 	sts	0x2992, r24	; 0x802992 <udd_g_ctrlreq+0x8>
    e45c:	90 93 93 29 	sts	0x2993, r25	; 0x802993 <udd_g_ctrlreq+0x9>
    e460:	8b 81       	ldd	r24, Y+3	; 0x03
    e462:	9c 81       	ldd	r25, Y+4	; 0x04
    e464:	80 93 94 29 	sts	0x2994, r24	; 0x802994 <udd_g_ctrlreq+0xa>
    e468:	90 93 95 29 	sts	0x2995, r25	; 0x802995 <udd_g_ctrlreq+0xb>
    e46c:	00 00       	nop
    e46e:	24 96       	adiw	r28, 0x04	; 4
    e470:	cd bf       	out	0x3d, r28	; 61
    e472:	de bf       	out	0x3e, r29	; 62
    e474:	df 91       	pop	r29
    e476:	cf 91       	pop	r28
    e478:	08 95       	ret

0000e47a <udd_ep_alloc>:
    e47a:	cf 93       	push	r28
    e47c:	df 93       	push	r29
    e47e:	00 d0       	rcall	.+0      	; 0xe480 <udd_ep_alloc+0x6>
    e480:	00 d0       	rcall	.+0      	; 0xe482 <udd_ep_alloc+0x8>
    e482:	cd b7       	in	r28, 0x3d	; 61
    e484:	de b7       	in	r29, 0x3e	; 62
    e486:	8b 83       	std	Y+3, r24	; 0x03
    e488:	6c 83       	std	Y+4, r22	; 0x04
    e48a:	4d 83       	std	Y+5, r20	; 0x05
    e48c:	5e 83       	std	Y+6, r21	; 0x06
    e48e:	8b 81       	ldd	r24, Y+3	; 0x03
    e490:	dd d3       	rcall	.+1978   	; 0xec4c <udd_ep_get_ctrl>
    e492:	89 83       	std	Y+1, r24	; 0x01
    e494:	9a 83       	std	Y+2, r25	; 0x02
    e496:	89 81       	ldd	r24, Y+1	; 0x01
    e498:	9a 81       	ldd	r25, Y+2	; 0x02
    e49a:	fc 01       	movw	r30, r24
    e49c:	81 81       	ldd	r24, Z+1	; 0x01
    e49e:	88 2f       	mov	r24, r24
    e4a0:	90 e0       	ldi	r25, 0x00	; 0
    e4a2:	80 7c       	andi	r24, 0xC0	; 192
    e4a4:	99 27       	eor	r25, r25
    e4a6:	89 2b       	or	r24, r25
    e4a8:	11 f0       	breq	.+4      	; 0xe4ae <udd_ep_alloc+0x34>
    e4aa:	80 e0       	ldi	r24, 0x00	; 0
    e4ac:	28 c0       	rjmp	.+80     	; 0xe4fe <udd_ep_alloc+0x84>
    e4ae:	8d 81       	ldd	r24, Y+5	; 0x05
    e4b0:	9e 81       	ldd	r25, Y+6	; 0x06
    e4b2:	ac 01       	movw	r20, r24
    e4b4:	6c 81       	ldd	r22, Y+4	; 0x04
    e4b6:	8b 81       	ldd	r24, Y+3	; 0x03
    e4b8:	53 d3       	rcall	.+1702   	; 0xeb60 <udd_ep_init>
    e4ba:	89 81       	ldd	r24, Y+1	; 0x01
    e4bc:	9a 81       	ldd	r25, Y+2	; 0x02
    e4be:	fc 01       	movw	r30, r24
    e4c0:	81 81       	ldd	r24, Z+1	; 0x01
    e4c2:	88 2f       	mov	r24, r24
    e4c4:	90 e0       	ldi	r25, 0x00	; 0
    e4c6:	80 7c       	andi	r24, 0xC0	; 192
    e4c8:	99 27       	eor	r25, r25
    e4ca:	80 3c       	cpi	r24, 0xC0	; 192
    e4cc:	91 05       	cpc	r25, r1
    e4ce:	61 f4       	brne	.+24     	; 0xe4e8 <udd_ep_alloc+0x6e>
    e4d0:	89 81       	ldd	r24, Y+1	; 0x01
    e4d2:	9a 81       	ldd	r25, Y+2	; 0x02
    e4d4:	fc 01       	movw	r30, r24
    e4d6:	81 81       	ldd	r24, Z+1	; 0x01
    e4d8:	88 2f       	mov	r24, r24
    e4da:	90 e0       	ldi	r25, 0x00	; 0
    e4dc:	87 70       	andi	r24, 0x07	; 7
    e4de:	99 27       	eor	r25, r25
    e4e0:	07 97       	sbiw	r24, 0x07	; 7
    e4e2:	11 f4       	brne	.+4      	; 0xe4e8 <udd_ep_alloc+0x6e>
    e4e4:	81 e0       	ldi	r24, 0x01	; 1
    e4e6:	0b c0       	rjmp	.+22     	; 0xe4fe <udd_ep_alloc+0x84>
    e4e8:	89 81       	ldd	r24, Y+1	; 0x01
    e4ea:	9a 81       	ldd	r25, Y+2	; 0x02
    e4ec:	fc 01       	movw	r30, r24
    e4ee:	81 81       	ldd	r24, Z+1	; 0x01
    e4f0:	28 2f       	mov	r18, r24
    e4f2:	20 62       	ori	r18, 0x20	; 32
    e4f4:	89 81       	ldd	r24, Y+1	; 0x01
    e4f6:	9a 81       	ldd	r25, Y+2	; 0x02
    e4f8:	fc 01       	movw	r30, r24
    e4fa:	21 83       	std	Z+1, r18	; 0x01
    e4fc:	81 e0       	ldi	r24, 0x01	; 1
    e4fe:	26 96       	adiw	r28, 0x06	; 6
    e500:	cd bf       	out	0x3d, r28	; 61
    e502:	de bf       	out	0x3e, r29	; 62
    e504:	df 91       	pop	r29
    e506:	cf 91       	pop	r28
    e508:	08 95       	ret

0000e50a <udd_ep_free>:
    e50a:	cf 93       	push	r28
    e50c:	df 93       	push	r29
    e50e:	00 d0       	rcall	.+0      	; 0xe510 <udd_ep_free+0x6>
    e510:	cd b7       	in	r28, 0x3d	; 61
    e512:	de b7       	in	r29, 0x3e	; 62
    e514:	8b 83       	std	Y+3, r24	; 0x03
    e516:	8b 81       	ldd	r24, Y+3	; 0x03
    e518:	5a d1       	rcall	.+692    	; 0xe7ce <udd_ep_abort>
    e51a:	8b 81       	ldd	r24, Y+3	; 0x03
    e51c:	97 d3       	rcall	.+1838   	; 0xec4c <udd_ep_get_ctrl>
    e51e:	89 83       	std	Y+1, r24	; 0x01
    e520:	9a 83       	std	Y+2, r25	; 0x02
    e522:	89 81       	ldd	r24, Y+1	; 0x01
    e524:	9a 81       	ldd	r25, Y+2	; 0x02
    e526:	fc 01       	movw	r30, r24
    e528:	11 82       	std	Z+1, r1	; 0x01
    e52a:	00 00       	nop
    e52c:	23 96       	adiw	r28, 0x03	; 3
    e52e:	cd bf       	out	0x3d, r28	; 61
    e530:	de bf       	out	0x3e, r29	; 62
    e532:	df 91       	pop	r29
    e534:	cf 91       	pop	r28
    e536:	08 95       	ret

0000e538 <udd_ep_is_halted>:
    e538:	cf 93       	push	r28
    e53a:	df 93       	push	r29
    e53c:	00 d0       	rcall	.+0      	; 0xe53e <udd_ep_is_halted+0x6>
    e53e:	cd b7       	in	r28, 0x3d	; 61
    e540:	de b7       	in	r29, 0x3e	; 62
    e542:	8b 83       	std	Y+3, r24	; 0x03
    e544:	8b 81       	ldd	r24, Y+3	; 0x03
    e546:	82 d3       	rcall	.+1796   	; 0xec4c <udd_ep_get_ctrl>
    e548:	89 83       	std	Y+1, r24	; 0x01
    e54a:	9a 83       	std	Y+2, r25	; 0x02
    e54c:	89 81       	ldd	r24, Y+1	; 0x01
    e54e:	9a 81       	ldd	r25, Y+2	; 0x02
    e550:	fc 01       	movw	r30, r24
    e552:	81 81       	ldd	r24, Z+1	; 0x01
    e554:	88 2f       	mov	r24, r24
    e556:	90 e0       	ldi	r25, 0x00	; 0
    e558:	84 70       	andi	r24, 0x04	; 4
    e55a:	99 27       	eor	r25, r25
    e55c:	21 e0       	ldi	r18, 0x01	; 1
    e55e:	89 2b       	or	r24, r25
    e560:	09 f4       	brne	.+2      	; 0xe564 <udd_ep_is_halted+0x2c>
    e562:	20 e0       	ldi	r18, 0x00	; 0
    e564:	82 2f       	mov	r24, r18
    e566:	23 96       	adiw	r28, 0x03	; 3
    e568:	cd bf       	out	0x3d, r28	; 61
    e56a:	de bf       	out	0x3e, r29	; 62
    e56c:	df 91       	pop	r29
    e56e:	cf 91       	pop	r28
    e570:	08 95       	ret

0000e572 <udd_ep_set_halt>:
    e572:	0f 93       	push	r16
    e574:	cf 93       	push	r28
    e576:	df 93       	push	r29
    e578:	00 d0       	rcall	.+0      	; 0xe57a <udd_ep_set_halt+0x8>
    e57a:	cd b7       	in	r28, 0x3d	; 61
    e57c:	de b7       	in	r29, 0x3e	; 62
    e57e:	8b 83       	std	Y+3, r24	; 0x03
    e580:	8b 81       	ldd	r24, Y+3	; 0x03
    e582:	64 d3       	rcall	.+1736   	; 0xec4c <udd_ep_get_ctrl>
    e584:	89 83       	std	Y+1, r24	; 0x01
    e586:	9a 83       	std	Y+2, r25	; 0x02
    e588:	89 81       	ldd	r24, Y+1	; 0x01
    e58a:	9a 81       	ldd	r25, Y+2	; 0x02
    e58c:	fc 01       	movw	r30, r24
    e58e:	81 81       	ldd	r24, Z+1	; 0x01
    e590:	28 2f       	mov	r18, r24
    e592:	24 60       	ori	r18, 0x04	; 4
    e594:	89 81       	ldd	r24, Y+1	; 0x01
    e596:	9a 81       	ldd	r25, Y+2	; 0x02
    e598:	fc 01       	movw	r30, r24
    e59a:	21 83       	std	Z+1, r18	; 0x01
    e59c:	89 81       	ldd	r24, Y+1	; 0x01
    e59e:	9a 81       	ldd	r25, Y+2	; 0x02
    e5a0:	fc 01       	movw	r30, r24
    e5a2:	01 e0       	ldi	r16, 0x01	; 1
    e5a4:	06 93       	lac	Z, r16
    e5a6:	8b 81       	ldd	r24, Y+3	; 0x03
    e5a8:	12 d1       	rcall	.+548    	; 0xe7ce <udd_ep_abort>
    e5aa:	81 e0       	ldi	r24, 0x01	; 1
    e5ac:	23 96       	adiw	r28, 0x03	; 3
    e5ae:	cd bf       	out	0x3d, r28	; 61
    e5b0:	de bf       	out	0x3e, r29	; 62
    e5b2:	df 91       	pop	r29
    e5b4:	cf 91       	pop	r28
    e5b6:	0f 91       	pop	r16
    e5b8:	08 95       	ret

0000e5ba <udd_ep_clear_halt>:
    e5ba:	cf 93       	push	r28
    e5bc:	df 93       	push	r29
    e5be:	cd b7       	in	r28, 0x3d	; 61
    e5c0:	de b7       	in	r29, 0x3e	; 62
    e5c2:	25 97       	sbiw	r28, 0x05	; 5
    e5c4:	cd bf       	out	0x3d, r28	; 61
    e5c6:	de bf       	out	0x3e, r29	; 62
    e5c8:	8d 83       	std	Y+5, r24	; 0x05
    e5ca:	8d 81       	ldd	r24, Y+5	; 0x05
    e5cc:	3f d3       	rcall	.+1662   	; 0xec4c <udd_ep_get_ctrl>
    e5ce:	89 83       	std	Y+1, r24	; 0x01
    e5d0:	9a 83       	std	Y+2, r25	; 0x02
    e5d2:	89 81       	ldd	r24, Y+1	; 0x01
    e5d4:	9a 81       	ldd	r25, Y+2	; 0x02
    e5d6:	fc 01       	movw	r30, r24
    e5d8:	81 81       	ldd	r24, Z+1	; 0x01
    e5da:	88 2f       	mov	r24, r24
    e5dc:	90 e0       	ldi	r25, 0x00	; 0
    e5de:	84 70       	andi	r24, 0x04	; 4
    e5e0:	99 27       	eor	r25, r25
    e5e2:	89 2b       	or	r24, r25
    e5e4:	11 f4       	brne	.+4      	; 0xe5ea <udd_ep_clear_halt+0x30>
    e5e6:	81 e0       	ldi	r24, 0x01	; 1
    e5e8:	24 c0       	rjmp	.+72     	; 0xe632 <udd_ep_clear_halt+0x78>
    e5ea:	89 81       	ldd	r24, Y+1	; 0x01
    e5ec:	9a 81       	ldd	r25, Y+2	; 0x02
    e5ee:	fc 01       	movw	r30, r24
    e5f0:	81 81       	ldd	r24, Z+1	; 0x01
    e5f2:	28 2f       	mov	r18, r24
    e5f4:	2b 7f       	andi	r18, 0xFB	; 251
    e5f6:	89 81       	ldd	r24, Y+1	; 0x01
    e5f8:	9a 81       	ldd	r25, Y+2	; 0x02
    e5fa:	fc 01       	movw	r30, r24
    e5fc:	21 83       	std	Z+1, r18	; 0x01
    e5fe:	8d 81       	ldd	r24, Y+5	; 0x05
    e600:	a6 d6       	rcall	.+3404   	; 0xf34e <udd_ep_get_job>
    e602:	8b 83       	std	Y+3, r24	; 0x03
    e604:	9c 83       	std	Y+4, r25	; 0x04
    e606:	8b 81       	ldd	r24, Y+3	; 0x03
    e608:	9c 81       	ldd	r25, Y+4	; 0x04
    e60a:	fc 01       	movw	r30, r24
    e60c:	80 81       	ld	r24, Z
    e60e:	81 70       	andi	r24, 0x01	; 1
    e610:	88 23       	and	r24, r24
    e612:	71 f0       	breq	.+28     	; 0xe630 <udd_ep_clear_halt+0x76>
    e614:	8b 81       	ldd	r24, Y+3	; 0x03
    e616:	9c 81       	ldd	r25, Y+4	; 0x04
    e618:	fc 01       	movw	r30, r24
    e61a:	20 81       	ld	r18, Z
    e61c:	2e 7f       	andi	r18, 0xFE	; 254
    e61e:	fc 01       	movw	r30, r24
    e620:	20 83       	st	Z, r18
    e622:	8b 81       	ldd	r24, Y+3	; 0x03
    e624:	9c 81       	ldd	r25, Y+4	; 0x04
    e626:	fc 01       	movw	r30, r24
    e628:	87 81       	ldd	r24, Z+7	; 0x07
    e62a:	90 85       	ldd	r25, Z+8	; 0x08
    e62c:	fc 01       	movw	r30, r24
    e62e:	19 95       	eicall
    e630:	81 e0       	ldi	r24, 0x01	; 1
    e632:	25 96       	adiw	r28, 0x05	; 5
    e634:	cd bf       	out	0x3d, r28	; 61
    e636:	de bf       	out	0x3e, r29	; 62
    e638:	df 91       	pop	r29
    e63a:	cf 91       	pop	r28
    e63c:	08 95       	ret

0000e63e <udd_ep_run>:
    e63e:	0f 93       	push	r16
    e640:	1f 93       	push	r17
    e642:	cf 93       	push	r28
    e644:	df 93       	push	r29
    e646:	cd b7       	in	r28, 0x3d	; 61
    e648:	de b7       	in	r29, 0x3e	; 62
    e64a:	2d 97       	sbiw	r28, 0x0d	; 13
    e64c:	cd bf       	out	0x3d, r28	; 61
    e64e:	de bf       	out	0x3e, r29	; 62
    e650:	8e 83       	std	Y+6, r24	; 0x06
    e652:	6f 83       	std	Y+7, r22	; 0x07
    e654:	48 87       	std	Y+8, r20	; 0x08
    e656:	59 87       	std	Y+9, r21	; 0x09
    e658:	2a 87       	std	Y+10, r18	; 0x0a
    e65a:	3b 87       	std	Y+11, r19	; 0x0b
    e65c:	0c 87       	std	Y+12, r16	; 0x0c
    e65e:	1d 87       	std	Y+13, r17	; 0x0d
    e660:	8e 81       	ldd	r24, Y+6	; 0x06
    e662:	75 d6       	rcall	.+3306   	; 0xf34e <udd_ep_get_job>
    e664:	89 83       	std	Y+1, r24	; 0x01
    e666:	9a 83       	std	Y+2, r25	; 0x02
    e668:	8e 81       	ldd	r24, Y+6	; 0x06
    e66a:	f0 d2       	rcall	.+1504   	; 0xec4c <udd_ep_get_ctrl>
    e66c:	8b 83       	std	Y+3, r24	; 0x03
    e66e:	9c 83       	std	Y+4, r25	; 0x04
    e670:	8b 81       	ldd	r24, Y+3	; 0x03
    e672:	9c 81       	ldd	r25, Y+4	; 0x04
    e674:	fc 01       	movw	r30, r24
    e676:	81 81       	ldd	r24, Z+1	; 0x01
    e678:	88 2f       	mov	r24, r24
    e67a:	90 e0       	ldi	r25, 0x00	; 0
    e67c:	80 7c       	andi	r24, 0xC0	; 192
    e67e:	99 27       	eor	r25, r25
    e680:	89 2b       	or	r24, r25
    e682:	11 f4       	brne	.+4      	; 0xe688 <udd_ep_run+0x4a>
    e684:	80 e0       	ldi	r24, 0x00	; 0
    e686:	9b c0       	rjmp	.+310    	; 0xe7be <udd_ep_run+0x180>
    e688:	8b 81       	ldd	r24, Y+3	; 0x03
    e68a:	9c 81       	ldd	r25, Y+4	; 0x04
    e68c:	fc 01       	movw	r30, r24
    e68e:	81 81       	ldd	r24, Z+1	; 0x01
    e690:	88 2f       	mov	r24, r24
    e692:	90 e0       	ldi	r25, 0x00	; 0
    e694:	80 7c       	andi	r24, 0xC0	; 192
    e696:	99 27       	eor	r25, r25
    e698:	80 3c       	cpi	r24, 0xC0	; 192
    e69a:	91 05       	cpc	r25, r1
    e69c:	61 f0       	breq	.+24     	; 0xe6b6 <udd_ep_run+0x78>
    e69e:	8b 81       	ldd	r24, Y+3	; 0x03
    e6a0:	9c 81       	ldd	r25, Y+4	; 0x04
    e6a2:	fc 01       	movw	r30, r24
    e6a4:	81 81       	ldd	r24, Z+1	; 0x01
    e6a6:	88 2f       	mov	r24, r24
    e6a8:	90 e0       	ldi	r25, 0x00	; 0
    e6aa:	84 70       	andi	r24, 0x04	; 4
    e6ac:	99 27       	eor	r25, r25
    e6ae:	89 2b       	or	r24, r25
    e6b0:	11 f0       	breq	.+4      	; 0xe6b6 <udd_ep_run+0x78>
    e6b2:	80 e0       	ldi	r24, 0x00	; 0
    e6b4:	84 c0       	rjmp	.+264    	; 0xe7be <udd_ep_run+0x180>
    e6b6:	e1 dc       	rcall	.-1598   	; 0xe07a <cpu_irq_save>
    e6b8:	8d 83       	std	Y+5, r24	; 0x05
    e6ba:	89 81       	ldd	r24, Y+1	; 0x01
    e6bc:	9a 81       	ldd	r25, Y+2	; 0x02
    e6be:	fc 01       	movw	r30, r24
    e6c0:	80 81       	ld	r24, Z
    e6c2:	81 70       	andi	r24, 0x01	; 1
    e6c4:	88 23       	and	r24, r24
    e6c6:	21 f0       	breq	.+8      	; 0xe6d0 <udd_ep_run+0x92>
    e6c8:	8d 81       	ldd	r24, Y+5	; 0x05
    e6ca:	e7 dc       	rcall	.-1586   	; 0xe09a <cpu_irq_restore>
    e6cc:	80 e0       	ldi	r24, 0x00	; 0
    e6ce:	77 c0       	rjmp	.+238    	; 0xe7be <udd_ep_run+0x180>
    e6d0:	89 81       	ldd	r24, Y+1	; 0x01
    e6d2:	9a 81       	ldd	r25, Y+2	; 0x02
    e6d4:	fc 01       	movw	r30, r24
    e6d6:	20 81       	ld	r18, Z
    e6d8:	21 60       	ori	r18, 0x01	; 1
    e6da:	fc 01       	movw	r30, r24
    e6dc:	20 83       	st	Z, r18
    e6de:	8d 81       	ldd	r24, Y+5	; 0x05
    e6e0:	dc dc       	rcall	.-1608   	; 0xe09a <cpu_irq_restore>
    e6e2:	89 81       	ldd	r24, Y+1	; 0x01
    e6e4:	9a 81       	ldd	r25, Y+2	; 0x02
    e6e6:	28 85       	ldd	r18, Y+8	; 0x08
    e6e8:	39 85       	ldd	r19, Y+9	; 0x09
    e6ea:	fc 01       	movw	r30, r24
    e6ec:	21 83       	std	Z+1, r18	; 0x01
    e6ee:	32 83       	std	Z+2, r19	; 0x02
    e6f0:	89 81       	ldd	r24, Y+1	; 0x01
    e6f2:	9a 81       	ldd	r25, Y+2	; 0x02
    e6f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    e6f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    e6f8:	fc 01       	movw	r30, r24
    e6fa:	23 83       	std	Z+3, r18	; 0x03
    e6fc:	34 83       	std	Z+4, r19	; 0x04
    e6fe:	89 81       	ldd	r24, Y+1	; 0x01
    e700:	9a 81       	ldd	r25, Y+2	; 0x02
    e702:	fc 01       	movw	r30, r24
    e704:	15 82       	std	Z+5, r1	; 0x05
    e706:	16 82       	std	Z+6, r1	; 0x06
    e708:	89 81       	ldd	r24, Y+1	; 0x01
    e70a:	9a 81       	ldd	r25, Y+2	; 0x02
    e70c:	2c 85       	ldd	r18, Y+12	; 0x0c
    e70e:	3d 85       	ldd	r19, Y+13	; 0x0d
    e710:	fc 01       	movw	r30, r24
    e712:	27 83       	std	Z+7, r18	; 0x07
    e714:	30 87       	std	Z+8, r19	; 0x08
    e716:	8f 81       	ldd	r24, Y+7	; 0x07
    e718:	88 23       	and	r24, r24
    e71a:	21 f4       	brne	.+8      	; 0xe724 <udd_ep_run+0xe6>
    e71c:	8a 85       	ldd	r24, Y+10	; 0x0a
    e71e:	9b 85       	ldd	r25, Y+11	; 0x0b
    e720:	89 2b       	or	r24, r25
    e722:	19 f4       	brne	.+6      	; 0xe72a <udd_ep_run+0xec>
    e724:	81 e0       	ldi	r24, 0x01	; 1
    e726:	90 e0       	ldi	r25, 0x00	; 0
    e728:	02 c0       	rjmp	.+4      	; 0xe72e <udd_ep_run+0xf0>
    e72a:	80 e0       	ldi	r24, 0x00	; 0
    e72c:	90 e0       	ldi	r25, 0x00	; 0
    e72e:	28 2f       	mov	r18, r24
    e730:	21 70       	andi	r18, 0x01	; 1
    e732:	89 81       	ldd	r24, Y+1	; 0x01
    e734:	9a 81       	ldd	r25, Y+2	; 0x02
    e736:	21 70       	andi	r18, 0x01	; 1
    e738:	22 0f       	add	r18, r18
    e73a:	fc 01       	movw	r30, r24
    e73c:	30 81       	ld	r19, Z
    e73e:	3d 7f       	andi	r19, 0xFD	; 253
    e740:	23 2b       	or	r18, r19
    e742:	fc 01       	movw	r30, r24
    e744:	20 83       	st	Z, r18
    e746:	89 81       	ldd	r24, Y+1	; 0x01
    e748:	9a 81       	ldd	r25, Y+2	; 0x02
    e74a:	fc 01       	movw	r30, r24
    e74c:	20 81       	ld	r18, Z
    e74e:	2b 7f       	andi	r18, 0xFB	; 251
    e750:	fc 01       	movw	r30, r24
    e752:	20 83       	st	Z, r18
    e754:	8e 81       	ldd	r24, Y+6	; 0x06
    e756:	88 23       	and	r24, r24
    e758:	34 f4       	brge	.+12     	; 0xe766 <udd_ep_run+0x128>
    e75a:	8b 81       	ldd	r24, Y+3	; 0x03
    e75c:	9c 81       	ldd	r25, Y+4	; 0x04
    e75e:	fc 01       	movw	r30, r24
    e760:	16 82       	std	Z+6, r1	; 0x06
    e762:	17 82       	std	Z+7, r1	; 0x07
    e764:	29 c0       	rjmp	.+82     	; 0xe7b8 <udd_ep_run+0x17a>
    e766:	8b 81       	ldd	r24, Y+3	; 0x03
    e768:	9c 81       	ldd	r25, Y+4	; 0x04
    e76a:	fc 01       	movw	r30, r24
    e76c:	81 81       	ldd	r24, Z+1	; 0x01
    e76e:	88 2f       	mov	r24, r24
    e770:	90 e0       	ldi	r25, 0x00	; 0
    e772:	80 7c       	andi	r24, 0xC0	; 192
    e774:	99 27       	eor	r25, r25
    e776:	80 3c       	cpi	r24, 0xC0	; 192
    e778:	91 05       	cpc	r25, r1
    e77a:	a1 f4       	brne	.+40     	; 0xe7a4 <udd_ep_run+0x166>
    e77c:	8b 81       	ldd	r24, Y+3	; 0x03
    e77e:	9c 81       	ldd	r25, Y+4	; 0x04
    e780:	a6 d5       	rcall	.+2892   	; 0xf2ce <udd_ep_get_size>
    e782:	9c 01       	movw	r18, r24
    e784:	8a 85       	ldd	r24, Y+10	; 0x0a
    e786:	9b 85       	ldd	r25, Y+11	; 0x0b
    e788:	b9 01       	movw	r22, r18
    e78a:	0e 94 11 b7 	call	0x16e22	; 0x16e22 <__udivmodhi4>
    e78e:	89 2b       	or	r24, r25
    e790:	49 f0       	breq	.+18     	; 0xe7a4 <udd_ep_run+0x166>
    e792:	89 81       	ldd	r24, Y+1	; 0x01
    e794:	9a 81       	ldd	r25, Y+2	; 0x02
    e796:	fc 01       	movw	r30, r24
    e798:	20 81       	ld	r18, Z
    e79a:	2e 7f       	andi	r18, 0xFE	; 254
    e79c:	fc 01       	movw	r30, r24
    e79e:	20 83       	st	Z, r18
    e7a0:	80 e0       	ldi	r24, 0x00	; 0
    e7a2:	0d c0       	rjmp	.+26     	; 0xe7be <udd_ep_run+0x180>
    e7a4:	8b 81       	ldd	r24, Y+3	; 0x03
    e7a6:	9c 81       	ldd	r25, Y+4	; 0x04
    e7a8:	fc 01       	movw	r30, r24
    e7aa:	12 82       	std	Z+2, r1	; 0x02
    e7ac:	13 82       	std	Z+3, r1	; 0x03
    e7ae:	8b 81       	ldd	r24, Y+3	; 0x03
    e7b0:	9c 81       	ldd	r25, Y+4	; 0x04
    e7b2:	fc 01       	movw	r30, r24
    e7b4:	16 82       	std	Z+6, r1	; 0x06
    e7b6:	17 82       	std	Z+7, r1	; 0x07
    e7b8:	8e 81       	ldd	r24, Y+6	; 0x06
    e7ba:	f1 d5       	rcall	.+3042   	; 0xf39e <udd_ep_trans_complet>
    e7bc:	81 e0       	ldi	r24, 0x01	; 1
    e7be:	2d 96       	adiw	r28, 0x0d	; 13
    e7c0:	cd bf       	out	0x3d, r28	; 61
    e7c2:	de bf       	out	0x3e, r29	; 62
    e7c4:	df 91       	pop	r29
    e7c6:	cf 91       	pop	r28
    e7c8:	1f 91       	pop	r17
    e7ca:	0f 91       	pop	r16
    e7cc:	08 95       	ret

0000e7ce <udd_ep_abort>:
    e7ce:	0f 93       	push	r16
    e7d0:	cf 93       	push	r28
    e7d2:	df 93       	push	r29
    e7d4:	cd b7       	in	r28, 0x3d	; 61
    e7d6:	de b7       	in	r29, 0x3e	; 62
    e7d8:	25 97       	sbiw	r28, 0x05	; 5
    e7da:	cd bf       	out	0x3d, r28	; 61
    e7dc:	de bf       	out	0x3e, r29	; 62
    e7de:	8d 83       	std	Y+5, r24	; 0x05
    e7e0:	8d 81       	ldd	r24, Y+5	; 0x05
    e7e2:	34 d2       	rcall	.+1128   	; 0xec4c <udd_ep_get_ctrl>
    e7e4:	89 83       	std	Y+1, r24	; 0x01
    e7e6:	9a 83       	std	Y+2, r25	; 0x02
    e7e8:	8d 81       	ldd	r24, Y+5	; 0x05
    e7ea:	b1 d5       	rcall	.+2914   	; 0xf34e <udd_ep_get_job>
    e7ec:	8b 83       	std	Y+3, r24	; 0x03
    e7ee:	9c 83       	std	Y+4, r25	; 0x04
    e7f0:	89 81       	ldd	r24, Y+1	; 0x01
    e7f2:	9a 81       	ldd	r25, Y+2	; 0x02
    e7f4:	fc 01       	movw	r30, r24
    e7f6:	02 e0       	ldi	r16, 0x02	; 2
    e7f8:	05 93       	las	Z, r16
    e7fa:	8b 81       	ldd	r24, Y+3	; 0x03
    e7fc:	9c 81       	ldd	r25, Y+4	; 0x04
    e7fe:	fc 01       	movw	r30, r24
    e800:	80 81       	ld	r24, Z
    e802:	81 70       	andi	r24, 0x01	; 1
    e804:	88 23       	and	r24, r24
    e806:	39 f1       	breq	.+78     	; 0xe856 <udd_ep_abort+0x88>
    e808:	8b 81       	ldd	r24, Y+3	; 0x03
    e80a:	9c 81       	ldd	r25, Y+4	; 0x04
    e80c:	fc 01       	movw	r30, r24
    e80e:	20 81       	ld	r18, Z
    e810:	2e 7f       	andi	r18, 0xFE	; 254
    e812:	fc 01       	movw	r30, r24
    e814:	20 83       	st	Z, r18
    e816:	8b 81       	ldd	r24, Y+3	; 0x03
    e818:	9c 81       	ldd	r25, Y+4	; 0x04
    e81a:	fc 01       	movw	r30, r24
    e81c:	87 81       	ldd	r24, Z+7	; 0x07
    e81e:	90 85       	ldd	r25, Z+8	; 0x08
    e820:	89 2b       	or	r24, r25
    e822:	d1 f0       	breq	.+52     	; 0xe858 <udd_ep_abort+0x8a>
    e824:	8b 81       	ldd	r24, Y+3	; 0x03
    e826:	9c 81       	ldd	r25, Y+4	; 0x04
    e828:	fc 01       	movw	r30, r24
    e82a:	27 81       	ldd	r18, Z+7	; 0x07
    e82c:	30 85       	ldd	r19, Z+8	; 0x08
    e82e:	8d 81       	ldd	r24, Y+5	; 0x05
    e830:	88 23       	and	r24, r24
    e832:	34 f4       	brge	.+12     	; 0xe840 <udd_ep_abort+0x72>
    e834:	89 81       	ldd	r24, Y+1	; 0x01
    e836:	9a 81       	ldd	r25, Y+2	; 0x02
    e838:	fc 01       	movw	r30, r24
    e83a:	86 81       	ldd	r24, Z+6	; 0x06
    e83c:	97 81       	ldd	r25, Z+7	; 0x07
    e83e:	05 c0       	rjmp	.+10     	; 0xe84a <udd_ep_abort+0x7c>
    e840:	89 81       	ldd	r24, Y+1	; 0x01
    e842:	9a 81       	ldd	r25, Y+2	; 0x02
    e844:	fc 01       	movw	r30, r24
    e846:	82 81       	ldd	r24, Z+2	; 0x02
    e848:	93 81       	ldd	r25, Z+3	; 0x03
    e84a:	4d 81       	ldd	r20, Y+5	; 0x05
    e84c:	bc 01       	movw	r22, r24
    e84e:	81 e0       	ldi	r24, 0x01	; 1
    e850:	f9 01       	movw	r30, r18
    e852:	19 95       	eicall
    e854:	01 c0       	rjmp	.+2      	; 0xe858 <udd_ep_abort+0x8a>
    e856:	00 00       	nop
    e858:	25 96       	adiw	r28, 0x05	; 5
    e85a:	cd bf       	out	0x3d, r28	; 61
    e85c:	de bf       	out	0x3e, r29	; 62
    e85e:	df 91       	pop	r29
    e860:	cf 91       	pop	r28
    e862:	0f 91       	pop	r16
    e864:	08 95       	ret

0000e866 <__vector_125>:
    e866:	1f 92       	push	r1
    e868:	0f 92       	push	r0
    e86a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    e86e:	0f 92       	push	r0
    e870:	11 24       	eor	r1, r1
    e872:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    e876:	0f 92       	push	r0
    e878:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    e87c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    e880:	0f 92       	push	r0
    e882:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    e886:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    e88a:	0f 92       	push	r0
    e88c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    e890:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    e894:	0f 92       	push	r0
    e896:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    e89a:	2f 93       	push	r18
    e89c:	3f 93       	push	r19
    e89e:	4f 93       	push	r20
    e8a0:	5f 93       	push	r21
    e8a2:	6f 93       	push	r22
    e8a4:	7f 93       	push	r23
    e8a6:	8f 93       	push	r24
    e8a8:	9f 93       	push	r25
    e8aa:	af 93       	push	r26
    e8ac:	bf 93       	push	r27
    e8ae:	ef 93       	push	r30
    e8b0:	ff 93       	push	r31
    e8b2:	cf 93       	push	r28
    e8b4:	df 93       	push	r29
    e8b6:	1f 92       	push	r1
    e8b8:	cd b7       	in	r28, 0x3d	; 61
    e8ba:	de b7       	in	r29, 0x3e	; 62
    e8bc:	8b ec       	ldi	r24, 0xCB	; 203
    e8be:	94 e0       	ldi	r25, 0x04	; 4
    e8c0:	fc 01       	movw	r30, r24
    e8c2:	80 81       	ld	r24, Z
    e8c4:	88 23       	and	r24, r24
    e8c6:	44 f4       	brge	.+16     	; 0xe8d8 <__vector_125+0x72>
    e8c8:	8a ec       	ldi	r24, 0xCA	; 202
    e8ca:	94 e0       	ldi	r25, 0x04	; 4
    e8cc:	20 e8       	ldi	r18, 0x80	; 128
    e8ce:	fc 01       	movw	r30, r24
    e8d0:	20 83       	st	Z, r18
    e8d2:	0e 94 9d 67 	call	0xcf3a	; 0xcf3a <udc_sof_notify>
    e8d6:	5e c0       	rjmp	.+188    	; 0xe994 <__vector_125+0x12e>
    e8d8:	8e d4       	rcall	.+2332   	; 0xf1f6 <udd_ctrl_interrupt_error>
    e8da:	88 23       	and	r24, r24
    e8dc:	09 f0       	breq	.+2      	; 0xe8e0 <__vector_125+0x7a>
    e8de:	59 c0       	rjmp	.+178    	; 0xe992 <__vector_125+0x12c>
    e8e0:	8b ec       	ldi	r24, 0xCB	; 203
    e8e2:	94 e0       	ldi	r25, 0x04	; 4
    e8e4:	fc 01       	movw	r30, r24
    e8e6:	80 81       	ld	r24, Z
    e8e8:	88 2f       	mov	r24, r24
    e8ea:	90 e0       	ldi	r25, 0x00	; 0
    e8ec:	80 71       	andi	r24, 0x10	; 16
    e8ee:	99 27       	eor	r25, r25
    e8f0:	89 2b       	or	r24, r25
    e8f2:	59 f1       	breq	.+86     	; 0xe94a <__vector_125+0xe4>
    e8f4:	8a ec       	ldi	r24, 0xCA	; 202
    e8f6:	94 e0       	ldi	r25, 0x04	; 4
    e8f8:	20 e1       	ldi	r18, 0x10	; 16
    e8fa:	fc 01       	movw	r30, r24
    e8fc:	20 83       	st	Z, r18
    e8fe:	81 e0       	ldi	r24, 0x01	; 1
    e900:	89 83       	std	Y+1, r24	; 0x01
    e902:	08 c0       	rjmp	.+16     	; 0xe914 <__vector_125+0xae>
    e904:	89 81       	ldd	r24, Y+1	; 0x01
    e906:	63 df       	rcall	.-314    	; 0xe7ce <udd_ep_abort>
    e908:	89 81       	ldd	r24, Y+1	; 0x01
    e90a:	80 68       	ori	r24, 0x80	; 128
    e90c:	60 df       	rcall	.-320    	; 0xe7ce <udd_ep_abort>
    e90e:	89 81       	ldd	r24, Y+1	; 0x01
    e910:	8f 5f       	subi	r24, 0xFF	; 255
    e912:	89 83       	std	Y+1, r24	; 0x01
    e914:	89 81       	ldd	r24, Y+1	; 0x01
    e916:	82 30       	cpi	r24, 0x02	; 2
    e918:	a8 f3       	brcs	.-22     	; 0xe904 <__vector_125+0x9e>
    e91a:	0e 94 76 67 	call	0xceec	; 0xceec <udc_reset>
    e91e:	83 ec       	ldi	r24, 0xC3	; 195
    e920:	94 e0       	ldi	r25, 0x04	; 4
    e922:	fc 01       	movw	r30, r24
    e924:	10 82       	st	Z, r1
    e926:	40 e4       	ldi	r20, 0x40	; 64
    e928:	50 e0       	ldi	r21, 0x00	; 0
    e92a:	60 e0       	ldi	r22, 0x00	; 0
    e92c:	80 e0       	ldi	r24, 0x00	; 0
    e92e:	18 d1       	rcall	.+560    	; 0xeb60 <udd_ep_init>
    e930:	40 e4       	ldi	r20, 0x40	; 64
    e932:	50 e0       	ldi	r21, 0x00	; 0
    e934:	60 e0       	ldi	r22, 0x00	; 0
    e936:	80 e8       	ldi	r24, 0x80	; 128
    e938:	13 d1       	rcall	.+550    	; 0xeb60 <udd_ep_init>
    e93a:	85 e3       	ldi	r24, 0x35	; 53
    e93c:	94 e2       	ldi	r25, 0x24	; 36
    e93e:	80 93 f4 23 	sts	0x23F4, r24	; 0x8023f4 <udd_sram+0x14>
    e942:	90 93 f5 23 	sts	0x23F5, r25	; 0x8023f5 <udd_sram+0x15>
    e946:	a5 d1       	rcall	.+842    	; 0xec92 <udd_ctrl_init>
    e948:	25 c0       	rjmp	.+74     	; 0xe994 <__vector_125+0x12e>
    e94a:	8b ec       	ldi	r24, 0xCB	; 203
    e94c:	94 e0       	ldi	r25, 0x04	; 4
    e94e:	fc 01       	movw	r30, r24
    e950:	80 81       	ld	r24, Z
    e952:	88 2f       	mov	r24, r24
    e954:	90 e0       	ldi	r25, 0x00	; 0
    e956:	80 74       	andi	r24, 0x40	; 64
    e958:	99 27       	eor	r25, r25
    e95a:	89 2b       	or	r24, r25
    e95c:	41 f0       	breq	.+16     	; 0xe96e <__vector_125+0x108>
    e95e:	8a ec       	ldi	r24, 0xCA	; 202
    e960:	94 e0       	ldi	r25, 0x04	; 4
    e962:	20 e4       	ldi	r18, 0x40	; 64
    e964:	fc 01       	movw	r30, r24
    e966:	20 83       	st	Z, r18
    e968:	80 e0       	ldi	r24, 0x00	; 0
    e96a:	34 dc       	rcall	.-1944   	; 0xe1d4 <udd_sleep_mode>
    e96c:	13 c0       	rjmp	.+38     	; 0xe994 <__vector_125+0x12e>
    e96e:	8b ec       	ldi	r24, 0xCB	; 203
    e970:	94 e0       	ldi	r25, 0x04	; 4
    e972:	fc 01       	movw	r30, r24
    e974:	80 81       	ld	r24, Z
    e976:	88 2f       	mov	r24, r24
    e978:	90 e0       	ldi	r25, 0x00	; 0
    e97a:	80 72       	andi	r24, 0x20	; 32
    e97c:	99 27       	eor	r25, r25
    e97e:	89 2b       	or	r24, r25
    e980:	51 f0       	breq	.+20     	; 0xe996 <__vector_125+0x130>
    e982:	8a ec       	ldi	r24, 0xCA	; 202
    e984:	94 e0       	ldi	r25, 0x04	; 4
    e986:	20 e2       	ldi	r18, 0x20	; 32
    e988:	fc 01       	movw	r30, r24
    e98a:	20 83       	st	Z, r18
    e98c:	81 e0       	ldi	r24, 0x01	; 1
    e98e:	22 dc       	rcall	.-1980   	; 0xe1d4 <udd_sleep_mode>
    e990:	01 c0       	rjmp	.+2      	; 0xe994 <__vector_125+0x12e>
    e992:	00 00       	nop
    e994:	00 00       	nop
    e996:	00 00       	nop
    e998:	0f 90       	pop	r0
    e99a:	df 91       	pop	r29
    e99c:	cf 91       	pop	r28
    e99e:	ff 91       	pop	r31
    e9a0:	ef 91       	pop	r30
    e9a2:	bf 91       	pop	r27
    e9a4:	af 91       	pop	r26
    e9a6:	9f 91       	pop	r25
    e9a8:	8f 91       	pop	r24
    e9aa:	7f 91       	pop	r23
    e9ac:	6f 91       	pop	r22
    e9ae:	5f 91       	pop	r21
    e9b0:	4f 91       	pop	r20
    e9b2:	3f 91       	pop	r19
    e9b4:	2f 91       	pop	r18
    e9b6:	0f 90       	pop	r0
    e9b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    e9bc:	0f 90       	pop	r0
    e9be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    e9c2:	0f 90       	pop	r0
    e9c4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    e9c8:	0f 90       	pop	r0
    e9ca:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    e9ce:	0f 90       	pop	r0
    e9d0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    e9d4:	0f 90       	pop	r0
    e9d6:	1f 90       	pop	r1
    e9d8:	18 95       	reti

0000e9da <__vector_126>:
    e9da:	1f 92       	push	r1
    e9dc:	0f 92       	push	r0
    e9de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    e9e2:	0f 92       	push	r0
    e9e4:	11 24       	eor	r1, r1
    e9e6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    e9ea:	0f 92       	push	r0
    e9ec:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    e9f0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    e9f4:	0f 92       	push	r0
    e9f6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    e9fa:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    e9fe:	0f 92       	push	r0
    ea00:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    ea04:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    ea08:	0f 92       	push	r0
    ea0a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    ea0e:	0f 93       	push	r16
    ea10:	2f 93       	push	r18
    ea12:	3f 93       	push	r19
    ea14:	4f 93       	push	r20
    ea16:	5f 93       	push	r21
    ea18:	6f 93       	push	r22
    ea1a:	7f 93       	push	r23
    ea1c:	8f 93       	push	r24
    ea1e:	9f 93       	push	r25
    ea20:	af 93       	push	r26
    ea22:	bf 93       	push	r27
    ea24:	ef 93       	push	r30
    ea26:	ff 93       	push	r31
    ea28:	cf 93       	push	r28
    ea2a:	df 93       	push	r29
    ea2c:	cd b7       	in	r28, 0x3d	; 61
    ea2e:	de b7       	in	r29, 0x3e	; 62
    ea30:	2a 97       	sbiw	r28, 0x0a	; 10
    ea32:	cd bf       	out	0x3d, r28	; 61
    ea34:	de bf       	out	0x3e, r29	; 62
    ea36:	8c ec       	ldi	r24, 0xCC	; 204
    ea38:	94 e0       	ldi	r25, 0x04	; 4
    ea3a:	fc 01       	movw	r30, r24
    ea3c:	80 81       	ld	r24, Z
    ea3e:	88 2f       	mov	r24, r24
    ea40:	90 e0       	ldi	r25, 0x00	; 0
    ea42:	82 70       	andi	r24, 0x02	; 2
    ea44:	99 27       	eor	r25, r25
    ea46:	89 2b       	or	r24, r25
    ea48:	21 f4       	brne	.+8      	; 0xea52 <__vector_126+0x78>
    ea4a:	11 d4       	rcall	.+2082   	; 0xf26e <udd_ctrl_interrupt_tc_setup>
    ea4c:	88 23       	and	r24, r24
    ea4e:	09 f0       	breq	.+2      	; 0xea52 <__vector_126+0x78>
    ea50:	5f c0       	rjmp	.+190    	; 0xeb10 <__vector_126+0x136>
    ea52:	8c ec       	ldi	r24, 0xCC	; 204
    ea54:	94 e0       	ldi	r25, 0x04	; 4
    ea56:	22 e0       	ldi	r18, 0x02	; 2
    ea58:	fc 01       	movw	r30, r24
    ea5a:	20 83       	st	Z, r18
    ea5c:	85 ec       	ldi	r24, 0xC5	; 197
    ea5e:	94 e0       	ldi	r25, 0x04	; 4
    ea60:	fc 01       	movw	r30, r24
    ea62:	80 81       	ld	r24, Z
    ea64:	89 83       	std	Y+1, r24	; 0x01
    ea66:	99 81       	ldd	r25, Y+1	; 0x01
    ea68:	80 e0       	ldi	r24, 0x00	; 0
    ea6a:	89 1b       	sub	r24, r25
    ea6c:	88 0f       	add	r24, r24
    ea6e:	8a 83       	std	Y+2, r24	; 0x02
    ea70:	20 ef       	ldi	r18, 0xF0	; 240
    ea72:	33 e2       	ldi	r19, 0x23	; 35
    ea74:	8a 81       	ldd	r24, Y+2	; 0x02
    ea76:	88 2f       	mov	r24, r24
    ea78:	90 e0       	ldi	r25, 0x00	; 0
    ea7a:	a9 01       	movw	r20, r18
    ea7c:	48 1b       	sub	r20, r24
    ea7e:	59 0b       	sbc	r21, r25
    ea80:	ca 01       	movw	r24, r20
    ea82:	8b 83       	std	Y+3, r24	; 0x03
    ea84:	9c 83       	std	Y+4, r25	; 0x04
    ea86:	8b 81       	ldd	r24, Y+3	; 0x03
    ea88:	9c 81       	ldd	r25, Y+4	; 0x04
    ea8a:	8d 83       	std	Y+5, r24	; 0x05
    ea8c:	9e 83       	std	Y+6, r25	; 0x06
    ea8e:	8d 81       	ldd	r24, Y+5	; 0x05
    ea90:	9e 81       	ldd	r25, Y+6	; 0x06
    ea92:	fc 01       	movw	r30, r24
    ea94:	20 81       	ld	r18, Z
    ea96:	31 81       	ldd	r19, Z+1	; 0x01
    ea98:	80 ef       	ldi	r24, 0xF0	; 240
    ea9a:	93 e2       	ldi	r25, 0x23	; 35
    ea9c:	a9 01       	movw	r20, r18
    ea9e:	48 1b       	sub	r20, r24
    eaa0:	59 0b       	sbc	r21, r25
    eaa2:	ca 01       	movw	r24, r20
    eaa4:	96 95       	lsr	r25
    eaa6:	87 95       	ror	r24
    eaa8:	96 95       	lsr	r25
    eaaa:	87 95       	ror	r24
    eaac:	96 95       	lsr	r25
    eaae:	87 95       	ror	r24
    eab0:	8f 83       	std	Y+7, r24	; 0x07
    eab2:	8f 81       	ldd	r24, Y+7	; 0x07
    eab4:	28 2f       	mov	r18, r24
    eab6:	26 95       	lsr	r18
    eab8:	8f 81       	ldd	r24, Y+7	; 0x07
    eaba:	88 2f       	mov	r24, r24
    eabc:	90 e0       	ldi	r25, 0x00	; 0
    eabe:	81 70       	andi	r24, 0x01	; 1
    eac0:	99 27       	eor	r25, r25
    eac2:	89 2b       	or	r24, r25
    eac4:	11 f0       	breq	.+4      	; 0xeaca <__vector_126+0xf0>
    eac6:	80 e8       	ldi	r24, 0x80	; 128
    eac8:	01 c0       	rjmp	.+2      	; 0xeacc <__vector_126+0xf2>
    eaca:	80 e0       	ldi	r24, 0x00	; 0
    eacc:	82 0f       	add	r24, r18
    eace:	88 87       	std	Y+8, r24	; 0x08
    ead0:	88 85       	ldd	r24, Y+8	; 0x08
    ead2:	bc d0       	rcall	.+376    	; 0xec4c <udd_ep_get_ctrl>
    ead4:	89 87       	std	Y+9, r24	; 0x09
    ead6:	9a 87       	std	Y+10, r25	; 0x0a
    ead8:	89 85       	ldd	r24, Y+9	; 0x09
    eada:	9a 85       	ldd	r25, Y+10	; 0x0a
    eadc:	fc 01       	movw	r30, r24
    eade:	80 81       	ld	r24, Z
    eae0:	88 2f       	mov	r24, r24
    eae2:	90 e0       	ldi	r25, 0x00	; 0
    eae4:	80 72       	andi	r24, 0x20	; 32
    eae6:	99 27       	eor	r25, r25
    eae8:	89 2b       	or	r24, r25
    eaea:	a9 f0       	breq	.+42     	; 0xeb16 <__vector_126+0x13c>
    eaec:	89 85       	ldd	r24, Y+9	; 0x09
    eaee:	9a 85       	ldd	r25, Y+10	; 0x0a
    eaf0:	fc 01       	movw	r30, r24
    eaf2:	00 e2       	ldi	r16, 0x20	; 32
    eaf4:	06 93       	lac	Z, r16
    eaf6:	88 85       	ldd	r24, Y+8	; 0x08
    eaf8:	88 23       	and	r24, r24
    eafa:	11 f4       	brne	.+4      	; 0xeb00 <__vector_126+0x126>
    eafc:	13 d2       	rcall	.+1062   	; 0xef24 <udd_ctrl_out_received>
    eafe:	09 c0       	rjmp	.+18     	; 0xeb12 <__vector_126+0x138>
    eb00:	88 85       	ldd	r24, Y+8	; 0x08
    eb02:	80 38       	cpi	r24, 0x80	; 128
    eb04:	11 f4       	brne	.+4      	; 0xeb0a <__vector_126+0x130>
    eb06:	79 d1       	rcall	.+754    	; 0xedfa <udd_ctrl_in_sent>
    eb08:	04 c0       	rjmp	.+8      	; 0xeb12 <__vector_126+0x138>
    eb0a:	88 85       	ldd	r24, Y+8	; 0x08
    eb0c:	48 d4       	rcall	.+2192   	; 0xf39e <udd_ep_trans_complet>
    eb0e:	01 c0       	rjmp	.+2      	; 0xeb12 <__vector_126+0x138>
    eb10:	00 00       	nop
    eb12:	00 00       	nop
    eb14:	01 c0       	rjmp	.+2      	; 0xeb18 <__vector_126+0x13e>
    eb16:	00 00       	nop
    eb18:	2a 96       	adiw	r28, 0x0a	; 10
    eb1a:	cd bf       	out	0x3d, r28	; 61
    eb1c:	de bf       	out	0x3e, r29	; 62
    eb1e:	df 91       	pop	r29
    eb20:	cf 91       	pop	r28
    eb22:	ff 91       	pop	r31
    eb24:	ef 91       	pop	r30
    eb26:	bf 91       	pop	r27
    eb28:	af 91       	pop	r26
    eb2a:	9f 91       	pop	r25
    eb2c:	8f 91       	pop	r24
    eb2e:	7f 91       	pop	r23
    eb30:	6f 91       	pop	r22
    eb32:	5f 91       	pop	r21
    eb34:	4f 91       	pop	r20
    eb36:	3f 91       	pop	r19
    eb38:	2f 91       	pop	r18
    eb3a:	0f 91       	pop	r16
    eb3c:	0f 90       	pop	r0
    eb3e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    eb42:	0f 90       	pop	r0
    eb44:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
    eb48:	0f 90       	pop	r0
    eb4a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
    eb4e:	0f 90       	pop	r0
    eb50:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
    eb54:	0f 90       	pop	r0
    eb56:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    eb5a:	0f 90       	pop	r0
    eb5c:	1f 90       	pop	r1
    eb5e:	18 95       	reti

0000eb60 <udd_ep_init>:
    eb60:	cf 93       	push	r28
    eb62:	df 93       	push	r29
    eb64:	cd b7       	in	r28, 0x3d	; 61
    eb66:	de b7       	in	r29, 0x3e	; 62
    eb68:	28 97       	sbiw	r28, 0x08	; 8
    eb6a:	cd bf       	out	0x3d, r28	; 61
    eb6c:	de bf       	out	0x3e, r29	; 62
    eb6e:	8d 83       	std	Y+5, r24	; 0x05
    eb70:	6e 83       	std	Y+6, r22	; 0x06
    eb72:	4f 83       	std	Y+7, r20	; 0x07
    eb74:	58 87       	std	Y+8, r21	; 0x08
    eb76:	8e 81       	ldd	r24, Y+6	; 0x06
    eb78:	88 2f       	mov	r24, r24
    eb7a:	90 e0       	ldi	r25, 0x00	; 0
    eb7c:	83 70       	andi	r24, 0x03	; 3
    eb7e:	99 27       	eor	r25, r25
    eb80:	81 30       	cpi	r24, 0x01	; 1
    eb82:	91 05       	cpc	r25, r1
    eb84:	69 f0       	breq	.+26     	; 0xeba0 <udd_ep_init+0x40>
    eb86:	82 30       	cpi	r24, 0x02	; 2
    eb88:	91 05       	cpc	r25, r1
    eb8a:	1c f4       	brge	.+6      	; 0xeb92 <udd_ep_init+0x32>
    eb8c:	89 2b       	or	r24, r25
    eb8e:	29 f0       	breq	.+10     	; 0xeb9a <udd_ep_init+0x3a>
    eb90:	56 c0       	rjmp	.+172    	; 0xec3e <udd_ep_init+0xde>
    eb92:	04 97       	sbiw	r24, 0x04	; 4
    eb94:	0c f0       	brlt	.+2      	; 0xeb98 <udd_ep_init+0x38>
    eb96:	53 c0       	rjmp	.+166    	; 0xec3e <udd_ep_init+0xde>
    eb98:	06 c0       	rjmp	.+12     	; 0xeba6 <udd_ep_init+0x46>
    eb9a:	80 e4       	ldi	r24, 0x40	; 64
    eb9c:	89 83       	std	Y+1, r24	; 0x01
    eb9e:	06 c0       	rjmp	.+12     	; 0xebac <udd_ep_init+0x4c>
    eba0:	80 ec       	ldi	r24, 0xC0	; 192
    eba2:	89 83       	std	Y+1, r24	; 0x01
    eba4:	03 c0       	rjmp	.+6      	; 0xebac <udd_ep_init+0x4c>
    eba6:	80 e8       	ldi	r24, 0x80	; 128
    eba8:	89 83       	std	Y+1, r24	; 0x01
    ebaa:	00 00       	nop
    ebac:	8f 81       	ldd	r24, Y+7	; 0x07
    ebae:	98 85       	ldd	r25, Y+8	; 0x08
    ebb0:	80 38       	cpi	r24, 0x80	; 128
    ebb2:	91 05       	cpc	r25, r1
    ebb4:	11 f1       	breq	.+68     	; 0xebfa <udd_ep_init+0x9a>
    ebb6:	81 38       	cpi	r24, 0x81	; 129
    ebb8:	91 05       	cpc	r25, r1
    ebba:	48 f4       	brcc	.+18     	; 0xebce <udd_ep_init+0x6e>
    ebbc:	80 32       	cpi	r24, 0x20	; 32
    ebbe:	91 05       	cpc	r25, r1
    ebc0:	b1 f0       	breq	.+44     	; 0xebee <udd_ep_init+0x8e>
    ebc2:	80 34       	cpi	r24, 0x40	; 64
    ebc4:	91 05       	cpc	r25, r1
    ebc6:	b1 f0       	breq	.+44     	; 0xebf4 <udd_ep_init+0x94>
    ebc8:	40 97       	sbiw	r24, 0x10	; 16
    ebca:	71 f0       	breq	.+28     	; 0xebe8 <udd_ep_init+0x88>
    ebcc:	0b c0       	rjmp	.+22     	; 0xebe4 <udd_ep_init+0x84>
    ebce:	81 15       	cp	r24, r1
    ebd0:	22 e0       	ldi	r18, 0x02	; 2
    ebd2:	92 07       	cpc	r25, r18
    ebd4:	c1 f0       	breq	.+48     	; 0xec06 <udd_ep_init+0xa6>
    ebd6:	8f 3f       	cpi	r24, 0xFF	; 255
    ebd8:	e3 e0       	ldi	r30, 0x03	; 3
    ebda:	9e 07       	cpc	r25, r30
    ebdc:	b9 f0       	breq	.+46     	; 0xec0c <udd_ep_init+0xac>
    ebde:	81 15       	cp	r24, r1
    ebe0:	91 40       	sbci	r25, 0x01	; 1
    ebe2:	71 f0       	breq	.+28     	; 0xec00 <udd_ep_init+0xa0>
    ebe4:	1a 82       	std	Y+2, r1	; 0x02
    ebe6:	15 c0       	rjmp	.+42     	; 0xec12 <udd_ep_init+0xb2>
    ebe8:	81 e0       	ldi	r24, 0x01	; 1
    ebea:	8a 83       	std	Y+2, r24	; 0x02
    ebec:	12 c0       	rjmp	.+36     	; 0xec12 <udd_ep_init+0xb2>
    ebee:	82 e0       	ldi	r24, 0x02	; 2
    ebf0:	8a 83       	std	Y+2, r24	; 0x02
    ebf2:	0f c0       	rjmp	.+30     	; 0xec12 <udd_ep_init+0xb2>
    ebf4:	83 e0       	ldi	r24, 0x03	; 3
    ebf6:	8a 83       	std	Y+2, r24	; 0x02
    ebf8:	0c c0       	rjmp	.+24     	; 0xec12 <udd_ep_init+0xb2>
    ebfa:	84 e0       	ldi	r24, 0x04	; 4
    ebfc:	8a 83       	std	Y+2, r24	; 0x02
    ebfe:	09 c0       	rjmp	.+18     	; 0xec12 <udd_ep_init+0xb2>
    ec00:	85 e0       	ldi	r24, 0x05	; 5
    ec02:	8a 83       	std	Y+2, r24	; 0x02
    ec04:	06 c0       	rjmp	.+12     	; 0xec12 <udd_ep_init+0xb2>
    ec06:	86 e0       	ldi	r24, 0x06	; 6
    ec08:	8a 83       	std	Y+2, r24	; 0x02
    ec0a:	03 c0       	rjmp	.+6      	; 0xec12 <udd_ep_init+0xb2>
    ec0c:	87 e0       	ldi	r24, 0x07	; 7
    ec0e:	8a 83       	std	Y+2, r24	; 0x02
    ec10:	00 00       	nop
    ec12:	8d 81       	ldd	r24, Y+5	; 0x05
    ec14:	1b d0       	rcall	.+54     	; 0xec4c <udd_ep_get_ctrl>
    ec16:	8b 83       	std	Y+3, r24	; 0x03
    ec18:	9c 83       	std	Y+4, r25	; 0x04
    ec1a:	8b 81       	ldd	r24, Y+3	; 0x03
    ec1c:	9c 81       	ldd	r25, Y+4	; 0x04
    ec1e:	fc 01       	movw	r30, r24
    ec20:	11 82       	std	Z+1, r1	; 0x01
    ec22:	8b 81       	ldd	r24, Y+3	; 0x03
    ec24:	9c 81       	ldd	r25, Y+4	; 0x04
    ec26:	26 e0       	ldi	r18, 0x06	; 6
    ec28:	fc 01       	movw	r30, r24
    ec2a:	20 83       	st	Z, r18
    ec2c:	99 81       	ldd	r25, Y+1	; 0x01
    ec2e:	8a 81       	ldd	r24, Y+2	; 0x02
    ec30:	29 2f       	mov	r18, r25
    ec32:	28 2b       	or	r18, r24
    ec34:	8b 81       	ldd	r24, Y+3	; 0x03
    ec36:	9c 81       	ldd	r25, Y+4	; 0x04
    ec38:	fc 01       	movw	r30, r24
    ec3a:	21 83       	std	Z+1, r18	; 0x01
    ec3c:	01 c0       	rjmp	.+2      	; 0xec40 <udd_ep_init+0xe0>
    ec3e:	00 00       	nop
    ec40:	28 96       	adiw	r28, 0x08	; 8
    ec42:	cd bf       	out	0x3d, r28	; 61
    ec44:	de bf       	out	0x3e, r29	; 62
    ec46:	df 91       	pop	r29
    ec48:	cf 91       	pop	r28
    ec4a:	08 95       	ret

0000ec4c <udd_ep_get_ctrl>:
    ec4c:	cf 93       	push	r28
    ec4e:	df 93       	push	r29
    ec50:	1f 92       	push	r1
    ec52:	cd b7       	in	r28, 0x3d	; 61
    ec54:	de b7       	in	r29, 0x3e	; 62
    ec56:	89 83       	std	Y+1, r24	; 0x01
    ec58:	89 81       	ldd	r24, Y+1	; 0x01
    ec5a:	88 2f       	mov	r24, r24
    ec5c:	90 e0       	ldi	r25, 0x00	; 0
    ec5e:	8f 70       	andi	r24, 0x0F	; 15
    ec60:	99 27       	eor	r25, r25
    ec62:	9c 01       	movw	r18, r24
    ec64:	22 0f       	add	r18, r18
    ec66:	33 1f       	adc	r19, r19
    ec68:	89 81       	ldd	r24, Y+1	; 0x01
    ec6a:	88 1f       	adc	r24, r24
    ec6c:	88 27       	eor	r24, r24
    ec6e:	88 1f       	adc	r24, r24
    ec70:	88 2f       	mov	r24, r24
    ec72:	90 e0       	ldi	r25, 0x00	; 0
    ec74:	82 0f       	add	r24, r18
    ec76:	93 1f       	adc	r25, r19
    ec78:	02 96       	adiw	r24, 0x02	; 2
    ec7a:	88 0f       	add	r24, r24
    ec7c:	99 1f       	adc	r25, r25
    ec7e:	88 0f       	add	r24, r24
    ec80:	99 1f       	adc	r25, r25
    ec82:	88 0f       	add	r24, r24
    ec84:	99 1f       	adc	r25, r25
    ec86:	80 52       	subi	r24, 0x20	; 32
    ec88:	9c 4d       	sbci	r25, 0xDC	; 220
    ec8a:	0f 90       	pop	r0
    ec8c:	df 91       	pop	r29
    ec8e:	cf 91       	pop	r28
    ec90:	08 95       	ret

0000ec92 <udd_ctrl_init>:
    ec92:	0f 93       	push	r16
    ec94:	cf 93       	push	r28
    ec96:	df 93       	push	r29
    ec98:	cd b7       	in	r28, 0x3d	; 61
    ec9a:	de b7       	in	r29, 0x3e	; 62
    ec9c:	88 ec       	ldi	r24, 0xC8	; 200
    ec9e:	94 e0       	ldi	r25, 0x04	; 4
    eca0:	28 ec       	ldi	r18, 0xC8	; 200
    eca2:	34 e0       	ldi	r19, 0x04	; 4
    eca4:	f9 01       	movw	r30, r18
    eca6:	20 81       	ld	r18, Z
    eca8:	2f 7d       	andi	r18, 0xDF	; 223
    ecaa:	fc 01       	movw	r30, r24
    ecac:	20 83       	st	Z, r18
    ecae:	88 ec       	ldi	r24, 0xC8	; 200
    ecb0:	94 e0       	ldi	r25, 0x04	; 4
    ecb2:	28 ec       	ldi	r18, 0xC8	; 200
    ecb4:	34 e0       	ldi	r19, 0x04	; 4
    ecb6:	f9 01       	movw	r30, r18
    ecb8:	20 81       	ld	r18, Z
    ecba:	2f 7d       	andi	r18, 0xDF	; 223
    ecbc:	fc 01       	movw	r30, r24
    ecbe:	20 83       	st	Z, r18
    ecc0:	88 ef       	ldi	r24, 0xF8	; 248
    ecc2:	93 e2       	ldi	r25, 0x23	; 35
    ecc4:	fc 01       	movw	r30, r24
    ecc6:	02 e0       	ldi	r16, 0x02	; 2
    ecc8:	05 93       	las	Z, r16
    ecca:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <udd_sram+0x1a>
    ecce:	10 92 fb 23 	sts	0x23FB, r1	; 0x8023fb <udd_sram+0x1b>
    ecd2:	88 ef       	ldi	r24, 0xF8	; 248
    ecd4:	93 e2       	ldi	r25, 0x23	; 35
    ecd6:	fc 01       	movw	r30, r24
    ecd8:	00 e2       	ldi	r16, 0x20	; 32
    ecda:	06 93       	lac	Z, r16
    ecdc:	88 ef       	ldi	r24, 0xF8	; 248
    ecde:	93 e2       	ldi	r25, 0x23	; 35
    ece0:	fc 01       	movw	r30, r24
    ece2:	00 e4       	ldi	r16, 0x40	; 64
    ece4:	06 93       	lac	Z, r16
    ece6:	80 ef       	ldi	r24, 0xF0	; 240
    ece8:	93 e2       	ldi	r25, 0x23	; 35
    ecea:	fc 01       	movw	r30, r24
    ecec:	00 e2       	ldi	r16, 0x20	; 32
    ecee:	06 93       	lac	Z, r16
    ecf0:	80 ef       	ldi	r24, 0xF0	; 240
    ecf2:	93 e2       	ldi	r25, 0x23	; 35
    ecf4:	fc 01       	movw	r30, r24
    ecf6:	00 e4       	ldi	r16, 0x40	; 64
    ecf8:	06 93       	lac	Z, r16
    ecfa:	10 92 96 29 	sts	0x2996, r1	; 0x802996 <udd_g_ctrlreq+0xc>
    ecfe:	10 92 97 29 	sts	0x2997, r1	; 0x802997 <udd_g_ctrlreq+0xd>
    ed02:	10 92 98 29 	sts	0x2998, r1	; 0x802998 <udd_g_ctrlreq+0xe>
    ed06:	10 92 99 29 	sts	0x2999, r1	; 0x802999 <udd_g_ctrlreq+0xf>
    ed0a:	10 92 94 29 	sts	0x2994, r1	; 0x802994 <udd_g_ctrlreq+0xa>
    ed0e:	10 92 95 29 	sts	0x2995, r1	; 0x802995 <udd_g_ctrlreq+0xb>
    ed12:	10 92 30 24 	sts	0x2430, r1	; 0x802430 <udd_ep_control_state>
    ed16:	00 00       	nop
    ed18:	df 91       	pop	r29
    ed1a:	cf 91       	pop	r28
    ed1c:	0f 91       	pop	r16
    ed1e:	08 95       	ret

0000ed20 <udd_ctrl_setup_received>:
    ed20:	0f 93       	push	r16
    ed22:	cf 93       	push	r28
    ed24:	df 93       	push	r29
    ed26:	cd b7       	in	r28, 0x3d	; 61
    ed28:	de b7       	in	r29, 0x3e	; 62
    ed2a:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    ed2e:	88 23       	and	r24, r24
    ed30:	51 f0       	breq	.+20     	; 0xed46 <udd_ctrl_setup_received+0x26>
    ed32:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    ed36:	83 30       	cpi	r24, 0x03	; 3
    ed38:	21 f0       	breq	.+8      	; 0xed42 <udd_ctrl_setup_received+0x22>
    ed3a:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    ed3e:	84 30       	cpi	r24, 0x04	; 4
    ed40:	09 f4       	brne	.+2      	; 0xed44 <udd_ctrl_setup_received+0x24>
    ed42:	45 d2       	rcall	.+1162   	; 0xf1ce <udd_ctrl_endofrequest>
    ed44:	a6 df       	rcall	.-180    	; 0xec92 <udd_ctrl_init>
    ed46:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <udd_sram+0x12>
    ed4a:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <udd_sram+0x13>
    ed4e:	08 97       	sbiw	r24, 0x08	; 8
    ed50:	09 f0       	breq	.+2      	; 0xed54 <udd_ctrl_setup_received+0x34>
    ed52:	4e c0       	rjmp	.+156    	; 0xedf0 <udd_ctrl_setup_received+0xd0>
    ed54:	88 e0       	ldi	r24, 0x08	; 8
    ed56:	e5 e3       	ldi	r30, 0x35	; 53
    ed58:	f4 e2       	ldi	r31, 0x24	; 36
    ed5a:	aa e8       	ldi	r26, 0x8A	; 138
    ed5c:	b9 e2       	ldi	r27, 0x29	; 41
    ed5e:	01 90       	ld	r0, Z+
    ed60:	0d 92       	st	X+, r0
    ed62:	8a 95       	dec	r24
    ed64:	e1 f7       	brne	.-8      	; 0xed5e <udd_ctrl_setup_received+0x3e>
    ed66:	88 ec       	ldi	r24, 0xC8	; 200
    ed68:	94 e0       	ldi	r25, 0x04	; 4
    ed6a:	28 ec       	ldi	r18, 0xC8	; 200
    ed6c:	34 e0       	ldi	r19, 0x04	; 4
    ed6e:	f9 01       	movw	r30, r18
    ed70:	20 81       	ld	r18, Z
    ed72:	20 62       	ori	r18, 0x20	; 32
    ed74:	fc 01       	movw	r30, r24
    ed76:	20 83       	st	Z, r18
    ed78:	88 ec       	ldi	r24, 0xC8	; 200
    ed7a:	94 e0       	ldi	r25, 0x04	; 4
    ed7c:	28 ec       	ldi	r18, 0xC8	; 200
    ed7e:	34 e0       	ldi	r19, 0x04	; 4
    ed80:	f9 01       	movw	r30, r18
    ed82:	20 81       	ld	r18, Z
    ed84:	20 62       	ori	r18, 0x20	; 32
    ed86:	fc 01       	movw	r30, r24
    ed88:	20 83       	st	Z, r18
    ed8a:	0e 94 11 6c 	call	0xd822	; 0xd822 <udc_process_setup>
    ed8e:	98 2f       	mov	r25, r24
    ed90:	81 e0       	ldi	r24, 0x01	; 1
    ed92:	89 27       	eor	r24, r25
    ed94:	88 23       	and	r24, r24
    ed96:	11 f0       	breq	.+4      	; 0xed9c <udd_ctrl_setup_received+0x7c>
    ed98:	db d1       	rcall	.+950    	; 0xf150 <udd_ctrl_stall_data>
    ed9a:	2b c0       	rjmp	.+86     	; 0xedf2 <udd_ctrl_setup_received+0xd2>
    ed9c:	80 91 8a 29 	lds	r24, 0x298A	; 0x80298a <udd_g_ctrlreq>
    eda0:	88 23       	and	r24, r24
    eda2:	6c f4       	brge	.+26     	; 0xedbe <udd_ctrl_setup_received+0x9e>
    eda4:	10 92 31 24 	sts	0x2431, r1	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    eda8:	10 92 32 24 	sts	0x2432, r1	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    edac:	10 92 33 24 	sts	0x2433, r1	; 0x802433 <udd_ctrl_payload_nb_trans>
    edb0:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    edb4:	82 e0       	ldi	r24, 0x02	; 2
    edb6:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <udd_ep_control_state>
    edba:	1f d0       	rcall	.+62     	; 0xedfa <udd_ctrl_in_sent>
    edbc:	1a c0       	rjmp	.+52     	; 0xedf2 <udd_ctrl_setup_received+0xd2>
    edbe:	80 91 90 29 	lds	r24, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    edc2:	90 91 91 29 	lds	r25, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    edc6:	89 2b       	or	r24, r25
    edc8:	11 f4       	brne	.+4      	; 0xedce <udd_ctrl_setup_received+0xae>
    edca:	d9 d1       	rcall	.+946    	; 0xf17e <udd_ctrl_send_zlp_in>
    edcc:	12 c0       	rjmp	.+36     	; 0xedf2 <udd_ctrl_setup_received+0xd2>
    edce:	10 92 31 24 	sts	0x2431, r1	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    edd2:	10 92 32 24 	sts	0x2432, r1	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    edd6:	10 92 33 24 	sts	0x2433, r1	; 0x802433 <udd_ctrl_payload_nb_trans>
    edda:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    edde:	81 e0       	ldi	r24, 0x01	; 1
    ede0:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <udd_ep_control_state>
    ede4:	80 ef       	ldi	r24, 0xF0	; 240
    ede6:	93 e2       	ldi	r25, 0x23	; 35
    ede8:	fc 01       	movw	r30, r24
    edea:	02 e0       	ldi	r16, 0x02	; 2
    edec:	06 93       	lac	Z, r16
    edee:	01 c0       	rjmp	.+2      	; 0xedf2 <udd_ctrl_setup_received+0xd2>
    edf0:	00 00       	nop
    edf2:	df 91       	pop	r29
    edf4:	cf 91       	pop	r28
    edf6:	0f 91       	pop	r16
    edf8:	08 95       	ret

0000edfa <udd_ctrl_in_sent>:
    edfa:	0f 93       	push	r16
    edfc:	cf 93       	push	r28
    edfe:	df 93       	push	r29
    ee00:	1f 92       	push	r1
    ee02:	1f 92       	push	r1
    ee04:	cd b7       	in	r28, 0x3d	; 61
    ee06:	de b7       	in	r29, 0x3e	; 62
    ee08:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    ee0c:	83 30       	cpi	r24, 0x03	; 3
    ee0e:	19 f4       	brne	.+6      	; 0xee16 <udd_ctrl_in_sent+0x1c>
    ee10:	de d1       	rcall	.+956    	; 0xf1ce <udd_ctrl_endofrequest>
    ee12:	3f df       	rcall	.-386    	; 0xec92 <udd_ctrl_init>
    ee14:	81 c0       	rjmp	.+258    	; 0xef18 <udd_ctrl_in_sent+0x11e>
    ee16:	20 91 94 29 	lds	r18, 0x2994	; 0x802994 <udd_g_ctrlreq+0xa>
    ee1a:	30 91 95 29 	lds	r19, 0x2995	; 0x802995 <udd_g_ctrlreq+0xb>
    ee1e:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    ee22:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    ee26:	a9 01       	movw	r20, r18
    ee28:	48 1b       	sub	r20, r24
    ee2a:	59 0b       	sbc	r21, r25
    ee2c:	ca 01       	movw	r24, r20
    ee2e:	89 83       	std	Y+1, r24	; 0x01
    ee30:	9a 83       	std	Y+2, r25	; 0x02
    ee32:	89 81       	ldd	r24, Y+1	; 0x01
    ee34:	9a 81       	ldd	r25, Y+2	; 0x02
    ee36:	89 2b       	or	r24, r25
    ee38:	d1 f5       	brne	.+116    	; 0xeeae <udd_ctrl_in_sent+0xb4>
    ee3a:	20 91 31 24 	lds	r18, 0x2431	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    ee3e:	30 91 32 24 	lds	r19, 0x2432	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    ee42:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    ee46:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    ee4a:	82 0f       	add	r24, r18
    ee4c:	93 1f       	adc	r25, r19
    ee4e:	80 93 31 24 	sts	0x2431, r24	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    ee52:	90 93 32 24 	sts	0x2432, r25	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    ee56:	20 91 90 29 	lds	r18, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    ee5a:	30 91 91 29 	lds	r19, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    ee5e:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    ee62:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    ee66:	28 17       	cp	r18, r24
    ee68:	39 07       	cpc	r19, r25
    ee6a:	21 f0       	breq	.+8      	; 0xee74 <udd_ctrl_in_sent+0x7a>
    ee6c:	80 91 19 25 	lds	r24, 0x2519	; 0x802519 <b_shortpacket.5649>
    ee70:	88 23       	and	r24, r24
    ee72:	11 f0       	breq	.+4      	; 0xee78 <udd_ctrl_in_sent+0x7e>
    ee74:	9a d1       	rcall	.+820    	; 0xf1aa <udd_ctrl_send_zlp_out>
    ee76:	50 c0       	rjmp	.+160    	; 0xef18 <udd_ctrl_in_sent+0x11e>
    ee78:	80 91 98 29 	lds	r24, 0x2998	; 0x802998 <udd_g_ctrlreq+0xe>
    ee7c:	90 91 99 29 	lds	r25, 0x2999	; 0x802999 <udd_g_ctrlreq+0xf>
    ee80:	89 2b       	or	r24, r25
    ee82:	a9 f0       	breq	.+42     	; 0xeeae <udd_ctrl_in_sent+0xb4>
    ee84:	80 91 98 29 	lds	r24, 0x2998	; 0x802998 <udd_g_ctrlreq+0xe>
    ee88:	90 91 99 29 	lds	r25, 0x2999	; 0x802999 <udd_g_ctrlreq+0xf>
    ee8c:	fc 01       	movw	r30, r24
    ee8e:	19 95       	eicall
    ee90:	98 2f       	mov	r25, r24
    ee92:	81 e0       	ldi	r24, 0x01	; 1
    ee94:	89 27       	eor	r24, r25
    ee96:	88 23       	and	r24, r24
    ee98:	51 f4       	brne	.+20     	; 0xeeae <udd_ctrl_in_sent+0xb4>
    ee9a:	10 92 33 24 	sts	0x2433, r1	; 0x802433 <udd_ctrl_payload_nb_trans>
    ee9e:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    eea2:	80 91 94 29 	lds	r24, 0x2994	; 0x802994 <udd_g_ctrlreq+0xa>
    eea6:	90 91 95 29 	lds	r25, 0x2995	; 0x802995 <udd_g_ctrlreq+0xb>
    eeaa:	89 83       	std	Y+1, r24	; 0x01
    eeac:	9a 83       	std	Y+2, r25	; 0x02
    eeae:	89 81       	ldd	r24, Y+1	; 0x01
    eeb0:	9a 81       	ldd	r25, Y+2	; 0x02
    eeb2:	80 34       	cpi	r24, 0x40	; 64
    eeb4:	91 05       	cpc	r25, r1
    eeb6:	38 f0       	brcs	.+14     	; 0xeec6 <udd_ctrl_in_sent+0xcc>
    eeb8:	80 e4       	ldi	r24, 0x40	; 64
    eeba:	90 e0       	ldi	r25, 0x00	; 0
    eebc:	89 83       	std	Y+1, r24	; 0x01
    eebe:	9a 83       	std	Y+2, r25	; 0x02
    eec0:	10 92 19 25 	sts	0x2519, r1	; 0x802519 <b_shortpacket.5649>
    eec4:	03 c0       	rjmp	.+6      	; 0xeecc <udd_ctrl_in_sent+0xd2>
    eec6:	81 e0       	ldi	r24, 0x01	; 1
    eec8:	80 93 19 25 	sts	0x2519, r24	; 0x802519 <b_shortpacket.5649>
    eecc:	89 81       	ldd	r24, Y+1	; 0x01
    eece:	9a 81       	ldd	r25, Y+2	; 0x02
    eed0:	80 93 fa 23 	sts	0x23FA, r24	; 0x8023fa <udd_sram+0x1a>
    eed4:	90 93 fb 23 	sts	0x23FB, r25	; 0x8023fb <udd_sram+0x1b>
    eed8:	80 91 92 29 	lds	r24, 0x2992	; 0x802992 <udd_g_ctrlreq+0x8>
    eedc:	90 91 93 29 	lds	r25, 0x2993	; 0x802993 <udd_g_ctrlreq+0x9>
    eee0:	9c 01       	movw	r18, r24
    eee2:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    eee6:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    eeea:	82 0f       	add	r24, r18
    eeec:	93 1f       	adc	r25, r19
    eeee:	80 93 fc 23 	sts	0x23FC, r24	; 0x8023fc <udd_sram+0x1c>
    eef2:	90 93 fd 23 	sts	0x23FD, r25	; 0x8023fd <udd_sram+0x1d>
    eef6:	20 91 33 24 	lds	r18, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    eefa:	30 91 34 24 	lds	r19, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    eefe:	89 81       	ldd	r24, Y+1	; 0x01
    ef00:	9a 81       	ldd	r25, Y+2	; 0x02
    ef02:	82 0f       	add	r24, r18
    ef04:	93 1f       	adc	r25, r19
    ef06:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <udd_ctrl_payload_nb_trans>
    ef0a:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    ef0e:	88 ef       	ldi	r24, 0xF8	; 248
    ef10:	93 e2       	ldi	r25, 0x23	; 35
    ef12:	fc 01       	movw	r30, r24
    ef14:	02 e0       	ldi	r16, 0x02	; 2
    ef16:	06 93       	lac	Z, r16
    ef18:	0f 90       	pop	r0
    ef1a:	0f 90       	pop	r0
    ef1c:	df 91       	pop	r29
    ef1e:	cf 91       	pop	r28
    ef20:	0f 91       	pop	r16
    ef22:	08 95       	ret

0000ef24 <udd_ctrl_out_received>:
    ef24:	0f 93       	push	r16
    ef26:	cf 93       	push	r28
    ef28:	df 93       	push	r29
    ef2a:	1f 92       	push	r1
    ef2c:	1f 92       	push	r1
    ef2e:	cd b7       	in	r28, 0x3d	; 61
    ef30:	de b7       	in	r29, 0x3e	; 62
    ef32:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    ef36:	84 30       	cpi	r24, 0x04	; 4
    ef38:	19 f4       	brne	.+6      	; 0xef40 <udd_ctrl_out_received+0x1c>
    ef3a:	49 d1       	rcall	.+658    	; 0xf1ce <udd_ctrl_endofrequest>
    ef3c:	aa de       	rcall	.-684    	; 0xec92 <udd_ctrl_init>
    ef3e:	aa c0       	rjmp	.+340    	; 0xf094 <udd_ctrl_out_received+0x170>
    ef40:	80 91 f2 23 	lds	r24, 0x23F2	; 0x8023f2 <udd_sram+0x12>
    ef44:	90 91 f3 23 	lds	r25, 0x23F3	; 0x8023f3 <udd_sram+0x13>
    ef48:	89 83       	std	Y+1, r24	; 0x01
    ef4a:	9a 83       	std	Y+2, r25	; 0x02
    ef4c:	20 91 94 29 	lds	r18, 0x2994	; 0x802994 <udd_g_ctrlreq+0xa>
    ef50:	30 91 95 29 	lds	r19, 0x2995	; 0x802995 <udd_g_ctrlreq+0xb>
    ef54:	40 91 33 24 	lds	r20, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    ef58:	50 91 34 24 	lds	r21, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    ef5c:	89 81       	ldd	r24, Y+1	; 0x01
    ef5e:	9a 81       	ldd	r25, Y+2	; 0x02
    ef60:	84 0f       	add	r24, r20
    ef62:	95 1f       	adc	r25, r21
    ef64:	28 17       	cp	r18, r24
    ef66:	39 07       	cpc	r19, r25
    ef68:	70 f4       	brcc	.+28     	; 0xef86 <udd_ctrl_out_received+0x62>
    ef6a:	20 91 94 29 	lds	r18, 0x2994	; 0x802994 <udd_g_ctrlreq+0xa>
    ef6e:	30 91 95 29 	lds	r19, 0x2995	; 0x802995 <udd_g_ctrlreq+0xb>
    ef72:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    ef76:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    ef7a:	a9 01       	movw	r20, r18
    ef7c:	48 1b       	sub	r20, r24
    ef7e:	59 0b       	sbc	r21, r25
    ef80:	ca 01       	movw	r24, r20
    ef82:	89 83       	std	Y+1, r24	; 0x01
    ef84:	9a 83       	std	Y+2, r25	; 0x02
    ef86:	20 91 92 29 	lds	r18, 0x2992	; 0x802992 <udd_g_ctrlreq+0x8>
    ef8a:	30 91 93 29 	lds	r19, 0x2993	; 0x802993 <udd_g_ctrlreq+0x9>
    ef8e:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    ef92:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    ef96:	82 0f       	add	r24, r18
    ef98:	93 1f       	adc	r25, r19
    ef9a:	29 81       	ldd	r18, Y+1	; 0x01
    ef9c:	3a 81       	ldd	r19, Y+2	; 0x02
    ef9e:	a9 01       	movw	r20, r18
    efa0:	65 e3       	ldi	r22, 0x35	; 53
    efa2:	74 e2       	ldi	r23, 0x24	; 36
    efa4:	0e 94 ec b7 	call	0x16fd8	; 0x16fd8 <memcpy>
    efa8:	20 91 33 24 	lds	r18, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    efac:	30 91 34 24 	lds	r19, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    efb0:	89 81       	ldd	r24, Y+1	; 0x01
    efb2:	9a 81       	ldd	r25, Y+2	; 0x02
    efb4:	82 0f       	add	r24, r18
    efb6:	93 1f       	adc	r25, r19
    efb8:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <udd_ctrl_payload_nb_trans>
    efbc:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    efc0:	89 81       	ldd	r24, Y+1	; 0x01
    efc2:	9a 81       	ldd	r25, Y+2	; 0x02
    efc4:	80 34       	cpi	r24, 0x40	; 64
    efc6:	91 05       	cpc	r25, r1
    efc8:	89 f4       	brne	.+34     	; 0xefec <udd_ctrl_out_received+0xc8>
    efca:	20 91 90 29 	lds	r18, 0x2990	; 0x802990 <udd_g_ctrlreq+0x6>
    efce:	30 91 91 29 	lds	r19, 0x2991	; 0x802991 <udd_g_ctrlreq+0x7>
    efd2:	40 91 31 24 	lds	r20, 0x2431	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    efd6:	50 91 32 24 	lds	r21, 0x2432	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    efda:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    efde:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    efe2:	84 0f       	add	r24, r20
    efe4:	95 1f       	adc	r25, r21
    efe6:	82 17       	cp	r24, r18
    efe8:	93 07       	cpc	r25, r19
    efea:	e8 f0       	brcs	.+58     	; 0xf026 <udd_ctrl_out_received+0x102>
    efec:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    eff0:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    eff4:	80 93 94 29 	sts	0x2994, r24	; 0x802994 <udd_g_ctrlreq+0xa>
    eff8:	90 93 95 29 	sts	0x2995, r25	; 0x802995 <udd_g_ctrlreq+0xb>
    effc:	80 91 98 29 	lds	r24, 0x2998	; 0x802998 <udd_g_ctrlreq+0xe>
    f000:	90 91 99 29 	lds	r25, 0x2999	; 0x802999 <udd_g_ctrlreq+0xf>
    f004:	89 2b       	or	r24, r25
    f006:	69 f0       	breq	.+26     	; 0xf022 <udd_ctrl_out_received+0xfe>
    f008:	80 91 98 29 	lds	r24, 0x2998	; 0x802998 <udd_g_ctrlreq+0xe>
    f00c:	90 91 99 29 	lds	r25, 0x2999	; 0x802999 <udd_g_ctrlreq+0xf>
    f010:	fc 01       	movw	r30, r24
    f012:	19 95       	eicall
    f014:	98 2f       	mov	r25, r24
    f016:	81 e0       	ldi	r24, 0x01	; 1
    f018:	89 27       	eor	r24, r25
    f01a:	88 23       	and	r24, r24
    f01c:	11 f0       	breq	.+4      	; 0xf022 <udd_ctrl_out_received+0xfe>
    f01e:	98 d0       	rcall	.+304    	; 0xf150 <udd_ctrl_stall_data>
    f020:	39 c0       	rjmp	.+114    	; 0xf094 <udd_ctrl_out_received+0x170>
    f022:	ad d0       	rcall	.+346    	; 0xf17e <udd_ctrl_send_zlp_in>
    f024:	37 c0       	rjmp	.+110    	; 0xf094 <udd_ctrl_out_received+0x170>
    f026:	20 91 94 29 	lds	r18, 0x2994	; 0x802994 <udd_g_ctrlreq+0xa>
    f02a:	30 91 95 29 	lds	r19, 0x2995	; 0x802995 <udd_g_ctrlreq+0xb>
    f02e:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    f032:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    f036:	28 17       	cp	r18, r24
    f038:	39 07       	cpc	r19, r25
    f03a:	39 f5       	brne	.+78     	; 0xf08a <udd_ctrl_out_received+0x166>
    f03c:	80 91 98 29 	lds	r24, 0x2998	; 0x802998 <udd_g_ctrlreq+0xe>
    f040:	90 91 99 29 	lds	r25, 0x2999	; 0x802999 <udd_g_ctrlreq+0xf>
    f044:	89 2b       	or	r24, r25
    f046:	11 f4       	brne	.+4      	; 0xf04c <udd_ctrl_out_received+0x128>
    f048:	83 d0       	rcall	.+262    	; 0xf150 <udd_ctrl_stall_data>
    f04a:	24 c0       	rjmp	.+72     	; 0xf094 <udd_ctrl_out_received+0x170>
    f04c:	80 91 98 29 	lds	r24, 0x2998	; 0x802998 <udd_g_ctrlreq+0xe>
    f050:	90 91 99 29 	lds	r25, 0x2999	; 0x802999 <udd_g_ctrlreq+0xf>
    f054:	fc 01       	movw	r30, r24
    f056:	19 95       	eicall
    f058:	98 2f       	mov	r25, r24
    f05a:	81 e0       	ldi	r24, 0x01	; 1
    f05c:	89 27       	eor	r24, r25
    f05e:	88 23       	and	r24, r24
    f060:	11 f0       	breq	.+4      	; 0xf066 <udd_ctrl_out_received+0x142>
    f062:	76 d0       	rcall	.+236    	; 0xf150 <udd_ctrl_stall_data>
    f064:	17 c0       	rjmp	.+46     	; 0xf094 <udd_ctrl_out_received+0x170>
    f066:	20 91 31 24 	lds	r18, 0x2431	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    f06a:	30 91 32 24 	lds	r19, 0x2432	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    f06e:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_payload_nb_trans>
    f072:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    f076:	82 0f       	add	r24, r18
    f078:	93 1f       	adc	r25, r19
    f07a:	80 93 31 24 	sts	0x2431, r24	; 0x802431 <udd_ctrl_prev_payload_nb_trans>
    f07e:	90 93 32 24 	sts	0x2432, r25	; 0x802432 <udd_ctrl_prev_payload_nb_trans+0x1>
    f082:	10 92 33 24 	sts	0x2433, r1	; 0x802433 <udd_ctrl_payload_nb_trans>
    f086:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <udd_ctrl_payload_nb_trans+0x1>
    f08a:	80 ef       	ldi	r24, 0xF0	; 240
    f08c:	93 e2       	ldi	r25, 0x23	; 35
    f08e:	fc 01       	movw	r30, r24
    f090:	02 e0       	ldi	r16, 0x02	; 2
    f092:	06 93       	lac	Z, r16
    f094:	0f 90       	pop	r0
    f096:	0f 90       	pop	r0
    f098:	df 91       	pop	r29
    f09a:	cf 91       	pop	r28
    f09c:	0f 91       	pop	r16
    f09e:	08 95       	ret

0000f0a0 <udd_ctrl_underflow>:
    f0a0:	0f 93       	push	r16
    f0a2:	cf 93       	push	r28
    f0a4:	df 93       	push	r29
    f0a6:	cd b7       	in	r28, 0x3d	; 61
    f0a8:	de b7       	in	r29, 0x3e	; 62
    f0aa:	8c ec       	ldi	r24, 0xCC	; 204
    f0ac:	94 e0       	ldi	r25, 0x04	; 4
    f0ae:	fc 01       	movw	r30, r24
    f0b0:	80 81       	ld	r24, Z
    f0b2:	88 2f       	mov	r24, r24
    f0b4:	90 e0       	ldi	r25, 0x00	; 0
    f0b6:	82 70       	andi	r24, 0x02	; 2
    f0b8:	99 27       	eor	r25, r25
    f0ba:	89 2b       	or	r24, r25
    f0bc:	c1 f4       	brne	.+48     	; 0xf0ee <udd_ctrl_underflow+0x4e>
    f0be:	d7 d0       	rcall	.+430    	; 0xf26e <udd_ctrl_interrupt_tc_setup>
    f0c0:	88 23       	and	r24, r24
    f0c2:	a9 f4       	brne	.+42     	; 0xf0ee <udd_ctrl_underflow+0x4e>
    f0c4:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    f0c8:	81 30       	cpi	r24, 0x01	; 1
    f0ca:	11 f4       	brne	.+4      	; 0xf0d0 <udd_ctrl_underflow+0x30>
    f0cc:	58 d0       	rcall	.+176    	; 0xf17e <udd_ctrl_send_zlp_in>
    f0ce:	10 c0       	rjmp	.+32     	; 0xf0f0 <udd_ctrl_underflow+0x50>
    f0d0:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    f0d4:	84 30       	cpi	r24, 0x04	; 4
    f0d6:	61 f4       	brne	.+24     	; 0xf0f0 <udd_ctrl_underflow+0x50>
    f0d8:	89 ef       	ldi	r24, 0xF9	; 249
    f0da:	93 e2       	ldi	r25, 0x23	; 35
    f0dc:	fc 01       	movw	r30, r24
    f0de:	04 e0       	ldi	r16, 0x04	; 4
    f0e0:	05 93       	las	Z, r16
    f0e2:	81 ef       	ldi	r24, 0xF1	; 241
    f0e4:	93 e2       	ldi	r25, 0x23	; 35
    f0e6:	fc 01       	movw	r30, r24
    f0e8:	04 e0       	ldi	r16, 0x04	; 4
    f0ea:	05 93       	las	Z, r16
    f0ec:	01 c0       	rjmp	.+2      	; 0xf0f0 <udd_ctrl_underflow+0x50>
    f0ee:	00 00       	nop
    f0f0:	df 91       	pop	r29
    f0f2:	cf 91       	pop	r28
    f0f4:	0f 91       	pop	r16
    f0f6:	08 95       	ret

0000f0f8 <udd_ctrl_overflow>:
    f0f8:	0f 93       	push	r16
    f0fa:	cf 93       	push	r28
    f0fc:	df 93       	push	r29
    f0fe:	cd b7       	in	r28, 0x3d	; 61
    f100:	de b7       	in	r29, 0x3e	; 62
    f102:	8c ec       	ldi	r24, 0xCC	; 204
    f104:	94 e0       	ldi	r25, 0x04	; 4
    f106:	fc 01       	movw	r30, r24
    f108:	80 81       	ld	r24, Z
    f10a:	88 2f       	mov	r24, r24
    f10c:	90 e0       	ldi	r25, 0x00	; 0
    f10e:	82 70       	andi	r24, 0x02	; 2
    f110:	99 27       	eor	r25, r25
    f112:	89 2b       	or	r24, r25
    f114:	c1 f4       	brne	.+48     	; 0xf146 <udd_ctrl_overflow+0x4e>
    f116:	ab d0       	rcall	.+342    	; 0xf26e <udd_ctrl_interrupt_tc_setup>
    f118:	88 23       	and	r24, r24
    f11a:	a9 f4       	brne	.+42     	; 0xf146 <udd_ctrl_overflow+0x4e>
    f11c:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    f120:	82 30       	cpi	r24, 0x02	; 2
    f122:	11 f4       	brne	.+4      	; 0xf128 <udd_ctrl_overflow+0x30>
    f124:	42 d0       	rcall	.+132    	; 0xf1aa <udd_ctrl_send_zlp_out>
    f126:	10 c0       	rjmp	.+32     	; 0xf148 <udd_ctrl_overflow+0x50>
    f128:	80 91 30 24 	lds	r24, 0x2430	; 0x802430 <udd_ep_control_state>
    f12c:	83 30       	cpi	r24, 0x03	; 3
    f12e:	61 f4       	brne	.+24     	; 0xf148 <udd_ctrl_overflow+0x50>
    f130:	89 ef       	ldi	r24, 0xF9	; 249
    f132:	93 e2       	ldi	r25, 0x23	; 35
    f134:	fc 01       	movw	r30, r24
    f136:	04 e0       	ldi	r16, 0x04	; 4
    f138:	05 93       	las	Z, r16
    f13a:	81 ef       	ldi	r24, 0xF1	; 241
    f13c:	93 e2       	ldi	r25, 0x23	; 35
    f13e:	fc 01       	movw	r30, r24
    f140:	04 e0       	ldi	r16, 0x04	; 4
    f142:	05 93       	las	Z, r16
    f144:	01 c0       	rjmp	.+2      	; 0xf148 <udd_ctrl_overflow+0x50>
    f146:	00 00       	nop
    f148:	df 91       	pop	r29
    f14a:	cf 91       	pop	r28
    f14c:	0f 91       	pop	r16
    f14e:	08 95       	ret

0000f150 <udd_ctrl_stall_data>:
    f150:	0f 93       	push	r16
    f152:	cf 93       	push	r28
    f154:	df 93       	push	r29
    f156:	cd b7       	in	r28, 0x3d	; 61
    f158:	de b7       	in	r29, 0x3e	; 62
    f15a:	85 e0       	ldi	r24, 0x05	; 5
    f15c:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <udd_ep_control_state>
    f160:	89 ef       	ldi	r24, 0xF9	; 249
    f162:	93 e2       	ldi	r25, 0x23	; 35
    f164:	fc 01       	movw	r30, r24
    f166:	04 e0       	ldi	r16, 0x04	; 4
    f168:	05 93       	las	Z, r16
    f16a:	81 ef       	ldi	r24, 0xF1	; 241
    f16c:	93 e2       	ldi	r25, 0x23	; 35
    f16e:	fc 01       	movw	r30, r24
    f170:	04 e0       	ldi	r16, 0x04	; 4
    f172:	05 93       	las	Z, r16
    f174:	00 00       	nop
    f176:	df 91       	pop	r29
    f178:	cf 91       	pop	r28
    f17a:	0f 91       	pop	r16
    f17c:	08 95       	ret

0000f17e <udd_ctrl_send_zlp_in>:
    f17e:	0f 93       	push	r16
    f180:	cf 93       	push	r28
    f182:	df 93       	push	r29
    f184:	cd b7       	in	r28, 0x3d	; 61
    f186:	de b7       	in	r29, 0x3e	; 62
    f188:	83 e0       	ldi	r24, 0x03	; 3
    f18a:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <udd_ep_control_state>
    f18e:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <udd_sram+0x1a>
    f192:	10 92 fb 23 	sts	0x23FB, r1	; 0x8023fb <udd_sram+0x1b>
    f196:	88 ef       	ldi	r24, 0xF8	; 248
    f198:	93 e2       	ldi	r25, 0x23	; 35
    f19a:	fc 01       	movw	r30, r24
    f19c:	02 e0       	ldi	r16, 0x02	; 2
    f19e:	06 93       	lac	Z, r16
    f1a0:	00 00       	nop
    f1a2:	df 91       	pop	r29
    f1a4:	cf 91       	pop	r28
    f1a6:	0f 91       	pop	r16
    f1a8:	08 95       	ret

0000f1aa <udd_ctrl_send_zlp_out>:
    f1aa:	0f 93       	push	r16
    f1ac:	cf 93       	push	r28
    f1ae:	df 93       	push	r29
    f1b0:	cd b7       	in	r28, 0x3d	; 61
    f1b2:	de b7       	in	r29, 0x3e	; 62
    f1b4:	84 e0       	ldi	r24, 0x04	; 4
    f1b6:	80 93 30 24 	sts	0x2430, r24	; 0x802430 <udd_ep_control_state>
    f1ba:	80 ef       	ldi	r24, 0xF0	; 240
    f1bc:	93 e2       	ldi	r25, 0x23	; 35
    f1be:	fc 01       	movw	r30, r24
    f1c0:	02 e0       	ldi	r16, 0x02	; 2
    f1c2:	06 93       	lac	Z, r16
    f1c4:	00 00       	nop
    f1c6:	df 91       	pop	r29
    f1c8:	cf 91       	pop	r28
    f1ca:	0f 91       	pop	r16
    f1cc:	08 95       	ret

0000f1ce <udd_ctrl_endofrequest>:
    f1ce:	cf 93       	push	r28
    f1d0:	df 93       	push	r29
    f1d2:	cd b7       	in	r28, 0x3d	; 61
    f1d4:	de b7       	in	r29, 0x3e	; 62
    f1d6:	80 91 96 29 	lds	r24, 0x2996	; 0x802996 <udd_g_ctrlreq+0xc>
    f1da:	90 91 97 29 	lds	r25, 0x2997	; 0x802997 <udd_g_ctrlreq+0xd>
    f1de:	89 2b       	or	r24, r25
    f1e0:	31 f0       	breq	.+12     	; 0xf1ee <udd_ctrl_endofrequest+0x20>
    f1e2:	80 91 96 29 	lds	r24, 0x2996	; 0x802996 <udd_g_ctrlreq+0xc>
    f1e6:	90 91 97 29 	lds	r25, 0x2997	; 0x802997 <udd_g_ctrlreq+0xd>
    f1ea:	fc 01       	movw	r30, r24
    f1ec:	19 95       	eicall
    f1ee:	00 00       	nop
    f1f0:	df 91       	pop	r29
    f1f2:	cf 91       	pop	r28
    f1f4:	08 95       	ret

0000f1f6 <udd_ctrl_interrupt_error>:
    f1f6:	cf 93       	push	r28
    f1f8:	df 93       	push	r29
    f1fa:	cd b7       	in	r28, 0x3d	; 61
    f1fc:	de b7       	in	r29, 0x3e	; 62
    f1fe:	8b ec       	ldi	r24, 0xCB	; 203
    f200:	94 e0       	ldi	r25, 0x04	; 4
    f202:	fc 01       	movw	r30, r24
    f204:	80 81       	ld	r24, Z
    f206:	88 2f       	mov	r24, r24
    f208:	90 e0       	ldi	r25, 0x00	; 0
    f20a:	84 70       	andi	r24, 0x04	; 4
    f20c:	99 27       	eor	r25, r25
    f20e:	89 2b       	or	r24, r25
    f210:	81 f0       	breq	.+32     	; 0xf232 <udd_ctrl_interrupt_error+0x3c>
    f212:	8a ec       	ldi	r24, 0xCA	; 202
    f214:	94 e0       	ldi	r25, 0x04	; 4
    f216:	24 e0       	ldi	r18, 0x04	; 4
    f218:	fc 01       	movw	r30, r24
    f21a:	20 83       	st	Z, r18
    f21c:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <udd_sram+0x18>
    f220:	88 2f       	mov	r24, r24
    f222:	90 e0       	ldi	r25, 0x00	; 0
    f224:	80 74       	andi	r24, 0x40	; 64
    f226:	99 27       	eor	r25, r25
    f228:	89 2b       	or	r24, r25
    f22a:	09 f0       	breq	.+2      	; 0xf22e <udd_ctrl_interrupt_error+0x38>
    f22c:	39 df       	rcall	.-398    	; 0xf0a0 <udd_ctrl_underflow>
    f22e:	81 e0       	ldi	r24, 0x01	; 1
    f230:	1b c0       	rjmp	.+54     	; 0xf268 <udd_ctrl_interrupt_error+0x72>
    f232:	8b ec       	ldi	r24, 0xCB	; 203
    f234:	94 e0       	ldi	r25, 0x04	; 4
    f236:	fc 01       	movw	r30, r24
    f238:	80 81       	ld	r24, Z
    f23a:	88 2f       	mov	r24, r24
    f23c:	90 e0       	ldi	r25, 0x00	; 0
    f23e:	82 70       	andi	r24, 0x02	; 2
    f240:	99 27       	eor	r25, r25
    f242:	89 2b       	or	r24, r25
    f244:	81 f0       	breq	.+32     	; 0xf266 <udd_ctrl_interrupt_error+0x70>
    f246:	8a ec       	ldi	r24, 0xCA	; 202
    f248:	94 e0       	ldi	r25, 0x04	; 4
    f24a:	22 e0       	ldi	r18, 0x02	; 2
    f24c:	fc 01       	movw	r30, r24
    f24e:	20 83       	st	Z, r18
    f250:	80 91 f0 23 	lds	r24, 0x23F0	; 0x8023f0 <udd_sram+0x10>
    f254:	88 2f       	mov	r24, r24
    f256:	90 e0       	ldi	r25, 0x00	; 0
    f258:	80 74       	andi	r24, 0x40	; 64
    f25a:	99 27       	eor	r25, r25
    f25c:	89 2b       	or	r24, r25
    f25e:	09 f0       	breq	.+2      	; 0xf262 <udd_ctrl_interrupt_error+0x6c>
    f260:	4b df       	rcall	.-362    	; 0xf0f8 <udd_ctrl_overflow>
    f262:	81 e0       	ldi	r24, 0x01	; 1
    f264:	01 c0       	rjmp	.+2      	; 0xf268 <udd_ctrl_interrupt_error+0x72>
    f266:	80 e0       	ldi	r24, 0x00	; 0
    f268:	df 91       	pop	r29
    f26a:	cf 91       	pop	r28
    f26c:	08 95       	ret

0000f26e <udd_ctrl_interrupt_tc_setup>:
    f26e:	0f 93       	push	r16
    f270:	cf 93       	push	r28
    f272:	df 93       	push	r29
    f274:	cd b7       	in	r28, 0x3d	; 61
    f276:	de b7       	in	r29, 0x3e	; 62
    f278:	8c ec       	ldi	r24, 0xCC	; 204
    f27a:	94 e0       	ldi	r25, 0x04	; 4
    f27c:	fc 01       	movw	r30, r24
    f27e:	80 81       	ld	r24, Z
    f280:	88 2f       	mov	r24, r24
    f282:	90 e0       	ldi	r25, 0x00	; 0
    f284:	81 70       	andi	r24, 0x01	; 1
    f286:	99 27       	eor	r25, r25
    f288:	89 2b       	or	r24, r25
    f28a:	11 f4       	brne	.+4      	; 0xf290 <udd_ctrl_interrupt_tc_setup+0x22>
    f28c:	80 e0       	ldi	r24, 0x00	; 0
    f28e:	1b c0       	rjmp	.+54     	; 0xf2c6 <udd_ctrl_interrupt_tc_setup+0x58>
    f290:	8c ec       	ldi	r24, 0xCC	; 204
    f292:	94 e0       	ldi	r25, 0x04	; 4
    f294:	21 e0       	ldi	r18, 0x01	; 1
    f296:	fc 01       	movw	r30, r24
    f298:	20 83       	st	Z, r18
    f29a:	80 ef       	ldi	r24, 0xF0	; 240
    f29c:	93 e2       	ldi	r25, 0x23	; 35
    f29e:	fc 01       	movw	r30, r24
    f2a0:	00 e8       	ldi	r16, 0x80	; 128
    f2a2:	06 93       	lac	Z, r16
    f2a4:	88 ef       	ldi	r24, 0xF8	; 248
    f2a6:	93 e2       	ldi	r25, 0x23	; 35
    f2a8:	fc 01       	movw	r30, r24
    f2aa:	00 e8       	ldi	r16, 0x80	; 128
    f2ac:	06 93       	lac	Z, r16
    f2ae:	8a ec       	ldi	r24, 0xCA	; 202
    f2b0:	94 e0       	ldi	r25, 0x04	; 4
    f2b2:	21 e0       	ldi	r18, 0x01	; 1
    f2b4:	fc 01       	movw	r30, r24
    f2b6:	20 83       	st	Z, r18
    f2b8:	80 ef       	ldi	r24, 0xF0	; 240
    f2ba:	93 e2       	ldi	r25, 0x23	; 35
    f2bc:	fc 01       	movw	r30, r24
    f2be:	00 e1       	ldi	r16, 0x10	; 16
    f2c0:	06 93       	lac	Z, r16
    f2c2:	2e dd       	rcall	.-1444   	; 0xed20 <udd_ctrl_setup_received>
    f2c4:	81 e0       	ldi	r24, 0x01	; 1
    f2c6:	df 91       	pop	r29
    f2c8:	cf 91       	pop	r28
    f2ca:	0f 91       	pop	r16
    f2cc:	08 95       	ret

0000f2ce <udd_ep_get_size>:
    f2ce:	cf 93       	push	r28
    f2d0:	df 93       	push	r29
    f2d2:	1f 92       	push	r1
    f2d4:	1f 92       	push	r1
    f2d6:	cd b7       	in	r28, 0x3d	; 61
    f2d8:	de b7       	in	r29, 0x3e	; 62
    f2da:	89 83       	std	Y+1, r24	; 0x01
    f2dc:	9a 83       	std	Y+2, r25	; 0x02
    f2de:	89 81       	ldd	r24, Y+1	; 0x01
    f2e0:	9a 81       	ldd	r25, Y+2	; 0x02
    f2e2:	fc 01       	movw	r30, r24
    f2e4:	81 81       	ldd	r24, Z+1	; 0x01
    f2e6:	88 2f       	mov	r24, r24
    f2e8:	90 e0       	ldi	r25, 0x00	; 0
    f2ea:	87 70       	andi	r24, 0x07	; 7
    f2ec:	99 27       	eor	r25, r25
    f2ee:	09 2e       	mov	r0, r25
    f2f0:	00 0c       	add	r0, r0
    f2f2:	aa 0b       	sbc	r26, r26
    f2f4:	bb 0b       	sbc	r27, r27
    f2f6:	41 e0       	ldi	r20, 0x01	; 1
    f2f8:	50 e0       	ldi	r21, 0x00	; 0
    f2fa:	26 e0       	ldi	r18, 0x06	; 6
    f2fc:	30 e0       	ldi	r19, 0x00	; 0
    f2fe:	84 1b       	sub	r24, r20
    f300:	95 0b       	sbc	r25, r21
    f302:	28 17       	cp	r18, r24
    f304:	39 07       	cpc	r19, r25
    f306:	38 f0       	brcs	.+14     	; 0xf316 <udd_ep_get_size+0x48>
    f308:	fc 01       	movw	r30, r24
    f30a:	88 27       	eor	r24, r24
    f30c:	e5 5e       	subi	r30, 0xE5	; 229
    f30e:	fe 4f       	sbci	r31, 0xFE	; 254
    f310:	8f 4f       	sbci	r24, 0xFF	; 255
    f312:	0c 94 47 b7 	jmp	0x16e8e	; 0x16e8e <__tablejump2__>
    f316:	88 e0       	ldi	r24, 0x08	; 8
    f318:	90 e0       	ldi	r25, 0x00	; 0
    f31a:	14 c0       	rjmp	.+40     	; 0xf344 <udd_ep_get_size+0x76>
    f31c:	80 e1       	ldi	r24, 0x10	; 16
    f31e:	90 e0       	ldi	r25, 0x00	; 0
    f320:	11 c0       	rjmp	.+34     	; 0xf344 <udd_ep_get_size+0x76>
    f322:	80 e2       	ldi	r24, 0x20	; 32
    f324:	90 e0       	ldi	r25, 0x00	; 0
    f326:	0e c0       	rjmp	.+28     	; 0xf344 <udd_ep_get_size+0x76>
    f328:	80 e4       	ldi	r24, 0x40	; 64
    f32a:	90 e0       	ldi	r25, 0x00	; 0
    f32c:	0b c0       	rjmp	.+22     	; 0xf344 <udd_ep_get_size+0x76>
    f32e:	80 e8       	ldi	r24, 0x80	; 128
    f330:	90 e0       	ldi	r25, 0x00	; 0
    f332:	08 c0       	rjmp	.+16     	; 0xf344 <udd_ep_get_size+0x76>
    f334:	80 e0       	ldi	r24, 0x00	; 0
    f336:	91 e0       	ldi	r25, 0x01	; 1
    f338:	05 c0       	rjmp	.+10     	; 0xf344 <udd_ep_get_size+0x76>
    f33a:	80 e0       	ldi	r24, 0x00	; 0
    f33c:	92 e0       	ldi	r25, 0x02	; 2
    f33e:	02 c0       	rjmp	.+4      	; 0xf344 <udd_ep_get_size+0x76>
    f340:	8f ef       	ldi	r24, 0xFF	; 255
    f342:	93 e0       	ldi	r25, 0x03	; 3
    f344:	0f 90       	pop	r0
    f346:	0f 90       	pop	r0
    f348:	df 91       	pop	r29
    f34a:	cf 91       	pop	r28
    f34c:	08 95       	ret

0000f34e <udd_ep_get_job>:
    f34e:	cf 93       	push	r28
    f350:	df 93       	push	r29
    f352:	1f 92       	push	r1
    f354:	cd b7       	in	r28, 0x3d	; 61
    f356:	de b7       	in	r29, 0x3e	; 62
    f358:	89 83       	std	Y+1, r24	; 0x01
    f35a:	89 81       	ldd	r24, Y+1	; 0x01
    f35c:	88 2f       	mov	r24, r24
    f35e:	90 e0       	ldi	r25, 0x00	; 0
    f360:	8f 70       	andi	r24, 0x0F	; 15
    f362:	99 27       	eor	r25, r25
    f364:	9c 01       	movw	r18, r24
    f366:	22 0f       	add	r18, r18
    f368:	33 1f       	adc	r19, r19
    f36a:	89 81       	ldd	r24, Y+1	; 0x01
    f36c:	88 1f       	adc	r24, r24
    f36e:	88 27       	eor	r24, r24
    f370:	88 1f       	adc	r24, r24
    f372:	88 2f       	mov	r24, r24
    f374:	90 e0       	ldi	r25, 0x00	; 0
    f376:	82 0f       	add	r24, r18
    f378:	93 1f       	adc	r25, r19
    f37a:	9c 01       	movw	r18, r24
    f37c:	22 50       	subi	r18, 0x02	; 2
    f37e:	31 09       	sbc	r19, r1
    f380:	c9 01       	movw	r24, r18
    f382:	88 0f       	add	r24, r24
    f384:	99 1f       	adc	r25, r25
    f386:	88 0f       	add	r24, r24
    f388:	99 1f       	adc	r25, r25
    f38a:	88 0f       	add	r24, r24
    f38c:	99 1f       	adc	r25, r25
    f38e:	82 0f       	add	r24, r18
    f390:	93 1f       	adc	r25, r19
    f392:	8b 58       	subi	r24, 0x8B	; 139
    f394:	9b 4d       	sbci	r25, 0xDB	; 219
    f396:	0f 90       	pop	r0
    f398:	df 91       	pop	r29
    f39a:	cf 91       	pop	r28
    f39c:	08 95       	ret

0000f39e <udd_ep_trans_complet>:

static void udd_ep_trans_complet(udd_ep_id_t ep)
{
    f39e:	0f 93       	push	r16
    f3a0:	cf 93       	push	r28
    f3a2:	df 93       	push	r29
    f3a4:	cd b7       	in	r28, 0x3d	; 61
    f3a6:	de b7       	in	r29, 0x3e	; 62
    f3a8:	2b 97       	sbiw	r28, 0x0b	; 11
    f3aa:	cd bf       	out	0x3d, r28	; 61
    f3ac:	de bf       	out	0x3e, r29	; 62
    f3ae:	8b 87       	std	Y+11, r24	; 0x0b
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
    f3b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    f3b2:	cd df       	rcall	.-102    	; 0xf34e <udd_ep_get_job>
    f3b4:	8b 83       	std	Y+3, r24	; 0x03
    f3b6:	9c 83       	std	Y+4, r25	; 0x04
	ep_ctrl = udd_ep_get_ctrl(ep);
    f3b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    f3ba:	48 dc       	rcall	.-1904   	; 0xec4c <udd_ep_get_ctrl>
    f3bc:	8d 83       	std	Y+5, r24	; 0x05
    f3be:	9e 83       	std	Y+6, r25	; 0x06
	ep_size = udd_ep_get_size(ep_ctrl);
    f3c0:	8d 81       	ldd	r24, Y+5	; 0x05
    f3c2:	9e 81       	ldd	r25, Y+6	; 0x06
    f3c4:	84 df       	rcall	.-248    	; 0xf2ce <udd_ep_get_size>
    f3c6:	8f 83       	std	Y+7, r24	; 0x07
    f3c8:	98 87       	std	Y+8, r25	; 0x08

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    f3ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    f3cc:	88 23       	and	r24, r24
    f3ce:	0c f0       	brlt	.+2      	; 0xf3d2 <udd_ep_trans_complet+0x34>
    f3d0:	aa c0       	rjmp	.+340    	; 0xf526 <udd_ep_trans_complet+0x188>
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    f3d2:	8d 81       	ldd	r24, Y+5	; 0x05
    f3d4:	9e 81       	ldd	r25, Y+6	; 0x06
    f3d6:	fc 01       	movw	r30, r24
    f3d8:	86 81       	ldd	r24, Z+6	; 0x06
    f3da:	97 81       	ldd	r25, Z+7	; 0x07
    f3dc:	89 87       	std	Y+9, r24	; 0x09
    f3de:	9a 87       	std	Y+10, r25	; 0x0a

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    f3e0:	8b 81       	ldd	r24, Y+3	; 0x03
    f3e2:	9c 81       	ldd	r25, Y+4	; 0x04
    f3e4:	fc 01       	movw	r30, r24
    f3e6:	25 81       	ldd	r18, Z+5	; 0x05
    f3e8:	36 81       	ldd	r19, Z+6	; 0x06
    f3ea:	89 85       	ldd	r24, Y+9	; 0x09
    f3ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    f3ee:	28 0f       	add	r18, r24
    f3f0:	39 1f       	adc	r19, r25
    f3f2:	8b 81       	ldd	r24, Y+3	; 0x03
    f3f4:	9c 81       	ldd	r25, Y+4	; 0x04
    f3f6:	fc 01       	movw	r30, r24
    f3f8:	25 83       	std	Z+5, r18	; 0x05
    f3fa:	36 83       	std	Z+6, r19	; 0x06

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    f3fc:	8b 81       	ldd	r24, Y+3	; 0x03
    f3fe:	9c 81       	ldd	r25, Y+4	; 0x04
    f400:	fc 01       	movw	r30, r24
    f402:	25 81       	ldd	r18, Z+5	; 0x05
    f404:	36 81       	ldd	r19, Z+6	; 0x06
    f406:	8b 81       	ldd	r24, Y+3	; 0x03
    f408:	9c 81       	ldd	r25, Y+4	; 0x04
    f40a:	fc 01       	movw	r30, r24
    f40c:	83 81       	ldd	r24, Z+3	; 0x03
    f40e:	94 81       	ldd	r25, Z+4	; 0x04
    f410:	28 17       	cp	r18, r24
    f412:	39 07       	cpc	r19, r25
    f414:	09 f4       	brne	.+2      	; 0xf418 <udd_ep_trans_complet+0x7a>
    f416:	68 c0       	rjmp	.+208    	; 0xf4e8 <udd_ep_trans_complet+0x14a>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    f418:	8b 81       	ldd	r24, Y+3	; 0x03
    f41a:	9c 81       	ldd	r25, Y+4	; 0x04
    f41c:	fc 01       	movw	r30, r24
    f41e:	23 81       	ldd	r18, Z+3	; 0x03
    f420:	34 81       	ldd	r19, Z+4	; 0x04
    f422:	8b 81       	ldd	r24, Y+3	; 0x03
    f424:	9c 81       	ldd	r25, Y+4	; 0x04
    f426:	fc 01       	movw	r30, r24
    f428:	85 81       	ldd	r24, Z+5	; 0x05
    f42a:	96 81       	ldd	r25, Z+6	; 0x06
    f42c:	a9 01       	movw	r20, r18
    f42e:	48 1b       	sub	r20, r24
    f430:	59 0b       	sbc	r21, r25
    f432:	ca 01       	movw	r24, r20
    f434:	89 83       	std	Y+1, r24	; 0x01
    f436:	9a 83       	std	Y+2, r25	; 0x02
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    f438:	89 81       	ldd	r24, Y+1	; 0x01
    f43a:	9a 81       	ldd	r25, Y+2	; 0x02
    f43c:	81 15       	cp	r24, r1
    f43e:	94 40       	sbci	r25, 0x04	; 4
    f440:	70 f0       	brcs	.+28     	; 0xf45e <udd_ep_trans_complet+0xc0>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
    f442:	8f ef       	ldi	r24, 0xFF	; 255
    f444:	93 e0       	ldi	r25, 0x03	; 3
    f446:	2f 81       	ldd	r18, Y+7	; 0x07
    f448:	38 85       	ldd	r19, Y+8	; 0x08
    f44a:	b9 01       	movw	r22, r18
    f44c:	0e 94 11 b7 	call	0x16e22	; 0x16e22 <__udivmodhi4>
    f450:	9c 01       	movw	r18, r24
		if (ptr_job->nb_trans != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    f452:	8f ef       	ldi	r24, 0xFF	; 255
    f454:	93 e0       	ldi	r25, 0x03	; 3
    f456:	82 1b       	sub	r24, r18
    f458:	93 0b       	sbc	r25, r19
    f45a:	89 83       	std	Y+1, r24	; 0x01
    f45c:	9a 83       	std	Y+2, r25	; 0x02
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    f45e:	8b 81       	ldd	r24, Y+3	; 0x03
    f460:	9c 81       	ldd	r25, Y+4	; 0x04
    f462:	fc 01       	movw	r30, r24
    f464:	80 81       	ld	r24, Z
    f466:	82 70       	andi	r24, 0x02	; 2
				&& (0==(next_trans % ep_size));
    f468:	88 23       	and	r24, r24
    f46a:	61 f0       	breq	.+24     	; 0xf484 <udd_ep_trans_complet+0xe6>
    f46c:	89 81       	ldd	r24, Y+1	; 0x01
    f46e:	9a 81       	ldd	r25, Y+2	; 0x02
    f470:	2f 81       	ldd	r18, Y+7	; 0x07
    f472:	38 85       	ldd	r19, Y+8	; 0x08
    f474:	b9 01       	movw	r22, r18
    f476:	0e 94 11 b7 	call	0x16e22	; 0x16e22 <__udivmodhi4>
    f47a:	89 2b       	or	r24, r25
    f47c:	19 f4       	brne	.+6      	; 0xf484 <udd_ep_trans_complet+0xe6>
    f47e:	81 e0       	ldi	r24, 0x01	; 1
    f480:	90 e0       	ldi	r25, 0x00	; 0
    f482:	02 c0       	rjmp	.+4      	; 0xf488 <udd_ep_trans_complet+0xea>
    f484:	80 e0       	ldi	r24, 0x00	; 0
    f486:	90 e0       	ldi	r25, 0x00	; 0
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    f488:	28 2f       	mov	r18, r24
    f48a:	21 70       	andi	r18, 0x01	; 1
    f48c:	8b 81       	ldd	r24, Y+3	; 0x03
    f48e:	9c 81       	ldd	r25, Y+4	; 0x04
    f490:	21 70       	andi	r18, 0x01	; 1
    f492:	22 0f       	add	r18, r18
    f494:	fc 01       	movw	r30, r24
    f496:	30 81       	ld	r19, Z
    f498:	3d 7f       	andi	r19, 0xFD	; 253
    f49a:	23 2b       	or	r18, r19
    f49c:	fc 01       	movw	r30, r24
    f49e:	20 83       	st	Z, r18
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    f4a0:	8d 81       	ldd	r24, Y+5	; 0x05
    f4a2:	9e 81       	ldd	r25, Y+6	; 0x06
    f4a4:	fc 01       	movw	r30, r24
    f4a6:	16 82       	std	Z+6, r1	; 0x06
    f4a8:	17 82       	std	Z+7, r1	; 0x07
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    f4aa:	8d 81       	ldd	r24, Y+5	; 0x05
    f4ac:	9e 81       	ldd	r25, Y+6	; 0x06
    f4ae:	29 81       	ldd	r18, Y+1	; 0x01
    f4b0:	3a 81       	ldd	r19, Y+2	; 0x02
    f4b2:	fc 01       	movw	r30, r24
    f4b4:	22 83       	std	Z+2, r18	; 0x02
    f4b6:	33 83       	std	Z+3, r19	; 0x03
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    f4b8:	8b 81       	ldd	r24, Y+3	; 0x03
    f4ba:	9c 81       	ldd	r25, Y+4	; 0x04
    f4bc:	fc 01       	movw	r30, r24
    f4be:	21 81       	ldd	r18, Z+1	; 0x01
    f4c0:	32 81       	ldd	r19, Z+2	; 0x02
    f4c2:	8b 81       	ldd	r24, Y+3	; 0x03
    f4c4:	9c 81       	ldd	r25, Y+4	; 0x04
    f4c6:	fc 01       	movw	r30, r24
    f4c8:	85 81       	ldd	r24, Z+5	; 0x05
    f4ca:	96 81       	ldd	r25, Z+6	; 0x06
    f4cc:	82 0f       	add	r24, r18
    f4ce:	93 1f       	adc	r25, r19
    f4d0:	9c 01       	movw	r18, r24
    f4d2:	8d 81       	ldd	r24, Y+5	; 0x05
    f4d4:	9e 81       	ldd	r25, Y+6	; 0x06
    f4d6:	fc 01       	movw	r30, r24
    f4d8:	24 83       	std	Z+4, r18	; 0x04
    f4da:	35 83       	std	Z+5, r19	; 0x05
			udd_endpoint_clear_NACK0(ep_ctrl);
    f4dc:	8d 81       	ldd	r24, Y+5	; 0x05
    f4de:	9e 81       	ldd	r25, Y+6	; 0x06
    f4e0:	fc 01       	movw	r30, r24
    f4e2:	02 e0       	ldi	r16, 0x02	; 2
    f4e4:	06 93       	lac	Z, r16
			return;
    f4e6:	3b c1       	rjmp	.+630    	; 0xf75e <udd_ep_trans_complet+0x3c0>
		}

		// Need to send a ZLP after all data transfer
		if (ptr_job->b_shortpacket) {
    f4e8:	8b 81       	ldd	r24, Y+3	; 0x03
    f4ea:	9c 81       	ldd	r25, Y+4	; 0x04
    f4ec:	fc 01       	movw	r30, r24
    f4ee:	80 81       	ld	r24, Z
    f4f0:	82 70       	andi	r24, 0x02	; 2
    f4f2:	88 23       	and	r24, r24
    f4f4:	09 f4       	brne	.+2      	; 0xf4f8 <udd_ep_trans_complet+0x15a>
    f4f6:	0d c1       	rjmp	.+538    	; 0xf712 <udd_ep_trans_complet+0x374>
			ptr_job->b_shortpacket = false;
    f4f8:	8b 81       	ldd	r24, Y+3	; 0x03
    f4fa:	9c 81       	ldd	r25, Y+4	; 0x04
    f4fc:	fc 01       	movw	r30, r24
    f4fe:	20 81       	ld	r18, Z
    f500:	2d 7f       	andi	r18, 0xFD	; 253
    f502:	fc 01       	movw	r30, r24
    f504:	20 83       	st	Z, r18
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    f506:	8d 81       	ldd	r24, Y+5	; 0x05
    f508:	9e 81       	ldd	r25, Y+6	; 0x06
    f50a:	fc 01       	movw	r30, r24
    f50c:	16 82       	std	Z+6, r1	; 0x06
    f50e:	17 82       	std	Z+7, r1	; 0x07
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    f510:	8d 81       	ldd	r24, Y+5	; 0x05
    f512:	9e 81       	ldd	r25, Y+6	; 0x06
    f514:	fc 01       	movw	r30, r24
    f516:	12 82       	std	Z+2, r1	; 0x02
    f518:	13 82       	std	Z+3, r1	; 0x03
			udd_endpoint_clear_NACK0(ep_ctrl);
    f51a:	8d 81       	ldd	r24, Y+5	; 0x05
    f51c:	9e 81       	ldd	r25, Y+6	; 0x06
    f51e:	fc 01       	movw	r30, r24
    f520:	02 e0       	ldi	r16, 0x02	; 2
    f522:	06 93       	lac	Z, r16
			return;
    f524:	1c c1       	rjmp	.+568    	; 0xf75e <udd_ep_trans_complet+0x3c0>
		}
	}
	else
	{
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);
    f526:	8d 81       	ldd	r24, Y+5	; 0x05
    f528:	9e 81       	ldd	r25, Y+6	; 0x06
    f52a:	fc 01       	movw	r30, r24
    f52c:	82 81       	ldd	r24, Z+2	; 0x02
    f52e:	93 81       	ldd	r25, Z+3	; 0x03
    f530:	89 87       	std	Y+9, r24	; 0x09
    f532:	9a 87       	std	Y+10, r25	; 0x0a

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    f534:	8b 81       	ldd	r24, Y+3	; 0x03
    f536:	9c 81       	ldd	r25, Y+4	; 0x04
    f538:	fc 01       	movw	r30, r24
    f53a:	80 81       	ld	r24, Z
    f53c:	84 70       	andi	r24, 0x04	; 4
    f53e:	88 23       	and	r24, r24
    f540:	49 f1       	breq	.+82     	; 0xf594 <udd_ep_trans_complet+0x1f6>
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
    f542:	8b 81       	ldd	r24, Y+3	; 0x03
    f544:	9c 81       	ldd	r25, Y+4	; 0x04
    f546:	fc 01       	movw	r30, r24
    f548:	83 81       	ldd	r24, Z+3	; 0x03
    f54a:	94 81       	ldd	r25, Z+4	; 0x04
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    f54c:	2f 81       	ldd	r18, Y+7	; 0x07
    f54e:	38 85       	ldd	r19, Y+8	; 0x08
    f550:	b9 01       	movw	r22, r18
    f552:	0e 94 11 b7 	call	0x16e22	; 0x16e22 <__udivmodhi4>
    f556:	ac 01       	movw	r20, r24
				, udd_ep_out_cache_buffer[ep - 1]
    f558:	8b 85       	ldd	r24, Y+11	; 0x0b
    f55a:	88 2f       	mov	r24, r24
    f55c:	90 e0       	ldi	r25, 0x00	; 0
    f55e:	01 97       	sbiw	r24, 0x01	; 1
    f560:	00 24       	eor	r0, r0
    f562:	96 95       	lsr	r25
    f564:	87 95       	ror	r24
    f566:	07 94       	ror	r0
    f568:	96 95       	lsr	r25
    f56a:	87 95       	ror	r24
    f56c:	07 94       	ror	r0
    f56e:	98 2f       	mov	r25, r24
    f570:	80 2d       	mov	r24, r0
    f572:	bc 01       	movw	r22, r24
    f574:	67 56       	subi	r22, 0x67	; 103
    f576:	7b 4d       	sbci	r23, 0xDB	; 219
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    f578:	8b 81       	ldd	r24, Y+3	; 0x03
    f57a:	9c 81       	ldd	r25, Y+4	; 0x04
    f57c:	fc 01       	movw	r30, r24
    f57e:	21 81       	ldd	r18, Z+1	; 0x01
    f580:	32 81       	ldd	r19, Z+2	; 0x02
    f582:	8b 81       	ldd	r24, Y+3	; 0x03
    f584:	9c 81       	ldd	r25, Y+4	; 0x04
    f586:	fc 01       	movw	r30, r24
    f588:	85 81       	ldd	r24, Z+5	; 0x05
    f58a:	96 81       	ldd	r25, Z+6	; 0x06
    f58c:	82 0f       	add	r24, r18
    f58e:	93 1f       	adc	r25, r19
    f590:	0e 94 ec b7 	call	0x16fd8	; 0x16fd8 <memcpy>
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    f594:	8b 81       	ldd	r24, Y+3	; 0x03
    f596:	9c 81       	ldd	r25, Y+4	; 0x04
    f598:	fc 01       	movw	r30, r24
    f59a:	25 81       	ldd	r18, Z+5	; 0x05
    f59c:	36 81       	ldd	r19, Z+6	; 0x06
    f59e:	89 85       	ldd	r24, Y+9	; 0x09
    f5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    f5a2:	28 0f       	add	r18, r24
    f5a4:	39 1f       	adc	r19, r25
    f5a6:	8b 81       	ldd	r24, Y+3	; 0x03
    f5a8:	9c 81       	ldd	r25, Y+4	; 0x04
    f5aa:	fc 01       	movw	r30, r24
    f5ac:	25 83       	std	Z+5, r18	; 0x05
    f5ae:	36 83       	std	Z+6, r19	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    f5b0:	8b 81       	ldd	r24, Y+3	; 0x03
    f5b2:	9c 81       	ldd	r25, Y+4	; 0x04
    f5b4:	fc 01       	movw	r30, r24
    f5b6:	25 81       	ldd	r18, Z+5	; 0x05
    f5b8:	36 81       	ldd	r19, Z+6	; 0x06
    f5ba:	8b 81       	ldd	r24, Y+3	; 0x03
    f5bc:	9c 81       	ldd	r25, Y+4	; 0x04
    f5be:	fc 01       	movw	r30, r24
    f5c0:	83 81       	ldd	r24, Z+3	; 0x03
    f5c2:	94 81       	ldd	r25, Z+4	; 0x04
    f5c4:	82 17       	cp	r24, r18
    f5c6:	93 07       	cpc	r25, r19
    f5c8:	50 f4       	brcc	.+20     	; 0xf5de <udd_ep_trans_complet+0x240>
			ptr_job->nb_trans = ptr_job->buf_size;
    f5ca:	8b 81       	ldd	r24, Y+3	; 0x03
    f5cc:	9c 81       	ldd	r25, Y+4	; 0x04
    f5ce:	fc 01       	movw	r30, r24
    f5d0:	23 81       	ldd	r18, Z+3	; 0x03
    f5d2:	34 81       	ldd	r19, Z+4	; 0x04
    f5d4:	8b 81       	ldd	r24, Y+3	; 0x03
    f5d6:	9c 81       	ldd	r25, Y+4	; 0x04
    f5d8:	fc 01       	movw	r30, r24
    f5da:	25 83       	std	Z+5, r18	; 0x05
    f5dc:	36 83       	std	Z+6, r19	; 0x06
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_endpoint_out_get_nbbyte_requested(ep_ctrl))
    f5de:	8d 81       	ldd	r24, Y+5	; 0x05
    f5e0:	9e 81       	ldd	r25, Y+6	; 0x06
    f5e2:	fc 01       	movw	r30, r24
    f5e4:	26 81       	ldd	r18, Z+6	; 0x06
    f5e6:	37 81       	ldd	r19, Z+7	; 0x07
    f5e8:	89 85       	ldd	r24, Y+9	; 0x09
    f5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    f5ec:	28 17       	cp	r18, r24
    f5ee:	39 07       	cpc	r19, r25
    f5f0:	09 f0       	breq	.+2      	; 0xf5f4 <udd_ep_trans_complet+0x256>
    f5f2:	8f c0       	rjmp	.+286    	; 0xf712 <udd_ep_trans_complet+0x374>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    f5f4:	8b 81       	ldd	r24, Y+3	; 0x03
    f5f6:	9c 81       	ldd	r25, Y+4	; 0x04
    f5f8:	fc 01       	movw	r30, r24
    f5fa:	25 81       	ldd	r18, Z+5	; 0x05
    f5fc:	36 81       	ldd	r19, Z+6	; 0x06
    f5fe:	8b 81       	ldd	r24, Y+3	; 0x03
    f600:	9c 81       	ldd	r25, Y+4	; 0x04
    f602:	fc 01       	movw	r30, r24
    f604:	83 81       	ldd	r24, Z+3	; 0x03
    f606:	94 81       	ldd	r25, Z+4	; 0x04
    f608:	28 17       	cp	r18, r24
    f60a:	39 07       	cpc	r19, r25
    f60c:	09 f4       	brne	.+2      	; 0xf610 <udd_ep_trans_complet+0x272>
    f60e:	81 c0       	rjmp	.+258    	; 0xf712 <udd_ep_trans_complet+0x374>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    f610:	8b 81       	ldd	r24, Y+3	; 0x03
    f612:	9c 81       	ldd	r25, Y+4	; 0x04
    f614:	fc 01       	movw	r30, r24
    f616:	23 81       	ldd	r18, Z+3	; 0x03
    f618:	34 81       	ldd	r19, Z+4	; 0x04
    f61a:	8b 81       	ldd	r24, Y+3	; 0x03
    f61c:	9c 81       	ldd	r25, Y+4	; 0x04
    f61e:	fc 01       	movw	r30, r24
    f620:	85 81       	ldd	r24, Z+5	; 0x05
    f622:	96 81       	ldd	r25, Z+6	; 0x06
    f624:	a9 01       	movw	r20, r18
    f626:	48 1b       	sub	r20, r24
    f628:	59 0b       	sbc	r21, r25
    f62a:	ca 01       	movw	r24, r20
    f62c:	89 83       	std	Y+1, r24	; 0x01
    f62e:	9a 83       	std	Y+2, r25	; 0x02
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    f630:	89 81       	ldd	r24, Y+1	; 0x01
    f632:	9a 81       	ldd	r25, Y+2	; 0x02
    f634:	81 15       	cp	r24, r1
    f636:	94 40       	sbci	r25, 0x04	; 4
    f638:	78 f0       	brcs	.+30     	; 0xf658 <udd_ep_trans_complet+0x2ba>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
    f63a:	8f ef       	ldi	r24, 0xFF	; 255
    f63c:	93 e0       	ldi	r25, 0x03	; 3
    f63e:	2f 81       	ldd	r18, Y+7	; 0x07
    f640:	38 85       	ldd	r19, Y+8	; 0x08
    f642:	b9 01       	movw	r22, r18
    f644:	0e 94 11 b7 	call	0x16e22	; 0x16e22 <__udivmodhi4>
    f648:	9c 01       	movw	r18, r24
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    f64a:	8f ef       	ldi	r24, 0xFF	; 255
    f64c:	93 e0       	ldi	r25, 0x03	; 3
    f64e:	82 1b       	sub	r24, r18
    f650:	93 0b       	sbc	r25, r19
    f652:	89 83       	std	Y+1, r24	; 0x01
    f654:	9a 83       	std	Y+2, r25	; 0x02
    f656:	0e c0       	rjmp	.+28     	; 0xf674 <udd_ep_trans_complet+0x2d6>
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    f658:	89 81       	ldd	r24, Y+1	; 0x01
    f65a:	9a 81       	ldd	r25, Y+2	; 0x02
    f65c:	2f 81       	ldd	r18, Y+7	; 0x07
    f65e:	38 85       	ldd	r19, Y+8	; 0x08
    f660:	b9 01       	movw	r22, r18
    f662:	0e 94 11 b7 	call	0x16e22	; 0x16e22 <__udivmodhi4>
    f666:	9c 01       	movw	r18, r24
    f668:	89 81       	ldd	r24, Y+1	; 0x01
    f66a:	9a 81       	ldd	r25, Y+2	; 0x02
    f66c:	82 1b       	sub	r24, r18
    f66e:	93 0b       	sbc	r25, r19
    f670:	89 83       	std	Y+1, r24	; 0x01
    f672:	9a 83       	std	Y+2, r25	; 0x02
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    f674:	8d 81       	ldd	r24, Y+5	; 0x05
    f676:	9e 81       	ldd	r25, Y+6	; 0x06
    f678:	fc 01       	movw	r30, r24
    f67a:	12 82       	std	Z+2, r1	; 0x02
    f67c:	13 82       	std	Z+3, r1	; 0x03
			if (next_trans < ep_size) {
    f67e:	29 81       	ldd	r18, Y+1	; 0x01
    f680:	3a 81       	ldd	r19, Y+2	; 0x02
    f682:	8f 81       	ldd	r24, Y+7	; 0x07
    f684:	98 85       	ldd	r25, Y+8	; 0x08
    f686:	28 17       	cp	r18, r24
    f688:	39 07       	cpc	r19, r25
    f68a:	20 f5       	brcc	.+72     	; 0xf6d4 <udd_ep_trans_complet+0x336>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    f68c:	8b 81       	ldd	r24, Y+3	; 0x03
    f68e:	9c 81       	ldd	r25, Y+4	; 0x04
    f690:	fc 01       	movw	r30, r24
    f692:	20 81       	ld	r18, Z
    f694:	24 60       	ori	r18, 0x04	; 4
    f696:	fc 01       	movw	r30, r24
    f698:	20 83       	st	Z, r18
				udd_endpoint_set_buf( ep_ctrl,
    f69a:	8b 85       	ldd	r24, Y+11	; 0x0b
    f69c:	88 2f       	mov	r24, r24
    f69e:	90 e0       	ldi	r25, 0x00	; 0
    f6a0:	01 97       	sbiw	r24, 0x01	; 1
    f6a2:	00 24       	eor	r0, r0
    f6a4:	96 95       	lsr	r25
    f6a6:	87 95       	ror	r24
    f6a8:	07 94       	ror	r0
    f6aa:	96 95       	lsr	r25
    f6ac:	87 95       	ror	r24
    f6ae:	07 94       	ror	r0
    f6b0:	98 2f       	mov	r25, r24
    f6b2:	80 2d       	mov	r24, r0
    f6b4:	87 56       	subi	r24, 0x67	; 103
    f6b6:	9b 4d       	sbci	r25, 0xDB	; 219
    f6b8:	9c 01       	movw	r18, r24
    f6ba:	8d 81       	ldd	r24, Y+5	; 0x05
    f6bc:	9e 81       	ldd	r25, Y+6	; 0x06
    f6be:	fc 01       	movw	r30, r24
    f6c0:	24 83       	std	Z+4, r18	; 0x04
    f6c2:	35 83       	std	Z+5, r19	; 0x05
					udd_ep_out_cache_buffer[ep - 1]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    f6c4:	8d 81       	ldd	r24, Y+5	; 0x05
    f6c6:	9e 81       	ldd	r25, Y+6	; 0x06
    f6c8:	2f 81       	ldd	r18, Y+7	; 0x07
    f6ca:	38 85       	ldd	r19, Y+8	; 0x08
    f6cc:	fc 01       	movw	r30, r24
    f6ce:	26 83       	std	Z+6, r18	; 0x06
    f6d0:	37 83       	std	Z+7, r19	; 0x07
    f6d2:	19 c0       	rjmp	.+50     	; 0xf706 <udd_ep_trans_complet+0x368>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    f6d4:	8b 81       	ldd	r24, Y+3	; 0x03
    f6d6:	9c 81       	ldd	r25, Y+4	; 0x04
    f6d8:	fc 01       	movw	r30, r24
    f6da:	21 81       	ldd	r18, Z+1	; 0x01
    f6dc:	32 81       	ldd	r19, Z+2	; 0x02
    f6de:	8b 81       	ldd	r24, Y+3	; 0x03
    f6e0:	9c 81       	ldd	r25, Y+4	; 0x04
    f6e2:	fc 01       	movw	r30, r24
    f6e4:	85 81       	ldd	r24, Z+5	; 0x05
    f6e6:	96 81       	ldd	r25, Z+6	; 0x06
    f6e8:	82 0f       	add	r24, r18
    f6ea:	93 1f       	adc	r25, r19
    f6ec:	9c 01       	movw	r18, r24
    f6ee:	8d 81       	ldd	r24, Y+5	; 0x05
    f6f0:	9e 81       	ldd	r25, Y+6	; 0x06
    f6f2:	fc 01       	movw	r30, r24
    f6f4:	24 83       	std	Z+4, r18	; 0x04
    f6f6:	35 83       	std	Z+5, r19	; 0x05
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    f6f8:	8d 81       	ldd	r24, Y+5	; 0x05
    f6fa:	9e 81       	ldd	r25, Y+6	; 0x06
    f6fc:	29 81       	ldd	r18, Y+1	; 0x01
    f6fe:	3a 81       	ldd	r19, Y+2	; 0x02
    f700:	fc 01       	movw	r30, r24
    f702:	26 83       	std	Z+6, r18	; 0x06
    f704:	37 83       	std	Z+7, r19	; 0x07
			}
			// Start transfer
			udd_endpoint_clear_NACK0(ep_ctrl);
    f706:	8d 81       	ldd	r24, Y+5	; 0x05
    f708:	9e 81       	ldd	r25, Y+6	; 0x06
    f70a:	fc 01       	movw	r30, r24
    f70c:	02 e0       	ldi	r16, 0x02	; 2
    f70e:	06 93       	lac	Z, r16
			return;
    f710:	26 c0       	rjmp	.+76     	; 0xf75e <udd_ep_trans_complet+0x3c0>
		}
	}

	// Job complete then call callback
	if (ptr_job->busy) {
    f712:	8b 81       	ldd	r24, Y+3	; 0x03
    f714:	9c 81       	ldd	r25, Y+4	; 0x04
    f716:	fc 01       	movw	r30, r24
    f718:	80 81       	ld	r24, Z
    f71a:	81 70       	andi	r24, 0x01	; 1
    f71c:	88 23       	and	r24, r24
    f71e:	f1 f0       	breq	.+60     	; 0xf75c <udd_ep_trans_complet+0x3be>
		ptr_job->busy = false;
    f720:	8b 81       	ldd	r24, Y+3	; 0x03
    f722:	9c 81       	ldd	r25, Y+4	; 0x04
    f724:	fc 01       	movw	r30, r24
    f726:	20 81       	ld	r18, Z
    f728:	2e 7f       	andi	r18, 0xFE	; 254
    f72a:	fc 01       	movw	r30, r24
    f72c:	20 83       	st	Z, r18
		if (NULL != ptr_job->call_trans) {
    f72e:	8b 81       	ldd	r24, Y+3	; 0x03
    f730:	9c 81       	ldd	r25, Y+4	; 0x04
    f732:	fc 01       	movw	r30, r24
    f734:	87 81       	ldd	r24, Z+7	; 0x07
    f736:	90 85       	ldd	r25, Z+8	; 0x08
    f738:	89 2b       	or	r24, r25
    f73a:	81 f0       	breq	.+32     	; 0xf75c <udd_ep_trans_complet+0x3be>
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    f73c:	8b 81       	ldd	r24, Y+3	; 0x03
    f73e:	9c 81       	ldd	r25, Y+4	; 0x04
    f740:	fc 01       	movw	r30, r24
    f742:	27 81       	ldd	r18, Z+7	; 0x07
    f744:	30 85       	ldd	r19, Z+8	; 0x08
    f746:	8b 81       	ldd	r24, Y+3	; 0x03
    f748:	9c 81       	ldd	r25, Y+4	; 0x04
    f74a:	fc 01       	movw	r30, r24
    f74c:	85 81       	ldd	r24, Z+5	; 0x05
    f74e:	96 81       	ldd	r25, Z+6	; 0x06
    f750:	4b 85       	ldd	r20, Y+11	; 0x0b
    f752:	bc 01       	movw	r22, r24
    f754:	80 e0       	ldi	r24, 0x00	; 0
    f756:	f9 01       	movw	r30, r18
    f758:	19 95       	eicall
				ptr_job->nb_trans,
				ep);
		}
	}
	return;
    f75a:	00 00       	nop
    f75c:	00 00       	nop
}
    f75e:	2b 96       	adiw	r28, 0x0b	; 11
    f760:	cd bf       	out	0x3d, r28	; 61
    f762:	de bf       	out	0x3e, r29	; 62
    f764:	df 91       	pop	r29
    f766:	cf 91       	pop	r28
    f768:	0f 91       	pop	r16
    f76a:	08 95       	ret

0000f76c <osc_get_rate>:
void enter_fan_standby(void)
{
	//Control chip will enter standby if FR_STBY is low and all inputs are low
	ioport_set_pin_low(_FAN_FR_STBY);
	ioport_set_pin_low(FAN_PWM);
}
    f76c:	cf 93       	push	r28
    f76e:	df 93       	push	r29
    f770:	1f 92       	push	r1
    f772:	cd b7       	in	r28, 0x3d	; 61
    f774:	de b7       	in	r29, 0x3e	; 62
    f776:	89 83       	std	Y+1, r24	; 0x01
    f778:	89 81       	ldd	r24, Y+1	; 0x01
    f77a:	88 2f       	mov	r24, r24
    f77c:	90 e0       	ldi	r25, 0x00	; 0
    f77e:	82 30       	cpi	r24, 0x02	; 2
    f780:	91 05       	cpc	r25, r1
    f782:	89 f0       	breq	.+34     	; 0xf7a6 <osc_get_rate+0x3a>
    f784:	83 30       	cpi	r24, 0x03	; 3
    f786:	91 05       	cpc	r25, r1
    f788:	1c f4       	brge	.+6      	; 0xf790 <osc_get_rate+0x24>
    f78a:	01 97       	sbiw	r24, 0x01	; 1
    f78c:	39 f0       	breq	.+14     	; 0xf79c <osc_get_rate+0x30>
    f78e:	1a c0       	rjmp	.+52     	; 0xf7c4 <osc_get_rate+0x58>
    f790:	84 30       	cpi	r24, 0x04	; 4
    f792:	91 05       	cpc	r25, r1
    f794:	69 f0       	breq	.+26     	; 0xf7b0 <osc_get_rate+0x44>
    f796:	08 97       	sbiw	r24, 0x08	; 8
    f798:	81 f0       	breq	.+32     	; 0xf7ba <osc_get_rate+0x4e>
    f79a:	14 c0       	rjmp	.+40     	; 0xf7c4 <osc_get_rate+0x58>
    f79c:	80 e8       	ldi	r24, 0x80	; 128
    f79e:	94 e8       	ldi	r25, 0x84	; 132
    f7a0:	ae e1       	ldi	r26, 0x1E	; 30
    f7a2:	b0 e0       	ldi	r27, 0x00	; 0
    f7a4:	12 c0       	rjmp	.+36     	; 0xf7ca <osc_get_rate+0x5e>
    f7a6:	80 e0       	ldi	r24, 0x00	; 0
    f7a8:	9c e6       	ldi	r25, 0x6C	; 108
    f7aa:	ac ed       	ldi	r26, 0xDC	; 220
    f7ac:	b2 e0       	ldi	r27, 0x02	; 2
    f7ae:	0d c0       	rjmp	.+26     	; 0xf7ca <osc_get_rate+0x5e>
    f7b0:	80 e0       	ldi	r24, 0x00	; 0
    f7b2:	90 e8       	ldi	r25, 0x80	; 128
    f7b4:	a0 e0       	ldi	r26, 0x00	; 0
    f7b6:	b0 e0       	ldi	r27, 0x00	; 0
    f7b8:	08 c0       	rjmp	.+16     	; 0xf7ca <osc_get_rate+0x5e>
    f7ba:	80 e0       	ldi	r24, 0x00	; 0
    f7bc:	94 e2       	ldi	r25, 0x24	; 36
    f7be:	a4 ef       	ldi	r26, 0xF4	; 244
    f7c0:	b0 e0       	ldi	r27, 0x00	; 0
    f7c2:	03 c0       	rjmp	.+6      	; 0xf7ca <osc_get_rate+0x5e>
    f7c4:	80 e0       	ldi	r24, 0x00	; 0
    f7c6:	90 e0       	ldi	r25, 0x00	; 0
    f7c8:	dc 01       	movw	r26, r24
    f7ca:	bc 01       	movw	r22, r24
    f7cc:	cd 01       	movw	r24, r26
    f7ce:	0f 90       	pop	r0
    f7d0:	df 91       	pop	r29
    f7d2:	cf 91       	pop	r28
    f7d4:	08 95       	ret

0000f7d6 <pll_get_default_rate_priv>:
    f7d6:	cf 93       	push	r28
    f7d8:	df 93       	push	r29
    f7da:	cd b7       	in	r28, 0x3d	; 61
    f7dc:	de b7       	in	r29, 0x3e	; 62
    f7de:	29 97       	sbiw	r28, 0x09	; 9
    f7e0:	cd bf       	out	0x3d, r28	; 61
    f7e2:	de bf       	out	0x3e, r29	; 62
    f7e4:	8d 83       	std	Y+5, r24	; 0x05
    f7e6:	6e 83       	std	Y+6, r22	; 0x06
    f7e8:	7f 83       	std	Y+7, r23	; 0x07
    f7ea:	48 87       	std	Y+8, r20	; 0x08
    f7ec:	59 87       	std	Y+9, r21	; 0x09
    f7ee:	8d 81       	ldd	r24, Y+5	; 0x05
    f7f0:	88 2f       	mov	r24, r24
    f7f2:	90 e0       	ldi	r25, 0x00	; 0
    f7f4:	80 38       	cpi	r24, 0x80	; 128
    f7f6:	91 05       	cpc	r25, r1
    f7f8:	79 f0       	breq	.+30     	; 0xf818 <pll_get_default_rate_priv+0x42>
    f7fa:	80 3c       	cpi	r24, 0xC0	; 192
    f7fc:	91 05       	cpc	r25, r1
    f7fe:	a9 f0       	breq	.+42     	; 0xf82a <pll_get_default_rate_priv+0x54>
    f800:	89 2b       	or	r24, r25
    f802:	09 f0       	breq	.+2      	; 0xf806 <pll_get_default_rate_priv+0x30>
    f804:	1b c0       	rjmp	.+54     	; 0xf83c <pll_get_default_rate_priv+0x66>
    f806:	80 e8       	ldi	r24, 0x80	; 128
    f808:	94 e8       	ldi	r25, 0x84	; 132
    f80a:	ae e1       	ldi	r26, 0x1E	; 30
    f80c:	b0 e0       	ldi	r27, 0x00	; 0
    f80e:	89 83       	std	Y+1, r24	; 0x01
    f810:	9a 83       	std	Y+2, r25	; 0x02
    f812:	ab 83       	std	Y+3, r26	; 0x03
    f814:	bc 83       	std	Y+4, r27	; 0x04
    f816:	12 c0       	rjmp	.+36     	; 0xf83c <pll_get_default_rate_priv+0x66>
    f818:	80 e0       	ldi	r24, 0x00	; 0
    f81a:	9b e1       	ldi	r25, 0x1B	; 27
    f81c:	a7 eb       	ldi	r26, 0xB7	; 183
    f81e:	b0 e0       	ldi	r27, 0x00	; 0
    f820:	89 83       	std	Y+1, r24	; 0x01
    f822:	9a 83       	std	Y+2, r25	; 0x02
    f824:	ab 83       	std	Y+3, r26	; 0x03
    f826:	bc 83       	std	Y+4, r27	; 0x04
    f828:	09 c0       	rjmp	.+18     	; 0xf83c <pll_get_default_rate_priv+0x66>
    f82a:	88 e0       	ldi	r24, 0x08	; 8
    f82c:	9f df       	rcall	.-194    	; 0xf76c <osc_get_rate>
    f82e:	dc 01       	movw	r26, r24
    f830:	cb 01       	movw	r24, r22
    f832:	89 83       	std	Y+1, r24	; 0x01
    f834:	9a 83       	std	Y+2, r25	; 0x02
    f836:	ab 83       	std	Y+3, r26	; 0x03
    f838:	bc 83       	std	Y+4, r27	; 0x04
    f83a:	00 00       	nop
    f83c:	8e 81       	ldd	r24, Y+6	; 0x06
    f83e:	9f 81       	ldd	r25, Y+7	; 0x07
    f840:	cc 01       	movw	r24, r24
    f842:	a0 e0       	ldi	r26, 0x00	; 0
    f844:	b0 e0       	ldi	r27, 0x00	; 0
    f846:	29 81       	ldd	r18, Y+1	; 0x01
    f848:	3a 81       	ldd	r19, Y+2	; 0x02
    f84a:	4b 81       	ldd	r20, Y+3	; 0x03
    f84c:	5c 81       	ldd	r21, Y+4	; 0x04
    f84e:	bc 01       	movw	r22, r24
    f850:	cd 01       	movw	r24, r26
    f852:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <__mulsi3>
    f856:	dc 01       	movw	r26, r24
    f858:	cb 01       	movw	r24, r22
    f85a:	89 83       	std	Y+1, r24	; 0x01
    f85c:	9a 83       	std	Y+2, r25	; 0x02
    f85e:	ab 83       	std	Y+3, r26	; 0x03
    f860:	bc 83       	std	Y+4, r27	; 0x04
    f862:	89 81       	ldd	r24, Y+1	; 0x01
    f864:	9a 81       	ldd	r25, Y+2	; 0x02
    f866:	ab 81       	ldd	r26, Y+3	; 0x03
    f868:	bc 81       	ldd	r27, Y+4	; 0x04
    f86a:	bc 01       	movw	r22, r24
    f86c:	cd 01       	movw	r24, r26
    f86e:	29 96       	adiw	r28, 0x09	; 9
    f870:	cd bf       	out	0x3d, r28	; 61
    f872:	de bf       	out	0x3e, r29	; 62
    f874:	df 91       	pop	r29
    f876:	cf 91       	pop	r28
    f878:	08 95       	ret

0000f87a <sysclk_get_main_hz>:
    f87a:	cf 93       	push	r28
    f87c:	df 93       	push	r29
    f87e:	cd b7       	in	r28, 0x3d	; 61
    f880:	de b7       	in	r29, 0x3e	; 62
    f882:	41 e0       	ldi	r20, 0x01	; 1
    f884:	50 e0       	ldi	r21, 0x00	; 0
    f886:	62 e0       	ldi	r22, 0x02	; 2
    f888:	70 e0       	ldi	r23, 0x00	; 0
    f88a:	80 ec       	ldi	r24, 0xC0	; 192
    f88c:	a4 df       	rcall	.-184    	; 0xf7d6 <pll_get_default_rate_priv>
    f88e:	dc 01       	movw	r26, r24
    f890:	cb 01       	movw	r24, r22
    f892:	bc 01       	movw	r22, r24
    f894:	cd 01       	movw	r24, r26
    f896:	df 91       	pop	r29
    f898:	cf 91       	pop	r28
    f89a:	08 95       	ret

0000f89c <sysclk_get_per4_hz>:
    f89c:	cf 93       	push	r28
    f89e:	df 93       	push	r29
    f8a0:	1f 92       	push	r1
    f8a2:	cd b7       	in	r28, 0x3d	; 61
    f8a4:	de b7       	in	r29, 0x3e	; 62
    f8a6:	19 82       	std	Y+1, r1	; 0x01
    f8a8:	e8 df       	rcall	.-48     	; 0xf87a <sysclk_get_main_hz>
    f8aa:	dc 01       	movw	r26, r24
    f8ac:	cb 01       	movw	r24, r22
    f8ae:	29 81       	ldd	r18, Y+1	; 0x01
    f8b0:	22 2f       	mov	r18, r18
    f8b2:	30 e0       	ldi	r19, 0x00	; 0
    f8b4:	04 c0       	rjmp	.+8      	; 0xf8be <sysclk_get_per4_hz+0x22>
    f8b6:	b6 95       	lsr	r27
    f8b8:	a7 95       	ror	r26
    f8ba:	97 95       	ror	r25
    f8bc:	87 95       	ror	r24
    f8be:	2a 95       	dec	r18
    f8c0:	d2 f7       	brpl	.-12     	; 0xf8b6 <sysclk_get_per4_hz+0x1a>
    f8c2:	bc 01       	movw	r22, r24
    f8c4:	cd 01       	movw	r24, r26
    f8c6:	0f 90       	pop	r0
    f8c8:	df 91       	pop	r29
    f8ca:	cf 91       	pop	r28
    f8cc:	08 95       	ret

0000f8ce <sysclk_get_per2_hz>:
    f8ce:	cf 93       	push	r28
    f8d0:	df 93       	push	r29
    f8d2:	cd b7       	in	r28, 0x3d	; 61
    f8d4:	de b7       	in	r29, 0x3e	; 62
    f8d6:	e2 df       	rcall	.-60     	; 0xf89c <sysclk_get_per4_hz>
    f8d8:	dc 01       	movw	r26, r24
    f8da:	cb 01       	movw	r24, r22
    f8dc:	bc 01       	movw	r22, r24
    f8de:	cd 01       	movw	r24, r26
    f8e0:	df 91       	pop	r29
    f8e2:	cf 91       	pop	r28
    f8e4:	08 95       	ret

0000f8e6 <sysclk_get_per_hz>:
    f8e6:	cf 93       	push	r28
    f8e8:	df 93       	push	r29
    f8ea:	cd b7       	in	r28, 0x3d	; 61
    f8ec:	de b7       	in	r29, 0x3e	; 62
    f8ee:	ef df       	rcall	.-34     	; 0xf8ce <sysclk_get_per2_hz>
    f8f0:	dc 01       	movw	r26, r24
    f8f2:	cb 01       	movw	r24, r22
    f8f4:	bc 01       	movw	r22, r24
    f8f6:	cd 01       	movw	r24, r26
    f8f8:	df 91       	pop	r29
    f8fa:	cf 91       	pop	r28
    f8fc:	08 95       	ret

0000f8fe <sysclk_get_cpu_hz>:
    f8fe:	cf 93       	push	r28
    f900:	df 93       	push	r29
    f902:	cd b7       	in	r28, 0x3d	; 61
    f904:	de b7       	in	r29, 0x3e	; 62
    f906:	ef df       	rcall	.-34     	; 0xf8e6 <sysclk_get_per_hz>
    f908:	dc 01       	movw	r26, r24
    f90a:	cb 01       	movw	r24, r22
    f90c:	bc 01       	movw	r22, r24
    f90e:	cd 01       	movw	r24, r26
    f910:	df 91       	pop	r29
    f912:	cf 91       	pop	r28
    f914:	08 95       	ret

0000f916 <__portable_avr_delay_cycles>:
    f916:	04 c0       	rjmp	.+8      	; 0xf920 <__portable_avr_delay_cycles+0xa>
    f918:	61 50       	subi	r22, 0x01	; 1
    f91a:	71 09       	sbc	r23, r1
    f91c:	81 09       	sbc	r24, r1
    f91e:	91 09       	sbc	r25, r1
    f920:	61 15       	cp	r22, r1
    f922:	71 05       	cpc	r23, r1
    f924:	81 05       	cpc	r24, r1
    f926:	91 05       	cpc	r25, r1
    f928:	b9 f7       	brne	.-18     	; 0xf918 <__portable_avr_delay_cycles+0x2>
    f92a:	08 95       	ret

0000f92c <ioport_configure_pin>:
    f92c:	cf 93       	push	r28
    f92e:	df 93       	push	r29
    f930:	cd b7       	in	r28, 0x3d	; 61
    f932:	de b7       	in	r29, 0x3e	; 62
    f934:	27 97       	sbiw	r28, 0x07	; 7
    f936:	cd bf       	out	0x3d, r28	; 61
    f938:	de bf       	out	0x3e, r29	; 62
    f93a:	8d 83       	std	Y+5, r24	; 0x05
    f93c:	6e 83       	std	Y+6, r22	; 0x06
    f93e:	7f 83       	std	Y+7, r23	; 0x07
    f940:	8d 81       	ldd	r24, Y+5	; 0x05
    f942:	89 83       	std	Y+1, r24	; 0x01
    f944:	89 81       	ldd	r24, Y+1	; 0x01
    f946:	88 2f       	mov	r24, r24
    f948:	90 e0       	ldi	r25, 0x00	; 0
    f94a:	9c 01       	movw	r18, r24
    f94c:	27 70       	andi	r18, 0x07	; 7
    f94e:	33 27       	eor	r19, r19
    f950:	81 e0       	ldi	r24, 0x01	; 1
    f952:	90 e0       	ldi	r25, 0x00	; 0
    f954:	02 c0       	rjmp	.+4      	; 0xf95a <ioport_configure_pin+0x2e>
    f956:	88 0f       	add	r24, r24
    f958:	99 1f       	adc	r25, r25
    f95a:	2a 95       	dec	r18
    f95c:	e2 f7       	brpl	.-8      	; 0xf956 <ioport_configure_pin+0x2a>
    f95e:	68 2f       	mov	r22, r24
    f960:	8d 81       	ldd	r24, Y+5	; 0x05
    f962:	8a 83       	std	Y+2, r24	; 0x02
    f964:	8a 81       	ldd	r24, Y+2	; 0x02
    f966:	8b 83       	std	Y+3, r24	; 0x03
    f968:	8b 81       	ldd	r24, Y+3	; 0x03
    f96a:	86 95       	lsr	r24
    f96c:	86 95       	lsr	r24
    f96e:	86 95       	lsr	r24
    f970:	8c 83       	std	Y+4, r24	; 0x04
    f972:	8c 81       	ldd	r24, Y+4	; 0x04
    f974:	88 2f       	mov	r24, r24
    f976:	90 e0       	ldi	r25, 0x00	; 0
    f978:	88 0f       	add	r24, r24
    f97a:	99 1f       	adc	r25, r25
    f97c:	82 95       	swap	r24
    f97e:	92 95       	swap	r25
    f980:	90 7f       	andi	r25, 0xF0	; 240
    f982:	98 27       	eor	r25, r24
    f984:	80 7f       	andi	r24, 0xF0	; 240
    f986:	98 27       	eor	r25, r24
    f988:	9a 5f       	subi	r25, 0xFA	; 250
    f98a:	9c 01       	movw	r18, r24
    f98c:	8e 81       	ldd	r24, Y+6	; 0x06
    f98e:	9f 81       	ldd	r25, Y+7	; 0x07
    f990:	ac 01       	movw	r20, r24
    f992:	c9 01       	movw	r24, r18
    f994:	0e 94 89 97 	call	0x12f12	; 0x12f12 <ioport_configure_port_pin>
    f998:	00 00       	nop
    f99a:	27 96       	adiw	r28, 0x07	; 7
    f99c:	cd bf       	out	0x3d, r28	; 61
    f99e:	de bf       	out	0x3e, r29	; 62
    f9a0:	df 91       	pop	r29
    f9a2:	cf 91       	pop	r28
    f9a4:	08 95       	ret

0000f9a6 <ioport_set_pin_low>:
    f9a6:	cf 93       	push	r28
    f9a8:	df 93       	push	r29
    f9aa:	cd b7       	in	r28, 0x3d	; 61
    f9ac:	de b7       	in	r29, 0x3e	; 62
    f9ae:	2a 97       	sbiw	r28, 0x0a	; 10
    f9b0:	cd bf       	out	0x3d, r28	; 61
    f9b2:	de bf       	out	0x3e, r29	; 62
    f9b4:	8a 87       	std	Y+10, r24	; 0x0a
    f9b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    f9b8:	89 83       	std	Y+1, r24	; 0x01
    f9ba:	1a 82       	std	Y+2, r1	; 0x02
    f9bc:	89 81       	ldd	r24, Y+1	; 0x01
    f9be:	8b 83       	std	Y+3, r24	; 0x03
    f9c0:	8b 81       	ldd	r24, Y+3	; 0x03
    f9c2:	8c 83       	std	Y+4, r24	; 0x04
    f9c4:	8c 81       	ldd	r24, Y+4	; 0x04
    f9c6:	86 95       	lsr	r24
    f9c8:	86 95       	lsr	r24
    f9ca:	86 95       	lsr	r24
    f9cc:	8d 83       	std	Y+5, r24	; 0x05
    f9ce:	8d 81       	ldd	r24, Y+5	; 0x05
    f9d0:	88 2f       	mov	r24, r24
    f9d2:	90 e0       	ldi	r25, 0x00	; 0
    f9d4:	88 0f       	add	r24, r24
    f9d6:	99 1f       	adc	r25, r25
    f9d8:	82 95       	swap	r24
    f9da:	92 95       	swap	r25
    f9dc:	90 7f       	andi	r25, 0xF0	; 240
    f9de:	98 27       	eor	r25, r24
    f9e0:	80 7f       	andi	r24, 0xF0	; 240
    f9e2:	98 27       	eor	r25, r24
    f9e4:	9a 5f       	subi	r25, 0xFA	; 250
    f9e6:	8e 83       	std	Y+6, r24	; 0x06
    f9e8:	9f 83       	std	Y+7, r25	; 0x07
    f9ea:	8a 81       	ldd	r24, Y+2	; 0x02
    f9ec:	88 23       	and	r24, r24
    f9ee:	a9 f0       	breq	.+42     	; 0xfa1a <ioport_set_pin_low+0x74>
    f9f0:	89 81       	ldd	r24, Y+1	; 0x01
    f9f2:	88 87       	std	Y+8, r24	; 0x08
    f9f4:	88 85       	ldd	r24, Y+8	; 0x08
    f9f6:	88 2f       	mov	r24, r24
    f9f8:	90 e0       	ldi	r25, 0x00	; 0
    f9fa:	9c 01       	movw	r18, r24
    f9fc:	27 70       	andi	r18, 0x07	; 7
    f9fe:	33 27       	eor	r19, r19
    fa00:	81 e0       	ldi	r24, 0x01	; 1
    fa02:	90 e0       	ldi	r25, 0x00	; 0
    fa04:	02 c0       	rjmp	.+4      	; 0xfa0a <ioport_set_pin_low+0x64>
    fa06:	88 0f       	add	r24, r24
    fa08:	99 1f       	adc	r25, r25
    fa0a:	2a 95       	dec	r18
    fa0c:	e2 f7       	brpl	.-8      	; 0xfa06 <ioport_set_pin_low+0x60>
    fa0e:	28 2f       	mov	r18, r24
    fa10:	8e 81       	ldd	r24, Y+6	; 0x06
    fa12:	9f 81       	ldd	r25, Y+7	; 0x07
    fa14:	fc 01       	movw	r30, r24
    fa16:	25 83       	std	Z+5, r18	; 0x05
    fa18:	14 c0       	rjmp	.+40     	; 0xfa42 <ioport_set_pin_low+0x9c>
    fa1a:	89 81       	ldd	r24, Y+1	; 0x01
    fa1c:	89 87       	std	Y+9, r24	; 0x09
    fa1e:	89 85       	ldd	r24, Y+9	; 0x09
    fa20:	88 2f       	mov	r24, r24
    fa22:	90 e0       	ldi	r25, 0x00	; 0
    fa24:	9c 01       	movw	r18, r24
    fa26:	27 70       	andi	r18, 0x07	; 7
    fa28:	33 27       	eor	r19, r19
    fa2a:	81 e0       	ldi	r24, 0x01	; 1
    fa2c:	90 e0       	ldi	r25, 0x00	; 0
    fa2e:	02 c0       	rjmp	.+4      	; 0xfa34 <ioport_set_pin_low+0x8e>
    fa30:	88 0f       	add	r24, r24
    fa32:	99 1f       	adc	r25, r25
    fa34:	2a 95       	dec	r18
    fa36:	e2 f7       	brpl	.-8      	; 0xfa30 <ioport_set_pin_low+0x8a>
    fa38:	28 2f       	mov	r18, r24
    fa3a:	8e 81       	ldd	r24, Y+6	; 0x06
    fa3c:	9f 81       	ldd	r25, Y+7	; 0x07
    fa3e:	fc 01       	movw	r30, r24
    fa40:	26 83       	std	Z+6, r18	; 0x06
    fa42:	00 00       	nop
    fa44:	2a 96       	adiw	r28, 0x0a	; 10
    fa46:	cd bf       	out	0x3d, r28	; 61
    fa48:	de bf       	out	0x3e, r29	; 62
    fa4a:	df 91       	pop	r29
    fa4c:	cf 91       	pop	r28
    fa4e:	08 95       	ret

0000fa50 <ioport_set_pin_high>:
    fa50:	cf 93       	push	r28
    fa52:	df 93       	push	r29
    fa54:	cd b7       	in	r28, 0x3d	; 61
    fa56:	de b7       	in	r29, 0x3e	; 62
    fa58:	2a 97       	sbiw	r28, 0x0a	; 10
    fa5a:	cd bf       	out	0x3d, r28	; 61
    fa5c:	de bf       	out	0x3e, r29	; 62
    fa5e:	8a 87       	std	Y+10, r24	; 0x0a
    fa60:	8a 85       	ldd	r24, Y+10	; 0x0a
    fa62:	89 83       	std	Y+1, r24	; 0x01
    fa64:	81 e0       	ldi	r24, 0x01	; 1
    fa66:	8a 83       	std	Y+2, r24	; 0x02
    fa68:	89 81       	ldd	r24, Y+1	; 0x01
    fa6a:	8b 83       	std	Y+3, r24	; 0x03
    fa6c:	8b 81       	ldd	r24, Y+3	; 0x03
    fa6e:	8c 83       	std	Y+4, r24	; 0x04
    fa70:	8c 81       	ldd	r24, Y+4	; 0x04
    fa72:	86 95       	lsr	r24
    fa74:	86 95       	lsr	r24
    fa76:	86 95       	lsr	r24
    fa78:	8d 83       	std	Y+5, r24	; 0x05
    fa7a:	8d 81       	ldd	r24, Y+5	; 0x05
    fa7c:	88 2f       	mov	r24, r24
    fa7e:	90 e0       	ldi	r25, 0x00	; 0
    fa80:	88 0f       	add	r24, r24
    fa82:	99 1f       	adc	r25, r25
    fa84:	82 95       	swap	r24
    fa86:	92 95       	swap	r25
    fa88:	90 7f       	andi	r25, 0xF0	; 240
    fa8a:	98 27       	eor	r25, r24
    fa8c:	80 7f       	andi	r24, 0xF0	; 240
    fa8e:	98 27       	eor	r25, r24
    fa90:	9a 5f       	subi	r25, 0xFA	; 250
    fa92:	8e 83       	std	Y+6, r24	; 0x06
    fa94:	9f 83       	std	Y+7, r25	; 0x07
    fa96:	8a 81       	ldd	r24, Y+2	; 0x02
    fa98:	88 23       	and	r24, r24
    fa9a:	a9 f0       	breq	.+42     	; 0xfac6 <ioport_set_pin_high+0x76>
    fa9c:	89 81       	ldd	r24, Y+1	; 0x01
    fa9e:	88 87       	std	Y+8, r24	; 0x08
    faa0:	88 85       	ldd	r24, Y+8	; 0x08
    faa2:	88 2f       	mov	r24, r24
    faa4:	90 e0       	ldi	r25, 0x00	; 0
    faa6:	9c 01       	movw	r18, r24
    faa8:	27 70       	andi	r18, 0x07	; 7
    faaa:	33 27       	eor	r19, r19
    faac:	81 e0       	ldi	r24, 0x01	; 1
    faae:	90 e0       	ldi	r25, 0x00	; 0
    fab0:	02 c0       	rjmp	.+4      	; 0xfab6 <ioport_set_pin_high+0x66>
    fab2:	88 0f       	add	r24, r24
    fab4:	99 1f       	adc	r25, r25
    fab6:	2a 95       	dec	r18
    fab8:	e2 f7       	brpl	.-8      	; 0xfab2 <ioport_set_pin_high+0x62>
    faba:	28 2f       	mov	r18, r24
    fabc:	8e 81       	ldd	r24, Y+6	; 0x06
    fabe:	9f 81       	ldd	r25, Y+7	; 0x07
    fac0:	fc 01       	movw	r30, r24
    fac2:	25 83       	std	Z+5, r18	; 0x05
    fac4:	14 c0       	rjmp	.+40     	; 0xfaee <ioport_set_pin_high+0x9e>
    fac6:	89 81       	ldd	r24, Y+1	; 0x01
    fac8:	89 87       	std	Y+9, r24	; 0x09
    faca:	89 85       	ldd	r24, Y+9	; 0x09
    facc:	88 2f       	mov	r24, r24
    face:	90 e0       	ldi	r25, 0x00	; 0
    fad0:	9c 01       	movw	r18, r24
    fad2:	27 70       	andi	r18, 0x07	; 7
    fad4:	33 27       	eor	r19, r19
    fad6:	81 e0       	ldi	r24, 0x01	; 1
    fad8:	90 e0       	ldi	r25, 0x00	; 0
    fada:	02 c0       	rjmp	.+4      	; 0xfae0 <ioport_set_pin_high+0x90>
    fadc:	88 0f       	add	r24, r24
    fade:	99 1f       	adc	r25, r25
    fae0:	2a 95       	dec	r18
    fae2:	e2 f7       	brpl	.-8      	; 0xfadc <ioport_set_pin_high+0x8c>
    fae4:	28 2f       	mov	r18, r24
    fae6:	8e 81       	ldd	r24, Y+6	; 0x06
    fae8:	9f 81       	ldd	r25, Y+7	; 0x07
    faea:	fc 01       	movw	r30, r24
    faec:	26 83       	std	Z+6, r18	; 0x06
    faee:	00 00       	nop
    faf0:	2a 96       	adiw	r28, 0x0a	; 10
    faf2:	cd bf       	out	0x3d, r28	; 61
    faf4:	de bf       	out	0x3e, r29	; 62
    faf6:	df 91       	pop	r29
    faf8:	cf 91       	pop	r28
    fafa:	08 95       	ret

0000fafc <init_TEC_controller>:
    fafc:	cf 93       	push	r28
    fafe:	df 93       	push	r29
    fb00:	cd b7       	in	r28, 0x3d	; 61
    fb02:	de b7       	in	r29, 0x3e	; 62
    fb04:	61 e0       	ldi	r22, 0x01	; 1
    fb06:	70 e0       	ldi	r23, 0x00	; 0
    fb08:	84 e0       	ldi	r24, 0x04	; 4
    fb0a:	10 df       	rcall	.-480    	; 0xf92c <ioport_configure_pin>
    fb0c:	61 e0       	ldi	r22, 0x01	; 1
    fb0e:	70 e0       	ldi	r23, 0x00	; 0
    fb10:	85 e0       	ldi	r24, 0x05	; 5
    fb12:	0c df       	rcall	.-488    	; 0xf92c <ioport_configure_pin>
    fb14:	60 e0       	ldi	r22, 0x00	; 0
    fb16:	70 e0       	ldi	r23, 0x00	; 0
    fb18:	89 e0       	ldi	r24, 0x09	; 9
    fb1a:	08 df       	rcall	.-496    	; 0xf92c <ioport_configure_pin>
    fb1c:	60 e0       	ldi	r22, 0x00	; 0
    fb1e:	70 e0       	ldi	r23, 0x00	; 0
    fb20:	88 e0       	ldi	r24, 0x08	; 8
    fb22:	04 df       	rcall	.-504    	; 0xf92c <ioport_configure_pin>
    fb24:	63 e0       	ldi	r22, 0x03	; 3
    fb26:	70 e0       	ldi	r23, 0x00	; 0
    fb28:	83 e2       	ldi	r24, 0x23	; 35
    fb2a:	00 df       	rcall	.-512    	; 0xf92c <ioport_configure_pin>
    fb2c:	20 e0       	ldi	r18, 0x00	; 0
    fb2e:	30 e0       	ldi	r19, 0x00	; 0
    fb30:	41 e0       	ldi	r20, 0x01	; 1
    fb32:	64 e0       	ldi	r22, 0x04	; 4
    fb34:	81 ea       	ldi	r24, 0xA1	; 161
    fb36:	99 e2       	ldi	r25, 0x29	; 41
    fb38:	0e 94 36 b2 	call	0x1646c	; 0x1646c <pwm_init>
    fb3c:	20 e0       	ldi	r18, 0x00	; 0
    fb3e:	30 e0       	ldi	r19, 0x00	; 0
    fb40:	42 e0       	ldi	r20, 0x02	; 2
    fb42:	64 e0       	ldi	r22, 0x04	; 4
    fb44:	88 ea       	ldi	r24, 0xA8	; 168
    fb46:	99 e2       	ldi	r25, 0x29	; 41
    fb48:	0e 94 36 b2 	call	0x1646c	; 0x1646c <pwm_init>
    fb4c:	20 e0       	ldi	r18, 0x00	; 0
    fb4e:	30 e0       	ldi	r19, 0x00	; 0
    fb50:	43 e0       	ldi	r20, 0x03	; 3
    fb52:	64 e0       	ldi	r22, 0x04	; 4
    fb54:	8a e9       	ldi	r24, 0x9A	; 154
    fb56:	99 e2       	ldi	r25, 0x29	; 41
    fb58:	0e 94 36 b2 	call	0x1646c	; 0x1646c <pwm_init>
    fb5c:	84 e0       	ldi	r24, 0x04	; 4
    fb5e:	78 df       	rcall	.-272    	; 0xfa50 <ioport_set_pin_high>
    fb60:	85 e0       	ldi	r24, 0x05	; 5
    fb62:	76 df       	rcall	.-276    	; 0xfa50 <ioport_set_pin_high>
    fb64:	00 00       	nop
    fb66:	df 91       	pop	r29
    fb68:	cf 91       	pop	r28
    fb6a:	08 95       	ret

0000fb6c <set_TEC_pwm_A_duty>:
    fb6c:	cf 93       	push	r28
    fb6e:	df 93       	push	r29
    fb70:	1f 92       	push	r1
    fb72:	cd b7       	in	r28, 0x3d	; 61
    fb74:	de b7       	in	r29, 0x3e	; 62
    fb76:	89 83       	std	Y+1, r24	; 0x01
    fb78:	69 81       	ldd	r22, Y+1	; 0x01
    fb7a:	81 ea       	ldi	r24, 0xA1	; 161
    fb7c:	99 e2       	ldi	r25, 0x29	; 41
    fb7e:	0e 94 bd b3 	call	0x1677a	; 0x1677a <pwm_start>
    fb82:	00 00       	nop
    fb84:	0f 90       	pop	r0
    fb86:	df 91       	pop	r29
    fb88:	cf 91       	pop	r28
    fb8a:	08 95       	ret

0000fb8c <set_TEC_pwm_A_freq>:
    fb8c:	cf 93       	push	r28
    fb8e:	df 93       	push	r29
    fb90:	00 d0       	rcall	.+0      	; 0xfb92 <set_TEC_pwm_A_freq+0x6>
    fb92:	1f 92       	push	r1
    fb94:	cd b7       	in	r28, 0x3d	; 61
    fb96:	de b7       	in	r29, 0x3e	; 62
    fb98:	69 83       	std	Y+1, r22	; 0x01
    fb9a:	7a 83       	std	Y+2, r23	; 0x02
    fb9c:	8b 83       	std	Y+3, r24	; 0x03
    fb9e:	9c 83       	std	Y+4, r25	; 0x04
    fba0:	89 81       	ldd	r24, Y+1	; 0x01
    fba2:	9a 81       	ldd	r25, Y+2	; 0x02
    fba4:	ab 81       	ldd	r26, Y+3	; 0x03
    fba6:	bc 81       	ldd	r27, Y+4	; 0x04
    fba8:	ac 01       	movw	r20, r24
    fbaa:	bd 01       	movw	r22, r26
    fbac:	81 ea       	ldi	r24, 0xA1	; 161
    fbae:	99 e2       	ldi	r25, 0x29	; 41
    fbb0:	71 d2       	rcall	.+1250   	; 0x10094 <pwm_set_TEC_frequency_32bit>
    fbb2:	00 00       	nop
    fbb4:	24 96       	adiw	r28, 0x04	; 4
    fbb6:	cd bf       	out	0x3d, r28	; 61
    fbb8:	de bf       	out	0x3e, r29	; 62
    fbba:	df 91       	pop	r29
    fbbc:	cf 91       	pop	r28
    fbbe:	08 95       	ret

0000fbc0 <set_TEC_pwm_B_duty>:
    fbc0:	cf 93       	push	r28
    fbc2:	df 93       	push	r29
    fbc4:	1f 92       	push	r1
    fbc6:	cd b7       	in	r28, 0x3d	; 61
    fbc8:	de b7       	in	r29, 0x3e	; 62
    fbca:	89 83       	std	Y+1, r24	; 0x01
    fbcc:	69 81       	ldd	r22, Y+1	; 0x01
    fbce:	88 ea       	ldi	r24, 0xA8	; 168
    fbd0:	99 e2       	ldi	r25, 0x29	; 41
    fbd2:	0e 94 bd b3 	call	0x1677a	; 0x1677a <pwm_start>
    fbd6:	00 00       	nop
    fbd8:	0f 90       	pop	r0
    fbda:	df 91       	pop	r29
    fbdc:	cf 91       	pop	r28
    fbde:	08 95       	ret

0000fbe0 <set_TEC_pwm_B_freq>:
    fbe0:	cf 93       	push	r28
    fbe2:	df 93       	push	r29
    fbe4:	00 d0       	rcall	.+0      	; 0xfbe6 <set_TEC_pwm_B_freq+0x6>
    fbe6:	1f 92       	push	r1
    fbe8:	cd b7       	in	r28, 0x3d	; 61
    fbea:	de b7       	in	r29, 0x3e	; 62
    fbec:	69 83       	std	Y+1, r22	; 0x01
    fbee:	7a 83       	std	Y+2, r23	; 0x02
    fbf0:	8b 83       	std	Y+3, r24	; 0x03
    fbf2:	9c 83       	std	Y+4, r25	; 0x04
    fbf4:	89 81       	ldd	r24, Y+1	; 0x01
    fbf6:	9a 81       	ldd	r25, Y+2	; 0x02
    fbf8:	ab 81       	ldd	r26, Y+3	; 0x03
    fbfa:	bc 81       	ldd	r27, Y+4	; 0x04
    fbfc:	ac 01       	movw	r20, r24
    fbfe:	bd 01       	movw	r22, r26
    fc00:	88 ea       	ldi	r24, 0xA8	; 168
    fc02:	99 e2       	ldi	r25, 0x29	; 41
    fc04:	47 d2       	rcall	.+1166   	; 0x10094 <pwm_set_TEC_frequency_32bit>
    fc06:	00 00       	nop
    fc08:	24 96       	adiw	r28, 0x04	; 4
    fc0a:	cd bf       	out	0x3d, r28	; 61
    fc0c:	de bf       	out	0x3e, r29	; 62
    fc0e:	df 91       	pop	r29
    fc10:	cf 91       	pop	r28
    fc12:	08 95       	ret

0000fc14 <reset_TEC_A>:
    fc14:	2f 92       	push	r2
    fc16:	3f 92       	push	r3
    fc18:	4f 92       	push	r4
    fc1a:	5f 92       	push	r5
    fc1c:	6f 92       	push	r6
    fc1e:	7f 92       	push	r7
    fc20:	8f 92       	push	r8
    fc22:	9f 92       	push	r9
    fc24:	af 92       	push	r10
    fc26:	bf 92       	push	r11
    fc28:	cf 92       	push	r12
    fc2a:	df 92       	push	r13
    fc2c:	ef 92       	push	r14
    fc2e:	ff 92       	push	r15
    fc30:	0f 93       	push	r16
    fc32:	1f 93       	push	r17
    fc34:	cf 93       	push	r28
    fc36:	df 93       	push	r29
    fc38:	cd b7       	in	r28, 0x3d	; 61
    fc3a:	de b7       	in	r29, 0x3e	; 62
    fc3c:	68 97       	sbiw	r28, 0x18	; 24
    fc3e:	cd bf       	out	0x3d, r28	; 61
    fc40:	de bf       	out	0x3e, r29	; 62
    fc42:	84 e0       	ldi	r24, 0x04	; 4
    fc44:	b0 de       	rcall	.-672    	; 0xf9a6 <ioport_set_pin_low>
    fc46:	5b de       	rcall	.-842    	; 0xf8fe <sysclk_get_cpu_hz>
    fc48:	dc 01       	movw	r26, r24
    fc4a:	cb 01       	movw	r24, r22
    fc4c:	9c 01       	movw	r18, r24
    fc4e:	ad 01       	movw	r20, r26
    fc50:	60 e0       	ldi	r22, 0x00	; 0
    fc52:	70 e0       	ldi	r23, 0x00	; 0
    fc54:	cb 01       	movw	r24, r22
    fc56:	82 2e       	mov	r8, r18
    fc58:	93 2e       	mov	r9, r19
    fc5a:	a4 2e       	mov	r10, r20
    fc5c:	b5 2e       	mov	r11, r21
    fc5e:	c6 2e       	mov	r12, r22
    fc60:	d7 2e       	mov	r13, r23
    fc62:	e8 2e       	mov	r14, r24
    fc64:	f9 2e       	mov	r15, r25
    fc66:	28 2d       	mov	r18, r8
    fc68:	39 2d       	mov	r19, r9
    fc6a:	4a 2d       	mov	r20, r10
    fc6c:	5b 2d       	mov	r21, r11
    fc6e:	6c 2d       	mov	r22, r12
    fc70:	7d 2d       	mov	r23, r13
    fc72:	8e 2d       	mov	r24, r14
    fc74:	9f 2d       	mov	r25, r15
    fc76:	01 e0       	ldi	r16, 0x01	; 1
    fc78:	0e 94 c7 b7 	call	0x16f8e	; 0x16f8e <__ashldi3>
    fc7c:	29 83       	std	Y+1, r18	; 0x01
    fc7e:	3a 83       	std	Y+2, r19	; 0x02
    fc80:	4b 83       	std	Y+3, r20	; 0x03
    fc82:	5c 83       	std	Y+4, r21	; 0x04
    fc84:	6d 83       	std	Y+5, r22	; 0x05
    fc86:	7e 83       	std	Y+6, r23	; 0x06
    fc88:	8f 83       	std	Y+7, r24	; 0x07
    fc8a:	98 87       	std	Y+8, r25	; 0x08
    fc8c:	89 80       	ldd	r8, Y+1	; 0x01
    fc8e:	9a 80       	ldd	r9, Y+2	; 0x02
    fc90:	ab 80       	ldd	r10, Y+3	; 0x03
    fc92:	bc 80       	ldd	r11, Y+4	; 0x04
    fc94:	cd 80       	ldd	r12, Y+5	; 0x05
    fc96:	de 80       	ldd	r13, Y+6	; 0x06
    fc98:	ef 80       	ldd	r14, Y+7	; 0x07
    fc9a:	f8 84       	ldd	r15, Y+8	; 0x08
    fc9c:	28 2d       	mov	r18, r8
    fc9e:	39 2d       	mov	r19, r9
    fca0:	4a 2d       	mov	r20, r10
    fca2:	5b 2d       	mov	r21, r11
    fca4:	6c 2d       	mov	r22, r12
    fca6:	7d 2d       	mov	r23, r13
    fca8:	8e 2d       	mov	r24, r14
    fcaa:	9f 2d       	mov	r25, r15
    fcac:	02 e0       	ldi	r16, 0x02	; 2
    fcae:	0e 94 c7 b7 	call	0x16f8e	; 0x16f8e <__ashldi3>
    fcb2:	29 87       	std	Y+9, r18	; 0x09
    fcb4:	3a 87       	std	Y+10, r19	; 0x0a
    fcb6:	4b 87       	std	Y+11, r20	; 0x0b
    fcb8:	5c 87       	std	Y+12, r21	; 0x0c
    fcba:	6d 87       	std	Y+13, r22	; 0x0d
    fcbc:	7e 87       	std	Y+14, r23	; 0x0e
    fcbe:	8f 87       	std	Y+15, r24	; 0x0f
    fcc0:	98 8b       	std	Y+16, r25	; 0x10
    fcc2:	28 2d       	mov	r18, r8
    fcc4:	39 2d       	mov	r19, r9
    fcc6:	4a 2d       	mov	r20, r10
    fcc8:	5b 2d       	mov	r21, r11
    fcca:	6c 2d       	mov	r22, r12
    fccc:	7d 2d       	mov	r23, r13
    fcce:	8e 2d       	mov	r24, r14
    fcd0:	9f 2d       	mov	r25, r15
    fcd2:	a9 84       	ldd	r10, Y+9	; 0x09
    fcd4:	ba 84       	ldd	r11, Y+10	; 0x0a
    fcd6:	cb 84       	ldd	r12, Y+11	; 0x0b
    fcd8:	dc 84       	ldd	r13, Y+12	; 0x0c
    fcda:	ed 84       	ldd	r14, Y+13	; 0x0d
    fcdc:	fe 84       	ldd	r15, Y+14	; 0x0e
    fcde:	0f 85       	ldd	r16, Y+15	; 0x0f
    fce0:	18 89       	ldd	r17, Y+16	; 0x10
    fce2:	0e 94 e0 b7 	call	0x16fc0	; 0x16fc0 <__adddi3>
    fce6:	82 2e       	mov	r8, r18
    fce8:	93 2e       	mov	r9, r19
    fcea:	a4 2e       	mov	r10, r20
    fcec:	b5 2e       	mov	r11, r21
    fcee:	c6 2e       	mov	r12, r22
    fcf0:	d7 2e       	mov	r13, r23
    fcf2:	e8 2e       	mov	r14, r24
    fcf4:	f9 2e       	mov	r15, r25
    fcf6:	28 2d       	mov	r18, r8
    fcf8:	39 2d       	mov	r19, r9
    fcfa:	4a 2d       	mov	r20, r10
    fcfc:	5b 2d       	mov	r21, r11
    fcfe:	6c 2d       	mov	r22, r12
    fd00:	7d 2d       	mov	r23, r13
    fd02:	8e 2d       	mov	r24, r14
    fd04:	9f 2d       	mov	r25, r15
    fd06:	02 e0       	ldi	r16, 0x02	; 2
    fd08:	0e 94 c7 b7 	call	0x16f8e	; 0x16f8e <__ashldi3>
    fd0c:	29 8b       	std	Y+17, r18	; 0x11
    fd0e:	3a 8b       	std	Y+18, r19	; 0x12
    fd10:	4b 8b       	std	Y+19, r20	; 0x13
    fd12:	5c 8b       	std	Y+20, r21	; 0x14
    fd14:	6d 8b       	std	Y+21, r22	; 0x15
    fd16:	7e 8b       	std	Y+22, r23	; 0x16
    fd18:	8f 8b       	std	Y+23, r24	; 0x17
    fd1a:	98 8f       	std	Y+24, r25	; 0x18
    fd1c:	28 2d       	mov	r18, r8
    fd1e:	39 2d       	mov	r19, r9
    fd20:	4a 2d       	mov	r20, r10
    fd22:	5b 2d       	mov	r21, r11
    fd24:	6c 2d       	mov	r22, r12
    fd26:	7d 2d       	mov	r23, r13
    fd28:	8e 2d       	mov	r24, r14
    fd2a:	9f 2d       	mov	r25, r15
    fd2c:	a9 88       	ldd	r10, Y+17	; 0x11
    fd2e:	ba 88       	ldd	r11, Y+18	; 0x12
    fd30:	cb 88       	ldd	r12, Y+19	; 0x13
    fd32:	dc 88       	ldd	r13, Y+20	; 0x14
    fd34:	ed 88       	ldd	r14, Y+21	; 0x15
    fd36:	fe 88       	ldd	r15, Y+22	; 0x16
    fd38:	0f 89       	ldd	r16, Y+23	; 0x17
    fd3a:	18 8d       	ldd	r17, Y+24	; 0x18
    fd3c:	0e 94 e0 b7 	call	0x16fc0	; 0x16fc0 <__adddi3>
    fd40:	22 2e       	mov	r2, r18
    fd42:	33 2e       	mov	r3, r19
    fd44:	44 2e       	mov	r4, r20
    fd46:	55 2e       	mov	r5, r21
    fd48:	66 2e       	mov	r6, r22
    fd4a:	77 2e       	mov	r7, r23
    fd4c:	88 2e       	mov	r8, r24
    fd4e:	99 2e       	mov	r9, r25
    fd50:	0f 2e       	mov	r0, r31
    fd52:	f6 e0       	ldi	r31, 0x06	; 6
    fd54:	af 2e       	mov	r10, r31
    fd56:	f0 2d       	mov	r31, r0
    fd58:	b1 2c       	mov	r11, r1
    fd5a:	c1 2c       	mov	r12, r1
    fd5c:	d1 2c       	mov	r13, r1
    fd5e:	e1 2c       	mov	r14, r1
    fd60:	f1 2c       	mov	r15, r1
    fd62:	00 e0       	ldi	r16, 0x00	; 0
    fd64:	10 e0       	ldi	r17, 0x00	; 0
    fd66:	22 2d       	mov	r18, r2
    fd68:	33 2d       	mov	r19, r3
    fd6a:	44 2d       	mov	r20, r4
    fd6c:	55 2d       	mov	r21, r5
    fd6e:	66 2d       	mov	r22, r6
    fd70:	77 2d       	mov	r23, r7
    fd72:	88 2d       	mov	r24, r8
    fd74:	99 2d       	mov	r25, r9
    fd76:	0e 94 6b b7 	call	0x16ed6	; 0x16ed6 <__udivdi3>
    fd7a:	22 2e       	mov	r2, r18
    fd7c:	33 2e       	mov	r3, r19
    fd7e:	44 2e       	mov	r4, r20
    fd80:	55 2e       	mov	r5, r21
    fd82:	66 2e       	mov	r6, r22
    fd84:	77 2e       	mov	r7, r23
    fd86:	88 2e       	mov	r8, r24
    fd88:	99 2e       	mov	r9, r25
    fd8a:	a2 2c       	mov	r10, r2
    fd8c:	b3 2c       	mov	r11, r3
    fd8e:	c4 2c       	mov	r12, r4
    fd90:	d5 2c       	mov	r13, r5
    fd92:	e6 2c       	mov	r14, r6
    fd94:	f7 2c       	mov	r15, r7
    fd96:	08 2d       	mov	r16, r8
    fd98:	19 2d       	mov	r17, r9
    fd9a:	2a 2d       	mov	r18, r10
    fd9c:	3b 2d       	mov	r19, r11
    fd9e:	4c 2d       	mov	r20, r12
    fda0:	5d 2d       	mov	r21, r13
    fda2:	6e 2d       	mov	r22, r14
    fda4:	7f 2d       	mov	r23, r15
    fda6:	80 2f       	mov	r24, r16
    fda8:	91 2f       	mov	r25, r17
    fdaa:	29 51       	subi	r18, 0x19	; 25
    fdac:	3c 4f       	sbci	r19, 0xFC	; 252
    fdae:	4f 4f       	sbci	r20, 0xFF	; 255
    fdb0:	5f 4f       	sbci	r21, 0xFF	; 255
    fdb2:	6f 4f       	sbci	r22, 0xFF	; 255
    fdb4:	7f 4f       	sbci	r23, 0xFF	; 255
    fdb6:	8f 4f       	sbci	r24, 0xFF	; 255
    fdb8:	9f 4f       	sbci	r25, 0xFF	; 255
    fdba:	a2 2e       	mov	r10, r18
    fdbc:	b3 2e       	mov	r11, r19
    fdbe:	c4 2e       	mov	r12, r20
    fdc0:	d5 2e       	mov	r13, r21
    fdc2:	e6 2e       	mov	r14, r22
    fdc4:	f7 2e       	mov	r15, r23
    fdc6:	08 2f       	mov	r16, r24
    fdc8:	19 2f       	mov	r17, r25
    fdca:	2a 2d       	mov	r18, r10
    fdcc:	3b 2d       	mov	r19, r11
    fdce:	4c 2d       	mov	r20, r12
    fdd0:	5d 2d       	mov	r21, r13
    fdd2:	6e 2d       	mov	r22, r14
    fdd4:	7f 2d       	mov	r23, r15
    fdd6:	80 2f       	mov	r24, r16
    fdd8:	91 2f       	mov	r25, r17
    fdda:	0e 94 8f b5 	call	0x16b1e	; 0x16b1e <__floatundisf>
    fdde:	dc 01       	movw	r26, r24
    fde0:	cb 01       	movw	r24, r22
    fde2:	20 e0       	ldi	r18, 0x00	; 0
    fde4:	30 e0       	ldi	r19, 0x00	; 0
    fde6:	4a e7       	ldi	r20, 0x7A	; 122
    fde8:	54 e4       	ldi	r21, 0x44	; 68
    fdea:	bc 01       	movw	r22, r24
    fdec:	cd 01       	movw	r24, r26
    fdee:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
    fdf2:	dc 01       	movw	r26, r24
    fdf4:	cb 01       	movw	r24, r22
    fdf6:	bc 01       	movw	r22, r24
    fdf8:	cd 01       	movw	r24, r26
    fdfa:	0e 94 ec b4 	call	0x169d8	; 0x169d8 <__fixunssfdi>
    fdfe:	a2 2e       	mov	r10, r18
    fe00:	b3 2e       	mov	r11, r19
    fe02:	c4 2e       	mov	r12, r20
    fe04:	d5 2e       	mov	r13, r21
    fe06:	e6 2e       	mov	r14, r22
    fe08:	f7 2e       	mov	r15, r23
    fe0a:	08 2f       	mov	r16, r24
    fe0c:	19 2f       	mov	r17, r25
    fe0e:	d6 01       	movw	r26, r12
    fe10:	c5 01       	movw	r24, r10
    fe12:	bc 01       	movw	r22, r24
    fe14:	cd 01       	movw	r24, r26
    fe16:	7f dd       	rcall	.-1282   	; 0xf916 <__portable_avr_delay_cycles>
    fe18:	84 e0       	ldi	r24, 0x04	; 4
    fe1a:	1a de       	rcall	.-972    	; 0xfa50 <ioport_set_pin_high>
    fe1c:	00 00       	nop
    fe1e:	68 96       	adiw	r28, 0x18	; 24
    fe20:	cd bf       	out	0x3d, r28	; 61
    fe22:	de bf       	out	0x3e, r29	; 62
    fe24:	df 91       	pop	r29
    fe26:	cf 91       	pop	r28
    fe28:	1f 91       	pop	r17
    fe2a:	0f 91       	pop	r16
    fe2c:	ff 90       	pop	r15
    fe2e:	ef 90       	pop	r14
    fe30:	df 90       	pop	r13
    fe32:	cf 90       	pop	r12
    fe34:	bf 90       	pop	r11
    fe36:	af 90       	pop	r10
    fe38:	9f 90       	pop	r9
    fe3a:	8f 90       	pop	r8
    fe3c:	7f 90       	pop	r7
    fe3e:	6f 90       	pop	r6
    fe40:	5f 90       	pop	r5
    fe42:	4f 90       	pop	r4
    fe44:	3f 90       	pop	r3
    fe46:	2f 90       	pop	r2
    fe48:	08 95       	ret

0000fe4a <reset_TEC_B>:
    fe4a:	2f 92       	push	r2
    fe4c:	3f 92       	push	r3
    fe4e:	4f 92       	push	r4
    fe50:	5f 92       	push	r5
    fe52:	6f 92       	push	r6
    fe54:	7f 92       	push	r7
    fe56:	8f 92       	push	r8
    fe58:	9f 92       	push	r9
    fe5a:	af 92       	push	r10
    fe5c:	bf 92       	push	r11
    fe5e:	cf 92       	push	r12
    fe60:	df 92       	push	r13
    fe62:	ef 92       	push	r14
    fe64:	ff 92       	push	r15
    fe66:	0f 93       	push	r16
    fe68:	1f 93       	push	r17
    fe6a:	cf 93       	push	r28
    fe6c:	df 93       	push	r29
    fe6e:	cd b7       	in	r28, 0x3d	; 61
    fe70:	de b7       	in	r29, 0x3e	; 62
    fe72:	68 97       	sbiw	r28, 0x18	; 24
    fe74:	cd bf       	out	0x3d, r28	; 61
    fe76:	de bf       	out	0x3e, r29	; 62
    fe78:	85 e0       	ldi	r24, 0x05	; 5
    fe7a:	95 dd       	rcall	.-1238   	; 0xf9a6 <ioport_set_pin_low>
    fe7c:	40 dd       	rcall	.-1408   	; 0xf8fe <sysclk_get_cpu_hz>
    fe7e:	dc 01       	movw	r26, r24
    fe80:	cb 01       	movw	r24, r22
    fe82:	9c 01       	movw	r18, r24
    fe84:	ad 01       	movw	r20, r26
    fe86:	60 e0       	ldi	r22, 0x00	; 0
    fe88:	70 e0       	ldi	r23, 0x00	; 0
    fe8a:	cb 01       	movw	r24, r22
    fe8c:	82 2e       	mov	r8, r18
    fe8e:	93 2e       	mov	r9, r19
    fe90:	a4 2e       	mov	r10, r20
    fe92:	b5 2e       	mov	r11, r21
    fe94:	c6 2e       	mov	r12, r22
    fe96:	d7 2e       	mov	r13, r23
    fe98:	e8 2e       	mov	r14, r24
    fe9a:	f9 2e       	mov	r15, r25
    fe9c:	28 2d       	mov	r18, r8
    fe9e:	39 2d       	mov	r19, r9
    fea0:	4a 2d       	mov	r20, r10
    fea2:	5b 2d       	mov	r21, r11
    fea4:	6c 2d       	mov	r22, r12
    fea6:	7d 2d       	mov	r23, r13
    fea8:	8e 2d       	mov	r24, r14
    feaa:	9f 2d       	mov	r25, r15
    feac:	01 e0       	ldi	r16, 0x01	; 1
    feae:	0e 94 c7 b7 	call	0x16f8e	; 0x16f8e <__ashldi3>
    feb2:	29 83       	std	Y+1, r18	; 0x01
    feb4:	3a 83       	std	Y+2, r19	; 0x02
    feb6:	4b 83       	std	Y+3, r20	; 0x03
    feb8:	5c 83       	std	Y+4, r21	; 0x04
    feba:	6d 83       	std	Y+5, r22	; 0x05
    febc:	7e 83       	std	Y+6, r23	; 0x06
    febe:	8f 83       	std	Y+7, r24	; 0x07
    fec0:	98 87       	std	Y+8, r25	; 0x08
    fec2:	89 80       	ldd	r8, Y+1	; 0x01
    fec4:	9a 80       	ldd	r9, Y+2	; 0x02
    fec6:	ab 80       	ldd	r10, Y+3	; 0x03
    fec8:	bc 80       	ldd	r11, Y+4	; 0x04
    feca:	cd 80       	ldd	r12, Y+5	; 0x05
    fecc:	de 80       	ldd	r13, Y+6	; 0x06
    fece:	ef 80       	ldd	r14, Y+7	; 0x07
    fed0:	f8 84       	ldd	r15, Y+8	; 0x08
    fed2:	28 2d       	mov	r18, r8
    fed4:	39 2d       	mov	r19, r9
    fed6:	4a 2d       	mov	r20, r10
    fed8:	5b 2d       	mov	r21, r11
    feda:	6c 2d       	mov	r22, r12
    fedc:	7d 2d       	mov	r23, r13
    fede:	8e 2d       	mov	r24, r14
    fee0:	9f 2d       	mov	r25, r15
    fee2:	02 e0       	ldi	r16, 0x02	; 2
    fee4:	0e 94 c7 b7 	call	0x16f8e	; 0x16f8e <__ashldi3>
    fee8:	29 87       	std	Y+9, r18	; 0x09
    feea:	3a 87       	std	Y+10, r19	; 0x0a
    feec:	4b 87       	std	Y+11, r20	; 0x0b
    feee:	5c 87       	std	Y+12, r21	; 0x0c
    fef0:	6d 87       	std	Y+13, r22	; 0x0d
    fef2:	7e 87       	std	Y+14, r23	; 0x0e
    fef4:	8f 87       	std	Y+15, r24	; 0x0f
    fef6:	98 8b       	std	Y+16, r25	; 0x10
    fef8:	28 2d       	mov	r18, r8
    fefa:	39 2d       	mov	r19, r9
    fefc:	4a 2d       	mov	r20, r10
    fefe:	5b 2d       	mov	r21, r11
    ff00:	6c 2d       	mov	r22, r12
    ff02:	7d 2d       	mov	r23, r13
    ff04:	8e 2d       	mov	r24, r14
    ff06:	9f 2d       	mov	r25, r15
    ff08:	a9 84       	ldd	r10, Y+9	; 0x09
    ff0a:	ba 84       	ldd	r11, Y+10	; 0x0a
    ff0c:	cb 84       	ldd	r12, Y+11	; 0x0b
    ff0e:	dc 84       	ldd	r13, Y+12	; 0x0c
    ff10:	ed 84       	ldd	r14, Y+13	; 0x0d
    ff12:	fe 84       	ldd	r15, Y+14	; 0x0e
    ff14:	0f 85       	ldd	r16, Y+15	; 0x0f
    ff16:	18 89       	ldd	r17, Y+16	; 0x10
    ff18:	0e 94 e0 b7 	call	0x16fc0	; 0x16fc0 <__adddi3>
    ff1c:	82 2e       	mov	r8, r18
    ff1e:	93 2e       	mov	r9, r19
    ff20:	a4 2e       	mov	r10, r20
    ff22:	b5 2e       	mov	r11, r21
    ff24:	c6 2e       	mov	r12, r22
    ff26:	d7 2e       	mov	r13, r23
    ff28:	e8 2e       	mov	r14, r24
    ff2a:	f9 2e       	mov	r15, r25
    ff2c:	28 2d       	mov	r18, r8
    ff2e:	39 2d       	mov	r19, r9
    ff30:	4a 2d       	mov	r20, r10
    ff32:	5b 2d       	mov	r21, r11
    ff34:	6c 2d       	mov	r22, r12
    ff36:	7d 2d       	mov	r23, r13
    ff38:	8e 2d       	mov	r24, r14
    ff3a:	9f 2d       	mov	r25, r15
    ff3c:	02 e0       	ldi	r16, 0x02	; 2
    ff3e:	0e 94 c7 b7 	call	0x16f8e	; 0x16f8e <__ashldi3>
    ff42:	29 8b       	std	Y+17, r18	; 0x11
    ff44:	3a 8b       	std	Y+18, r19	; 0x12
    ff46:	4b 8b       	std	Y+19, r20	; 0x13
    ff48:	5c 8b       	std	Y+20, r21	; 0x14
    ff4a:	6d 8b       	std	Y+21, r22	; 0x15
    ff4c:	7e 8b       	std	Y+22, r23	; 0x16
    ff4e:	8f 8b       	std	Y+23, r24	; 0x17
    ff50:	98 8f       	std	Y+24, r25	; 0x18
    ff52:	28 2d       	mov	r18, r8
    ff54:	39 2d       	mov	r19, r9
    ff56:	4a 2d       	mov	r20, r10
    ff58:	5b 2d       	mov	r21, r11
    ff5a:	6c 2d       	mov	r22, r12
    ff5c:	7d 2d       	mov	r23, r13
    ff5e:	8e 2d       	mov	r24, r14
    ff60:	9f 2d       	mov	r25, r15
    ff62:	a9 88       	ldd	r10, Y+17	; 0x11
    ff64:	ba 88       	ldd	r11, Y+18	; 0x12
    ff66:	cb 88       	ldd	r12, Y+19	; 0x13
    ff68:	dc 88       	ldd	r13, Y+20	; 0x14
    ff6a:	ed 88       	ldd	r14, Y+21	; 0x15
    ff6c:	fe 88       	ldd	r15, Y+22	; 0x16
    ff6e:	0f 89       	ldd	r16, Y+23	; 0x17
    ff70:	18 8d       	ldd	r17, Y+24	; 0x18
    ff72:	0e 94 e0 b7 	call	0x16fc0	; 0x16fc0 <__adddi3>
    ff76:	22 2e       	mov	r2, r18
    ff78:	33 2e       	mov	r3, r19
    ff7a:	44 2e       	mov	r4, r20
    ff7c:	55 2e       	mov	r5, r21
    ff7e:	66 2e       	mov	r6, r22
    ff80:	77 2e       	mov	r7, r23
    ff82:	88 2e       	mov	r8, r24
    ff84:	99 2e       	mov	r9, r25
    ff86:	0f 2e       	mov	r0, r31
    ff88:	f6 e0       	ldi	r31, 0x06	; 6
    ff8a:	af 2e       	mov	r10, r31
    ff8c:	f0 2d       	mov	r31, r0
    ff8e:	b1 2c       	mov	r11, r1
    ff90:	c1 2c       	mov	r12, r1
    ff92:	d1 2c       	mov	r13, r1
    ff94:	e1 2c       	mov	r14, r1
    ff96:	f1 2c       	mov	r15, r1
    ff98:	00 e0       	ldi	r16, 0x00	; 0
    ff9a:	10 e0       	ldi	r17, 0x00	; 0
    ff9c:	22 2d       	mov	r18, r2
    ff9e:	33 2d       	mov	r19, r3
    ffa0:	44 2d       	mov	r20, r4
    ffa2:	55 2d       	mov	r21, r5
    ffa4:	66 2d       	mov	r22, r6
    ffa6:	77 2d       	mov	r23, r7
    ffa8:	88 2d       	mov	r24, r8
    ffaa:	99 2d       	mov	r25, r9
    ffac:	0e 94 6b b7 	call	0x16ed6	; 0x16ed6 <__udivdi3>
    ffb0:	22 2e       	mov	r2, r18
    ffb2:	33 2e       	mov	r3, r19
    ffb4:	44 2e       	mov	r4, r20
    ffb6:	55 2e       	mov	r5, r21
    ffb8:	66 2e       	mov	r6, r22
    ffba:	77 2e       	mov	r7, r23
    ffbc:	88 2e       	mov	r8, r24
    ffbe:	99 2e       	mov	r9, r25
    ffc0:	a2 2c       	mov	r10, r2
    ffc2:	b3 2c       	mov	r11, r3
    ffc4:	c4 2c       	mov	r12, r4
    ffc6:	d5 2c       	mov	r13, r5
    ffc8:	e6 2c       	mov	r14, r6
    ffca:	f7 2c       	mov	r15, r7
    ffcc:	08 2d       	mov	r16, r8
    ffce:	19 2d       	mov	r17, r9
    ffd0:	2a 2d       	mov	r18, r10
    ffd2:	3b 2d       	mov	r19, r11
    ffd4:	4c 2d       	mov	r20, r12
    ffd6:	5d 2d       	mov	r21, r13
    ffd8:	6e 2d       	mov	r22, r14
    ffda:	7f 2d       	mov	r23, r15
    ffdc:	80 2f       	mov	r24, r16
    ffde:	91 2f       	mov	r25, r17
    ffe0:	29 51       	subi	r18, 0x19	; 25
    ffe2:	3c 4f       	sbci	r19, 0xFC	; 252
    ffe4:	4f 4f       	sbci	r20, 0xFF	; 255
    ffe6:	5f 4f       	sbci	r21, 0xFF	; 255
    ffe8:	6f 4f       	sbci	r22, 0xFF	; 255
    ffea:	7f 4f       	sbci	r23, 0xFF	; 255
    ffec:	8f 4f       	sbci	r24, 0xFF	; 255
    ffee:	9f 4f       	sbci	r25, 0xFF	; 255
    fff0:	a2 2e       	mov	r10, r18
    fff2:	b3 2e       	mov	r11, r19
    fff4:	c4 2e       	mov	r12, r20
    fff6:	d5 2e       	mov	r13, r21
    fff8:	e6 2e       	mov	r14, r22
    fffa:	f7 2e       	mov	r15, r23
    fffc:	08 2f       	mov	r16, r24
    fffe:	19 2f       	mov	r17, r25
   10000:	2a 2d       	mov	r18, r10
   10002:	3b 2d       	mov	r19, r11
   10004:	4c 2d       	mov	r20, r12
   10006:	5d 2d       	mov	r21, r13
   10008:	6e 2d       	mov	r22, r14
   1000a:	7f 2d       	mov	r23, r15
   1000c:	80 2f       	mov	r24, r16
   1000e:	91 2f       	mov	r25, r17
   10010:	0e 94 8f b5 	call	0x16b1e	; 0x16b1e <__floatundisf>
   10014:	dc 01       	movw	r26, r24
   10016:	cb 01       	movw	r24, r22
   10018:	20 e0       	ldi	r18, 0x00	; 0
   1001a:	30 e0       	ldi	r19, 0x00	; 0
   1001c:	4a e7       	ldi	r20, 0x7A	; 122
   1001e:	54 e4       	ldi	r21, 0x44	; 68
   10020:	bc 01       	movw	r22, r24
   10022:	cd 01       	movw	r24, r26
   10024:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
   10028:	dc 01       	movw	r26, r24
   1002a:	cb 01       	movw	r24, r22
   1002c:	bc 01       	movw	r22, r24
   1002e:	cd 01       	movw	r24, r26
   10030:	0e 94 ec b4 	call	0x169d8	; 0x169d8 <__fixunssfdi>
   10034:	a2 2e       	mov	r10, r18
   10036:	b3 2e       	mov	r11, r19
   10038:	c4 2e       	mov	r12, r20
   1003a:	d5 2e       	mov	r13, r21
   1003c:	e6 2e       	mov	r14, r22
   1003e:	f7 2e       	mov	r15, r23
   10040:	08 2f       	mov	r16, r24
   10042:	19 2f       	mov	r17, r25
   10044:	d6 01       	movw	r26, r12
   10046:	c5 01       	movw	r24, r10
   10048:	bc 01       	movw	r22, r24
   1004a:	cd 01       	movw	r24, r26
   1004c:	64 dc       	rcall	.-1848   	; 0xf916 <__portable_avr_delay_cycles>
   1004e:	85 e0       	ldi	r24, 0x05	; 5
   10050:	ff dc       	rcall	.-1538   	; 0xfa50 <ioport_set_pin_high>
   10052:	00 00       	nop
   10054:	68 96       	adiw	r28, 0x18	; 24
   10056:	cd bf       	out	0x3d, r28	; 61
   10058:	de bf       	out	0x3e, r29	; 62
   1005a:	df 91       	pop	r29
   1005c:	cf 91       	pop	r28
   1005e:	1f 91       	pop	r17
   10060:	0f 91       	pop	r16
   10062:	ff 90       	pop	r15
   10064:	ef 90       	pop	r14
   10066:	df 90       	pop	r13
   10068:	cf 90       	pop	r12
   1006a:	bf 90       	pop	r11
   1006c:	af 90       	pop	r10
   1006e:	9f 90       	pop	r9
   10070:	8f 90       	pop	r8
   10072:	7f 90       	pop	r7
   10074:	6f 90       	pop	r6
   10076:	5f 90       	pop	r5
   10078:	4f 90       	pop	r4
   1007a:	3f 90       	pop	r3
   1007c:	2f 90       	pop	r2
   1007e:	08 95       	ret

00010080 <recover_from_OTSD>:
   10080:	cf 93       	push	r28
   10082:	df 93       	push	r29
   10084:	cd b7       	in	r28, 0x3d	; 61
   10086:	de b7       	in	r29, 0x3e	; 62
   10088:	c5 dd       	rcall	.-1142   	; 0xfc14 <reset_TEC_A>
   1008a:	df de       	rcall	.-578    	; 0xfe4a <reset_TEC_B>
   1008c:	00 00       	nop
   1008e:	df 91       	pop	r29
   10090:	cf 91       	pop	r28
   10092:	08 95       	ret

00010094 <pwm_set_TEC_frequency_32bit>:

//Same as pwm_set_frequency in HAL but with uint32_t input
void pwm_set_TEC_frequency_32bit(struct pwm_config *config, uint32_t freq_hz)
{
   10094:	cf 93       	push	r28
   10096:	df 93       	push	r29
   10098:	cd b7       	in	r28, 0x3d	; 61
   1009a:	de b7       	in	r29, 0x3e	; 62
   1009c:	2e 97       	sbiw	r28, 0x0e	; 14
   1009e:	cd bf       	out	0x3d, r28	; 61
   100a0:	de bf       	out	0x3e, r29	; 62
   100a2:	89 87       	std	Y+9, r24	; 0x09
   100a4:	9a 87       	std	Y+10, r25	; 0x0a
   100a6:	4b 87       	std	Y+11, r20	; 0x0b
   100a8:	5c 87       	std	Y+12, r21	; 0x0c
   100aa:	6d 87       	std	Y+13, r22	; 0x0d
   100ac:	7e 87       	std	Y+14, r23	; 0x0e
	uint32_t cpu_hz = sysclk_get_cpu_hz();
   100ae:	27 dc       	rcall	.-1970   	; 0xf8fe <sysclk_get_cpu_hz>
   100b0:	dc 01       	movw	r26, r24
   100b2:	cb 01       	movw	r24, r22
   100b4:	8b 83       	std	Y+3, r24	; 0x03
   100b6:	9c 83       	std	Y+4, r25	; 0x04
   100b8:	ad 83       	std	Y+5, r26	; 0x05
   100ba:	be 83       	std	Y+6, r27	; 0x06
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
   100bc:	8b 81       	ldd	r24, Y+3	; 0x03
   100be:	9c 81       	ldd	r25, Y+4	; 0x04
   100c0:	ad 81       	ldd	r26, Y+5	; 0x05
   100c2:	be 81       	ldd	r27, Y+6	; 0x06
   100c4:	2b 85       	ldd	r18, Y+11	; 0x0b
   100c6:	3c 85       	ldd	r19, Y+12	; 0x0c
   100c8:	4d 85       	ldd	r20, Y+13	; 0x0d
   100ca:	5e 85       	ldd	r21, Y+14	; 0x0e
   100cc:	bc 01       	movw	r22, r24
   100ce:	cd 01       	movw	r24, r26
   100d0:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   100d4:	da 01       	movw	r26, r20
   100d6:	c9 01       	movw	r24, r18
   100d8:	2f ef       	ldi	r18, 0xFF	; 255
   100da:	3f ef       	ldi	r19, 0xFF	; 255
   100dc:	40 e0       	ldi	r20, 0x00	; 0
   100de:	50 e0       	ldi	r21, 0x00	; 0
   100e0:	bc 01       	movw	r22, r24
   100e2:	cd 01       	movw	r24, r26
   100e4:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   100e8:	da 01       	movw	r26, r20
   100ea:	c9 01       	movw	r24, r18
   100ec:	8f 83       	std	Y+7, r24	; 0x07
   100ee:	98 87       	std	Y+8, r25	; 0x08
	if (smallest_div < 1) {
   100f0:	8f 81       	ldd	r24, Y+7	; 0x07
   100f2:	98 85       	ldd	r25, Y+8	; 0x08
   100f4:	89 2b       	or	r24, r25
   100f6:	51 f4       	brne	.+20     	; 0x1010c <pwm_set_TEC_frequency_32bit+0x78>
		dividor = 1;
   100f8:	81 e0       	ldi	r24, 0x01	; 1
   100fa:	90 e0       	ldi	r25, 0x00	; 0
   100fc:	89 83       	std	Y+1, r24	; 0x01
   100fe:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1;
   10100:	89 85       	ldd	r24, Y+9	; 0x09
   10102:	9a 85       	ldd	r25, Y+10	; 0x0a
   10104:	21 e0       	ldi	r18, 0x01	; 1
   10106:	fc 01       	movw	r30, r24
   10108:	24 83       	std	Z+4, r18	; 0x04
   1010a:	52 c0       	rjmp	.+164    	; 0x101b0 <pwm_set_TEC_frequency_32bit+0x11c>
	} else if (smallest_div < 2) {
   1010c:	8f 81       	ldd	r24, Y+7	; 0x07
   1010e:	98 85       	ldd	r25, Y+8	; 0x08
   10110:	02 97       	sbiw	r24, 0x02	; 2
   10112:	50 f4       	brcc	.+20     	; 0x10128 <pwm_set_TEC_frequency_32bit+0x94>
		dividor = 2;
   10114:	82 e0       	ldi	r24, 0x02	; 2
   10116:	90 e0       	ldi	r25, 0x00	; 0
   10118:	89 83       	std	Y+1, r24	; 0x01
   1011a:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV2;
   1011c:	89 85       	ldd	r24, Y+9	; 0x09
   1011e:	9a 85       	ldd	r25, Y+10	; 0x0a
   10120:	22 e0       	ldi	r18, 0x02	; 2
   10122:	fc 01       	movw	r30, r24
   10124:	24 83       	std	Z+4, r18	; 0x04
   10126:	44 c0       	rjmp	.+136    	; 0x101b0 <pwm_set_TEC_frequency_32bit+0x11c>
	} else if (smallest_div < 4) {
   10128:	8f 81       	ldd	r24, Y+7	; 0x07
   1012a:	98 85       	ldd	r25, Y+8	; 0x08
   1012c:	04 97       	sbiw	r24, 0x04	; 4
   1012e:	50 f4       	brcc	.+20     	; 0x10144 <pwm_set_TEC_frequency_32bit+0xb0>
		dividor = 4;
   10130:	84 e0       	ldi	r24, 0x04	; 4
   10132:	90 e0       	ldi	r25, 0x00	; 0
   10134:	89 83       	std	Y+1, r24	; 0x01
   10136:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV4;
   10138:	89 85       	ldd	r24, Y+9	; 0x09
   1013a:	9a 85       	ldd	r25, Y+10	; 0x0a
   1013c:	23 e0       	ldi	r18, 0x03	; 3
   1013e:	fc 01       	movw	r30, r24
   10140:	24 83       	std	Z+4, r18	; 0x04
   10142:	36 c0       	rjmp	.+108    	; 0x101b0 <pwm_set_TEC_frequency_32bit+0x11c>
	} else if (smallest_div < 8) {
   10144:	8f 81       	ldd	r24, Y+7	; 0x07
   10146:	98 85       	ldd	r25, Y+8	; 0x08
   10148:	08 97       	sbiw	r24, 0x08	; 8
   1014a:	50 f4       	brcc	.+20     	; 0x10160 <pwm_set_TEC_frequency_32bit+0xcc>
		dividor = 8;
   1014c:	88 e0       	ldi	r24, 0x08	; 8
   1014e:	90 e0       	ldi	r25, 0x00	; 0
   10150:	89 83       	std	Y+1, r24	; 0x01
   10152:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV8;
   10154:	89 85       	ldd	r24, Y+9	; 0x09
   10156:	9a 85       	ldd	r25, Y+10	; 0x0a
   10158:	24 e0       	ldi	r18, 0x04	; 4
   1015a:	fc 01       	movw	r30, r24
   1015c:	24 83       	std	Z+4, r18	; 0x04
   1015e:	28 c0       	rjmp	.+80     	; 0x101b0 <pwm_set_TEC_frequency_32bit+0x11c>
	} else if (smallest_div < 64) {
   10160:	8f 81       	ldd	r24, Y+7	; 0x07
   10162:	98 85       	ldd	r25, Y+8	; 0x08
   10164:	80 34       	cpi	r24, 0x40	; 64
   10166:	91 05       	cpc	r25, r1
   10168:	50 f4       	brcc	.+20     	; 0x1017e <pwm_set_TEC_frequency_32bit+0xea>
		dividor = 64;
   1016a:	80 e4       	ldi	r24, 0x40	; 64
   1016c:	90 e0       	ldi	r25, 0x00	; 0
   1016e:	89 83       	std	Y+1, r24	; 0x01
   10170:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV64;
   10172:	89 85       	ldd	r24, Y+9	; 0x09
   10174:	9a 85       	ldd	r25, Y+10	; 0x0a
   10176:	25 e0       	ldi	r18, 0x05	; 5
   10178:	fc 01       	movw	r30, r24
   1017a:	24 83       	std	Z+4, r18	; 0x04
   1017c:	19 c0       	rjmp	.+50     	; 0x101b0 <pwm_set_TEC_frequency_32bit+0x11c>
	} else if (smallest_div < 256) {
   1017e:	8f 81       	ldd	r24, Y+7	; 0x07
   10180:	98 85       	ldd	r25, Y+8	; 0x08
   10182:	8f 3f       	cpi	r24, 0xFF	; 255
   10184:	91 05       	cpc	r25, r1
   10186:	09 f0       	breq	.+2      	; 0x1018a <pwm_set_TEC_frequency_32bit+0xf6>
   10188:	50 f4       	brcc	.+20     	; 0x1019e <pwm_set_TEC_frequency_32bit+0x10a>
		dividor = 256;
   1018a:	80 e0       	ldi	r24, 0x00	; 0
   1018c:	91 e0       	ldi	r25, 0x01	; 1
   1018e:	89 83       	std	Y+1, r24	; 0x01
   10190:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV256;
   10192:	89 85       	ldd	r24, Y+9	; 0x09
   10194:	9a 85       	ldd	r25, Y+10	; 0x0a
   10196:	26 e0       	ldi	r18, 0x06	; 6
   10198:	fc 01       	movw	r30, r24
   1019a:	24 83       	std	Z+4, r18	; 0x04
   1019c:	09 c0       	rjmp	.+18     	; 0x101b0 <pwm_set_TEC_frequency_32bit+0x11c>
	} else {
		dividor = 1024;
   1019e:	80 e0       	ldi	r24, 0x00	; 0
   101a0:	94 e0       	ldi	r25, 0x04	; 4
   101a2:	89 83       	std	Y+1, r24	; 0x01
   101a4:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1024;
   101a6:	89 85       	ldd	r24, Y+9	; 0x09
   101a8:	9a 85       	ldd	r25, Y+10	; 0x0a
   101aa:	27 e0       	ldi	r18, 0x07	; 7
   101ac:	fc 01       	movw	r30, r24
   101ae:	24 83       	std	Z+4, r18	; 0x04
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
   101b0:	89 81       	ldd	r24, Y+1	; 0x01
   101b2:	9a 81       	ldd	r25, Y+2	; 0x02
   101b4:	9c 01       	movw	r18, r24
   101b6:	40 e0       	ldi	r20, 0x00	; 0
   101b8:	50 e0       	ldi	r21, 0x00	; 0
   101ba:	8b 81       	ldd	r24, Y+3	; 0x03
   101bc:	9c 81       	ldd	r25, Y+4	; 0x04
   101be:	ad 81       	ldd	r26, Y+5	; 0x05
   101c0:	be 81       	ldd	r27, Y+6	; 0x06
   101c2:	bc 01       	movw	r22, r24
   101c4:	cd 01       	movw	r24, r26
   101c6:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   101ca:	da 01       	movw	r26, r20
   101cc:	c9 01       	movw	r24, r18
   101ce:	2b 85       	ldd	r18, Y+11	; 0x0b
   101d0:	3c 85       	ldd	r19, Y+12	; 0x0c
   101d2:	4d 85       	ldd	r20, Y+13	; 0x0d
   101d4:	5e 85       	ldd	r21, Y+14	; 0x0e
   101d6:	bc 01       	movw	r22, r24
   101d8:	cd 01       	movw	r24, r26
   101da:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   101de:	da 01       	movw	r26, r20
   101e0:	c9 01       	movw	r24, r18
   101e2:	9c 01       	movw	r18, r24
   101e4:	89 85       	ldd	r24, Y+9	; 0x09
   101e6:	9a 85       	ldd	r25, Y+10	; 0x0a
   101e8:	fc 01       	movw	r30, r24
   101ea:	25 83       	std	Z+5, r18	; 0x05
   101ec:	36 83       	std	Z+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
   101ee:	89 85       	ldd	r24, Y+9	; 0x09
   101f0:	9a 85       	ldd	r25, Y+10	; 0x0a
   101f2:	fc 01       	movw	r30, r24
   101f4:	85 81       	ldd	r24, Z+5	; 0x05
   101f6:	96 81       	ldd	r25, Z+6	; 0x06
   101f8:	84 36       	cpi	r24, 0x64	; 100
   101fa:	91 05       	cpc	r25, r1
   101fc:	48 f4       	brcc	.+18     	; 0x10210 <pwm_set_TEC_frequency_32bit+0x17c>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
   101fe:	89 85       	ldd	r24, Y+9	; 0x09
   10200:	9a 85       	ldd	r25, Y+10	; 0x0a
   10202:	fc 01       	movw	r30, r24
   10204:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
   10206:	89 85       	ldd	r24, Y+9	; 0x09
   10208:	9a 85       	ldd	r25, Y+10	; 0x0a
   1020a:	fc 01       	movw	r30, r24
   1020c:	15 82       	std	Z+5, r1	; 0x05
   1020e:	16 82       	std	Z+6, r1	; 0x06
		Assert(false);
	}
   10210:	00 00       	nop
   10212:	2e 96       	adiw	r28, 0x0e	; 14
   10214:	cd bf       	out	0x3d, r28	; 61
   10216:	de bf       	out	0x3e, r29	; 62
   10218:	df 91       	pop	r29
   1021a:	cf 91       	pop	r28
   1021c:	08 95       	ret

0001021e <compute_temp_PID_duty>:
	return (pTerm + iTerm + dTerm);
}

//Returns heater PWM duty output from 0-100%
void compute_temp_PID_duty(PIDStruct *curPID, float tempDif, float elapsedTime)
{
   1021e:	cf 92       	push	r12
   10220:	df 92       	push	r13
   10222:	ef 92       	push	r14
   10224:	ff 92       	push	r15
   10226:	0f 93       	push	r16
   10228:	1f 93       	push	r17
   1022a:	cf 93       	push	r28
   1022c:	df 93       	push	r29
   1022e:	cd b7       	in	r28, 0x3d	; 61
   10230:	de b7       	in	r29, 0x3e	; 62
   10232:	2a 97       	sbiw	r28, 0x0a	; 10
   10234:	cd bf       	out	0x3d, r28	; 61
   10236:	de bf       	out	0x3e, r29	; 62
   10238:	89 83       	std	Y+1, r24	; 0x01
   1023a:	9a 83       	std	Y+2, r25	; 0x02
   1023c:	4b 83       	std	Y+3, r20	; 0x03
   1023e:	5c 83       	std	Y+4, r21	; 0x04
   10240:	6d 83       	std	Y+5, r22	; 0x05
   10242:	7e 83       	std	Y+6, r23	; 0x06
   10244:	0f 83       	std	Y+7, r16	; 0x07
   10246:	18 87       	std	Y+8, r17	; 0x08
   10248:	29 87       	std	Y+9, r18	; 0x09
   1024a:	3a 87       	std	Y+10, r19	; 0x0a
	//Gain terms can be set from 0 - 999.99	
	//Calculate p-term
	curPID->pState = tempDif;
   1024c:	29 81       	ldd	r18, Y+1	; 0x01
   1024e:	3a 81       	ldd	r19, Y+2	; 0x02
   10250:	8b 81       	ldd	r24, Y+3	; 0x03
   10252:	9c 81       	ldd	r25, Y+4	; 0x04
   10254:	ad 81       	ldd	r26, Y+5	; 0x05
   10256:	be 81       	ldd	r27, Y+6	; 0x06
   10258:	f9 01       	movw	r30, r18
   1025a:	80 83       	st	Z, r24
   1025c:	91 83       	std	Z+1, r25	; 0x01
   1025e:	a2 83       	std	Z+2, r26	; 0x02
   10260:	b3 83       	std	Z+3, r27	; 0x03
	//if ((tempDif > curPID->minDif) && (tempDif < curPID->maxDif))
	//{
		//curPID->iState = curPID->iState + (curPID->iGain * tempDif);
	//}
	
	curPID->iState += tempDif;
   10262:	89 81       	ldd	r24, Y+1	; 0x01
   10264:	9a 81       	ldd	r25, Y+2	; 0x02
   10266:	fc 01       	movw	r30, r24
   10268:	84 81       	ldd	r24, Z+4	; 0x04
   1026a:	95 81       	ldd	r25, Z+5	; 0x05
   1026c:	a6 81       	ldd	r26, Z+6	; 0x06
   1026e:	b7 81       	ldd	r27, Z+7	; 0x07
   10270:	2b 81       	ldd	r18, Y+3	; 0x03
   10272:	3c 81       	ldd	r19, Y+4	; 0x04
   10274:	4d 81       	ldd	r20, Y+5	; 0x05
   10276:	5e 81       	ldd	r21, Y+6	; 0x06
   10278:	bc 01       	movw	r22, r24
   1027a:	cd 01       	movw	r24, r26
   1027c:	0e 94 17 b4 	call	0x1682e	; 0x1682e <__addsf3>
   10280:	dc 01       	movw	r26, r24
   10282:	cb 01       	movw	r24, r22
   10284:	29 81       	ldd	r18, Y+1	; 0x01
   10286:	3a 81       	ldd	r19, Y+2	; 0x02
   10288:	f9 01       	movw	r30, r18
   1028a:	84 83       	std	Z+4, r24	; 0x04
   1028c:	95 83       	std	Z+5, r25	; 0x05
   1028e:	a6 83       	std	Z+6, r26	; 0x06
   10290:	b7 83       	std	Z+7, r27	; 0x07
	if (curPID->iState > curPID->iMax)
   10292:	89 81       	ldd	r24, Y+1	; 0x01
   10294:	9a 81       	ldd	r25, Y+2	; 0x02
   10296:	fc 01       	movw	r30, r24
   10298:	c4 80       	ldd	r12, Z+4	; 0x04
   1029a:	d5 80       	ldd	r13, Z+5	; 0x05
   1029c:	e6 80       	ldd	r14, Z+6	; 0x06
   1029e:	f7 80       	ldd	r15, Z+7	; 0x07
   102a0:	89 81       	ldd	r24, Y+1	; 0x01
   102a2:	9a 81       	ldd	r25, Y+2	; 0x02
   102a4:	fc 01       	movw	r30, r24
   102a6:	84 89       	ldd	r24, Z+20	; 0x14
   102a8:	95 89       	ldd	r25, Z+21	; 0x15
   102aa:	a6 89       	ldd	r26, Z+22	; 0x16
   102ac:	b7 89       	ldd	r27, Z+23	; 0x17
   102ae:	bc 01       	movw	r22, r24
   102b0:	cd 01       	movw	r24, r26
   102b2:	0e 94 54 b5 	call	0x16aa8	; 0x16aa8 <__floatsisf>
   102b6:	dc 01       	movw	r26, r24
   102b8:	cb 01       	movw	r24, r22
   102ba:	9c 01       	movw	r18, r24
   102bc:	ad 01       	movw	r20, r26
   102be:	c7 01       	movw	r24, r14
   102c0:	b6 01       	movw	r22, r12
   102c2:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
   102c6:	18 16       	cp	r1, r24
   102c8:	a4 f4       	brge	.+40     	; 0x102f2 <compute_temp_PID_duty+0xd4>
	{
		curPID->iState = curPID->iMax;
   102ca:	89 81       	ldd	r24, Y+1	; 0x01
   102cc:	9a 81       	ldd	r25, Y+2	; 0x02
   102ce:	fc 01       	movw	r30, r24
   102d0:	84 89       	ldd	r24, Z+20	; 0x14
   102d2:	95 89       	ldd	r25, Z+21	; 0x15
   102d4:	a6 89       	ldd	r26, Z+22	; 0x16
   102d6:	b7 89       	ldd	r27, Z+23	; 0x17
   102d8:	bc 01       	movw	r22, r24
   102da:	cd 01       	movw	r24, r26
   102dc:	0e 94 54 b5 	call	0x16aa8	; 0x16aa8 <__floatsisf>
   102e0:	dc 01       	movw	r26, r24
   102e2:	cb 01       	movw	r24, r22
   102e4:	29 81       	ldd	r18, Y+1	; 0x01
   102e6:	3a 81       	ldd	r19, Y+2	; 0x02
   102e8:	f9 01       	movw	r30, r18
   102ea:	84 83       	std	Z+4, r24	; 0x04
   102ec:	95 83       	std	Z+5, r25	; 0x05
   102ee:	a6 83       	std	Z+6, r26	; 0x06
   102f0:	b7 83       	std	Z+7, r27	; 0x07
	}
	if (curPID->iState < curPID->iMin)
   102f2:	89 81       	ldd	r24, Y+1	; 0x01
   102f4:	9a 81       	ldd	r25, Y+2	; 0x02
   102f6:	fc 01       	movw	r30, r24
   102f8:	c4 80       	ldd	r12, Z+4	; 0x04
   102fa:	d5 80       	ldd	r13, Z+5	; 0x05
   102fc:	e6 80       	ldd	r14, Z+6	; 0x06
   102fe:	f7 80       	ldd	r15, Z+7	; 0x07
   10300:	89 81       	ldd	r24, Y+1	; 0x01
   10302:	9a 81       	ldd	r25, Y+2	; 0x02
   10304:	fc 01       	movw	r30, r24
   10306:	80 8d       	ldd	r24, Z+24	; 0x18
   10308:	91 8d       	ldd	r25, Z+25	; 0x19
   1030a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1030c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1030e:	bc 01       	movw	r22, r24
   10310:	cd 01       	movw	r24, r26
   10312:	0e 94 54 b5 	call	0x16aa8	; 0x16aa8 <__floatsisf>
   10316:	dc 01       	movw	r26, r24
   10318:	cb 01       	movw	r24, r22
   1031a:	9c 01       	movw	r18, r24
   1031c:	ad 01       	movw	r20, r26
   1031e:	c7 01       	movw	r24, r14
   10320:	b6 01       	movw	r22, r12
   10322:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   10326:	88 23       	and	r24, r24
   10328:	a4 f4       	brge	.+40     	; 0x10352 <compute_temp_PID_duty+0x134>
	{
		curPID->iState = curPID->iMin;
   1032a:	89 81       	ldd	r24, Y+1	; 0x01
   1032c:	9a 81       	ldd	r25, Y+2	; 0x02
   1032e:	fc 01       	movw	r30, r24
   10330:	80 8d       	ldd	r24, Z+24	; 0x18
   10332:	91 8d       	ldd	r25, Z+25	; 0x19
   10334:	a2 8d       	ldd	r26, Z+26	; 0x1a
   10336:	b3 8d       	ldd	r27, Z+27	; 0x1b
   10338:	bc 01       	movw	r22, r24
   1033a:	cd 01       	movw	r24, r26
   1033c:	0e 94 54 b5 	call	0x16aa8	; 0x16aa8 <__floatsisf>
   10340:	dc 01       	movw	r26, r24
   10342:	cb 01       	movw	r24, r22
   10344:	29 81       	ldd	r18, Y+1	; 0x01
   10346:	3a 81       	ldd	r19, Y+2	; 0x02
   10348:	f9 01       	movw	r30, r18
   1034a:	84 83       	std	Z+4, r24	; 0x04
   1034c:	95 83       	std	Z+5, r25	; 0x05
   1034e:	a6 83       	std	Z+6, r26	; 0x06
   10350:	b7 83       	std	Z+7, r27	; 0x07
	}
	
	//Calculate d-term
	curPID->dState = ((tempDif - curPID->prevError) / elapsedTime);
   10352:	89 81       	ldd	r24, Y+1	; 0x01
   10354:	9a 81       	ldd	r25, Y+2	; 0x02
   10356:	fc 01       	movw	r30, r24
   10358:	80 a5       	ldd	r24, Z+40	; 0x28
   1035a:	91 a5       	ldd	r25, Z+41	; 0x29
   1035c:	a2 a5       	ldd	r26, Z+42	; 0x2a
   1035e:	b3 a5       	ldd	r27, Z+43	; 0x2b
   10360:	9c 01       	movw	r18, r24
   10362:	ad 01       	movw	r20, r26
   10364:	6b 81       	ldd	r22, Y+3	; 0x03
   10366:	7c 81       	ldd	r23, Y+4	; 0x04
   10368:	8d 81       	ldd	r24, Y+5	; 0x05
   1036a:	9e 81       	ldd	r25, Y+6	; 0x06
   1036c:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
   10370:	dc 01       	movw	r26, r24
   10372:	cb 01       	movw	r24, r22
   10374:	2f 81       	ldd	r18, Y+7	; 0x07
   10376:	38 85       	ldd	r19, Y+8	; 0x08
   10378:	49 85       	ldd	r20, Y+9	; 0x09
   1037a:	5a 85       	ldd	r21, Y+10	; 0x0a
   1037c:	bc 01       	movw	r22, r24
   1037e:	cd 01       	movw	r24, r26
   10380:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
   10384:	dc 01       	movw	r26, r24
   10386:	cb 01       	movw	r24, r22
   10388:	29 81       	ldd	r18, Y+1	; 0x01
   1038a:	3a 81       	ldd	r19, Y+2	; 0x02
   1038c:	f9 01       	movw	r30, r18
   1038e:	80 87       	std	Z+8, r24	; 0x08
   10390:	91 87       	std	Z+9, r25	; 0x09
   10392:	a2 87       	std	Z+10, r26	; 0x0a
   10394:	b3 87       	std	Z+11, r27	; 0x0b
	
	//Calculate final PID val
	curPID->PIDVal = (curPID->pGain * curPID->pState) + (curPID->iGain * curPID->iState) - (curPID->dGain * curPID->dState);
   10396:	89 81       	ldd	r24, Y+1	; 0x01
   10398:	9a 81       	ldd	r25, Y+2	; 0x02
   1039a:	fc 01       	movw	r30, r24
   1039c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1039e:	95 8d       	ldd	r25, Z+29	; 0x1d
   103a0:	a6 8d       	ldd	r26, Z+30	; 0x1e
   103a2:	b7 8d       	ldd	r27, Z+31	; 0x1f
   103a4:	29 81       	ldd	r18, Y+1	; 0x01
   103a6:	3a 81       	ldd	r19, Y+2	; 0x02
   103a8:	f9 01       	movw	r30, r18
   103aa:	20 81       	ld	r18, Z
   103ac:	31 81       	ldd	r19, Z+1	; 0x01
   103ae:	42 81       	ldd	r20, Z+2	; 0x02
   103b0:	53 81       	ldd	r21, Z+3	; 0x03
   103b2:	bc 01       	movw	r22, r24
   103b4:	cd 01       	movw	r24, r26
   103b6:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
   103ba:	dc 01       	movw	r26, r24
   103bc:	cb 01       	movw	r24, r22
   103be:	6c 01       	movw	r12, r24
   103c0:	7d 01       	movw	r14, r26
   103c2:	89 81       	ldd	r24, Y+1	; 0x01
   103c4:	9a 81       	ldd	r25, Y+2	; 0x02
   103c6:	fc 01       	movw	r30, r24
   103c8:	80 a1       	ldd	r24, Z+32	; 0x20
   103ca:	91 a1       	ldd	r25, Z+33	; 0x21
   103cc:	a2 a1       	ldd	r26, Z+34	; 0x22
   103ce:	b3 a1       	ldd	r27, Z+35	; 0x23
   103d0:	29 81       	ldd	r18, Y+1	; 0x01
   103d2:	3a 81       	ldd	r19, Y+2	; 0x02
   103d4:	f9 01       	movw	r30, r18
   103d6:	24 81       	ldd	r18, Z+4	; 0x04
   103d8:	35 81       	ldd	r19, Z+5	; 0x05
   103da:	46 81       	ldd	r20, Z+6	; 0x06
   103dc:	57 81       	ldd	r21, Z+7	; 0x07
   103de:	bc 01       	movw	r22, r24
   103e0:	cd 01       	movw	r24, r26
   103e2:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
   103e6:	dc 01       	movw	r26, r24
   103e8:	cb 01       	movw	r24, r22
   103ea:	9c 01       	movw	r18, r24
   103ec:	ad 01       	movw	r20, r26
   103ee:	c7 01       	movw	r24, r14
   103f0:	b6 01       	movw	r22, r12
   103f2:	0e 94 17 b4 	call	0x1682e	; 0x1682e <__addsf3>
   103f6:	dc 01       	movw	r26, r24
   103f8:	cb 01       	movw	r24, r22
   103fa:	6c 01       	movw	r12, r24
   103fc:	7d 01       	movw	r14, r26
   103fe:	89 81       	ldd	r24, Y+1	; 0x01
   10400:	9a 81       	ldd	r25, Y+2	; 0x02
   10402:	fc 01       	movw	r30, r24
   10404:	84 a1       	ldd	r24, Z+36	; 0x24
   10406:	95 a1       	ldd	r25, Z+37	; 0x25
   10408:	a6 a1       	ldd	r26, Z+38	; 0x26
   1040a:	b7 a1       	ldd	r27, Z+39	; 0x27
   1040c:	29 81       	ldd	r18, Y+1	; 0x01
   1040e:	3a 81       	ldd	r19, Y+2	; 0x02
   10410:	f9 01       	movw	r30, r18
   10412:	20 85       	ldd	r18, Z+8	; 0x08
   10414:	31 85       	ldd	r19, Z+9	; 0x09
   10416:	42 85       	ldd	r20, Z+10	; 0x0a
   10418:	53 85       	ldd	r21, Z+11	; 0x0b
   1041a:	bc 01       	movw	r22, r24
   1041c:	cd 01       	movw	r24, r26
   1041e:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
   10422:	dc 01       	movw	r26, r24
   10424:	cb 01       	movw	r24, r22
   10426:	9c 01       	movw	r18, r24
   10428:	ad 01       	movw	r20, r26
   1042a:	c7 01       	movw	r24, r14
   1042c:	b6 01       	movw	r22, r12
   1042e:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
   10432:	dc 01       	movw	r26, r24
   10434:	cb 01       	movw	r24, r22
   10436:	29 81       	ldd	r18, Y+1	; 0x01
   10438:	3a 81       	ldd	r19, Y+2	; 0x02
   1043a:	f9 01       	movw	r30, r18
   1043c:	84 a7       	std	Z+44, r24	; 0x2c
   1043e:	95 a7       	std	Z+45, r25	; 0x2d
   10440:	a6 a7       	std	Z+46, r26	; 0x2e
   10442:	b7 a7       	std	Z+47, r27	; 0x2f
	curPID->PIDVal = curPID->PIDVal / OUTPUT_SCALE;
   10444:	89 81       	ldd	r24, Y+1	; 0x01
   10446:	9a 81       	ldd	r25, Y+2	; 0x02
   10448:	fc 01       	movw	r30, r24
   1044a:	84 a5       	ldd	r24, Z+44	; 0x2c
   1044c:	95 a5       	ldd	r25, Z+45	; 0x2d
   1044e:	a6 a5       	ldd	r26, Z+46	; 0x2e
   10450:	b7 a5       	ldd	r27, Z+47	; 0x2f
   10452:	20 e0       	ldi	r18, 0x00	; 0
   10454:	30 e0       	ldi	r19, 0x00	; 0
   10456:	40 e2       	ldi	r20, 0x20	; 32
   10458:	51 e4       	ldi	r21, 0x41	; 65
   1045a:	bc 01       	movw	r22, r24
   1045c:	cd 01       	movw	r24, r26
   1045e:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
   10462:	dc 01       	movw	r26, r24
   10464:	cb 01       	movw	r24, r22
   10466:	29 81       	ldd	r18, Y+1	; 0x01
   10468:	3a 81       	ldd	r19, Y+2	; 0x02
   1046a:	f9 01       	movw	r30, r18
   1046c:	84 a7       	std	Z+44, r24	; 0x2c
   1046e:	95 a7       	std	Z+45, r25	; 0x2d
   10470:	a6 a7       	std	Z+46, r26	; 0x2e
   10472:	b7 a7       	std	Z+47, r27	; 0x2f
	
	
	//Limit PID value to pwm duty range (0 - 100)
	if (curPID->PIDVal < 0)
   10474:	89 81       	ldd	r24, Y+1	; 0x01
   10476:	9a 81       	ldd	r25, Y+2	; 0x02
   10478:	fc 01       	movw	r30, r24
   1047a:	84 a5       	ldd	r24, Z+44	; 0x2c
   1047c:	95 a5       	ldd	r25, Z+45	; 0x2d
   1047e:	a6 a5       	ldd	r26, Z+46	; 0x2e
   10480:	b7 a5       	ldd	r27, Z+47	; 0x2f
   10482:	20 e0       	ldi	r18, 0x00	; 0
   10484:	30 e0       	ldi	r19, 0x00	; 0
   10486:	a9 01       	movw	r20, r18
   10488:	bc 01       	movw	r22, r24
   1048a:	cd 01       	movw	r24, r26
   1048c:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   10490:	88 23       	and	r24, r24
   10492:	3c f4       	brge	.+14     	; 0x104a2 <compute_temp_PID_duty+0x284>
	{
		curPID->PIDVal = 0;
   10494:	89 81       	ldd	r24, Y+1	; 0x01
   10496:	9a 81       	ldd	r25, Y+2	; 0x02
   10498:	fc 01       	movw	r30, r24
   1049a:	14 a6       	std	Z+44, r1	; 0x2c
   1049c:	15 a6       	std	Z+45, r1	; 0x2d
   1049e:	16 a6       	std	Z+46, r1	; 0x2e
   104a0:	17 a6       	std	Z+47, r1	; 0x2f
	}
	if (curPID->PIDVal > 100)
   104a2:	89 81       	ldd	r24, Y+1	; 0x01
   104a4:	9a 81       	ldd	r25, Y+2	; 0x02
   104a6:	fc 01       	movw	r30, r24
   104a8:	84 a5       	ldd	r24, Z+44	; 0x2c
   104aa:	95 a5       	ldd	r25, Z+45	; 0x2d
   104ac:	a6 a5       	ldd	r26, Z+46	; 0x2e
   104ae:	b7 a5       	ldd	r27, Z+47	; 0x2f
   104b0:	20 e0       	ldi	r18, 0x00	; 0
   104b2:	30 e0       	ldi	r19, 0x00	; 0
   104b4:	48 ec       	ldi	r20, 0xC8	; 200
   104b6:	52 e4       	ldi	r21, 0x42	; 66
   104b8:	bc 01       	movw	r22, r24
   104ba:	cd 01       	movw	r24, r26
   104bc:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
   104c0:	18 16       	cp	r1, r24
   104c2:	5c f4       	brge	.+22     	; 0x104da <compute_temp_PID_duty+0x2bc>
	{
		curPID->PIDVal = 100;
   104c4:	29 81       	ldd	r18, Y+1	; 0x01
   104c6:	3a 81       	ldd	r19, Y+2	; 0x02
   104c8:	80 e0       	ldi	r24, 0x00	; 0
   104ca:	90 e0       	ldi	r25, 0x00	; 0
   104cc:	a8 ec       	ldi	r26, 0xC8	; 200
   104ce:	b2 e4       	ldi	r27, 0x42	; 66
   104d0:	f9 01       	movw	r30, r18
   104d2:	84 a7       	std	Z+44, r24	; 0x2c
   104d4:	95 a7       	std	Z+45, r25	; 0x2d
   104d6:	a6 a7       	std	Z+46, r26	; 0x2e
   104d8:	b7 a7       	std	Z+47, r27	; 0x2f
	}
	
	curPID->prevError = tempDif;
   104da:	29 81       	ldd	r18, Y+1	; 0x01
   104dc:	3a 81       	ldd	r19, Y+2	; 0x02
   104de:	8b 81       	ldd	r24, Y+3	; 0x03
   104e0:	9c 81       	ldd	r25, Y+4	; 0x04
   104e2:	ad 81       	ldd	r26, Y+5	; 0x05
   104e4:	be 81       	ldd	r27, Y+6	; 0x06
   104e6:	f9 01       	movw	r30, r18
   104e8:	80 a7       	std	Z+40, r24	; 0x28
   104ea:	91 a7       	std	Z+41, r25	; 0x29
   104ec:	a2 a7       	std	Z+42, r26	; 0x2a
   104ee:	b3 a7       	std	Z+43, r27	; 0x2b
   104f0:	00 00       	nop
   104f2:	2a 96       	adiw	r28, 0x0a	; 10
   104f4:	cd bf       	out	0x3d, r28	; 61
   104f6:	de bf       	out	0x3e, r29	; 62
   104f8:	df 91       	pop	r29
   104fa:	cf 91       	pop	r28
   104fc:	1f 91       	pop	r17
   104fe:	0f 91       	pop	r16
   10500:	ff 90       	pop	r15
   10502:	ef 90       	pop	r14
   10504:	df 90       	pop	r13
   10506:	cf 90       	pop	r12
   10508:	08 95       	ret

0001050a <my_callback_cdc_enable>:
uint16_t dataCount = 0;
uint8_t *rxDataBuf;
uint8_t *dataReceived;

bool my_callback_cdc_enable(void)
{
   1050a:	cf 93       	push	r28
   1050c:	df 93       	push	r29
   1050e:	cd b7       	in	r28, 0x3d	; 61
   10510:	de b7       	in	r29, 0x3e	; 62
	dataTransferAuth = TRUE;
   10512:	81 e0       	ldi	r24, 0x01	; 1
   10514:	80 93 1a 25 	sts	0x251A, r24	; 0x80251a <dataTransferAuth>
	return true;
   10518:	81 e0       	ldi	r24, 0x01	; 1
}
   1051a:	df 91       	pop	r29
   1051c:	cf 91       	pop	r28
   1051e:	08 95       	ret

00010520 <my_callback_cdc_disable>:

void my_callback_cdc_disable(void)
{
   10520:	cf 93       	push	r28
   10522:	df 93       	push	r29
   10524:	cd b7       	in	r28, 0x3d	; 61
   10526:	de b7       	in	r29, 0x3e	; 62
	dataTransferAuth = FALSE;
   10528:	10 92 1a 25 	sts	0x251A, r1	; 0x80251a <dataTransferAuth>
}
   1052c:	00 00       	nop
   1052e:	df 91       	pop	r29
   10530:	cf 91       	pop	r28
   10532:	08 95       	ret

00010534 <my_callback_rx_notify>:

void my_callback_rx_notify(void)
{
   10534:	0f 93       	push	r16
   10536:	1f 93       	push	r17
   10538:	cf 93       	push	r28
   1053a:	df 93       	push	r29
   1053c:	1f 92       	push	r1
   1053e:	cd b7       	in	r28, 0x3d	; 61
   10540:	de b7       	in	r29, 0x3e	; 62
	if (dataTransferAuth)
   10542:	80 91 1a 25 	lds	r24, 0x251A	; 0x80251a <dataTransferAuth>
   10546:	88 23       	and	r24, r24
   10548:	09 f4       	brne	.+2      	; 0x1054c <my_callback_rx_notify+0x18>
   1054a:	47 c0       	rjmp	.+142    	; 0x105da <my_callback_rx_notify+0xa6>
	{
		*dataReceived = udi_cdc_is_rx_ready();
   1054c:	00 91 b1 29 	lds	r16, 0x29B1	; 0x8029b1 <dataReceived>
   10550:	10 91 b2 29 	lds	r17, 0x29B2	; 0x8029b2 <dataReceived+0x1>
   10554:	0e 94 16 64 	call	0xc82c	; 0xc82c <udi_cdc_is_rx_ready>
   10558:	f8 01       	movw	r30, r16
   1055a:	80 83       	st	Z, r24
		if (*dataReceived)
   1055c:	80 91 b1 29 	lds	r24, 0x29B1	; 0x8029b1 <dataReceived>
   10560:	90 91 b2 29 	lds	r25, 0x29B2	; 0x8029b2 <dataReceived+0x1>
   10564:	fc 01       	movw	r30, r24
   10566:	80 81       	ld	r24, Z
   10568:	88 23       	and	r24, r24
   1056a:	31 f1       	breq	.+76     	; 0x105b8 <my_callback_rx_notify+0x84>
		{
			dataCount = udi_cdc_get_nb_received_data();
   1056c:	0e 94 fc 63 	call	0xc7f8	; 0xc7f8 <udi_cdc_get_nb_received_data>
   10570:	80 93 1b 25 	sts	0x251B, r24	; 0x80251b <dataCount>
   10574:	90 93 1c 25 	sts	0x251C, r25	; 0x80251c <dataCount+0x1>
			for (uint8_t i = 0; i < dataCount; i++)
   10578:	19 82       	std	Y+1, r1	; 0x01
   1057a:	14 c0       	rjmp	.+40     	; 0x105a4 <my_callback_rx_notify+0x70>
			{
				*rxDataBuf = (uint8_t)udi_cdc_getc();
   1057c:	00 91 af 29 	lds	r16, 0x29AF	; 0x8029af <rxDataBuf>
   10580:	10 91 b0 29 	lds	r17, 0x29B0	; 0x8029b0 <rxDataBuf+0x1>
   10584:	0e 94 c3 64 	call	0xc986	; 0xc986 <udi_cdc_getc>
   10588:	f8 01       	movw	r30, r16
   1058a:	80 83       	st	Z, r24
				rxDataBuf++;
   1058c:	80 91 af 29 	lds	r24, 0x29AF	; 0x8029af <rxDataBuf>
   10590:	90 91 b0 29 	lds	r25, 0x29B0	; 0x8029b0 <rxDataBuf+0x1>
   10594:	01 96       	adiw	r24, 0x01	; 1
   10596:	80 93 af 29 	sts	0x29AF, r24	; 0x8029af <rxDataBuf>
   1059a:	90 93 b0 29 	sts	0x29B0, r25	; 0x8029b0 <rxDataBuf+0x1>
	{
		*dataReceived = udi_cdc_is_rx_ready();
		if (*dataReceived)
		{
			dataCount = udi_cdc_get_nb_received_data();
			for (uint8_t i = 0; i < dataCount; i++)
   1059e:	89 81       	ldd	r24, Y+1	; 0x01
   105a0:	8f 5f       	subi	r24, 0xFF	; 255
   105a2:	89 83       	std	Y+1, r24	; 0x01
   105a4:	89 81       	ldd	r24, Y+1	; 0x01
   105a6:	28 2f       	mov	r18, r24
   105a8:	30 e0       	ldi	r19, 0x00	; 0
   105aa:	80 91 1b 25 	lds	r24, 0x251B	; 0x80251b <dataCount>
   105ae:	90 91 1c 25 	lds	r25, 0x251C	; 0x80251c <dataCount+0x1>
   105b2:	28 17       	cp	r18, r24
   105b4:	39 07       	cpc	r19, r25
   105b6:	10 f3       	brcs	.-60     	; 0x1057c <my_callback_rx_notify+0x48>
				*rxDataBuf = (uint8_t)udi_cdc_getc();
				rxDataBuf++;
			}
		}
		
		rxDataBuf -= dataCount; //Reset pointer to start of buffer
   105b8:	20 91 af 29 	lds	r18, 0x29AF	; 0x8029af <rxDataBuf>
   105bc:	30 91 b0 29 	lds	r19, 0x29B0	; 0x8029b0 <rxDataBuf+0x1>
   105c0:	80 91 1b 25 	lds	r24, 0x251B	; 0x80251b <dataCount>
   105c4:	90 91 1c 25 	lds	r25, 0x251C	; 0x80251c <dataCount+0x1>
   105c8:	91 95       	neg	r25
   105ca:	81 95       	neg	r24
   105cc:	91 09       	sbc	r25, r1
   105ce:	82 0f       	add	r24, r18
   105d0:	93 1f       	adc	r25, r19
   105d2:	80 93 af 29 	sts	0x29AF, r24	; 0x8029af <rxDataBuf>
   105d6:	90 93 b0 29 	sts	0x29B0, r25	; 0x8029b0 <rxDataBuf+0x1>
	}
}
   105da:	00 00       	nop
   105dc:	0f 90       	pop	r0
   105de:	df 91       	pop	r29
   105e0:	cf 91       	pop	r28
   105e2:	1f 91       	pop	r17
   105e4:	0f 91       	pop	r16
   105e6:	08 95       	ret

000105e8 <get_last_msg_length>:

uint16_t get_last_msg_length(void)
{
   105e8:	cf 93       	push	r28
   105ea:	df 93       	push	r29
   105ec:	cd b7       	in	r28, 0x3d	; 61
   105ee:	de b7       	in	r29, 0x3e	; 62
	return dataCount;
   105f0:	80 91 1b 25 	lds	r24, 0x251B	; 0x80251b <dataCount>
   105f4:	90 91 1c 25 	lds	r25, 0x251C	; 0x80251c <dataCount+0x1>
}
   105f8:	df 91       	pop	r29
   105fa:	cf 91       	pop	r28
   105fc:	08 95       	ret

000105fe <send_cmd_response>:

void send_cmd_response(uint8_t *TxBuff, uint8_t TxLen)
{	
   105fe:	cf 93       	push	r28
   10600:	df 93       	push	r29
   10602:	00 d0       	rcall	.+0      	; 0x10604 <send_cmd_response+0x6>
   10604:	1f 92       	push	r1
   10606:	cd b7       	in	r28, 0x3d	; 61
   10608:	de b7       	in	r29, 0x3e	; 62
   1060a:	8a 83       	std	Y+2, r24	; 0x02
   1060c:	9b 83       	std	Y+3, r25	; 0x03
   1060e:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8_t i = 0; i < TxLen; i++)
   10610:	19 82       	std	Y+1, r1	; 0x01
   10612:	10 c0       	rjmp	.+32     	; 0x10634 <send_cmd_response+0x36>
	{
		udi_cdc_putc(TxBuff[i]);
   10614:	89 81       	ldd	r24, Y+1	; 0x01
   10616:	88 2f       	mov	r24, r24
   10618:	90 e0       	ldi	r25, 0x00	; 0
   1061a:	2a 81       	ldd	r18, Y+2	; 0x02
   1061c:	3b 81       	ldd	r19, Y+3	; 0x03
   1061e:	82 0f       	add	r24, r18
   10620:	93 1f       	adc	r25, r19
   10622:	fc 01       	movw	r30, r24
   10624:	80 81       	ld	r24, Z
   10626:	88 2f       	mov	r24, r24
   10628:	90 e0       	ldi	r25, 0x00	; 0
   1062a:	0e 94 d5 65 	call	0xcbaa	; 0xcbaa <udi_cdc_putc>
	return dataCount;
}

void send_cmd_response(uint8_t *TxBuff, uint8_t TxLen)
{	
	for (uint8_t i = 0; i < TxLen; i++)
   1062e:	89 81       	ldd	r24, Y+1	; 0x01
   10630:	8f 5f       	subi	r24, 0xFF	; 255
   10632:	89 83       	std	Y+1, r24	; 0x01
   10634:	99 81       	ldd	r25, Y+1	; 0x01
   10636:	8c 81       	ldd	r24, Y+4	; 0x04
   10638:	98 17       	cp	r25, r24
   1063a:	60 f3       	brcs	.-40     	; 0x10614 <send_cmd_response+0x16>
	{
		udi_cdc_putc(TxBuff[i]);
	}
}
   1063c:	00 00       	nop
   1063e:	24 96       	adiw	r28, 0x04	; 4
   10640:	cd bf       	out	0x3d, r28	; 61
   10642:	de bf       	out	0x3e, r29	; 62
   10644:	df 91       	pop	r29
   10646:	cf 91       	pop	r28
   10648:	08 95       	ret

0001064a <init_USB>:

void init_USB(uint8_t *receiveFlag, uint8_t *receivedDataBufUSB[])
{
   1064a:	cf 93       	push	r28
   1064c:	df 93       	push	r29
   1064e:	00 d0       	rcall	.+0      	; 0x10650 <init_USB+0x6>
   10650:	1f 92       	push	r1
   10652:	cd b7       	in	r28, 0x3d	; 61
   10654:	de b7       	in	r29, 0x3e	; 62
   10656:	89 83       	std	Y+1, r24	; 0x01
   10658:	9a 83       	std	Y+2, r25	; 0x02
   1065a:	6b 83       	std	Y+3, r22	; 0x03
   1065c:	7c 83       	std	Y+4, r23	; 0x04
	udc_start();
   1065e:	0e 94 6c 67 	call	0xced8	; 0xced8 <udc_start>
	rxDataBuf = receivedDataBufUSB;
   10662:	8b 81       	ldd	r24, Y+3	; 0x03
   10664:	9c 81       	ldd	r25, Y+4	; 0x04
   10666:	80 93 af 29 	sts	0x29AF, r24	; 0x8029af <rxDataBuf>
   1066a:	90 93 b0 29 	sts	0x29B0, r25	; 0x8029b0 <rxDataBuf+0x1>
	dataReceived = receiveFlag;
   1066e:	89 81       	ldd	r24, Y+1	; 0x01
   10670:	9a 81       	ldd	r25, Y+2	; 0x02
   10672:	80 93 b1 29 	sts	0x29B1, r24	; 0x8029b1 <dataReceived>
   10676:	90 93 b2 29 	sts	0x29B2, r25	; 0x8029b2 <dataReceived+0x1>
}
   1067a:	00 00       	nop
   1067c:	24 96       	adiw	r28, 0x04	; 4
   1067e:	cd bf       	out	0x3d, r28	; 61
   10680:	de bf       	out	0x3e, r29	; 62
   10682:	df 91       	pop	r29
   10684:	cf 91       	pop	r28
   10686:	08 95       	ret

00010688 <check_USB_ready>:

uint8_t check_USB_ready(void)
{
   10688:	cf 93       	push	r28
   1068a:	df 93       	push	r29
   1068c:	cd b7       	in	r28, 0x3d	; 61
   1068e:	de b7       	in	r29, 0x3e	; 62
	return dataTransferAuth;
   10690:	80 91 1a 25 	lds	r24, 0x251A	; 0x80251a <dataTransferAuth>
   10694:	df 91       	pop	r29
   10696:	cf 91       	pop	r28
   10698:	08 95       	ret

0001069a <ioport_set_pin_low>:
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
   1069a:	cf 93       	push	r28
   1069c:	df 93       	push	r29
   1069e:	cd b7       	in	r28, 0x3d	; 61
   106a0:	de b7       	in	r29, 0x3e	; 62
   106a2:	2a 97       	sbiw	r28, 0x0a	; 10
   106a4:	cd bf       	out	0x3d, r28	; 61
   106a6:	de bf       	out	0x3e, r29	; 62
   106a8:	8a 87       	std	Y+10, r24	; 0x0a
   106aa:	8a 85       	ldd	r24, Y+10	; 0x0a
   106ac:	89 83       	std	Y+1, r24	; 0x01
   106ae:	1a 82       	std	Y+2, r1	; 0x02
   106b0:	89 81       	ldd	r24, Y+1	; 0x01
   106b2:	8b 83       	std	Y+3, r24	; 0x03
   106b4:	8b 81       	ldd	r24, Y+3	; 0x03
   106b6:	8c 83       	std	Y+4, r24	; 0x04
   106b8:	8c 81       	ldd	r24, Y+4	; 0x04
   106ba:	86 95       	lsr	r24
   106bc:	86 95       	lsr	r24
   106be:	86 95       	lsr	r24
   106c0:	8d 83       	std	Y+5, r24	; 0x05
   106c2:	8d 81       	ldd	r24, Y+5	; 0x05
   106c4:	88 2f       	mov	r24, r24
   106c6:	90 e0       	ldi	r25, 0x00	; 0
   106c8:	88 0f       	add	r24, r24
   106ca:	99 1f       	adc	r25, r25
   106cc:	82 95       	swap	r24
   106ce:	92 95       	swap	r25
   106d0:	90 7f       	andi	r25, 0xF0	; 240
   106d2:	98 27       	eor	r25, r24
   106d4:	80 7f       	andi	r24, 0xF0	; 240
   106d6:	98 27       	eor	r25, r24
   106d8:	9a 5f       	subi	r25, 0xFA	; 250
   106da:	8e 83       	std	Y+6, r24	; 0x06
   106dc:	9f 83       	std	Y+7, r25	; 0x07
   106de:	8a 81       	ldd	r24, Y+2	; 0x02
   106e0:	88 23       	and	r24, r24
   106e2:	a9 f0       	breq	.+42     	; 0x1070e <ioport_set_pin_low+0x74>
   106e4:	89 81       	ldd	r24, Y+1	; 0x01
   106e6:	88 87       	std	Y+8, r24	; 0x08
   106e8:	88 85       	ldd	r24, Y+8	; 0x08
   106ea:	88 2f       	mov	r24, r24
   106ec:	90 e0       	ldi	r25, 0x00	; 0
   106ee:	9c 01       	movw	r18, r24
   106f0:	27 70       	andi	r18, 0x07	; 7
   106f2:	33 27       	eor	r19, r19
   106f4:	81 e0       	ldi	r24, 0x01	; 1
   106f6:	90 e0       	ldi	r25, 0x00	; 0
   106f8:	02 c0       	rjmp	.+4      	; 0x106fe <ioport_set_pin_low+0x64>
   106fa:	88 0f       	add	r24, r24
   106fc:	99 1f       	adc	r25, r25
   106fe:	2a 95       	dec	r18
   10700:	e2 f7       	brpl	.-8      	; 0x106fa <ioport_set_pin_low+0x60>
   10702:	28 2f       	mov	r18, r24
   10704:	8e 81       	ldd	r24, Y+6	; 0x06
   10706:	9f 81       	ldd	r25, Y+7	; 0x07
   10708:	fc 01       	movw	r30, r24
   1070a:	25 83       	std	Z+5, r18	; 0x05
   1070c:	14 c0       	rjmp	.+40     	; 0x10736 <ioport_set_pin_low+0x9c>
   1070e:	89 81       	ldd	r24, Y+1	; 0x01
   10710:	89 87       	std	Y+9, r24	; 0x09
   10712:	89 85       	ldd	r24, Y+9	; 0x09
   10714:	88 2f       	mov	r24, r24
   10716:	90 e0       	ldi	r25, 0x00	; 0
   10718:	9c 01       	movw	r18, r24
   1071a:	27 70       	andi	r18, 0x07	; 7
   1071c:	33 27       	eor	r19, r19
   1071e:	81 e0       	ldi	r24, 0x01	; 1
   10720:	90 e0       	ldi	r25, 0x00	; 0
   10722:	02 c0       	rjmp	.+4      	; 0x10728 <ioport_set_pin_low+0x8e>
   10724:	88 0f       	add	r24, r24
   10726:	99 1f       	adc	r25, r25
   10728:	2a 95       	dec	r18
   1072a:	e2 f7       	brpl	.-8      	; 0x10724 <ioport_set_pin_low+0x8a>
   1072c:	28 2f       	mov	r18, r24
   1072e:	8e 81       	ldd	r24, Y+6	; 0x06
   10730:	9f 81       	ldd	r25, Y+7	; 0x07
   10732:	fc 01       	movw	r30, r24
   10734:	26 83       	std	Z+6, r18	; 0x06
   10736:	00 00       	nop
   10738:	2a 96       	adiw	r28, 0x0a	; 10
   1073a:	cd bf       	out	0x3d, r28	; 61
   1073c:	de bf       	out	0x3e, r29	; 62
   1073e:	df 91       	pop	r29
   10740:	cf 91       	pop	r28
   10742:	08 95       	ret

00010744 <ioport_set_pin_high>:
   10744:	cf 93       	push	r28
   10746:	df 93       	push	r29
   10748:	cd b7       	in	r28, 0x3d	; 61
   1074a:	de b7       	in	r29, 0x3e	; 62
   1074c:	2a 97       	sbiw	r28, 0x0a	; 10
   1074e:	cd bf       	out	0x3d, r28	; 61
   10750:	de bf       	out	0x3e, r29	; 62
   10752:	8a 87       	std	Y+10, r24	; 0x0a
   10754:	8a 85       	ldd	r24, Y+10	; 0x0a
   10756:	89 83       	std	Y+1, r24	; 0x01
   10758:	81 e0       	ldi	r24, 0x01	; 1
   1075a:	8a 83       	std	Y+2, r24	; 0x02
   1075c:	89 81       	ldd	r24, Y+1	; 0x01
   1075e:	8b 83       	std	Y+3, r24	; 0x03
   10760:	8b 81       	ldd	r24, Y+3	; 0x03
   10762:	8c 83       	std	Y+4, r24	; 0x04
   10764:	8c 81       	ldd	r24, Y+4	; 0x04
   10766:	86 95       	lsr	r24
   10768:	86 95       	lsr	r24
   1076a:	86 95       	lsr	r24
   1076c:	8d 83       	std	Y+5, r24	; 0x05
   1076e:	8d 81       	ldd	r24, Y+5	; 0x05
   10770:	88 2f       	mov	r24, r24
   10772:	90 e0       	ldi	r25, 0x00	; 0
   10774:	88 0f       	add	r24, r24
   10776:	99 1f       	adc	r25, r25
   10778:	82 95       	swap	r24
   1077a:	92 95       	swap	r25
   1077c:	90 7f       	andi	r25, 0xF0	; 240
   1077e:	98 27       	eor	r25, r24
   10780:	80 7f       	andi	r24, 0xF0	; 240
   10782:	98 27       	eor	r25, r24
   10784:	9a 5f       	subi	r25, 0xFA	; 250
   10786:	8e 83       	std	Y+6, r24	; 0x06
   10788:	9f 83       	std	Y+7, r25	; 0x07
   1078a:	8a 81       	ldd	r24, Y+2	; 0x02
   1078c:	88 23       	and	r24, r24
   1078e:	a9 f0       	breq	.+42     	; 0x107ba <ioport_set_pin_high+0x76>
   10790:	89 81       	ldd	r24, Y+1	; 0x01
   10792:	88 87       	std	Y+8, r24	; 0x08
   10794:	88 85       	ldd	r24, Y+8	; 0x08
   10796:	88 2f       	mov	r24, r24
   10798:	90 e0       	ldi	r25, 0x00	; 0
   1079a:	9c 01       	movw	r18, r24
   1079c:	27 70       	andi	r18, 0x07	; 7
   1079e:	33 27       	eor	r19, r19
   107a0:	81 e0       	ldi	r24, 0x01	; 1
   107a2:	90 e0       	ldi	r25, 0x00	; 0
   107a4:	02 c0       	rjmp	.+4      	; 0x107aa <ioport_set_pin_high+0x66>
   107a6:	88 0f       	add	r24, r24
   107a8:	99 1f       	adc	r25, r25
   107aa:	2a 95       	dec	r18
   107ac:	e2 f7       	brpl	.-8      	; 0x107a6 <ioport_set_pin_high+0x62>
   107ae:	28 2f       	mov	r18, r24
   107b0:	8e 81       	ldd	r24, Y+6	; 0x06
   107b2:	9f 81       	ldd	r25, Y+7	; 0x07
   107b4:	fc 01       	movw	r30, r24
   107b6:	25 83       	std	Z+5, r18	; 0x05
   107b8:	14 c0       	rjmp	.+40     	; 0x107e2 <ioport_set_pin_high+0x9e>
   107ba:	89 81       	ldd	r24, Y+1	; 0x01
   107bc:	89 87       	std	Y+9, r24	; 0x09
   107be:	89 85       	ldd	r24, Y+9	; 0x09
   107c0:	88 2f       	mov	r24, r24
   107c2:	90 e0       	ldi	r25, 0x00	; 0
   107c4:	9c 01       	movw	r18, r24
   107c6:	27 70       	andi	r18, 0x07	; 7
   107c8:	33 27       	eor	r19, r19
   107ca:	81 e0       	ldi	r24, 0x01	; 1
   107cc:	90 e0       	ldi	r25, 0x00	; 0
   107ce:	02 c0       	rjmp	.+4      	; 0x107d4 <ioport_set_pin_high+0x90>
   107d0:	88 0f       	add	r24, r24
   107d2:	99 1f       	adc	r25, r25
   107d4:	2a 95       	dec	r18
   107d6:	e2 f7       	brpl	.-8      	; 0x107d0 <ioport_set_pin_high+0x8c>
   107d8:	28 2f       	mov	r18, r24
   107da:	8e 81       	ldd	r24, Y+6	; 0x06
   107dc:	9f 81       	ldd	r25, Y+7	; 0x07
   107de:	fc 01       	movw	r30, r24
   107e0:	26 83       	std	Z+6, r18	; 0x06
   107e2:	00 00       	nop
   107e4:	2a 96       	adiw	r28, 0x0a	; 10
   107e6:	cd bf       	out	0x3d, r28	; 61
   107e8:	de bf       	out	0x3e, r29	; 62
   107ea:	df 91       	pop	r29
   107ec:	cf 91       	pop	r28
   107ee:	08 95       	ret

000107f0 <spi_put>:
   107f0:	cf 93       	push	r28
   107f2:	df 93       	push	r29
   107f4:	00 d0       	rcall	.+0      	; 0x107f6 <spi_put+0x6>
   107f6:	cd b7       	in	r28, 0x3d	; 61
   107f8:	de b7       	in	r29, 0x3e	; 62
   107fa:	89 83       	std	Y+1, r24	; 0x01
   107fc:	9a 83       	std	Y+2, r25	; 0x02
   107fe:	6b 83       	std	Y+3, r22	; 0x03
   10800:	89 81       	ldd	r24, Y+1	; 0x01
   10802:	9a 81       	ldd	r25, Y+2	; 0x02
   10804:	2b 81       	ldd	r18, Y+3	; 0x03
   10806:	fc 01       	movw	r30, r24
   10808:	23 83       	std	Z+3, r18	; 0x03
   1080a:	00 00       	nop
   1080c:	23 96       	adiw	r28, 0x03	; 3
   1080e:	cd bf       	out	0x3d, r28	; 61
   10810:	de bf       	out	0x3e, r29	; 62
   10812:	df 91       	pop	r29
   10814:	cf 91       	pop	r28
   10816:	08 95       	ret

00010818 <spi_is_tx_ok>:
   10818:	cf 93       	push	r28
   1081a:	df 93       	push	r29
   1081c:	1f 92       	push	r1
   1081e:	1f 92       	push	r1
   10820:	cd b7       	in	r28, 0x3d	; 61
   10822:	de b7       	in	r29, 0x3e	; 62
   10824:	89 83       	std	Y+1, r24	; 0x01
   10826:	9a 83       	std	Y+2, r25	; 0x02
   10828:	89 81       	ldd	r24, Y+1	; 0x01
   1082a:	9a 81       	ldd	r25, Y+2	; 0x02
   1082c:	fc 01       	movw	r30, r24
   1082e:	82 81       	ldd	r24, Z+2	; 0x02
   10830:	88 1f       	adc	r24, r24
   10832:	88 27       	eor	r24, r24
   10834:	88 1f       	adc	r24, r24
   10836:	0f 90       	pop	r0
   10838:	0f 90       	pop	r0
   1083a:	df 91       	pop	r29
   1083c:	cf 91       	pop	r28
   1083e:	08 95       	ret

00010840 <spi_enable_master_mode>:
   10840:	cf 93       	push	r28
   10842:	df 93       	push	r29
   10844:	1f 92       	push	r1
   10846:	1f 92       	push	r1
   10848:	cd b7       	in	r28, 0x3d	; 61
   1084a:	de b7       	in	r29, 0x3e	; 62
   1084c:	89 83       	std	Y+1, r24	; 0x01
   1084e:	9a 83       	std	Y+2, r25	; 0x02
   10850:	89 81       	ldd	r24, Y+1	; 0x01
   10852:	9a 81       	ldd	r25, Y+2	; 0x02
   10854:	fc 01       	movw	r30, r24
   10856:	80 81       	ld	r24, Z
   10858:	28 2f       	mov	r18, r24
   1085a:	20 61       	ori	r18, 0x10	; 16
   1085c:	89 81       	ldd	r24, Y+1	; 0x01
   1085e:	9a 81       	ldd	r25, Y+2	; 0x02
   10860:	fc 01       	movw	r30, r24
   10862:	20 83       	st	Z, r18
   10864:	00 00       	nop
   10866:	0f 90       	pop	r0
   10868:	0f 90       	pop	r0
   1086a:	df 91       	pop	r29
   1086c:	cf 91       	pop	r28
   1086e:	08 95       	ret

00010870 <spi_is_rx_full>:
   10870:	cf 93       	push	r28
   10872:	df 93       	push	r29
   10874:	1f 92       	push	r1
   10876:	1f 92       	push	r1
   10878:	cd b7       	in	r28, 0x3d	; 61
   1087a:	de b7       	in	r29, 0x3e	; 62
   1087c:	89 83       	std	Y+1, r24	; 0x01
   1087e:	9a 83       	std	Y+2, r25	; 0x02
   10880:	89 81       	ldd	r24, Y+1	; 0x01
   10882:	9a 81       	ldd	r25, Y+2	; 0x02
   10884:	c9 df       	rcall	.-110    	; 0x10818 <spi_is_tx_ok>
   10886:	0f 90       	pop	r0
   10888:	0f 90       	pop	r0
   1088a:	df 91       	pop	r29
   1088c:	cf 91       	pop	r28
   1088e:	08 95       	ret

00010890 <osc_get_rate>:
   10890:	cf 93       	push	r28
   10892:	df 93       	push	r29
   10894:	1f 92       	push	r1
   10896:	cd b7       	in	r28, 0x3d	; 61
   10898:	de b7       	in	r29, 0x3e	; 62
   1089a:	89 83       	std	Y+1, r24	; 0x01
   1089c:	89 81       	ldd	r24, Y+1	; 0x01
   1089e:	88 2f       	mov	r24, r24
   108a0:	90 e0       	ldi	r25, 0x00	; 0
   108a2:	82 30       	cpi	r24, 0x02	; 2
   108a4:	91 05       	cpc	r25, r1
   108a6:	89 f0       	breq	.+34     	; 0x108ca <osc_get_rate+0x3a>
   108a8:	83 30       	cpi	r24, 0x03	; 3
   108aa:	91 05       	cpc	r25, r1
   108ac:	1c f4       	brge	.+6      	; 0x108b4 <osc_get_rate+0x24>
   108ae:	01 97       	sbiw	r24, 0x01	; 1
   108b0:	39 f0       	breq	.+14     	; 0x108c0 <osc_get_rate+0x30>
   108b2:	1a c0       	rjmp	.+52     	; 0x108e8 <osc_get_rate+0x58>
   108b4:	84 30       	cpi	r24, 0x04	; 4
   108b6:	91 05       	cpc	r25, r1
   108b8:	69 f0       	breq	.+26     	; 0x108d4 <osc_get_rate+0x44>
   108ba:	08 97       	sbiw	r24, 0x08	; 8
   108bc:	81 f0       	breq	.+32     	; 0x108de <osc_get_rate+0x4e>
   108be:	14 c0       	rjmp	.+40     	; 0x108e8 <osc_get_rate+0x58>
   108c0:	80 e8       	ldi	r24, 0x80	; 128
   108c2:	94 e8       	ldi	r25, 0x84	; 132
   108c4:	ae e1       	ldi	r26, 0x1E	; 30
   108c6:	b0 e0       	ldi	r27, 0x00	; 0
   108c8:	12 c0       	rjmp	.+36     	; 0x108ee <osc_get_rate+0x5e>
   108ca:	80 e0       	ldi	r24, 0x00	; 0
   108cc:	9c e6       	ldi	r25, 0x6C	; 108
   108ce:	ac ed       	ldi	r26, 0xDC	; 220
   108d0:	b2 e0       	ldi	r27, 0x02	; 2
   108d2:	0d c0       	rjmp	.+26     	; 0x108ee <osc_get_rate+0x5e>
   108d4:	80 e0       	ldi	r24, 0x00	; 0
   108d6:	90 e8       	ldi	r25, 0x80	; 128
   108d8:	a0 e0       	ldi	r26, 0x00	; 0
   108da:	b0 e0       	ldi	r27, 0x00	; 0
   108dc:	08 c0       	rjmp	.+16     	; 0x108ee <osc_get_rate+0x5e>
   108de:	80 e0       	ldi	r24, 0x00	; 0
   108e0:	94 e2       	ldi	r25, 0x24	; 36
   108e2:	a4 ef       	ldi	r26, 0xF4	; 244
   108e4:	b0 e0       	ldi	r27, 0x00	; 0
   108e6:	03 c0       	rjmp	.+6      	; 0x108ee <osc_get_rate+0x5e>
   108e8:	80 e0       	ldi	r24, 0x00	; 0
   108ea:	90 e0       	ldi	r25, 0x00	; 0
   108ec:	dc 01       	movw	r26, r24
   108ee:	bc 01       	movw	r22, r24
   108f0:	cd 01       	movw	r24, r26
   108f2:	0f 90       	pop	r0
   108f4:	df 91       	pop	r29
   108f6:	cf 91       	pop	r28
   108f8:	08 95       	ret

000108fa <pll_get_default_rate_priv>:
   108fa:	cf 93       	push	r28
   108fc:	df 93       	push	r29
   108fe:	cd b7       	in	r28, 0x3d	; 61
   10900:	de b7       	in	r29, 0x3e	; 62
   10902:	29 97       	sbiw	r28, 0x09	; 9
   10904:	cd bf       	out	0x3d, r28	; 61
   10906:	de bf       	out	0x3e, r29	; 62
   10908:	8d 83       	std	Y+5, r24	; 0x05
   1090a:	6e 83       	std	Y+6, r22	; 0x06
   1090c:	7f 83       	std	Y+7, r23	; 0x07
   1090e:	48 87       	std	Y+8, r20	; 0x08
   10910:	59 87       	std	Y+9, r21	; 0x09
   10912:	8d 81       	ldd	r24, Y+5	; 0x05
   10914:	88 2f       	mov	r24, r24
   10916:	90 e0       	ldi	r25, 0x00	; 0
   10918:	80 38       	cpi	r24, 0x80	; 128
   1091a:	91 05       	cpc	r25, r1
   1091c:	79 f0       	breq	.+30     	; 0x1093c <pll_get_default_rate_priv+0x42>
   1091e:	80 3c       	cpi	r24, 0xC0	; 192
   10920:	91 05       	cpc	r25, r1
   10922:	a9 f0       	breq	.+42     	; 0x1094e <pll_get_default_rate_priv+0x54>
   10924:	89 2b       	or	r24, r25
   10926:	09 f0       	breq	.+2      	; 0x1092a <pll_get_default_rate_priv+0x30>
   10928:	1b c0       	rjmp	.+54     	; 0x10960 <pll_get_default_rate_priv+0x66>
   1092a:	80 e8       	ldi	r24, 0x80	; 128
   1092c:	94 e8       	ldi	r25, 0x84	; 132
   1092e:	ae e1       	ldi	r26, 0x1E	; 30
   10930:	b0 e0       	ldi	r27, 0x00	; 0
   10932:	89 83       	std	Y+1, r24	; 0x01
   10934:	9a 83       	std	Y+2, r25	; 0x02
   10936:	ab 83       	std	Y+3, r26	; 0x03
   10938:	bc 83       	std	Y+4, r27	; 0x04
   1093a:	12 c0       	rjmp	.+36     	; 0x10960 <pll_get_default_rate_priv+0x66>
   1093c:	80 e0       	ldi	r24, 0x00	; 0
   1093e:	9b e1       	ldi	r25, 0x1B	; 27
   10940:	a7 eb       	ldi	r26, 0xB7	; 183
   10942:	b0 e0       	ldi	r27, 0x00	; 0
   10944:	89 83       	std	Y+1, r24	; 0x01
   10946:	9a 83       	std	Y+2, r25	; 0x02
   10948:	ab 83       	std	Y+3, r26	; 0x03
   1094a:	bc 83       	std	Y+4, r27	; 0x04
   1094c:	09 c0       	rjmp	.+18     	; 0x10960 <pll_get_default_rate_priv+0x66>
   1094e:	88 e0       	ldi	r24, 0x08	; 8
   10950:	9f df       	rcall	.-194    	; 0x10890 <osc_get_rate>
   10952:	dc 01       	movw	r26, r24
   10954:	cb 01       	movw	r24, r22
   10956:	89 83       	std	Y+1, r24	; 0x01
   10958:	9a 83       	std	Y+2, r25	; 0x02
   1095a:	ab 83       	std	Y+3, r26	; 0x03
   1095c:	bc 83       	std	Y+4, r27	; 0x04
   1095e:	00 00       	nop
   10960:	8e 81       	ldd	r24, Y+6	; 0x06
   10962:	9f 81       	ldd	r25, Y+7	; 0x07
   10964:	cc 01       	movw	r24, r24
   10966:	a0 e0       	ldi	r26, 0x00	; 0
   10968:	b0 e0       	ldi	r27, 0x00	; 0
   1096a:	29 81       	ldd	r18, Y+1	; 0x01
   1096c:	3a 81       	ldd	r19, Y+2	; 0x02
   1096e:	4b 81       	ldd	r20, Y+3	; 0x03
   10970:	5c 81       	ldd	r21, Y+4	; 0x04
   10972:	bc 01       	movw	r22, r24
   10974:	cd 01       	movw	r24, r26
   10976:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <__mulsi3>
   1097a:	dc 01       	movw	r26, r24
   1097c:	cb 01       	movw	r24, r22
   1097e:	89 83       	std	Y+1, r24	; 0x01
   10980:	9a 83       	std	Y+2, r25	; 0x02
   10982:	ab 83       	std	Y+3, r26	; 0x03
   10984:	bc 83       	std	Y+4, r27	; 0x04
   10986:	89 81       	ldd	r24, Y+1	; 0x01
   10988:	9a 81       	ldd	r25, Y+2	; 0x02
   1098a:	ab 81       	ldd	r26, Y+3	; 0x03
   1098c:	bc 81       	ldd	r27, Y+4	; 0x04
   1098e:	bc 01       	movw	r22, r24
   10990:	cd 01       	movw	r24, r26
   10992:	29 96       	adiw	r28, 0x09	; 9
   10994:	cd bf       	out	0x3d, r28	; 61
   10996:	de bf       	out	0x3e, r29	; 62
   10998:	df 91       	pop	r29
   1099a:	cf 91       	pop	r28
   1099c:	08 95       	ret

0001099e <sysclk_get_main_hz>:
   1099e:	cf 93       	push	r28
   109a0:	df 93       	push	r29
   109a2:	cd b7       	in	r28, 0x3d	; 61
   109a4:	de b7       	in	r29, 0x3e	; 62
   109a6:	41 e0       	ldi	r20, 0x01	; 1
   109a8:	50 e0       	ldi	r21, 0x00	; 0
   109aa:	62 e0       	ldi	r22, 0x02	; 2
   109ac:	70 e0       	ldi	r23, 0x00	; 0
   109ae:	80 ec       	ldi	r24, 0xC0	; 192
   109b0:	a4 df       	rcall	.-184    	; 0x108fa <pll_get_default_rate_priv>
   109b2:	dc 01       	movw	r26, r24
   109b4:	cb 01       	movw	r24, r22
   109b6:	bc 01       	movw	r22, r24
   109b8:	cd 01       	movw	r24, r26
   109ba:	df 91       	pop	r29
   109bc:	cf 91       	pop	r28
   109be:	08 95       	ret

000109c0 <sysclk_get_per4_hz>:
   109c0:	cf 93       	push	r28
   109c2:	df 93       	push	r29
   109c4:	1f 92       	push	r1
   109c6:	cd b7       	in	r28, 0x3d	; 61
   109c8:	de b7       	in	r29, 0x3e	; 62
   109ca:	19 82       	std	Y+1, r1	; 0x01
   109cc:	e8 df       	rcall	.-48     	; 0x1099e <sysclk_get_main_hz>
   109ce:	dc 01       	movw	r26, r24
   109d0:	cb 01       	movw	r24, r22
   109d2:	29 81       	ldd	r18, Y+1	; 0x01
   109d4:	22 2f       	mov	r18, r18
   109d6:	30 e0       	ldi	r19, 0x00	; 0
   109d8:	04 c0       	rjmp	.+8      	; 0x109e2 <sysclk_get_per4_hz+0x22>
   109da:	b6 95       	lsr	r27
   109dc:	a7 95       	ror	r26
   109de:	97 95       	ror	r25
   109e0:	87 95       	ror	r24
   109e2:	2a 95       	dec	r18
   109e4:	d2 f7       	brpl	.-12     	; 0x109da <sysclk_get_per4_hz+0x1a>
   109e6:	bc 01       	movw	r22, r24
   109e8:	cd 01       	movw	r24, r26
   109ea:	0f 90       	pop	r0
   109ec:	df 91       	pop	r29
   109ee:	cf 91       	pop	r28
   109f0:	08 95       	ret

000109f2 <sysclk_get_per2_hz>:
   109f2:	cf 93       	push	r28
   109f4:	df 93       	push	r29
   109f6:	cd b7       	in	r28, 0x3d	; 61
   109f8:	de b7       	in	r29, 0x3e	; 62
   109fa:	e2 df       	rcall	.-60     	; 0x109c0 <sysclk_get_per4_hz>
   109fc:	dc 01       	movw	r26, r24
   109fe:	cb 01       	movw	r24, r22
   10a00:	bc 01       	movw	r22, r24
   10a02:	cd 01       	movw	r24, r26
   10a04:	df 91       	pop	r29
   10a06:	cf 91       	pop	r28
   10a08:	08 95       	ret

00010a0a <sysclk_get_per_hz>:
   10a0a:	cf 93       	push	r28
   10a0c:	df 93       	push	r29
   10a0e:	cd b7       	in	r28, 0x3d	; 61
   10a10:	de b7       	in	r29, 0x3e	; 62
   10a12:	ef df       	rcall	.-34     	; 0x109f2 <sysclk_get_per2_hz>
   10a14:	dc 01       	movw	r26, r24
   10a16:	cb 01       	movw	r24, r22
   10a18:	bc 01       	movw	r22, r24
   10a1a:	cd 01       	movw	r24, r26
   10a1c:	df 91       	pop	r29
   10a1e:	cf 91       	pop	r28
   10a20:	08 95       	ret

00010a22 <sysclk_get_cpu_hz>:
   10a22:	cf 93       	push	r28
   10a24:	df 93       	push	r29
   10a26:	cd b7       	in	r28, 0x3d	; 61
   10a28:	de b7       	in	r29, 0x3e	; 62
   10a2a:	ef df       	rcall	.-34     	; 0x10a0a <sysclk_get_per_hz>
   10a2c:	dc 01       	movw	r26, r24
   10a2e:	cb 01       	movw	r24, r22
   10a30:	bc 01       	movw	r22, r24
   10a32:	cd 01       	movw	r24, r26
   10a34:	df 91       	pop	r29
   10a36:	cf 91       	pop	r28
   10a38:	08 95       	ret

00010a3a <spi_master_init>:
   10a3a:	cf 93       	push	r28
   10a3c:	df 93       	push	r29
   10a3e:	1f 92       	push	r1
   10a40:	1f 92       	push	r1
   10a42:	cd b7       	in	r28, 0x3d	; 61
   10a44:	de b7       	in	r29, 0x3e	; 62
   10a46:	89 83       	std	Y+1, r24	; 0x01
   10a48:	9a 83       	std	Y+2, r25	; 0x02
   10a4a:	89 81       	ldd	r24, Y+1	; 0x01
   10a4c:	9a 81       	ldd	r25, Y+2	; 0x02
   10a4e:	80 3c       	cpi	r24, 0xC0	; 192
   10a50:	98 40       	sbci	r25, 0x08	; 8
   10a52:	21 f4       	brne	.+8      	; 0x10a5c <spi_master_init+0x22>
   10a54:	68 e0       	ldi	r22, 0x08	; 8
   10a56:	83 e0       	ldi	r24, 0x03	; 3
   10a58:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   10a5c:	89 81       	ldd	r24, Y+1	; 0x01
   10a5e:	9a 81       	ldd	r25, Y+2	; 0x02
   10a60:	80 3c       	cpi	r24, 0xC0	; 192
   10a62:	99 40       	sbci	r25, 0x09	; 9
   10a64:	21 f4       	brne	.+8      	; 0x10a6e <spi_master_init+0x34>
   10a66:	68 e0       	ldi	r22, 0x08	; 8
   10a68:	84 e0       	ldi	r24, 0x04	; 4
   10a6a:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   10a6e:	89 81       	ldd	r24, Y+1	; 0x01
   10a70:	9a 81       	ldd	r25, Y+2	; 0x02
   10a72:	80 3c       	cpi	r24, 0xC0	; 192
   10a74:	9a 40       	sbci	r25, 0x0A	; 10
   10a76:	21 f4       	brne	.+8      	; 0x10a80 <spi_master_init+0x46>
   10a78:	68 e0       	ldi	r22, 0x08	; 8
   10a7a:	85 e0       	ldi	r24, 0x05	; 5
   10a7c:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   10a80:	89 81       	ldd	r24, Y+1	; 0x01
   10a82:	9a 81       	ldd	r25, Y+2	; 0x02
   10a84:	80 3c       	cpi	r24, 0xC0	; 192
   10a86:	9b 40       	sbci	r25, 0x0B	; 11
   10a88:	21 f4       	brne	.+8      	; 0x10a92 <spi_master_init+0x58>
   10a8a:	68 e0       	ldi	r22, 0x08	; 8
   10a8c:	86 e0       	ldi	r24, 0x06	; 6
   10a8e:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   10a92:	89 81       	ldd	r24, Y+1	; 0x01
   10a94:	9a 81       	ldd	r25, Y+2	; 0x02
   10a96:	d4 de       	rcall	.-600    	; 0x10840 <spi_enable_master_mode>
   10a98:	00 00       	nop
   10a9a:	0f 90       	pop	r0
   10a9c:	0f 90       	pop	r0
   10a9e:	df 91       	pop	r29
   10aa0:	cf 91       	pop	r28
   10aa2:	08 95       	ret

00010aa4 <spi_master_setup_device>:
   10aa4:	cf 92       	push	r12
   10aa6:	df 92       	push	r13
   10aa8:	ef 92       	push	r14
   10aaa:	ff 92       	push	r15
   10aac:	0f 93       	push	r16
   10aae:	1f 93       	push	r17
   10ab0:	cf 93       	push	r28
   10ab2:	df 93       	push	r29
   10ab4:	cd b7       	in	r28, 0x3d	; 61
   10ab6:	de b7       	in	r29, 0x3e	; 62
   10ab8:	2d 97       	sbiw	r28, 0x0d	; 13
   10aba:	cd bf       	out	0x3d, r28	; 61
   10abc:	de bf       	out	0x3e, r29	; 62
   10abe:	89 83       	std	Y+1, r24	; 0x01
   10ac0:	9a 83       	std	Y+2, r25	; 0x02
   10ac2:	6b 83       	std	Y+3, r22	; 0x03
   10ac4:	7c 83       	std	Y+4, r23	; 0x04
   10ac6:	4d 83       	std	Y+5, r20	; 0x05
   10ac8:	0e 83       	std	Y+6, r16	; 0x06
   10aca:	1f 83       	std	Y+7, r17	; 0x07
   10acc:	28 87       	std	Y+8, r18	; 0x08
   10ace:	39 87       	std	Y+9, r19	; 0x09
   10ad0:	ca 86       	std	Y+10, r12	; 0x0a
   10ad2:	db 86       	std	Y+11, r13	; 0x0b
   10ad4:	ec 86       	std	Y+12, r14	; 0x0c
   10ad6:	fd 86       	std	Y+13, r15	; 0x0d
   10ad8:	a4 df       	rcall	.-184    	; 0x10a22 <sysclk_get_cpu_hz>
   10ada:	9b 01       	movw	r18, r22
   10adc:	ac 01       	movw	r20, r24
   10ade:	8e 81       	ldd	r24, Y+6	; 0x06
   10ae0:	9f 81       	ldd	r25, Y+7	; 0x07
   10ae2:	a8 85       	ldd	r26, Y+8	; 0x08
   10ae4:	b9 85       	ldd	r27, Y+9	; 0x09
   10ae6:	e9 81       	ldd	r30, Y+1	; 0x01
   10ae8:	fa 81       	ldd	r31, Y+2	; 0x02
   10aea:	89 01       	movw	r16, r18
   10aec:	9a 01       	movw	r18, r20
   10aee:	ac 01       	movw	r20, r24
   10af0:	bd 01       	movw	r22, r26
   10af2:	cf 01       	movw	r24, r30
   10af4:	89 d0       	rcall	.+274    	; 0x10c08 <spi_xmega_set_baud_div>
   10af6:	88 23       	and	r24, r24
   10af8:	ac f0       	brlt	.+42     	; 0x10b24 <spi_master_setup_device+0x80>
   10afa:	89 81       	ldd	r24, Y+1	; 0x01
   10afc:	9a 81       	ldd	r25, Y+2	; 0x02
   10afe:	fc 01       	movw	r30, r24
   10b00:	80 81       	ld	r24, Z
   10b02:	28 2f       	mov	r18, r24
   10b04:	23 7f       	andi	r18, 0xF3	; 243
   10b06:	8d 81       	ldd	r24, Y+5	; 0x05
   10b08:	88 2f       	mov	r24, r24
   10b0a:	90 e0       	ldi	r25, 0x00	; 0
   10b0c:	88 0f       	add	r24, r24
   10b0e:	99 1f       	adc	r25, r25
   10b10:	88 0f       	add	r24, r24
   10b12:	99 1f       	adc	r25, r25
   10b14:	8c 70       	andi	r24, 0x0C	; 12
   10b16:	82 2b       	or	r24, r18
   10b18:	28 2f       	mov	r18, r24
   10b1a:	89 81       	ldd	r24, Y+1	; 0x01
   10b1c:	9a 81       	ldd	r25, Y+2	; 0x02
   10b1e:	fc 01       	movw	r30, r24
   10b20:	20 83       	st	Z, r18
   10b22:	01 c0       	rjmp	.+2      	; 0x10b26 <spi_master_setup_device+0x82>
   10b24:	00 00       	nop
   10b26:	2d 96       	adiw	r28, 0x0d	; 13
   10b28:	cd bf       	out	0x3d, r28	; 61
   10b2a:	de bf       	out	0x3e, r29	; 62
   10b2c:	df 91       	pop	r29
   10b2e:	cf 91       	pop	r28
   10b30:	1f 91       	pop	r17
   10b32:	0f 91       	pop	r16
   10b34:	ff 90       	pop	r15
   10b36:	ef 90       	pop	r14
   10b38:	df 90       	pop	r13
   10b3a:	cf 90       	pop	r12
   10b3c:	08 95       	ret

00010b3e <spi_write_packet>:
   10b3e:	cf 93       	push	r28
   10b40:	df 93       	push	r29
   10b42:	cd b7       	in	r28, 0x3d	; 61
   10b44:	de b7       	in	r29, 0x3e	; 62
   10b46:	29 97       	sbiw	r28, 0x09	; 9
   10b48:	cd bf       	out	0x3d, r28	; 61
   10b4a:	de bf       	out	0x3e, r29	; 62
   10b4c:	8c 83       	std	Y+4, r24	; 0x04
   10b4e:	9d 83       	std	Y+5, r25	; 0x05
   10b50:	6e 83       	std	Y+6, r22	; 0x06
   10b52:	7f 83       	std	Y+7, r23	; 0x07
   10b54:	48 87       	std	Y+8, r20	; 0x08
   10b56:	59 87       	std	Y+9, r21	; 0x09
   10b58:	1b c0       	rjmp	.+54     	; 0x10b90 <spi_write_packet+0x52>
   10b5a:	8e 81       	ldd	r24, Y+6	; 0x06
   10b5c:	9f 81       	ldd	r25, Y+7	; 0x07
   10b5e:	9c 01       	movw	r18, r24
   10b60:	2f 5f       	subi	r18, 0xFF	; 255
   10b62:	3f 4f       	sbci	r19, 0xFF	; 255
   10b64:	2e 83       	std	Y+6, r18	; 0x06
   10b66:	3f 83       	std	Y+7, r19	; 0x07
   10b68:	fc 01       	movw	r30, r24
   10b6a:	20 81       	ld	r18, Z
   10b6c:	8c 81       	ldd	r24, Y+4	; 0x04
   10b6e:	9d 81       	ldd	r25, Y+5	; 0x05
   10b70:	89 83       	std	Y+1, r24	; 0x01
   10b72:	9a 83       	std	Y+2, r25	; 0x02
   10b74:	2b 83       	std	Y+3, r18	; 0x03
   10b76:	89 81       	ldd	r24, Y+1	; 0x01
   10b78:	9a 81       	ldd	r25, Y+2	; 0x02
   10b7a:	6b 81       	ldd	r22, Y+3	; 0x03
   10b7c:	39 de       	rcall	.-910    	; 0x107f0 <spi_put>
   10b7e:	00 00       	nop
   10b80:	8c 81       	ldd	r24, Y+4	; 0x04
   10b82:	9d 81       	ldd	r25, Y+5	; 0x05
   10b84:	75 de       	rcall	.-790    	; 0x10870 <spi_is_rx_full>
   10b86:	98 2f       	mov	r25, r24
   10b88:	81 e0       	ldi	r24, 0x01	; 1
   10b8a:	89 27       	eor	r24, r25
   10b8c:	88 23       	and	r24, r24
   10b8e:	c1 f7       	brne	.-16     	; 0x10b80 <spi_write_packet+0x42>
   10b90:	88 85       	ldd	r24, Y+8	; 0x08
   10b92:	99 85       	ldd	r25, Y+9	; 0x09
   10b94:	9c 01       	movw	r18, r24
   10b96:	21 50       	subi	r18, 0x01	; 1
   10b98:	31 09       	sbc	r19, r1
   10b9a:	28 87       	std	Y+8, r18	; 0x08
   10b9c:	39 87       	std	Y+9, r19	; 0x09
   10b9e:	89 2b       	or	r24, r25
   10ba0:	e1 f6       	brne	.-72     	; 0x10b5a <spi_write_packet+0x1c>
   10ba2:	80 e0       	ldi	r24, 0x00	; 0
   10ba4:	29 96       	adiw	r28, 0x09	; 9
   10ba6:	cd bf       	out	0x3d, r28	; 61
   10ba8:	de bf       	out	0x3e, r29	; 62
   10baa:	df 91       	pop	r29
   10bac:	cf 91       	pop	r28
   10bae:	08 95       	ret

00010bb0 <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
   10bb0:	cf 93       	push	r28
   10bb2:	df 93       	push	r29
   10bb4:	00 d0       	rcall	.+0      	; 0x10bb6 <spi_select_device+0x6>
   10bb6:	1f 92       	push	r1
   10bb8:	cd b7       	in	r28, 0x3d	; 61
   10bba:	de b7       	in	r29, 0x3e	; 62
   10bbc:	89 83       	std	Y+1, r24	; 0x01
   10bbe:	9a 83       	std	Y+2, r25	; 0x02
   10bc0:	6b 83       	std	Y+3, r22	; 0x03
   10bc2:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_low(device->id);
   10bc4:	8b 81       	ldd	r24, Y+3	; 0x03
   10bc6:	9c 81       	ldd	r25, Y+4	; 0x04
   10bc8:	fc 01       	movw	r30, r24
   10bca:	80 81       	ld	r24, Z
   10bcc:	66 dd       	rcall	.-1332   	; 0x1069a <ioport_set_pin_low>
}
   10bce:	00 00       	nop
   10bd0:	24 96       	adiw	r28, 0x04	; 4
   10bd2:	cd bf       	out	0x3d, r28	; 61
   10bd4:	de bf       	out	0x3e, r29	; 62
   10bd6:	df 91       	pop	r29
   10bd8:	cf 91       	pop	r28
   10bda:	08 95       	ret

00010bdc <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
   10bdc:	cf 93       	push	r28
   10bde:	df 93       	push	r29
   10be0:	00 d0       	rcall	.+0      	; 0x10be2 <spi_deselect_device+0x6>
   10be2:	1f 92       	push	r1
   10be4:	cd b7       	in	r28, 0x3d	; 61
   10be6:	de b7       	in	r29, 0x3e	; 62
   10be8:	89 83       	std	Y+1, r24	; 0x01
   10bea:	9a 83       	std	Y+2, r25	; 0x02
   10bec:	6b 83       	std	Y+3, r22	; 0x03
   10bee:	7c 83       	std	Y+4, r23	; 0x04
	ioport_set_pin_high(device->id);
   10bf0:	8b 81       	ldd	r24, Y+3	; 0x03
   10bf2:	9c 81       	ldd	r25, Y+4	; 0x04
   10bf4:	fc 01       	movw	r30, r24
   10bf6:	80 81       	ld	r24, Z
   10bf8:	a5 dd       	rcall	.-1206   	; 0x10744 <ioport_set_pin_high>
}
   10bfa:	00 00       	nop
   10bfc:	24 96       	adiw	r28, 0x04	; 4
   10bfe:	cd bf       	out	0x3d, r28	; 61
   10c00:	de bf       	out	0x3e, r29	; 62
   10c02:	df 91       	pop	r29
   10c04:	cf 91       	pop	r28
   10c06:	08 95       	ret

00010c08 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
   10c08:	0f 93       	push	r16
   10c0a:	1f 93       	push	r17
   10c0c:	cf 93       	push	r28
   10c0e:	df 93       	push	r29
   10c10:	cd b7       	in	r28, 0x3d	; 61
   10c12:	de b7       	in	r29, 0x3e	; 62
   10c14:	60 97       	sbiw	r28, 0x10	; 16
   10c16:	cd bf       	out	0x3d, r28	; 61
   10c18:	de bf       	out	0x3e, r29	; 62
   10c1a:	8f 83       	std	Y+7, r24	; 0x07
   10c1c:	98 87       	std	Y+8, r25	; 0x08
   10c1e:	49 87       	std	Y+9, r20	; 0x09
   10c20:	5a 87       	std	Y+10, r21	; 0x0a
   10c22:	6b 87       	std	Y+11, r22	; 0x0b
   10c24:	7c 87       	std	Y+12, r23	; 0x0c
   10c26:	0d 87       	std	Y+13, r16	; 0x0d
   10c28:	1e 87       	std	Y+14, r17	; 0x0e
   10c2a:	2f 87       	std	Y+15, r18	; 0x0f
   10c2c:	38 8b       	std	Y+16, r19	; 0x10

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
   10c2e:	2d 85       	ldd	r18, Y+13	; 0x0d
   10c30:	3e 85       	ldd	r19, Y+14	; 0x0e
   10c32:	4f 85       	ldd	r20, Y+15	; 0x0f
   10c34:	58 89       	ldd	r21, Y+16	; 0x10
   10c36:	89 85       	ldd	r24, Y+9	; 0x09
   10c38:	9a 85       	ldd	r25, Y+10	; 0x0a
   10c3a:	ab 85       	ldd	r26, Y+11	; 0x0b
   10c3c:	bc 85       	ldd	r27, Y+12	; 0x0c
   10c3e:	82 0f       	add	r24, r18
   10c40:	93 1f       	adc	r25, r19
   10c42:	a4 1f       	adc	r26, r20
   10c44:	b5 1f       	adc	r27, r21
   10c46:	01 97       	sbiw	r24, 0x01	; 1
   10c48:	a1 09       	sbc	r26, r1
   10c4a:	b1 09       	sbc	r27, r1
   10c4c:	29 85       	ldd	r18, Y+9	; 0x09
   10c4e:	3a 85       	ldd	r19, Y+10	; 0x0a
   10c50:	4b 85       	ldd	r20, Y+11	; 0x0b
   10c52:	5c 85       	ldd	r21, Y+12	; 0x0c
   10c54:	bc 01       	movw	r22, r24
   10c56:	cd 01       	movw	r24, r26
   10c58:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   10c5c:	da 01       	movw	r26, r20
   10c5e:	c9 01       	movw	r24, r18
   10c60:	8a 83       	std	Y+2, r24	; 0x02
   10c62:	9b 83       	std	Y+3, r25	; 0x03
   10c64:	ac 83       	std	Y+4, r26	; 0x04
   10c66:	bd 83       	std	Y+5, r27	; 0x05

	if (divisor > 128) {
   10c68:	8a 81       	ldd	r24, Y+2	; 0x02
   10c6a:	9b 81       	ldd	r25, Y+3	; 0x03
   10c6c:	ac 81       	ldd	r26, Y+4	; 0x04
   10c6e:	bd 81       	ldd	r27, Y+5	; 0x05
   10c70:	81 38       	cpi	r24, 0x81	; 129
   10c72:	91 05       	cpc	r25, r1
   10c74:	a1 05       	cpc	r26, r1
   10c76:	b1 05       	cpc	r27, r1
   10c78:	10 f0       	brcs	.+4      	; 0x10c7e <spi_xmega_set_baud_div+0x76>
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
   10c7a:	8f ef       	ldi	r24, 0xFF	; 255
   10c7c:	35 c0       	rjmp	.+106    	; 0x10ce8 <spi_xmega_set_baud_div+0xe0>

	/*
	 * We now know that the divisor is 128 or lower so move it into a 8-bit
	 * variable to make sure the following comparison is more optimized.
	 */
	divisor_8bit = divisor;
   10c7e:	8a 81       	ldd	r24, Y+2	; 0x02
   10c80:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
   10c82:	8e 81       	ldd	r24, Y+6	; 0x06
   10c84:	81 34       	cpi	r24, 0x41	; 65
   10c86:	18 f0       	brcs	.+6      	; 0x10c8e <spi_xmega_set_baud_div+0x86>
		ctrl = SPI_PRESCALER_DIV128_gc;
   10c88:	83 e0       	ldi	r24, 0x03	; 3
   10c8a:	89 83       	std	Y+1, r24	; 0x01
   10c8c:	1f c0       	rjmp	.+62     	; 0x10ccc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 32) {
   10c8e:	8e 81       	ldd	r24, Y+6	; 0x06
   10c90:	81 32       	cpi	r24, 0x21	; 33
   10c92:	18 f0       	brcs	.+6      	; 0x10c9a <spi_xmega_set_baud_div+0x92>
		ctrl = SPI_PRESCALER_DIV64_gc;
   10c94:	82 e0       	ldi	r24, 0x02	; 2
   10c96:	89 83       	std	Y+1, r24	; 0x01
   10c98:	19 c0       	rjmp	.+50     	; 0x10ccc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 16) {
   10c9a:	8e 81       	ldd	r24, Y+6	; 0x06
   10c9c:	81 31       	cpi	r24, 0x11	; 17
   10c9e:	18 f0       	brcs	.+6      	; 0x10ca6 <spi_xmega_set_baud_div+0x9e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
   10ca0:	82 e8       	ldi	r24, 0x82	; 130
   10ca2:	89 83       	std	Y+1, r24	; 0x01
   10ca4:	13 c0       	rjmp	.+38     	; 0x10ccc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 8) {
   10ca6:	8e 81       	ldd	r24, Y+6	; 0x06
   10ca8:	89 30       	cpi	r24, 0x09	; 9
   10caa:	18 f0       	brcs	.+6      	; 0x10cb2 <spi_xmega_set_baud_div+0xaa>
		ctrl = SPI_PRESCALER_DIV16_gc;
   10cac:	81 e0       	ldi	r24, 0x01	; 1
   10cae:	89 83       	std	Y+1, r24	; 0x01
   10cb0:	0d c0       	rjmp	.+26     	; 0x10ccc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 4) {
   10cb2:	8e 81       	ldd	r24, Y+6	; 0x06
   10cb4:	85 30       	cpi	r24, 0x05	; 5
   10cb6:	18 f0       	brcs	.+6      	; 0x10cbe <spi_xmega_set_baud_div+0xb6>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
   10cb8:	81 e8       	ldi	r24, 0x81	; 129
   10cba:	89 83       	std	Y+1, r24	; 0x01
   10cbc:	07 c0       	rjmp	.+14     	; 0x10ccc <spi_xmega_set_baud_div+0xc4>
	}
	else if (divisor_8bit > 2) {
   10cbe:	8e 81       	ldd	r24, Y+6	; 0x06
   10cc0:	83 30       	cpi	r24, 0x03	; 3
   10cc2:	10 f0       	brcs	.+4      	; 0x10cc8 <spi_xmega_set_baud_div+0xc0>
		ctrl = SPI_PRESCALER_DIV4_gc;
   10cc4:	19 82       	std	Y+1, r1	; 0x01
   10cc6:	02 c0       	rjmp	.+4      	; 0x10ccc <spi_xmega_set_baud_div+0xc4>
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
   10cc8:	80 e8       	ldi	r24, 0x80	; 128
   10cca:	89 83       	std	Y+1, r24	; 0x01
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
   10ccc:	8f 81       	ldd	r24, Y+7	; 0x07
   10cce:	98 85       	ldd	r25, Y+8	; 0x08
   10cd0:	fc 01       	movw	r30, r24
   10cd2:	80 81       	ld	r24, Z
   10cd4:	98 2f       	mov	r25, r24
   10cd6:	9c 77       	andi	r25, 0x7C	; 124
   10cd8:	89 81       	ldd	r24, Y+1	; 0x01
   10cda:	89 2b       	or	r24, r25
   10cdc:	28 2f       	mov	r18, r24
   10cde:	8f 81       	ldd	r24, Y+7	; 0x07
   10ce0:	98 85       	ldd	r25, Y+8	; 0x08
   10ce2:	fc 01       	movw	r30, r24
   10ce4:	20 83       	st	Z, r18

	return 1;
   10ce6:	81 e0       	ldi	r24, 0x01	; 1
}
   10ce8:	60 96       	adiw	r28, 0x10	; 16
   10cea:	cd bf       	out	0x3d, r28	; 61
   10cec:	de bf       	out	0x3e, r29	; 62
   10cee:	df 91       	pop	r29
   10cf0:	cf 91       	pop	r28
   10cf2:	1f 91       	pop	r17
   10cf4:	0f 91       	pop	r16
   10cf6:	08 95       	ret

00010cf8 <cpu_irq_save>:
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
   10cf8:	cf 93       	push	r28
   10cfa:	df 93       	push	r29
   10cfc:	1f 92       	push	r1
   10cfe:	cd b7       	in	r28, 0x3d	; 61
   10d00:	de b7       	in	r29, 0x3e	; 62
   10d02:	8f e3       	ldi	r24, 0x3F	; 63
   10d04:	90 e0       	ldi	r25, 0x00	; 0
   10d06:	fc 01       	movw	r30, r24
   10d08:	80 81       	ld	r24, Z
   10d0a:	89 83       	std	Y+1, r24	; 0x01
   10d0c:	f8 94       	cli
   10d0e:	89 81       	ldd	r24, Y+1	; 0x01
   10d10:	0f 90       	pop	r0
   10d12:	df 91       	pop	r29
   10d14:	cf 91       	pop	r28
   10d16:	08 95       	ret

00010d18 <cpu_irq_restore>:
   10d18:	cf 93       	push	r28
   10d1a:	df 93       	push	r29
   10d1c:	1f 92       	push	r1
   10d1e:	cd b7       	in	r28, 0x3d	; 61
   10d20:	de b7       	in	r29, 0x3e	; 62
   10d22:	89 83       	std	Y+1, r24	; 0x01
   10d24:	8f e3       	ldi	r24, 0x3F	; 63
   10d26:	90 e0       	ldi	r25, 0x00	; 0
   10d28:	29 81       	ldd	r18, Y+1	; 0x01
   10d2a:	fc 01       	movw	r30, r24
   10d2c:	20 83       	st	Z, r18
   10d2e:	00 00       	nop
   10d30:	0f 90       	pop	r0
   10d32:	df 91       	pop	r29
   10d34:	cf 91       	pop	r28
   10d36:	08 95       	ret

00010d38 <sleepmgr_lock_mode>:
   10d38:	cf 93       	push	r28
   10d3a:	df 93       	push	r29
   10d3c:	1f 92       	push	r1
   10d3e:	1f 92       	push	r1
   10d40:	cd b7       	in	r28, 0x3d	; 61
   10d42:	de b7       	in	r29, 0x3e	; 62
   10d44:	8a 83       	std	Y+2, r24	; 0x02
   10d46:	8a 81       	ldd	r24, Y+2	; 0x02
   10d48:	88 2f       	mov	r24, r24
   10d4a:	90 e0       	ldi	r25, 0x00	; 0
   10d4c:	89 54       	subi	r24, 0x49	; 73
   10d4e:	96 4d       	sbci	r25, 0xD6	; 214
   10d50:	fc 01       	movw	r30, r24
   10d52:	80 81       	ld	r24, Z
   10d54:	8f 3f       	cpi	r24, 0xFF	; 255
   10d56:	09 f4       	brne	.+2      	; 0x10d5a <sleepmgr_lock_mode+0x22>
   10d58:	ff cf       	rjmp	.-2      	; 0x10d58 <sleepmgr_lock_mode+0x20>
   10d5a:	ce df       	rcall	.-100    	; 0x10cf8 <cpu_irq_save>
   10d5c:	89 83       	std	Y+1, r24	; 0x01
   10d5e:	8a 81       	ldd	r24, Y+2	; 0x02
   10d60:	88 2f       	mov	r24, r24
   10d62:	90 e0       	ldi	r25, 0x00	; 0
   10d64:	9c 01       	movw	r18, r24
   10d66:	29 54       	subi	r18, 0x49	; 73
   10d68:	36 4d       	sbci	r19, 0xD6	; 214
   10d6a:	f9 01       	movw	r30, r18
   10d6c:	20 81       	ld	r18, Z
   10d6e:	2f 5f       	subi	r18, 0xFF	; 255
   10d70:	89 54       	subi	r24, 0x49	; 73
   10d72:	96 4d       	sbci	r25, 0xD6	; 214
   10d74:	fc 01       	movw	r30, r24
   10d76:	20 83       	st	Z, r18
   10d78:	89 81       	ldd	r24, Y+1	; 0x01
   10d7a:	ce df       	rcall	.-100    	; 0x10d18 <cpu_irq_restore>
   10d7c:	00 00       	nop
   10d7e:	0f 90       	pop	r0
   10d80:	0f 90       	pop	r0
   10d82:	df 91       	pop	r29
   10d84:	cf 91       	pop	r28
   10d86:	08 95       	ret

00010d88 <adc_enable_clock>:
 * \param adc Pointer to ADC module.
 */
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
   10d88:	cf 93       	push	r28
   10d8a:	df 93       	push	r29
   10d8c:	1f 92       	push	r1
   10d8e:	1f 92       	push	r1
   10d90:	cd b7       	in	r28, 0x3d	; 61
   10d92:	de b7       	in	r29, 0x3e	; 62
   10d94:	89 83       	std	Y+1, r24	; 0x01
   10d96:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
   10d98:	89 81       	ldd	r24, Y+1	; 0x01
   10d9a:	9a 81       	ldd	r25, Y+2	; 0x02
   10d9c:	81 15       	cp	r24, r1
   10d9e:	92 40       	sbci	r25, 0x02	; 2
   10da0:	69 f4       	brne	.+26     	; 0x10dbc <adc_enable_clock+0x34>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
   10da2:	80 91 1d 25 	lds	r24, 0x251D	; 0x80251d <adca_enable_count>
   10da6:	91 e0       	ldi	r25, 0x01	; 1
   10da8:	98 0f       	add	r25, r24
   10daa:	90 93 1d 25 	sts	0x251D, r25	; 0x80251d <adca_enable_count>
   10dae:	88 23       	and	r24, r24
   10db0:	b1 f4       	brne	.+44     	; 0x10dde <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
   10db2:	62 e0       	ldi	r22, 0x02	; 2
   10db4:	81 e0       	ldi	r24, 0x01	; 1
   10db6:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
   10dba:	11 c0       	rjmp	.+34     	; 0x10dde <adc_enable_clock+0x56>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
   10dbc:	89 81       	ldd	r24, Y+1	; 0x01
   10dbe:	9a 81       	ldd	r25, Y+2	; 0x02
   10dc0:	80 34       	cpi	r24, 0x40	; 64
   10dc2:	92 40       	sbci	r25, 0x02	; 2
   10dc4:	61 f4       	brne	.+24     	; 0x10dde <adc_enable_clock+0x56>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
   10dc6:	80 91 1e 25 	lds	r24, 0x251E	; 0x80251e <adcb_enable_count>
   10dca:	91 e0       	ldi	r25, 0x01	; 1
   10dcc:	98 0f       	add	r25, r24
   10dce:	90 93 1e 25 	sts	0x251E, r25	; 0x80251e <adcb_enable_count>
   10dd2:	88 23       	and	r24, r24
   10dd4:	21 f4       	brne	.+8      	; 0x10dde <adc_enable_clock+0x56>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
   10dd6:	62 e0       	ldi	r22, 0x02	; 2
   10dd8:	82 e0       	ldi	r24, 0x02	; 2
   10dda:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
#endif

	{
		Assert(0);
	}
}
   10dde:	00 00       	nop
   10de0:	0f 90       	pop	r0
   10de2:	0f 90       	pop	r0
   10de4:	df 91       	pop	r29
   10de6:	cf 91       	pop	r28
   10de8:	08 95       	ret

00010dea <adc_disable_clock>:
 * \param adc Pointer to ADC module
 */
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
   10dea:	cf 93       	push	r28
   10dec:	df 93       	push	r29
   10dee:	1f 92       	push	r1
   10df0:	1f 92       	push	r1
   10df2:	cd b7       	in	r28, 0x3d	; 61
   10df4:	de b7       	in	r29, 0x3e	; 62
   10df6:	89 83       	std	Y+1, r24	; 0x01
   10df8:	9a 83       	std	Y+2, r25	; 0x02
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
   10dfa:	89 81       	ldd	r24, Y+1	; 0x01
   10dfc:	9a 81       	ldd	r25, Y+2	; 0x02
   10dfe:	81 15       	cp	r24, r1
   10e00:	92 40       	sbci	r25, 0x02	; 2
   10e02:	71 f4       	brne	.+28     	; 0x10e20 <adc_disable_clock+0x36>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
   10e04:	80 91 1d 25 	lds	r24, 0x251D	; 0x80251d <adca_enable_count>
   10e08:	81 50       	subi	r24, 0x01	; 1
   10e0a:	80 93 1d 25 	sts	0x251D, r24	; 0x80251d <adca_enable_count>
   10e0e:	80 91 1d 25 	lds	r24, 0x251D	; 0x80251d <adca_enable_count>
   10e12:	88 23       	and	r24, r24
   10e14:	b9 f4       	brne	.+46     	; 0x10e44 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
   10e16:	62 e0       	ldi	r22, 0x02	; 2
   10e18:	81 e0       	ldi	r24, 0x01	; 1
   10e1a:	0e 94 b5 9a 	call	0x1356a	; 0x1356a <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
   10e1e:	12 c0       	rjmp	.+36     	; 0x10e44 <adc_disable_clock+0x5a>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
   10e20:	89 81       	ldd	r24, Y+1	; 0x01
   10e22:	9a 81       	ldd	r25, Y+2	; 0x02
   10e24:	80 34       	cpi	r24, 0x40	; 64
   10e26:	92 40       	sbci	r25, 0x02	; 2
   10e28:	69 f4       	brne	.+26     	; 0x10e44 <adc_disable_clock+0x5a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
   10e2a:	80 91 1e 25 	lds	r24, 0x251E	; 0x80251e <adcb_enable_count>
   10e2e:	81 50       	subi	r24, 0x01	; 1
   10e30:	80 93 1e 25 	sts	0x251E, r24	; 0x80251e <adcb_enable_count>
   10e34:	80 91 1e 25 	lds	r24, 0x251E	; 0x80251e <adcb_enable_count>
   10e38:	88 23       	and	r24, r24
   10e3a:	21 f4       	brne	.+8      	; 0x10e44 <adc_disable_clock+0x5a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
   10e3c:	62 e0       	ldi	r22, 0x02	; 2
   10e3e:	82 e0       	ldi	r24, 0x02	; 2
   10e40:	0e 94 b5 9a 	call	0x1356a	; 0x1356a <sysclk_disable_module>
#endif

	{
		Assert(0);
	}
}
   10e44:	00 00       	nop
   10e46:	0f 90       	pop	r0
   10e48:	0f 90       	pop	r0
   10e4a:	df 91       	pop	r29
   10e4c:	cf 91       	pop	r28
   10e4e:	08 95       	ret

00010e50 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
   10e50:	cf 93       	push	r28
   10e52:	df 93       	push	r29
   10e54:	00 d0       	rcall	.+0      	; 0x10e56 <adc_enable+0x6>
   10e56:	cd b7       	in	r28, 0x3d	; 61
   10e58:	de b7       	in	r29, 0x3e	; 62
   10e5a:	8a 83       	std	Y+2, r24	; 0x02
   10e5c:	9b 83       	std	Y+3, r25	; 0x03
	irqflags_t flags = cpu_irq_save();
   10e5e:	4c df       	rcall	.-360    	; 0x10cf8 <cpu_irq_save>
   10e60:	89 83       	std	Y+1, r24	; 0x01
	adc_enable_clock(adc);
   10e62:	8a 81       	ldd	r24, Y+2	; 0x02
   10e64:	9b 81       	ldd	r25, Y+3	; 0x03
   10e66:	90 df       	rcall	.-224    	; 0x10d88 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
   10e68:	8a 81       	ldd	r24, Y+2	; 0x02
   10e6a:	9b 81       	ldd	r25, Y+3	; 0x03
   10e6c:	fc 01       	movw	r30, r24
   10e6e:	80 81       	ld	r24, Z
   10e70:	28 2f       	mov	r18, r24
   10e72:	21 60       	ori	r18, 0x01	; 1
   10e74:	8a 81       	ldd	r24, Y+2	; 0x02
   10e76:	9b 81       	ldd	r25, Y+3	; 0x03
   10e78:	fc 01       	movw	r30, r24
	cpu_irq_restore(flags);
   10e7a:	20 83       	st	Z, r18
   10e7c:	89 81       	ldd	r24, Y+1	; 0x01

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
   10e7e:	4c df       	rcall	.-360    	; 0x10d18 <cpu_irq_restore>
   10e80:	81 e0       	ldi	r24, 0x01	; 1
   10e82:	5a df       	rcall	.-332    	; 0x10d38 <sleepmgr_lock_mode>
}
   10e84:	00 00       	nop
   10e86:	23 96       	adiw	r28, 0x03	; 3
   10e88:	cd bf       	out	0x3d, r28	; 61
   10e8a:	de bf       	out	0x3e, r29	; 62
   10e8c:	df 91       	pop	r29
   10e8e:	cf 91       	pop	r28
   10e90:	08 95       	ret

00010e92 <ioport_configure_pin>:
		case PUMP:
			ioport_set_pin_low(_PUMP_RST);
			ioport_set_pin_high(_PUMP_RST);
			break;
	}
}
   10e92:	cf 93       	push	r28
   10e94:	df 93       	push	r29
   10e96:	cd b7       	in	r28, 0x3d	; 61
   10e98:	de b7       	in	r29, 0x3e	; 62
   10e9a:	27 97       	sbiw	r28, 0x07	; 7
   10e9c:	cd bf       	out	0x3d, r28	; 61
   10e9e:	de bf       	out	0x3e, r29	; 62
   10ea0:	8d 83       	std	Y+5, r24	; 0x05
   10ea2:	6e 83       	std	Y+6, r22	; 0x06
   10ea4:	7f 83       	std	Y+7, r23	; 0x07
   10ea6:	8d 81       	ldd	r24, Y+5	; 0x05
   10ea8:	89 83       	std	Y+1, r24	; 0x01
   10eaa:	89 81       	ldd	r24, Y+1	; 0x01
   10eac:	88 2f       	mov	r24, r24
   10eae:	90 e0       	ldi	r25, 0x00	; 0
   10eb0:	9c 01       	movw	r18, r24
   10eb2:	27 70       	andi	r18, 0x07	; 7
   10eb4:	33 27       	eor	r19, r19
   10eb6:	81 e0       	ldi	r24, 0x01	; 1
   10eb8:	90 e0       	ldi	r25, 0x00	; 0
   10eba:	02 c0       	rjmp	.+4      	; 0x10ec0 <ioport_configure_pin+0x2e>
   10ebc:	88 0f       	add	r24, r24
   10ebe:	99 1f       	adc	r25, r25
   10ec0:	2a 95       	dec	r18
   10ec2:	e2 f7       	brpl	.-8      	; 0x10ebc <ioport_configure_pin+0x2a>
   10ec4:	68 2f       	mov	r22, r24
   10ec6:	8d 81       	ldd	r24, Y+5	; 0x05
   10ec8:	8a 83       	std	Y+2, r24	; 0x02
   10eca:	8a 81       	ldd	r24, Y+2	; 0x02
   10ecc:	8b 83       	std	Y+3, r24	; 0x03
   10ece:	8b 81       	ldd	r24, Y+3	; 0x03
   10ed0:	86 95       	lsr	r24
   10ed2:	86 95       	lsr	r24
   10ed4:	86 95       	lsr	r24
   10ed6:	8c 83       	std	Y+4, r24	; 0x04
   10ed8:	8c 81       	ldd	r24, Y+4	; 0x04
   10eda:	88 2f       	mov	r24, r24
   10edc:	90 e0       	ldi	r25, 0x00	; 0
   10ede:	88 0f       	add	r24, r24
   10ee0:	99 1f       	adc	r25, r25
   10ee2:	82 95       	swap	r24
   10ee4:	92 95       	swap	r25
   10ee6:	90 7f       	andi	r25, 0xF0	; 240
   10ee8:	98 27       	eor	r25, r24
   10eea:	80 7f       	andi	r24, 0xF0	; 240
   10eec:	98 27       	eor	r25, r24
   10eee:	9a 5f       	subi	r25, 0xFA	; 250
   10ef0:	9c 01       	movw	r18, r24
   10ef2:	8e 81       	ldd	r24, Y+6	; 0x06
   10ef4:	9f 81       	ldd	r25, Y+7	; 0x07
   10ef6:	ac 01       	movw	r20, r24
   10ef8:	c9 01       	movw	r24, r18
   10efa:	0e 94 89 97 	call	0x12f12	; 0x12f12 <ioport_configure_port_pin>
   10efe:	00 00       	nop
   10f00:	27 96       	adiw	r28, 0x07	; 7
   10f02:	cd bf       	out	0x3d, r28	; 61
   10f04:	de bf       	out	0x3e, r29	; 62
   10f06:	df 91       	pop	r29
   10f08:	cf 91       	pop	r28
   10f0a:	08 95       	ret

00010f0c <ioport_set_pin_low>:
   10f0c:	cf 93       	push	r28
   10f0e:	df 93       	push	r29
   10f10:	cd b7       	in	r28, 0x3d	; 61
   10f12:	de b7       	in	r29, 0x3e	; 62
   10f14:	2a 97       	sbiw	r28, 0x0a	; 10
   10f16:	cd bf       	out	0x3d, r28	; 61
   10f18:	de bf       	out	0x3e, r29	; 62
   10f1a:	8a 87       	std	Y+10, r24	; 0x0a
   10f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
   10f1e:	89 83       	std	Y+1, r24	; 0x01
   10f20:	1a 82       	std	Y+2, r1	; 0x02
   10f22:	89 81       	ldd	r24, Y+1	; 0x01
   10f24:	8b 83       	std	Y+3, r24	; 0x03
   10f26:	8b 81       	ldd	r24, Y+3	; 0x03
   10f28:	8c 83       	std	Y+4, r24	; 0x04
   10f2a:	8c 81       	ldd	r24, Y+4	; 0x04
   10f2c:	86 95       	lsr	r24
   10f2e:	86 95       	lsr	r24
   10f30:	86 95       	lsr	r24
   10f32:	8d 83       	std	Y+5, r24	; 0x05
   10f34:	8d 81       	ldd	r24, Y+5	; 0x05
   10f36:	88 2f       	mov	r24, r24
   10f38:	90 e0       	ldi	r25, 0x00	; 0
   10f3a:	88 0f       	add	r24, r24
   10f3c:	99 1f       	adc	r25, r25
   10f3e:	82 95       	swap	r24
   10f40:	92 95       	swap	r25
   10f42:	90 7f       	andi	r25, 0xF0	; 240
   10f44:	98 27       	eor	r25, r24
   10f46:	80 7f       	andi	r24, 0xF0	; 240
   10f48:	98 27       	eor	r25, r24
   10f4a:	9a 5f       	subi	r25, 0xFA	; 250
   10f4c:	8e 83       	std	Y+6, r24	; 0x06
   10f4e:	9f 83       	std	Y+7, r25	; 0x07
   10f50:	8a 81       	ldd	r24, Y+2	; 0x02
   10f52:	88 23       	and	r24, r24
   10f54:	a9 f0       	breq	.+42     	; 0x10f80 <ioport_set_pin_low+0x74>
   10f56:	89 81       	ldd	r24, Y+1	; 0x01
   10f58:	88 87       	std	Y+8, r24	; 0x08
   10f5a:	88 85       	ldd	r24, Y+8	; 0x08
   10f5c:	88 2f       	mov	r24, r24
   10f5e:	90 e0       	ldi	r25, 0x00	; 0
   10f60:	9c 01       	movw	r18, r24
   10f62:	27 70       	andi	r18, 0x07	; 7
   10f64:	33 27       	eor	r19, r19
   10f66:	81 e0       	ldi	r24, 0x01	; 1
   10f68:	90 e0       	ldi	r25, 0x00	; 0
   10f6a:	02 c0       	rjmp	.+4      	; 0x10f70 <ioport_set_pin_low+0x64>
   10f6c:	88 0f       	add	r24, r24
   10f6e:	99 1f       	adc	r25, r25
   10f70:	2a 95       	dec	r18
   10f72:	e2 f7       	brpl	.-8      	; 0x10f6c <ioport_set_pin_low+0x60>
   10f74:	28 2f       	mov	r18, r24
   10f76:	8e 81       	ldd	r24, Y+6	; 0x06
   10f78:	9f 81       	ldd	r25, Y+7	; 0x07
   10f7a:	fc 01       	movw	r30, r24
   10f7c:	25 83       	std	Z+5, r18	; 0x05
   10f7e:	14 c0       	rjmp	.+40     	; 0x10fa8 <ioport_set_pin_low+0x9c>
   10f80:	89 81       	ldd	r24, Y+1	; 0x01
   10f82:	89 87       	std	Y+9, r24	; 0x09
   10f84:	89 85       	ldd	r24, Y+9	; 0x09
   10f86:	88 2f       	mov	r24, r24
   10f88:	90 e0       	ldi	r25, 0x00	; 0
   10f8a:	9c 01       	movw	r18, r24
   10f8c:	27 70       	andi	r18, 0x07	; 7
   10f8e:	33 27       	eor	r19, r19
   10f90:	81 e0       	ldi	r24, 0x01	; 1
   10f92:	90 e0       	ldi	r25, 0x00	; 0
   10f94:	02 c0       	rjmp	.+4      	; 0x10f9a <ioport_set_pin_low+0x8e>
   10f96:	88 0f       	add	r24, r24
   10f98:	99 1f       	adc	r25, r25
   10f9a:	2a 95       	dec	r18
   10f9c:	e2 f7       	brpl	.-8      	; 0x10f96 <ioport_set_pin_low+0x8a>
   10f9e:	28 2f       	mov	r18, r24
   10fa0:	8e 81       	ldd	r24, Y+6	; 0x06
   10fa2:	9f 81       	ldd	r25, Y+7	; 0x07
   10fa4:	fc 01       	movw	r30, r24
   10fa6:	26 83       	std	Z+6, r18	; 0x06
   10fa8:	00 00       	nop
   10faa:	2a 96       	adiw	r28, 0x0a	; 10
   10fac:	cd bf       	out	0x3d, r28	; 61
   10fae:	de bf       	out	0x3e, r29	; 62
   10fb0:	df 91       	pop	r29
   10fb2:	cf 91       	pop	r28
   10fb4:	08 95       	ret

00010fb6 <ioport_set_pin_high>:
   10fb6:	cf 93       	push	r28
   10fb8:	df 93       	push	r29
   10fba:	cd b7       	in	r28, 0x3d	; 61
   10fbc:	de b7       	in	r29, 0x3e	; 62
   10fbe:	2a 97       	sbiw	r28, 0x0a	; 10
   10fc0:	cd bf       	out	0x3d, r28	; 61
   10fc2:	de bf       	out	0x3e, r29	; 62
   10fc4:	8a 87       	std	Y+10, r24	; 0x0a
   10fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
   10fc8:	89 83       	std	Y+1, r24	; 0x01
   10fca:	81 e0       	ldi	r24, 0x01	; 1
   10fcc:	8a 83       	std	Y+2, r24	; 0x02
   10fce:	89 81       	ldd	r24, Y+1	; 0x01
   10fd0:	8b 83       	std	Y+3, r24	; 0x03
   10fd2:	8b 81       	ldd	r24, Y+3	; 0x03
   10fd4:	8c 83       	std	Y+4, r24	; 0x04
   10fd6:	8c 81       	ldd	r24, Y+4	; 0x04
   10fd8:	86 95       	lsr	r24
   10fda:	86 95       	lsr	r24
   10fdc:	86 95       	lsr	r24
   10fde:	8d 83       	std	Y+5, r24	; 0x05
   10fe0:	8d 81       	ldd	r24, Y+5	; 0x05
   10fe2:	88 2f       	mov	r24, r24
   10fe4:	90 e0       	ldi	r25, 0x00	; 0
   10fe6:	88 0f       	add	r24, r24
   10fe8:	99 1f       	adc	r25, r25
   10fea:	82 95       	swap	r24
   10fec:	92 95       	swap	r25
   10fee:	90 7f       	andi	r25, 0xF0	; 240
   10ff0:	98 27       	eor	r25, r24
   10ff2:	80 7f       	andi	r24, 0xF0	; 240
   10ff4:	98 27       	eor	r25, r24
   10ff6:	9a 5f       	subi	r25, 0xFA	; 250
   10ff8:	8e 83       	std	Y+6, r24	; 0x06
   10ffa:	9f 83       	std	Y+7, r25	; 0x07
   10ffc:	8a 81       	ldd	r24, Y+2	; 0x02
   10ffe:	88 23       	and	r24, r24
   11000:	a9 f0       	breq	.+42     	; 0x1102c <ioport_set_pin_high+0x76>
   11002:	89 81       	ldd	r24, Y+1	; 0x01
   11004:	88 87       	std	Y+8, r24	; 0x08
   11006:	88 85       	ldd	r24, Y+8	; 0x08
   11008:	88 2f       	mov	r24, r24
   1100a:	90 e0       	ldi	r25, 0x00	; 0
   1100c:	9c 01       	movw	r18, r24
   1100e:	27 70       	andi	r18, 0x07	; 7
   11010:	33 27       	eor	r19, r19
   11012:	81 e0       	ldi	r24, 0x01	; 1
   11014:	90 e0       	ldi	r25, 0x00	; 0
   11016:	02 c0       	rjmp	.+4      	; 0x1101c <ioport_set_pin_high+0x66>
   11018:	88 0f       	add	r24, r24
   1101a:	99 1f       	adc	r25, r25
   1101c:	2a 95       	dec	r18
   1101e:	e2 f7       	brpl	.-8      	; 0x11018 <ioport_set_pin_high+0x62>
   11020:	28 2f       	mov	r18, r24
   11022:	8e 81       	ldd	r24, Y+6	; 0x06
   11024:	9f 81       	ldd	r25, Y+7	; 0x07
   11026:	fc 01       	movw	r30, r24
   11028:	25 83       	std	Z+5, r18	; 0x05
   1102a:	14 c0       	rjmp	.+40     	; 0x11054 <ioport_set_pin_high+0x9e>
   1102c:	89 81       	ldd	r24, Y+1	; 0x01
   1102e:	89 87       	std	Y+9, r24	; 0x09
   11030:	89 85       	ldd	r24, Y+9	; 0x09
   11032:	88 2f       	mov	r24, r24
   11034:	90 e0       	ldi	r25, 0x00	; 0
   11036:	9c 01       	movw	r18, r24
   11038:	27 70       	andi	r18, 0x07	; 7
   1103a:	33 27       	eor	r19, r19
   1103c:	81 e0       	ldi	r24, 0x01	; 1
   1103e:	90 e0       	ldi	r25, 0x00	; 0
   11040:	02 c0       	rjmp	.+4      	; 0x11046 <ioport_set_pin_high+0x90>
   11042:	88 0f       	add	r24, r24
   11044:	99 1f       	adc	r25, r25
   11046:	2a 95       	dec	r18
   11048:	e2 f7       	brpl	.-8      	; 0x11042 <ioport_set_pin_high+0x8c>
   1104a:	28 2f       	mov	r18, r24
   1104c:	8e 81       	ldd	r24, Y+6	; 0x06
   1104e:	9f 81       	ldd	r25, Y+7	; 0x07
   11050:	fc 01       	movw	r30, r24
   11052:	26 83       	std	Z+6, r18	; 0x06
   11054:	00 00       	nop
   11056:	2a 96       	adiw	r28, 0x0a	; 10
   11058:	cd bf       	out	0x3d, r28	; 61
   1105a:	de bf       	out	0x3e, r29	; 62
   1105c:	df 91       	pop	r29
   1105e:	cf 91       	pop	r28
   11060:	08 95       	ret

00011062 <ioport_get_pin_level>:
   11062:	cf 93       	push	r28
   11064:	df 93       	push	r29
   11066:	cd b7       	in	r28, 0x3d	; 61
   11068:	de b7       	in	r29, 0x3e	; 62
   1106a:	28 97       	sbiw	r28, 0x08	; 8
   1106c:	cd bf       	out	0x3d, r28	; 61
   1106e:	de bf       	out	0x3e, r29	; 62
   11070:	88 87       	std	Y+8, r24	; 0x08
   11072:	88 85       	ldd	r24, Y+8	; 0x08
   11074:	89 83       	std	Y+1, r24	; 0x01
   11076:	89 81       	ldd	r24, Y+1	; 0x01
   11078:	8a 83       	std	Y+2, r24	; 0x02
   1107a:	8a 81       	ldd	r24, Y+2	; 0x02
   1107c:	8b 83       	std	Y+3, r24	; 0x03
   1107e:	8b 81       	ldd	r24, Y+3	; 0x03
   11080:	86 95       	lsr	r24
   11082:	86 95       	lsr	r24
   11084:	86 95       	lsr	r24
   11086:	8c 83       	std	Y+4, r24	; 0x04
   11088:	8c 81       	ldd	r24, Y+4	; 0x04
   1108a:	88 2f       	mov	r24, r24
   1108c:	90 e0       	ldi	r25, 0x00	; 0
   1108e:	88 0f       	add	r24, r24
   11090:	99 1f       	adc	r25, r25
   11092:	82 95       	swap	r24
   11094:	92 95       	swap	r25
   11096:	90 7f       	andi	r25, 0xF0	; 240
   11098:	98 27       	eor	r25, r24
   1109a:	80 7f       	andi	r24, 0xF0	; 240
   1109c:	98 27       	eor	r25, r24
   1109e:	9a 5f       	subi	r25, 0xFA	; 250
   110a0:	8d 83       	std	Y+5, r24	; 0x05
   110a2:	9e 83       	std	Y+6, r25	; 0x06
   110a4:	8d 81       	ldd	r24, Y+5	; 0x05
   110a6:	9e 81       	ldd	r25, Y+6	; 0x06
   110a8:	fc 01       	movw	r30, r24
   110aa:	40 85       	ldd	r20, Z+8	; 0x08
   110ac:	89 81       	ldd	r24, Y+1	; 0x01
   110ae:	8f 83       	std	Y+7, r24	; 0x07
   110b0:	8f 81       	ldd	r24, Y+7	; 0x07
   110b2:	88 2f       	mov	r24, r24
   110b4:	90 e0       	ldi	r25, 0x00	; 0
   110b6:	9c 01       	movw	r18, r24
   110b8:	27 70       	andi	r18, 0x07	; 7
   110ba:	33 27       	eor	r19, r19
   110bc:	81 e0       	ldi	r24, 0x01	; 1
   110be:	90 e0       	ldi	r25, 0x00	; 0
   110c0:	02 c0       	rjmp	.+4      	; 0x110c6 <ioport_get_pin_level+0x64>
   110c2:	88 0f       	add	r24, r24
   110c4:	99 1f       	adc	r25, r25
   110c6:	2a 95       	dec	r18
   110c8:	e2 f7       	brpl	.-8      	; 0x110c2 <ioport_get_pin_level+0x60>
   110ca:	94 2f       	mov	r25, r20
   110cc:	98 23       	and	r25, r24
   110ce:	81 e0       	ldi	r24, 0x01	; 1
   110d0:	99 23       	and	r25, r25
   110d2:	09 f4       	brne	.+2      	; 0x110d6 <ioport_get_pin_level+0x74>
   110d4:	80 e0       	ldi	r24, 0x00	; 0
   110d6:	28 96       	adiw	r28, 0x08	; 8
   110d8:	cd bf       	out	0x3d, r28	; 61
   110da:	de bf       	out	0x3e, r29	; 62
   110dc:	df 91       	pop	r29
   110de:	cf 91       	pop	r28
   110e0:	08 95       	ret

000110e2 <osc_get_rate>:
   110e2:	cf 93       	push	r28
   110e4:	df 93       	push	r29
   110e6:	1f 92       	push	r1
   110e8:	cd b7       	in	r28, 0x3d	; 61
   110ea:	de b7       	in	r29, 0x3e	; 62
   110ec:	89 83       	std	Y+1, r24	; 0x01
   110ee:	89 81       	ldd	r24, Y+1	; 0x01
   110f0:	88 2f       	mov	r24, r24
   110f2:	90 e0       	ldi	r25, 0x00	; 0
   110f4:	82 30       	cpi	r24, 0x02	; 2
   110f6:	91 05       	cpc	r25, r1
   110f8:	89 f0       	breq	.+34     	; 0x1111c <osc_get_rate+0x3a>
   110fa:	83 30       	cpi	r24, 0x03	; 3
   110fc:	91 05       	cpc	r25, r1
   110fe:	1c f4       	brge	.+6      	; 0x11106 <osc_get_rate+0x24>
   11100:	01 97       	sbiw	r24, 0x01	; 1
   11102:	39 f0       	breq	.+14     	; 0x11112 <osc_get_rate+0x30>
   11104:	1a c0       	rjmp	.+52     	; 0x1113a <osc_get_rate+0x58>
   11106:	84 30       	cpi	r24, 0x04	; 4
   11108:	91 05       	cpc	r25, r1
   1110a:	69 f0       	breq	.+26     	; 0x11126 <osc_get_rate+0x44>
   1110c:	08 97       	sbiw	r24, 0x08	; 8
   1110e:	81 f0       	breq	.+32     	; 0x11130 <osc_get_rate+0x4e>
   11110:	14 c0       	rjmp	.+40     	; 0x1113a <osc_get_rate+0x58>
   11112:	80 e8       	ldi	r24, 0x80	; 128
   11114:	94 e8       	ldi	r25, 0x84	; 132
   11116:	ae e1       	ldi	r26, 0x1E	; 30
   11118:	b0 e0       	ldi	r27, 0x00	; 0
   1111a:	12 c0       	rjmp	.+36     	; 0x11140 <osc_get_rate+0x5e>
   1111c:	80 e0       	ldi	r24, 0x00	; 0
   1111e:	9c e6       	ldi	r25, 0x6C	; 108
   11120:	ac ed       	ldi	r26, 0xDC	; 220
   11122:	b2 e0       	ldi	r27, 0x02	; 2
   11124:	0d c0       	rjmp	.+26     	; 0x11140 <osc_get_rate+0x5e>
   11126:	80 e0       	ldi	r24, 0x00	; 0
   11128:	90 e8       	ldi	r25, 0x80	; 128
   1112a:	a0 e0       	ldi	r26, 0x00	; 0
   1112c:	b0 e0       	ldi	r27, 0x00	; 0
   1112e:	08 c0       	rjmp	.+16     	; 0x11140 <osc_get_rate+0x5e>
   11130:	80 e0       	ldi	r24, 0x00	; 0
   11132:	94 e2       	ldi	r25, 0x24	; 36
   11134:	a4 ef       	ldi	r26, 0xF4	; 244
   11136:	b0 e0       	ldi	r27, 0x00	; 0
   11138:	03 c0       	rjmp	.+6      	; 0x11140 <osc_get_rate+0x5e>
   1113a:	80 e0       	ldi	r24, 0x00	; 0
   1113c:	90 e0       	ldi	r25, 0x00	; 0
   1113e:	dc 01       	movw	r26, r24
   11140:	bc 01       	movw	r22, r24
   11142:	cd 01       	movw	r24, r26
   11144:	0f 90       	pop	r0
   11146:	df 91       	pop	r29
   11148:	cf 91       	pop	r28
   1114a:	08 95       	ret

0001114c <pll_get_default_rate_priv>:
   1114c:	cf 93       	push	r28
   1114e:	df 93       	push	r29
   11150:	cd b7       	in	r28, 0x3d	; 61
   11152:	de b7       	in	r29, 0x3e	; 62
   11154:	29 97       	sbiw	r28, 0x09	; 9
   11156:	cd bf       	out	0x3d, r28	; 61
   11158:	de bf       	out	0x3e, r29	; 62
   1115a:	8d 83       	std	Y+5, r24	; 0x05
   1115c:	6e 83       	std	Y+6, r22	; 0x06
   1115e:	7f 83       	std	Y+7, r23	; 0x07
   11160:	48 87       	std	Y+8, r20	; 0x08
   11162:	59 87       	std	Y+9, r21	; 0x09
   11164:	8d 81       	ldd	r24, Y+5	; 0x05
   11166:	88 2f       	mov	r24, r24
   11168:	90 e0       	ldi	r25, 0x00	; 0
   1116a:	80 38       	cpi	r24, 0x80	; 128
   1116c:	91 05       	cpc	r25, r1
   1116e:	79 f0       	breq	.+30     	; 0x1118e <pll_get_default_rate_priv+0x42>
   11170:	80 3c       	cpi	r24, 0xC0	; 192
   11172:	91 05       	cpc	r25, r1
   11174:	a9 f0       	breq	.+42     	; 0x111a0 <pll_get_default_rate_priv+0x54>
   11176:	89 2b       	or	r24, r25
   11178:	09 f0       	breq	.+2      	; 0x1117c <pll_get_default_rate_priv+0x30>
   1117a:	1b c0       	rjmp	.+54     	; 0x111b2 <pll_get_default_rate_priv+0x66>
   1117c:	80 e8       	ldi	r24, 0x80	; 128
   1117e:	94 e8       	ldi	r25, 0x84	; 132
   11180:	ae e1       	ldi	r26, 0x1E	; 30
   11182:	b0 e0       	ldi	r27, 0x00	; 0
   11184:	89 83       	std	Y+1, r24	; 0x01
   11186:	9a 83       	std	Y+2, r25	; 0x02
   11188:	ab 83       	std	Y+3, r26	; 0x03
   1118a:	bc 83       	std	Y+4, r27	; 0x04
   1118c:	12 c0       	rjmp	.+36     	; 0x111b2 <pll_get_default_rate_priv+0x66>
   1118e:	80 e0       	ldi	r24, 0x00	; 0
   11190:	9b e1       	ldi	r25, 0x1B	; 27
   11192:	a7 eb       	ldi	r26, 0xB7	; 183
   11194:	b0 e0       	ldi	r27, 0x00	; 0
   11196:	89 83       	std	Y+1, r24	; 0x01
   11198:	9a 83       	std	Y+2, r25	; 0x02
   1119a:	ab 83       	std	Y+3, r26	; 0x03
   1119c:	bc 83       	std	Y+4, r27	; 0x04
   1119e:	09 c0       	rjmp	.+18     	; 0x111b2 <pll_get_default_rate_priv+0x66>
   111a0:	88 e0       	ldi	r24, 0x08	; 8
   111a2:	9f df       	rcall	.-194    	; 0x110e2 <osc_get_rate>
   111a4:	dc 01       	movw	r26, r24
   111a6:	cb 01       	movw	r24, r22
   111a8:	89 83       	std	Y+1, r24	; 0x01
   111aa:	9a 83       	std	Y+2, r25	; 0x02
   111ac:	ab 83       	std	Y+3, r26	; 0x03
   111ae:	bc 83       	std	Y+4, r27	; 0x04
   111b0:	00 00       	nop
   111b2:	8e 81       	ldd	r24, Y+6	; 0x06
   111b4:	9f 81       	ldd	r25, Y+7	; 0x07
   111b6:	cc 01       	movw	r24, r24
   111b8:	a0 e0       	ldi	r26, 0x00	; 0
   111ba:	b0 e0       	ldi	r27, 0x00	; 0
   111bc:	29 81       	ldd	r18, Y+1	; 0x01
   111be:	3a 81       	ldd	r19, Y+2	; 0x02
   111c0:	4b 81       	ldd	r20, Y+3	; 0x03
   111c2:	5c 81       	ldd	r21, Y+4	; 0x04
   111c4:	bc 01       	movw	r22, r24
   111c6:	cd 01       	movw	r24, r26
   111c8:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <__mulsi3>
   111cc:	dc 01       	movw	r26, r24
   111ce:	cb 01       	movw	r24, r22
   111d0:	89 83       	std	Y+1, r24	; 0x01
   111d2:	9a 83       	std	Y+2, r25	; 0x02
   111d4:	ab 83       	std	Y+3, r26	; 0x03
   111d6:	bc 83       	std	Y+4, r27	; 0x04
   111d8:	89 81       	ldd	r24, Y+1	; 0x01
   111da:	9a 81       	ldd	r25, Y+2	; 0x02
   111dc:	ab 81       	ldd	r26, Y+3	; 0x03
   111de:	bc 81       	ldd	r27, Y+4	; 0x04
   111e0:	bc 01       	movw	r22, r24
   111e2:	cd 01       	movw	r24, r26
   111e4:	29 96       	adiw	r28, 0x09	; 9
   111e6:	cd bf       	out	0x3d, r28	; 61
   111e8:	de bf       	out	0x3e, r29	; 62
   111ea:	df 91       	pop	r29
   111ec:	cf 91       	pop	r28
   111ee:	08 95       	ret

000111f0 <sysclk_get_main_hz>:
   111f0:	cf 93       	push	r28
   111f2:	df 93       	push	r29
   111f4:	cd b7       	in	r28, 0x3d	; 61
   111f6:	de b7       	in	r29, 0x3e	; 62
   111f8:	41 e0       	ldi	r20, 0x01	; 1
   111fa:	50 e0       	ldi	r21, 0x00	; 0
   111fc:	62 e0       	ldi	r22, 0x02	; 2
   111fe:	70 e0       	ldi	r23, 0x00	; 0
   11200:	80 ec       	ldi	r24, 0xC0	; 192
   11202:	a4 df       	rcall	.-184    	; 0x1114c <pll_get_default_rate_priv>
   11204:	dc 01       	movw	r26, r24
   11206:	cb 01       	movw	r24, r22
   11208:	bc 01       	movw	r22, r24
   1120a:	cd 01       	movw	r24, r26
   1120c:	df 91       	pop	r29
   1120e:	cf 91       	pop	r28
   11210:	08 95       	ret

00011212 <sysclk_get_per4_hz>:
   11212:	cf 93       	push	r28
   11214:	df 93       	push	r29
   11216:	1f 92       	push	r1
   11218:	cd b7       	in	r28, 0x3d	; 61
   1121a:	de b7       	in	r29, 0x3e	; 62
   1121c:	19 82       	std	Y+1, r1	; 0x01
   1121e:	e8 df       	rcall	.-48     	; 0x111f0 <sysclk_get_main_hz>
   11220:	dc 01       	movw	r26, r24
   11222:	cb 01       	movw	r24, r22
   11224:	29 81       	ldd	r18, Y+1	; 0x01
   11226:	22 2f       	mov	r18, r18
   11228:	30 e0       	ldi	r19, 0x00	; 0
   1122a:	04 c0       	rjmp	.+8      	; 0x11234 <sysclk_get_per4_hz+0x22>
   1122c:	b6 95       	lsr	r27
   1122e:	a7 95       	ror	r26
   11230:	97 95       	ror	r25
   11232:	87 95       	ror	r24
   11234:	2a 95       	dec	r18
   11236:	d2 f7       	brpl	.-12     	; 0x1122c <sysclk_get_per4_hz+0x1a>
   11238:	bc 01       	movw	r22, r24
   1123a:	cd 01       	movw	r24, r26
   1123c:	0f 90       	pop	r0
   1123e:	df 91       	pop	r29
   11240:	cf 91       	pop	r28
   11242:	08 95       	ret

00011244 <sysclk_get_per2_hz>:
   11244:	cf 93       	push	r28
   11246:	df 93       	push	r29
   11248:	cd b7       	in	r28, 0x3d	; 61
   1124a:	de b7       	in	r29, 0x3e	; 62
   1124c:	e2 df       	rcall	.-60     	; 0x11212 <sysclk_get_per4_hz>
   1124e:	dc 01       	movw	r26, r24
   11250:	cb 01       	movw	r24, r22
   11252:	bc 01       	movw	r22, r24
   11254:	cd 01       	movw	r24, r26
   11256:	df 91       	pop	r29
   11258:	cf 91       	pop	r28
   1125a:	08 95       	ret

0001125c <sysclk_get_per_hz>:
   1125c:	cf 93       	push	r28
   1125e:	df 93       	push	r29
   11260:	cd b7       	in	r28, 0x3d	; 61
   11262:	de b7       	in	r29, 0x3e	; 62
   11264:	ef df       	rcall	.-34     	; 0x11244 <sysclk_get_per2_hz>
   11266:	dc 01       	movw	r26, r24
   11268:	cb 01       	movw	r24, r22
   1126a:	bc 01       	movw	r22, r24
   1126c:	cd 01       	movw	r24, r26
   1126e:	df 91       	pop	r29
   11270:	cf 91       	pop	r28
   11272:	08 95       	ret

00011274 <sysclk_get_cpu_hz>:
   11274:	cf 93       	push	r28
   11276:	df 93       	push	r29
   11278:	cd b7       	in	r28, 0x3d	; 61
   1127a:	de b7       	in	r29, 0x3e	; 62
   1127c:	ef df       	rcall	.-34     	; 0x1125c <sysclk_get_per_hz>
   1127e:	dc 01       	movw	r26, r24
   11280:	cb 01       	movw	r24, r22
   11282:	bc 01       	movw	r22, r24
   11284:	cd 01       	movw	r24, r26
   11286:	df 91       	pop	r29
   11288:	cf 91       	pop	r28
   1128a:	08 95       	ret

0001128c <tc_write_cc_buffer>:
   1128c:	cf 93       	push	r28
   1128e:	df 93       	push	r29
   11290:	cd b7       	in	r28, 0x3d	; 61
   11292:	de b7       	in	r29, 0x3e	; 62
   11294:	25 97       	sbiw	r28, 0x05	; 5
   11296:	cd bf       	out	0x3d, r28	; 61
   11298:	de bf       	out	0x3e, r29	; 62
   1129a:	89 83       	std	Y+1, r24	; 0x01
   1129c:	9a 83       	std	Y+2, r25	; 0x02
   1129e:	6b 83       	std	Y+3, r22	; 0x03
   112a0:	4c 83       	std	Y+4, r20	; 0x04
   112a2:	5d 83       	std	Y+5, r21	; 0x05
   112a4:	89 81       	ldd	r24, Y+1	; 0x01
   112a6:	9a 81       	ldd	r25, Y+2	; 0x02
   112a8:	80 74       	andi	r24, 0x40	; 64
   112aa:	99 27       	eor	r25, r25
   112ac:	89 2b       	or	r24, r25
   112ae:	99 f5       	brne	.+102    	; 0x11316 <tc_write_cc_buffer+0x8a>
   112b0:	8b 81       	ldd	r24, Y+3	; 0x03
   112b2:	88 2f       	mov	r24, r24
   112b4:	90 e0       	ldi	r25, 0x00	; 0
   112b6:	82 30       	cpi	r24, 0x02	; 2
   112b8:	91 05       	cpc	r25, r1
   112ba:	a1 f0       	breq	.+40     	; 0x112e4 <tc_write_cc_buffer+0x58>
   112bc:	83 30       	cpi	r24, 0x03	; 3
   112be:	91 05       	cpc	r25, r1
   112c0:	1c f4       	brge	.+6      	; 0x112c8 <tc_write_cc_buffer+0x3c>
   112c2:	01 97       	sbiw	r24, 0x01	; 1
   112c4:	39 f0       	breq	.+14     	; 0x112d4 <tc_write_cc_buffer+0x48>
   112c6:	46 c0       	rjmp	.+140    	; 0x11354 <tc_write_cc_buffer+0xc8>
   112c8:	83 30       	cpi	r24, 0x03	; 3
   112ca:	91 05       	cpc	r25, r1
   112cc:	99 f0       	breq	.+38     	; 0x112f4 <tc_write_cc_buffer+0x68>
   112ce:	04 97       	sbiw	r24, 0x04	; 4
   112d0:	c9 f0       	breq	.+50     	; 0x11304 <tc_write_cc_buffer+0x78>
   112d2:	40 c0       	rjmp	.+128    	; 0x11354 <tc_write_cc_buffer+0xc8>
   112d4:	89 81       	ldd	r24, Y+1	; 0x01
   112d6:	9a 81       	ldd	r25, Y+2	; 0x02
   112d8:	2c 81       	ldd	r18, Y+4	; 0x04
   112da:	3d 81       	ldd	r19, Y+5	; 0x05
   112dc:	fc 01       	movw	r30, r24
   112de:	20 af       	std	Z+56, r18	; 0x38
   112e0:	31 af       	std	Z+57, r19	; 0x39
   112e2:	38 c0       	rjmp	.+112    	; 0x11354 <tc_write_cc_buffer+0xc8>
   112e4:	89 81       	ldd	r24, Y+1	; 0x01
   112e6:	9a 81       	ldd	r25, Y+2	; 0x02
   112e8:	2c 81       	ldd	r18, Y+4	; 0x04
   112ea:	3d 81       	ldd	r19, Y+5	; 0x05
   112ec:	fc 01       	movw	r30, r24
   112ee:	22 af       	std	Z+58, r18	; 0x3a
   112f0:	33 af       	std	Z+59, r19	; 0x3b
   112f2:	30 c0       	rjmp	.+96     	; 0x11354 <tc_write_cc_buffer+0xc8>
   112f4:	89 81       	ldd	r24, Y+1	; 0x01
   112f6:	9a 81       	ldd	r25, Y+2	; 0x02
   112f8:	2c 81       	ldd	r18, Y+4	; 0x04
   112fa:	3d 81       	ldd	r19, Y+5	; 0x05
   112fc:	fc 01       	movw	r30, r24
   112fe:	24 af       	std	Z+60, r18	; 0x3c
   11300:	35 af       	std	Z+61, r19	; 0x3d
   11302:	28 c0       	rjmp	.+80     	; 0x11354 <tc_write_cc_buffer+0xc8>
   11304:	89 81       	ldd	r24, Y+1	; 0x01
   11306:	9a 81       	ldd	r25, Y+2	; 0x02
   11308:	2c 81       	ldd	r18, Y+4	; 0x04
   1130a:	3d 81       	ldd	r19, Y+5	; 0x05
   1130c:	fc 01       	movw	r30, r24
   1130e:	26 af       	std	Z+62, r18	; 0x3e
   11310:	37 af       	std	Z+63, r19	; 0x3f
   11312:	00 00       	nop
   11314:	1f c0       	rjmp	.+62     	; 0x11354 <tc_write_cc_buffer+0xc8>
   11316:	89 81       	ldd	r24, Y+1	; 0x01
   11318:	9a 81       	ldd	r25, Y+2	; 0x02
   1131a:	80 74       	andi	r24, 0x40	; 64
   1131c:	99 27       	eor	r25, r25
   1131e:	89 2b       	or	r24, r25
   11320:	c9 f0       	breq	.+50     	; 0x11354 <tc_write_cc_buffer+0xc8>
   11322:	8b 81       	ldd	r24, Y+3	; 0x03
   11324:	88 2f       	mov	r24, r24
   11326:	90 e0       	ldi	r25, 0x00	; 0
   11328:	81 30       	cpi	r24, 0x01	; 1
   1132a:	91 05       	cpc	r25, r1
   1132c:	19 f0       	breq	.+6      	; 0x11334 <tc_write_cc_buffer+0xa8>
   1132e:	02 97       	sbiw	r24, 0x02	; 2
   11330:	49 f0       	breq	.+18     	; 0x11344 <tc_write_cc_buffer+0xb8>
   11332:	10 c0       	rjmp	.+32     	; 0x11354 <tc_write_cc_buffer+0xc8>
   11334:	89 81       	ldd	r24, Y+1	; 0x01
   11336:	9a 81       	ldd	r25, Y+2	; 0x02
   11338:	2c 81       	ldd	r18, Y+4	; 0x04
   1133a:	3d 81       	ldd	r19, Y+5	; 0x05
   1133c:	fc 01       	movw	r30, r24
   1133e:	20 af       	std	Z+56, r18	; 0x38
   11340:	31 af       	std	Z+57, r19	; 0x39
   11342:	08 c0       	rjmp	.+16     	; 0x11354 <tc_write_cc_buffer+0xc8>
   11344:	89 81       	ldd	r24, Y+1	; 0x01
   11346:	9a 81       	ldd	r25, Y+2	; 0x02
   11348:	2c 81       	ldd	r18, Y+4	; 0x04
   1134a:	3d 81       	ldd	r19, Y+5	; 0x05
   1134c:	fc 01       	movw	r30, r24
   1134e:	22 af       	std	Z+58, r18	; 0x3a
   11350:	33 af       	std	Z+59, r19	; 0x3b
   11352:	00 00       	nop
   11354:	25 96       	adiw	r28, 0x05	; 5
   11356:	cd bf       	out	0x3d, r28	; 61
   11358:	de bf       	out	0x3e, r29	; 62
   1135a:	df 91       	pop	r29
   1135c:	cf 91       	pop	r28
   1135e:	08 95       	ret

00011360 <pwm_set_duty_cycle_percent>:
   11360:	cf 93       	push	r28
   11362:	df 93       	push	r29
   11364:	00 d0       	rcall	.+0      	; 0x11366 <pwm_set_duty_cycle_percent+0x6>
   11366:	cd b7       	in	r28, 0x3d	; 61
   11368:	de b7       	in	r29, 0x3e	; 62
   1136a:	89 83       	std	Y+1, r24	; 0x01
   1136c:	9a 83       	std	Y+2, r25	; 0x02
   1136e:	6b 83       	std	Y+3, r22	; 0x03
   11370:	89 81       	ldd	r24, Y+1	; 0x01
   11372:	9a 81       	ldd	r25, Y+2	; 0x02
   11374:	fc 01       	movw	r30, r24
   11376:	85 81       	ldd	r24, Z+5	; 0x05
   11378:	96 81       	ldd	r25, Z+6	; 0x06
   1137a:	9c 01       	movw	r18, r24
   1137c:	40 e0       	ldi	r20, 0x00	; 0
   1137e:	50 e0       	ldi	r21, 0x00	; 0
   11380:	8b 81       	ldd	r24, Y+3	; 0x03
   11382:	88 2f       	mov	r24, r24
   11384:	90 e0       	ldi	r25, 0x00	; 0
   11386:	a0 e0       	ldi	r26, 0x00	; 0
   11388:	b0 e0       	ldi	r27, 0x00	; 0
   1138a:	bc 01       	movw	r22, r24
   1138c:	cd 01       	movw	r24, r26
   1138e:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <__mulsi3>
   11392:	dc 01       	movw	r26, r24
   11394:	cb 01       	movw	r24, r22
   11396:	24 e6       	ldi	r18, 0x64	; 100
   11398:	30 e0       	ldi	r19, 0x00	; 0
   1139a:	40 e0       	ldi	r20, 0x00	; 0
   1139c:	50 e0       	ldi	r21, 0x00	; 0
   1139e:	bc 01       	movw	r22, r24
   113a0:	cd 01       	movw	r24, r26
   113a2:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   113a6:	da 01       	movw	r26, r20
   113a8:	c9 01       	movw	r24, r18
   113aa:	9c 01       	movw	r18, r24
   113ac:	89 81       	ldd	r24, Y+1	; 0x01
   113ae:	9a 81       	ldd	r25, Y+2	; 0x02
   113b0:	fc 01       	movw	r30, r24
   113b2:	62 81       	ldd	r22, Z+2	; 0x02
   113b4:	89 81       	ldd	r24, Y+1	; 0x01
   113b6:	9a 81       	ldd	r25, Y+2	; 0x02
   113b8:	fc 01       	movw	r30, r24
   113ba:	80 81       	ld	r24, Z
   113bc:	91 81       	ldd	r25, Z+1	; 0x01
   113be:	a9 01       	movw	r20, r18
   113c0:	65 df       	rcall	.-310    	; 0x1128c <tc_write_cc_buffer>
   113c2:	00 00       	nop
   113c4:	23 96       	adiw	r28, 0x03	; 3
   113c6:	cd bf       	out	0x3d, r28	; 61
   113c8:	de bf       	out	0x3e, r29	; 62
   113ca:	df 91       	pop	r29
   113cc:	cf 91       	pop	r28
   113ce:	08 95       	ret

000113d0 <set_motor_step_resolution>:
   113d0:	cf 93       	push	r28
   113d2:	df 93       	push	r29
   113d4:	00 d0       	rcall	.+0      	; 0x113d6 <set_motor_step_resolution+0x6>
   113d6:	cd b7       	in	r28, 0x3d	; 61
   113d8:	de b7       	in	r29, 0x3e	; 62
   113da:	89 83       	std	Y+1, r24	; 0x01
   113dc:	9a 83       	std	Y+2, r25	; 0x02
   113de:	6b 83       	std	Y+3, r22	; 0x03
   113e0:	89 81       	ldd	r24, Y+1	; 0x01
   113e2:	9a 81       	ldd	r25, Y+2	; 0x02
   113e4:	2b 81       	ldd	r18, Y+3	; 0x03
   113e6:	fc 01       	movw	r30, r24
   113e8:	27 8f       	std	Z+31, r18	; 0x1f
   113ea:	89 81       	ldd	r24, Y+1	; 0x01
   113ec:	9a 81       	ldd	r25, Y+2	; 0x02
   113ee:	fc 01       	movw	r30, r24
   113f0:	87 8d       	ldd	r24, Z+31	; 0x1f
   113f2:	88 2f       	mov	r24, r24
   113f4:	90 e0       	ldi	r25, 0x00	; 0
   113f6:	84 30       	cpi	r24, 0x04	; 4
   113f8:	91 05       	cpc	r25, r1
   113fa:	19 f1       	breq	.+70     	; 0x11442 <set_motor_step_resolution+0x72>
   113fc:	80 31       	cpi	r24, 0x10	; 16
   113fe:	91 05       	cpc	r25, r1
   11400:	79 f1       	breq	.+94     	; 0x11460 <set_motor_step_resolution+0x90>
   11402:	02 97       	sbiw	r24, 0x02	; 2
   11404:	79 f0       	breq	.+30     	; 0x11424 <set_motor_step_resolution+0x54>
   11406:	89 81       	ldd	r24, Y+1	; 0x01
   11408:	9a 81       	ldd	r25, Y+2	; 0x02
   1140a:	8d 5b       	subi	r24, 0xBD	; 189
   1140c:	9f 4f       	sbci	r25, 0xFF	; 255
   1140e:	fc 01       	movw	r30, r24
   11410:	80 81       	ld	r24, Z
   11412:	7c dd       	rcall	.-1288   	; 0x10f0c <ioport_set_pin_low>
   11414:	89 81       	ldd	r24, Y+1	; 0x01
   11416:	9a 81       	ldd	r25, Y+2	; 0x02
   11418:	8e 5b       	subi	r24, 0xBE	; 190
   1141a:	9f 4f       	sbci	r25, 0xFF	; 255
   1141c:	fc 01       	movw	r30, r24
   1141e:	80 81       	ld	r24, Z
   11420:	75 dd       	rcall	.-1302   	; 0x10f0c <ioport_set_pin_low>
   11422:	2d c0       	rjmp	.+90     	; 0x1147e <set_motor_step_resolution+0xae>
   11424:	89 81       	ldd	r24, Y+1	; 0x01
   11426:	9a 81       	ldd	r25, Y+2	; 0x02
   11428:	8d 5b       	subi	r24, 0xBD	; 189
   1142a:	9f 4f       	sbci	r25, 0xFF	; 255
   1142c:	fc 01       	movw	r30, r24
   1142e:	80 81       	ld	r24, Z
   11430:	c2 dd       	rcall	.-1148   	; 0x10fb6 <ioport_set_pin_high>
   11432:	89 81       	ldd	r24, Y+1	; 0x01
   11434:	9a 81       	ldd	r25, Y+2	; 0x02
   11436:	8e 5b       	subi	r24, 0xBE	; 190
   11438:	9f 4f       	sbci	r25, 0xFF	; 255
   1143a:	fc 01       	movw	r30, r24
   1143c:	80 81       	ld	r24, Z
   1143e:	66 dd       	rcall	.-1332   	; 0x10f0c <ioport_set_pin_low>
   11440:	1e c0       	rjmp	.+60     	; 0x1147e <set_motor_step_resolution+0xae>
   11442:	89 81       	ldd	r24, Y+1	; 0x01
   11444:	9a 81       	ldd	r25, Y+2	; 0x02
   11446:	8d 5b       	subi	r24, 0xBD	; 189
   11448:	9f 4f       	sbci	r25, 0xFF	; 255
   1144a:	fc 01       	movw	r30, r24
   1144c:	80 81       	ld	r24, Z
   1144e:	5e dd       	rcall	.-1348   	; 0x10f0c <ioport_set_pin_low>
   11450:	89 81       	ldd	r24, Y+1	; 0x01
   11452:	9a 81       	ldd	r25, Y+2	; 0x02
   11454:	8e 5b       	subi	r24, 0xBE	; 190
   11456:	9f 4f       	sbci	r25, 0xFF	; 255
   11458:	fc 01       	movw	r30, r24
   1145a:	80 81       	ld	r24, Z
   1145c:	ac dd       	rcall	.-1192   	; 0x10fb6 <ioport_set_pin_high>
   1145e:	0f c0       	rjmp	.+30     	; 0x1147e <set_motor_step_resolution+0xae>
   11460:	89 81       	ldd	r24, Y+1	; 0x01
   11462:	9a 81       	ldd	r25, Y+2	; 0x02
   11464:	8d 5b       	subi	r24, 0xBD	; 189
   11466:	9f 4f       	sbci	r25, 0xFF	; 255
   11468:	fc 01       	movw	r30, r24
   1146a:	80 81       	ld	r24, Z
   1146c:	a4 dd       	rcall	.-1208   	; 0x10fb6 <ioport_set_pin_high>
   1146e:	89 81       	ldd	r24, Y+1	; 0x01
   11470:	9a 81       	ldd	r25, Y+2	; 0x02
   11472:	8e 5b       	subi	r24, 0xBE	; 190
   11474:	9f 4f       	sbci	r25, 0xFF	; 255
   11476:	fc 01       	movw	r30, r24
   11478:	80 81       	ld	r24, Z
   1147a:	9d dd       	rcall	.-1222   	; 0x10fb6 <ioport_set_pin_high>
   1147c:	00 00       	nop
   1147e:	00 00       	nop
   11480:	23 96       	adiw	r28, 0x03	; 3
   11482:	cd bf       	out	0x3d, r28	; 61
   11484:	de bf       	out	0x3e, r29	; 62
   11486:	df 91       	pop	r29
   11488:	cf 91       	pop	r28
   1148a:	08 95       	ret

0001148c <set_motor_speed>:
   1148c:	ef 92       	push	r14
   1148e:	ff 92       	push	r15
   11490:	0f 93       	push	r16
   11492:	1f 93       	push	r17
   11494:	cf 93       	push	r28
   11496:	df 93       	push	r29
   11498:	00 d0       	rcall	.+0      	; 0x1149a <set_motor_speed+0xe>
   1149a:	00 d0       	rcall	.+0      	; 0x1149c <set_motor_speed+0x10>
   1149c:	cd b7       	in	r28, 0x3d	; 61
   1149e:	de b7       	in	r29, 0x3e	; 62
   114a0:	89 83       	std	Y+1, r24	; 0x01
   114a2:	9a 83       	std	Y+2, r25	; 0x02
   114a4:	4b 83       	std	Y+3, r20	; 0x03
   114a6:	5c 83       	std	Y+4, r21	; 0x04
   114a8:	6d 83       	std	Y+5, r22	; 0x05
   114aa:	7e 83       	std	Y+6, r23	; 0x06
   114ac:	89 81       	ldd	r24, Y+1	; 0x01
   114ae:	9a 81       	ldd	r25, Y+2	; 0x02
   114b0:	fc 01       	movw	r30, r24
   114b2:	84 85       	ldd	r24, Z+12	; 0x0c
   114b4:	95 85       	ldd	r25, Z+13	; 0x0d
   114b6:	a6 85       	ldd	r26, Z+14	; 0x0e
   114b8:	b7 85       	ldd	r27, Z+15	; 0x0f
   114ba:	20 e0       	ldi	r18, 0x00	; 0
   114bc:	30 e0       	ldi	r19, 0x00	; 0
   114be:	a9 01       	movw	r20, r18
   114c0:	bc 01       	movw	r22, r24
   114c2:	cd 01       	movw	r24, r26
   114c4:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   114c8:	88 23       	and	r24, r24
   114ca:	d9 f1       	breq	.+118    	; 0x11542 <set_motor_speed+0xb6>
   114cc:	6b 81       	ldd	r22, Y+3	; 0x03
   114ce:	7c 81       	ldd	r23, Y+4	; 0x04
   114d0:	8d 81       	ldd	r24, Y+5	; 0x05
   114d2:	9e 81       	ldd	r25, Y+6	; 0x06
   114d4:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
   114d8:	7b 01       	movw	r14, r22
   114da:	8c 01       	movw	r16, r24
   114dc:	89 81       	ldd	r24, Y+1	; 0x01
   114de:	9a 81       	ldd	r25, Y+2	; 0x02
   114e0:	fc 01       	movw	r30, r24
   114e2:	80 85       	ldd	r24, Z+8	; 0x08
   114e4:	91 85       	ldd	r25, Z+9	; 0x09
   114e6:	a2 85       	ldd	r26, Z+10	; 0x0a
   114e8:	b3 85       	ldd	r27, Z+11	; 0x0b
   114ea:	9c 01       	movw	r18, r24
   114ec:	ad 01       	movw	r20, r26
   114ee:	c8 01       	movw	r24, r16
   114f0:	b7 01       	movw	r22, r14
   114f2:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
   114f6:	dc 01       	movw	r26, r24
   114f8:	cb 01       	movw	r24, r22
   114fa:	7c 01       	movw	r14, r24
   114fc:	8d 01       	movw	r16, r26
   114fe:	89 81       	ldd	r24, Y+1	; 0x01
   11500:	9a 81       	ldd	r25, Y+2	; 0x02
   11502:	fc 01       	movw	r30, r24
   11504:	84 85       	ldd	r24, Z+12	; 0x0c
   11506:	95 85       	ldd	r25, Z+13	; 0x0d
   11508:	a6 85       	ldd	r26, Z+14	; 0x0e
   1150a:	b7 85       	ldd	r27, Z+15	; 0x0f
   1150c:	9c 01       	movw	r18, r24
   1150e:	ad 01       	movw	r20, r26
   11510:	c8 01       	movw	r24, r16
   11512:	b7 01       	movw	r22, r14
   11514:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
   11518:	dc 01       	movw	r26, r24
   1151a:	cb 01       	movw	r24, r22
   1151c:	29 81       	ldd	r18, Y+1	; 0x01
   1151e:	3a 81       	ldd	r19, Y+2	; 0x02
   11520:	f9 01       	movw	r30, r18
   11522:	80 8b       	std	Z+16, r24	; 0x10
   11524:	91 8b       	std	Z+17, r25	; 0x11
   11526:	a2 8b       	std	Z+18, r26	; 0x12
   11528:	b3 8b       	std	Z+19, r27	; 0x13
   1152a:	29 81       	ldd	r18, Y+1	; 0x01
   1152c:	3a 81       	ldd	r19, Y+2	; 0x02
   1152e:	8b 81       	ldd	r24, Y+3	; 0x03
   11530:	9c 81       	ldd	r25, Y+4	; 0x04
   11532:	ad 81       	ldd	r26, Y+5	; 0x05
   11534:	be 81       	ldd	r27, Y+6	; 0x06
   11536:	f9 01       	movw	r30, r18
   11538:	85 a7       	std	Z+45, r24	; 0x2d
   1153a:	96 a7       	std	Z+46, r25	; 0x2e
   1153c:	a7 a7       	std	Z+47, r26	; 0x2f
   1153e:	b0 ab       	std	Z+48, r27	; 0x30
   11540:	25 c0       	rjmp	.+74     	; 0x1158c <set_motor_speed+0x100>
   11542:	89 81       	ldd	r24, Y+1	; 0x01
   11544:	9a 81       	ldd	r25, Y+2	; 0x02
   11546:	fc 01       	movw	r30, r24
   11548:	10 8a       	std	Z+16, r1	; 0x10
   1154a:	11 8a       	std	Z+17, r1	; 0x11
   1154c:	12 8a       	std	Z+18, r1	; 0x12
   1154e:	13 8a       	std	Z+19, r1	; 0x13
   11550:	89 81       	ldd	r24, Y+1	; 0x01
   11552:	9a 81       	ldd	r25, Y+2	; 0x02
   11554:	fc 01       	movw	r30, r24
   11556:	15 a6       	std	Z+45, r1	; 0x2d
   11558:	16 a6       	std	Z+46, r1	; 0x2e
   1155a:	17 a6       	std	Z+47, r1	; 0x2f
   1155c:	10 aa       	std	Z+48, r1	; 0x30
   1155e:	8b 81       	ldd	r24, Y+3	; 0x03
   11560:	9c 81       	ldd	r25, Y+4	; 0x04
   11562:	ad 81       	ldd	r26, Y+5	; 0x05
   11564:	be 81       	ldd	r27, Y+6	; 0x06
   11566:	89 2b       	or	r24, r25
   11568:	8a 2b       	or	r24, r26
   1156a:	8b 2b       	or	r24, r27
   1156c:	79 f0       	breq	.+30     	; 0x1158c <set_motor_speed+0x100>
   1156e:	6b 81       	ldd	r22, Y+3	; 0x03
   11570:	7c 81       	ldd	r23, Y+4	; 0x04
   11572:	8d 81       	ldd	r24, Y+5	; 0x05
   11574:	9e 81       	ldd	r25, Y+6	; 0x06
   11576:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
   1157a:	dc 01       	movw	r26, r24
   1157c:	cb 01       	movw	r24, r22
   1157e:	29 81       	ldd	r18, Y+1	; 0x01
   11580:	3a 81       	ldd	r19, Y+2	; 0x02
   11582:	f9 01       	movw	r30, r18
   11584:	80 87       	std	Z+8, r24	; 0x08
   11586:	91 87       	std	Z+9, r25	; 0x09
   11588:	a2 87       	std	Z+10, r26	; 0x0a
   1158a:	b3 87       	std	Z+11, r27	; 0x0b
   1158c:	89 81       	ldd	r24, Y+1	; 0x01
   1158e:	9a 81       	ldd	r25, Y+2	; 0x02
   11590:	fc 01       	movw	r30, r24
   11592:	80 85       	ldd	r24, Z+8	; 0x08
   11594:	91 85       	ldd	r25, Z+9	; 0x09
   11596:	a2 85       	ldd	r26, Z+10	; 0x0a
   11598:	b3 85       	ldd	r27, Z+11	; 0x0b
   1159a:	29 81       	ldd	r18, Y+1	; 0x01
   1159c:	3a 81       	ldd	r19, Y+2	; 0x02
   1159e:	f9 01       	movw	r30, r18
   115a0:	81 a7       	std	Z+41, r24	; 0x29
   115a2:	92 a7       	std	Z+42, r25	; 0x2a
   115a4:	a3 a7       	std	Z+43, r26	; 0x2b
   115a6:	b4 a7       	std	Z+44, r27	; 0x2c
   115a8:	00 00       	nop
   115aa:	26 96       	adiw	r28, 0x06	; 6
   115ac:	cd bf       	out	0x3d, r28	; 61
   115ae:	de bf       	out	0x3e, r29	; 62
   115b0:	df 91       	pop	r29
   115b2:	cf 91       	pop	r28
   115b4:	1f 91       	pop	r17
   115b6:	0f 91       	pop	r16
   115b8:	ff 90       	pop	r15
   115ba:	ef 90       	pop	r14
   115bc:	08 95       	ret

000115be <set_motor_steps>:
   115be:	cf 93       	push	r28
   115c0:	df 93       	push	r29
   115c2:	00 d0       	rcall	.+0      	; 0x115c4 <set_motor_steps+0x6>
   115c4:	00 d0       	rcall	.+0      	; 0x115c6 <set_motor_steps+0x8>
   115c6:	cd b7       	in	r28, 0x3d	; 61
   115c8:	de b7       	in	r29, 0x3e	; 62
   115ca:	89 83       	std	Y+1, r24	; 0x01
   115cc:	9a 83       	std	Y+2, r25	; 0x02
   115ce:	4b 83       	std	Y+3, r20	; 0x03
   115d0:	5c 83       	std	Y+4, r21	; 0x04
   115d2:	6d 83       	std	Y+5, r22	; 0x05
   115d4:	7e 83       	std	Y+6, r23	; 0x06
   115d6:	2b 81       	ldd	r18, Y+3	; 0x03
   115d8:	3c 81       	ldd	r19, Y+4	; 0x04
   115da:	89 81       	ldd	r24, Y+1	; 0x01
   115dc:	9a 81       	ldd	r25, Y+2	; 0x02
   115de:	fc 01       	movw	r30, r24
   115e0:	24 8f       	std	Z+28, r18	; 0x1c
   115e2:	35 8f       	std	Z+29, r19	; 0x1d
   115e4:	00 00       	nop
   115e6:	26 96       	adiw	r28, 0x06	; 6
   115e8:	cd bf       	out	0x3d, r28	; 61
   115ea:	de bf       	out	0x3e, r29	; 62
   115ec:	df 91       	pop	r29
   115ee:	cf 91       	pop	r28
   115f0:	08 95       	ret

000115f2 <set_motor_direction>:
   115f2:	cf 93       	push	r28
   115f4:	df 93       	push	r29
   115f6:	00 d0       	rcall	.+0      	; 0x115f8 <set_motor_direction+0x6>
   115f8:	cd b7       	in	r28, 0x3d	; 61
   115fa:	de b7       	in	r29, 0x3e	; 62
   115fc:	89 83       	std	Y+1, r24	; 0x01
   115fe:	9a 83       	std	Y+2, r25	; 0x02
   11600:	6b 83       	std	Y+3, r22	; 0x03
   11602:	89 81       	ldd	r24, Y+1	; 0x01
   11604:	9a 81       	ldd	r25, Y+2	; 0x02
   11606:	2b 81       	ldd	r18, Y+3	; 0x03
   11608:	fc 01       	movw	r30, r24
   1160a:	22 83       	std	Z+2, r18	; 0x02
   1160c:	89 81       	ldd	r24, Y+1	; 0x01
   1160e:	9a 81       	ldd	r25, Y+2	; 0x02
   11610:	fc 01       	movw	r30, r24
   11612:	82 81       	ldd	r24, Z+2	; 0x02
   11614:	88 23       	and	r24, r24
   11616:	31 f4       	brne	.+12     	; 0x11624 <set_motor_direction+0x32>
   11618:	89 81       	ldd	r24, Y+1	; 0x01
   1161a:	9a 81       	ldd	r25, Y+2	; 0x02
   1161c:	fc 01       	movw	r30, r24
   1161e:	87 ad       	ldd	r24, Z+63	; 0x3f
   11620:	ca dc       	rcall	.-1644   	; 0x10fb6 <ioport_set_pin_high>
   11622:	05 c0       	rjmp	.+10     	; 0x1162e <set_motor_direction+0x3c>
   11624:	89 81       	ldd	r24, Y+1	; 0x01
   11626:	9a 81       	ldd	r25, Y+2	; 0x02
   11628:	fc 01       	movw	r30, r24
   1162a:	87 ad       	ldd	r24, Z+63	; 0x3f
   1162c:	6f dc       	rcall	.-1826   	; 0x10f0c <ioport_set_pin_low>
   1162e:	00 00       	nop
   11630:	23 96       	adiw	r28, 0x03	; 3
   11632:	cd bf       	out	0x3d, r28	; 61
   11634:	de bf       	out	0x3e, r29	; 62
   11636:	df 91       	pop	r29
   11638:	cf 91       	pop	r28
   1163a:	08 95       	ret

0001163c <set_motor_accel_time>:
   1163c:	cf 93       	push	r28
   1163e:	df 93       	push	r29
   11640:	00 d0       	rcall	.+0      	; 0x11642 <set_motor_accel_time+0x6>
   11642:	00 d0       	rcall	.+0      	; 0x11644 <set_motor_accel_time+0x8>
   11644:	cd b7       	in	r28, 0x3d	; 61
   11646:	de b7       	in	r29, 0x3e	; 62
   11648:	89 83       	std	Y+1, r24	; 0x01
   1164a:	9a 83       	std	Y+2, r25	; 0x02
   1164c:	4b 83       	std	Y+3, r20	; 0x03
   1164e:	5c 83       	std	Y+4, r21	; 0x04
   11650:	6d 83       	std	Y+5, r22	; 0x05
   11652:	7e 83       	std	Y+6, r23	; 0x06
   11654:	6b 81       	ldd	r22, Y+3	; 0x03
   11656:	7c 81       	ldd	r23, Y+4	; 0x04
   11658:	8d 81       	ldd	r24, Y+5	; 0x05
   1165a:	9e 81       	ldd	r25, Y+6	; 0x06
   1165c:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
   11660:	dc 01       	movw	r26, r24
   11662:	cb 01       	movw	r24, r22
   11664:	29 81       	ldd	r18, Y+1	; 0x01
   11666:	3a 81       	ldd	r19, Y+2	; 0x02
   11668:	f9 01       	movw	r30, r18
   1166a:	84 87       	std	Z+12, r24	; 0x0c
   1166c:	95 87       	std	Z+13, r25	; 0x0d
   1166e:	a6 87       	std	Z+14, r26	; 0x0e
   11670:	b7 87       	std	Z+15, r27	; 0x0f
   11672:	89 81       	ldd	r24, Y+1	; 0x01
   11674:	9a 81       	ldd	r25, Y+2	; 0x02
   11676:	fc 01       	movw	r30, r24
   11678:	10 8a       	std	Z+16, r1	; 0x10
   1167a:	11 8a       	std	Z+17, r1	; 0x11
   1167c:	12 8a       	std	Z+18, r1	; 0x12
   1167e:	13 8a       	std	Z+19, r1	; 0x13
   11680:	89 81       	ldd	r24, Y+1	; 0x01
   11682:	9a 81       	ldd	r25, Y+2	; 0x02
   11684:	fc 01       	movw	r30, r24
   11686:	80 85       	ldd	r24, Z+8	; 0x08
   11688:	91 85       	ldd	r25, Z+9	; 0x09
   1168a:	a2 85       	ldd	r26, Z+10	; 0x0a
   1168c:	b3 85       	ldd	r27, Z+11	; 0x0b
   1168e:	bc 01       	movw	r22, r24
   11690:	cd 01       	movw	r24, r26
   11692:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
   11696:	9b 01       	movw	r18, r22
   11698:	ac 01       	movw	r20, r24
   1169a:	89 81       	ldd	r24, Y+1	; 0x01
   1169c:	9a 81       	ldd	r25, Y+2	; 0x02
   1169e:	ba 01       	movw	r22, r20
   116a0:	a9 01       	movw	r20, r18
   116a2:	f4 de       	rcall	.-536    	; 0x1148c <set_motor_speed>
   116a4:	00 00       	nop
   116a6:	26 96       	adiw	r28, 0x06	; 6
   116a8:	cd bf       	out	0x3d, r28	; 61
   116aa:	de bf       	out	0x3e, r29	; 62
   116ac:	df 91       	pop	r29
   116ae:	cf 91       	pop	r28
   116b0:	08 95       	ret

000116b2 <set_motor_decel_time>:
   116b2:	cf 93       	push	r28
   116b4:	df 93       	push	r29
   116b6:	00 d0       	rcall	.+0      	; 0x116b8 <set_motor_decel_time+0x6>
   116b8:	00 d0       	rcall	.+0      	; 0x116ba <set_motor_decel_time+0x8>
   116ba:	cd b7       	in	r28, 0x3d	; 61
   116bc:	de b7       	in	r29, 0x3e	; 62
   116be:	89 83       	std	Y+1, r24	; 0x01
   116c0:	9a 83       	std	Y+2, r25	; 0x02
   116c2:	4b 83       	std	Y+3, r20	; 0x03
   116c4:	5c 83       	std	Y+4, r21	; 0x04
   116c6:	6d 83       	std	Y+5, r22	; 0x05
   116c8:	7e 83       	std	Y+6, r23	; 0x06
   116ca:	6b 81       	ldd	r22, Y+3	; 0x03
   116cc:	7c 81       	ldd	r23, Y+4	; 0x04
   116ce:	8d 81       	ldd	r24, Y+5	; 0x05
   116d0:	9e 81       	ldd	r25, Y+6	; 0x06
   116d2:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
   116d6:	dc 01       	movw	r26, r24
   116d8:	cb 01       	movw	r24, r22
   116da:	29 81       	ldd	r18, Y+1	; 0x01
   116dc:	3a 81       	ldd	r19, Y+2	; 0x02
   116de:	f9 01       	movw	r30, r18
   116e0:	84 8b       	std	Z+20, r24	; 0x14
   116e2:	95 8b       	std	Z+21, r25	; 0x15
   116e4:	a6 8b       	std	Z+22, r26	; 0x16
   116e6:	b7 8b       	std	Z+23, r27	; 0x17
   116e8:	89 81       	ldd	r24, Y+1	; 0x01
   116ea:	9a 81       	ldd	r25, Y+2	; 0x02
   116ec:	fc 01       	movw	r30, r24
   116ee:	10 8e       	std	Z+24, r1	; 0x18
   116f0:	11 8e       	std	Z+25, r1	; 0x19
   116f2:	12 8e       	std	Z+26, r1	; 0x1a
   116f4:	13 8e       	std	Z+27, r1	; 0x1b
   116f6:	00 00       	nop
   116f8:	26 96       	adiw	r28, 0x06	; 6
   116fa:	cd bf       	out	0x3d, r28	; 61
   116fc:	de bf       	out	0x3e, r29	; 62
   116fe:	df 91       	pop	r29
   11700:	cf 91       	pop	r28
   11702:	08 95       	ret

00011704 <handle_accel>:
   11704:	cf 92       	push	r12
   11706:	df 92       	push	r13
   11708:	ef 92       	push	r14
   1170a:	ff 92       	push	r15
   1170c:	0f 93       	push	r16
   1170e:	1f 93       	push	r17
   11710:	cf 93       	push	r28
   11712:	df 93       	push	r29
   11714:	1f 92       	push	r1
   11716:	1f 92       	push	r1
   11718:	cd b7       	in	r28, 0x3d	; 61
   1171a:	de b7       	in	r29, 0x3e	; 62
   1171c:	89 83       	std	Y+1, r24	; 0x01
   1171e:	9a 83       	std	Y+2, r25	; 0x02
   11720:	89 81       	ldd	r24, Y+1	; 0x01
   11722:	9a 81       	ldd	r25, Y+2	; 0x02
   11724:	fc 01       	movw	r30, r24
   11726:	84 85       	ldd	r24, Z+12	; 0x0c
   11728:	95 85       	ldd	r25, Z+13	; 0x0d
   1172a:	a6 85       	ldd	r26, Z+14	; 0x0e
   1172c:	b7 85       	ldd	r27, Z+15	; 0x0f
   1172e:	20 e0       	ldi	r18, 0x00	; 0
   11730:	30 e0       	ldi	r19, 0x00	; 0
   11732:	a9 01       	movw	r20, r18
   11734:	bc 01       	movw	r22, r24
   11736:	cd 01       	movw	r24, r26
   11738:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   1173c:	88 23       	and	r24, r24
   1173e:	09 f4       	brne	.+2      	; 0x11742 <handle_accel+0x3e>
   11740:	c9 c0       	rjmp	.+402    	; 0x118d4 <handle_accel+0x1d0>
   11742:	89 81       	ldd	r24, Y+1	; 0x01
   11744:	9a 81       	ldd	r25, Y+2	; 0x02
   11746:	fc 01       	movw	r30, r24
   11748:	85 a5       	ldd	r24, Z+45	; 0x2d
   1174a:	96 a5       	ldd	r25, Z+46	; 0x2e
   1174c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1174e:	b0 a9       	ldd	r27, Z+48	; 0x30
   11750:	bc 01       	movw	r22, r24
   11752:	cd 01       	movw	r24, r26
   11754:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
   11758:	7b 01       	movw	r14, r22
   1175a:	8c 01       	movw	r16, r24
   1175c:	89 81       	ldd	r24, Y+1	; 0x01
   1175e:	9a 81       	ldd	r25, Y+2	; 0x02
   11760:	fc 01       	movw	r30, r24
   11762:	81 a5       	ldd	r24, Z+41	; 0x29
   11764:	92 a5       	ldd	r25, Z+42	; 0x2a
   11766:	a3 a5       	ldd	r26, Z+43	; 0x2b
   11768:	b4 a5       	ldd	r27, Z+44	; 0x2c
   1176a:	9c 01       	movw	r18, r24
   1176c:	ad 01       	movw	r20, r26
   1176e:	c8 01       	movw	r24, r16
   11770:	b7 01       	movw	r22, r14
   11772:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   11776:	88 23       	and	r24, r24
   11778:	09 f4       	brne	.+2      	; 0x1177c <handle_accel+0x78>
   1177a:	75 c0       	rjmp	.+234    	; 0x11866 <handle_accel+0x162>
   1177c:	89 81       	ldd	r24, Y+1	; 0x01
   1177e:	9a 81       	ldd	r25, Y+2	; 0x02
   11780:	fc 01       	movw	r30, r24
   11782:	c1 a4       	ldd	r12, Z+41	; 0x29
   11784:	d2 a4       	ldd	r13, Z+42	; 0x2a
   11786:	e3 a4       	ldd	r14, Z+43	; 0x2b
   11788:	f4 a4       	ldd	r15, Z+44	; 0x2c
   1178a:	89 81       	ldd	r24, Y+1	; 0x01
   1178c:	9a 81       	ldd	r25, Y+2	; 0x02
   1178e:	fc 01       	movw	r30, r24
   11790:	80 89       	ldd	r24, Z+16	; 0x10
   11792:	91 89       	ldd	r25, Z+17	; 0x11
   11794:	a2 89       	ldd	r26, Z+18	; 0x12
   11796:	b3 89       	ldd	r27, Z+19	; 0x13
   11798:	20 e0       	ldi	r18, 0x00	; 0
   1179a:	30 e0       	ldi	r19, 0x00	; 0
   1179c:	40 e2       	ldi	r20, 0x20	; 32
   1179e:	51 e4       	ldi	r21, 0x41	; 65
   117a0:	bc 01       	movw	r22, r24
   117a2:	cd 01       	movw	r24, r26
   117a4:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
   117a8:	dc 01       	movw	r26, r24
   117aa:	cb 01       	movw	r24, r22
   117ac:	9c 01       	movw	r18, r24
   117ae:	ad 01       	movw	r20, r26
   117b0:	c7 01       	movw	r24, r14
   117b2:	b6 01       	movw	r22, r12
   117b4:	0e 94 17 b4 	call	0x1682e	; 0x1682e <__addsf3>
   117b8:	dc 01       	movw	r26, r24
   117ba:	cb 01       	movw	r24, r22
   117bc:	29 81       	ldd	r18, Y+1	; 0x01
   117be:	3a 81       	ldd	r19, Y+2	; 0x02
   117c0:	f9 01       	movw	r30, r18
   117c2:	81 a7       	std	Z+41, r24	; 0x29
   117c4:	92 a7       	std	Z+42, r25	; 0x2a
   117c6:	a3 a7       	std	Z+43, r26	; 0x2b
   117c8:	b4 a7       	std	Z+44, r27	; 0x2c
   117ca:	89 81       	ldd	r24, Y+1	; 0x01
   117cc:	9a 81       	ldd	r25, Y+2	; 0x02
   117ce:	fc 01       	movw	r30, r24
   117d0:	81 a5       	ldd	r24, Z+41	; 0x29
   117d2:	92 a5       	ldd	r25, Z+42	; 0x2a
   117d4:	a3 a5       	ldd	r26, Z+43	; 0x2b
   117d6:	b4 a5       	ldd	r27, Z+44	; 0x2c
   117d8:	29 81       	ldd	r18, Y+1	; 0x01
   117da:	3a 81       	ldd	r19, Y+2	; 0x02
   117dc:	f9 01       	movw	r30, r18
   117de:	80 87       	std	Z+8, r24	; 0x08
   117e0:	91 87       	std	Z+9, r25	; 0x09
   117e2:	a2 87       	std	Z+10, r26	; 0x0a
   117e4:	b3 87       	std	Z+11, r27	; 0x0b
   117e6:	89 81       	ldd	r24, Y+1	; 0x01
   117e8:	9a 81       	ldd	r25, Y+2	; 0x02
   117ea:	fc 01       	movw	r30, r24
   117ec:	c1 a4       	ldd	r12, Z+41	; 0x29
   117ee:	d2 a4       	ldd	r13, Z+42	; 0x2a
   117f0:	e3 a4       	ldd	r14, Z+43	; 0x2b
   117f2:	f4 a4       	ldd	r15, Z+44	; 0x2c
   117f4:	89 81       	ldd	r24, Y+1	; 0x01
   117f6:	9a 81       	ldd	r25, Y+2	; 0x02
   117f8:	fc 01       	movw	r30, r24
   117fa:	85 a5       	ldd	r24, Z+45	; 0x2d
   117fc:	96 a5       	ldd	r25, Z+46	; 0x2e
   117fe:	a7 a5       	ldd	r26, Z+47	; 0x2f
   11800:	b0 a9       	ldd	r27, Z+48	; 0x30
   11802:	bc 01       	movw	r22, r24
   11804:	cd 01       	movw	r24, r26
   11806:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
   1180a:	dc 01       	movw	r26, r24
   1180c:	cb 01       	movw	r24, r22
   1180e:	9c 01       	movw	r18, r24
   11810:	ad 01       	movw	r20, r26
   11812:	c7 01       	movw	r24, r14
   11814:	b6 01       	movw	r22, r12
   11816:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
   1181a:	18 16       	cp	r1, r24
   1181c:	24 f5       	brge	.+72     	; 0x11866 <handle_accel+0x162>
   1181e:	89 81       	ldd	r24, Y+1	; 0x01
   11820:	9a 81       	ldd	r25, Y+2	; 0x02
   11822:	fc 01       	movw	r30, r24
   11824:	80 89       	ldd	r24, Z+16	; 0x10
   11826:	91 89       	ldd	r25, Z+17	; 0x11
   11828:	a2 89       	ldd	r26, Z+18	; 0x12
   1182a:	b3 89       	ldd	r27, Z+19	; 0x13
   1182c:	20 e0       	ldi	r18, 0x00	; 0
   1182e:	30 e0       	ldi	r19, 0x00	; 0
   11830:	a9 01       	movw	r20, r18
   11832:	bc 01       	movw	r22, r24
   11834:	cd 01       	movw	r24, r26
   11836:	0e 94 52 b6 	call	0x16ca4	; 0x16ca4 <__gesf2>
   1183a:	88 23       	and	r24, r24
   1183c:	a4 f0       	brlt	.+40     	; 0x11866 <handle_accel+0x162>
   1183e:	89 81       	ldd	r24, Y+1	; 0x01
   11840:	9a 81       	ldd	r25, Y+2	; 0x02
   11842:	fc 01       	movw	r30, r24
   11844:	85 a5       	ldd	r24, Z+45	; 0x2d
   11846:	96 a5       	ldd	r25, Z+46	; 0x2e
   11848:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1184a:	b0 a9       	ldd	r27, Z+48	; 0x30
   1184c:	bc 01       	movw	r22, r24
   1184e:	cd 01       	movw	r24, r26
   11850:	0e 94 52 b5 	call	0x16aa4	; 0x16aa4 <__floatunsisf>
   11854:	dc 01       	movw	r26, r24
   11856:	cb 01       	movw	r24, r22
   11858:	29 81       	ldd	r18, Y+1	; 0x01
   1185a:	3a 81       	ldd	r19, Y+2	; 0x02
   1185c:	f9 01       	movw	r30, r18
   1185e:	81 a7       	std	Z+41, r24	; 0x29
   11860:	92 a7       	std	Z+42, r25	; 0x2a
   11862:	a3 a7       	std	Z+43, r26	; 0x2b
   11864:	b4 a7       	std	Z+44, r27	; 0x2c
   11866:	89 81       	ldd	r24, Y+1	; 0x01
   11868:	9a 81       	ldd	r25, Y+2	; 0x02
   1186a:	fc 01       	movw	r30, r24
   1186c:	81 a5       	ldd	r24, Z+41	; 0x29
   1186e:	92 a5       	ldd	r25, Z+42	; 0x2a
   11870:	a3 a5       	ldd	r26, Z+43	; 0x2b
   11872:	b4 a5       	ldd	r27, Z+44	; 0x2c
   11874:	bc 01       	movw	r22, r24
   11876:	cd 01       	movw	r24, r26
   11878:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
   1187c:	dc 01       	movw	r26, r24
   1187e:	cb 01       	movw	r24, r22
   11880:	9c 01       	movw	r18, r24
   11882:	89 81       	ldd	r24, Y+1	; 0x01
   11884:	9a 81       	ldd	r25, Y+2	; 0x02
   11886:	80 96       	adiw	r24, 0x20	; 32
   11888:	b9 01       	movw	r22, r18
   1188a:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <pwm_set_frequency>
   1188e:	89 81       	ldd	r24, Y+1	; 0x01
   11890:	9a 81       	ldd	r25, Y+2	; 0x02
   11892:	fc 01       	movw	r30, r24
   11894:	21 a9       	ldd	r18, Z+49	; 0x31
   11896:	89 81       	ldd	r24, Y+1	; 0x01
   11898:	9a 81       	ldd	r25, Y+2	; 0x02
   1189a:	80 96       	adiw	r24, 0x20	; 32
   1189c:	62 2f       	mov	r22, r18
   1189e:	0e 94 bd b3 	call	0x1677a	; 0x1677a <pwm_start>
   118a2:	89 81       	ldd	r24, Y+1	; 0x01
   118a4:	9a 81       	ldd	r25, Y+2	; 0x02
   118a6:	fc 01       	movw	r30, r24
   118a8:	84 85       	ldd	r24, Z+12	; 0x0c
   118aa:	95 85       	ldd	r25, Z+13	; 0x0d
   118ac:	a6 85       	ldd	r26, Z+14	; 0x0e
   118ae:	b7 85       	ldd	r27, Z+15	; 0x0f
   118b0:	20 e0       	ldi	r18, 0x00	; 0
   118b2:	30 e0       	ldi	r19, 0x00	; 0
   118b4:	40 e2       	ldi	r20, 0x20	; 32
   118b6:	51 e4       	ldi	r21, 0x41	; 65
   118b8:	bc 01       	movw	r22, r24
   118ba:	cd 01       	movw	r24, r26
   118bc:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
   118c0:	dc 01       	movw	r26, r24
   118c2:	cb 01       	movw	r24, r22
   118c4:	29 81       	ldd	r18, Y+1	; 0x01
   118c6:	3a 81       	ldd	r19, Y+2	; 0x02
   118c8:	f9 01       	movw	r30, r18
   118ca:	84 87       	std	Z+12, r24	; 0x0c
   118cc:	95 87       	std	Z+13, r25	; 0x0d
   118ce:	a6 87       	std	Z+14, r26	; 0x0e
   118d0:	b7 87       	std	Z+15, r27	; 0x0f
   118d2:	07 c0       	rjmp	.+14     	; 0x118e2 <handle_accel+0x1de>
   118d4:	89 81       	ldd	r24, Y+1	; 0x01
   118d6:	9a 81       	ldd	r25, Y+2	; 0x02
   118d8:	fc 01       	movw	r30, r24
   118da:	10 8a       	std	Z+16, r1	; 0x10
   118dc:	11 8a       	std	Z+17, r1	; 0x11
   118de:	12 8a       	std	Z+18, r1	; 0x12
   118e0:	13 8a       	std	Z+19, r1	; 0x13
   118e2:	00 00       	nop
   118e4:	0f 90       	pop	r0
   118e6:	0f 90       	pop	r0
   118e8:	df 91       	pop	r29
   118ea:	cf 91       	pop	r28
   118ec:	1f 91       	pop	r17
   118ee:	0f 91       	pop	r16
   118f0:	ff 90       	pop	r15
   118f2:	ef 90       	pop	r14
   118f4:	df 90       	pop	r13
   118f6:	cf 90       	pop	r12
   118f8:	08 95       	ret

000118fa <handle_decel>:
   118fa:	cf 92       	push	r12
   118fc:	df 92       	push	r13
   118fe:	ef 92       	push	r14
   11900:	ff 92       	push	r15
   11902:	cf 93       	push	r28
   11904:	df 93       	push	r29
   11906:	1f 92       	push	r1
   11908:	1f 92       	push	r1
   1190a:	cd b7       	in	r28, 0x3d	; 61
   1190c:	de b7       	in	r29, 0x3e	; 62
   1190e:	89 83       	std	Y+1, r24	; 0x01
   11910:	9a 83       	std	Y+2, r25	; 0x02
   11912:	89 81       	ldd	r24, Y+1	; 0x01
   11914:	9a 81       	ldd	r25, Y+2	; 0x02
   11916:	fc 01       	movw	r30, r24
   11918:	84 89       	ldd	r24, Z+20	; 0x14
   1191a:	95 89       	ldd	r25, Z+21	; 0x15
   1191c:	a6 89       	ldd	r26, Z+22	; 0x16
   1191e:	b7 89       	ldd	r27, Z+23	; 0x17
   11920:	20 e0       	ldi	r18, 0x00	; 0
   11922:	30 e0       	ldi	r19, 0x00	; 0
   11924:	a9 01       	movw	r20, r18
   11926:	bc 01       	movw	r22, r24
   11928:	cd 01       	movw	r24, r26
   1192a:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   1192e:	88 23       	and	r24, r24
   11930:	09 f4       	brne	.+2      	; 0x11934 <handle_decel+0x3a>
   11932:	94 c0       	rjmp	.+296    	; 0x11a5c <handle_decel+0x162>
   11934:	89 81       	ldd	r24, Y+1	; 0x01
   11936:	9a 81       	ldd	r25, Y+2	; 0x02
   11938:	fc 01       	movw	r30, r24
   1193a:	81 a5       	ldd	r24, Z+41	; 0x29
   1193c:	92 a5       	ldd	r25, Z+42	; 0x2a
   1193e:	a3 a5       	ldd	r26, Z+43	; 0x2b
   11940:	b4 a5       	ldd	r27, Z+44	; 0x2c
   11942:	20 e0       	ldi	r18, 0x00	; 0
   11944:	30 e0       	ldi	r19, 0x00	; 0
   11946:	a9 01       	movw	r20, r18
   11948:	bc 01       	movw	r22, r24
   1194a:	cd 01       	movw	r24, r26
   1194c:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   11950:	88 23       	and	r24, r24
   11952:	09 f4       	brne	.+2      	; 0x11956 <handle_decel+0x5c>
   11954:	4c c0       	rjmp	.+152    	; 0x119ee <handle_decel+0xf4>
   11956:	89 81       	ldd	r24, Y+1	; 0x01
   11958:	9a 81       	ldd	r25, Y+2	; 0x02
   1195a:	fc 01       	movw	r30, r24
   1195c:	c1 a4       	ldd	r12, Z+41	; 0x29
   1195e:	d2 a4       	ldd	r13, Z+42	; 0x2a
   11960:	e3 a4       	ldd	r14, Z+43	; 0x2b
   11962:	f4 a4       	ldd	r15, Z+44	; 0x2c
   11964:	89 81       	ldd	r24, Y+1	; 0x01
   11966:	9a 81       	ldd	r25, Y+2	; 0x02
   11968:	fc 01       	movw	r30, r24
   1196a:	80 8d       	ldd	r24, Z+24	; 0x18
   1196c:	91 8d       	ldd	r25, Z+25	; 0x19
   1196e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   11970:	b3 8d       	ldd	r27, Z+27	; 0x1b
   11972:	20 e0       	ldi	r18, 0x00	; 0
   11974:	30 e0       	ldi	r19, 0x00	; 0
   11976:	40 e2       	ldi	r20, 0x20	; 32
   11978:	51 e4       	ldi	r21, 0x41	; 65
   1197a:	bc 01       	movw	r22, r24
   1197c:	cd 01       	movw	r24, r26
   1197e:	0e 94 56 b6 	call	0x16cac	; 0x16cac <__mulsf3>
   11982:	dc 01       	movw	r26, r24
   11984:	cb 01       	movw	r24, r22
   11986:	9c 01       	movw	r18, r24
   11988:	ad 01       	movw	r20, r26
   1198a:	c7 01       	movw	r24, r14
   1198c:	b6 01       	movw	r22, r12
   1198e:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
   11992:	dc 01       	movw	r26, r24
   11994:	cb 01       	movw	r24, r22
   11996:	29 81       	ldd	r18, Y+1	; 0x01
   11998:	3a 81       	ldd	r19, Y+2	; 0x02
   1199a:	f9 01       	movw	r30, r18
   1199c:	81 a7       	std	Z+41, r24	; 0x29
   1199e:	92 a7       	std	Z+42, r25	; 0x2a
   119a0:	a3 a7       	std	Z+43, r26	; 0x2b
   119a2:	b4 a7       	std	Z+44, r27	; 0x2c
   119a4:	89 81       	ldd	r24, Y+1	; 0x01
   119a6:	9a 81       	ldd	r25, Y+2	; 0x02
   119a8:	fc 01       	movw	r30, r24
   119aa:	81 a5       	ldd	r24, Z+41	; 0x29
   119ac:	92 a5       	ldd	r25, Z+42	; 0x2a
   119ae:	a3 a5       	ldd	r26, Z+43	; 0x2b
   119b0:	b4 a5       	ldd	r27, Z+44	; 0x2c
   119b2:	29 81       	ldd	r18, Y+1	; 0x01
   119b4:	3a 81       	ldd	r19, Y+2	; 0x02
   119b6:	f9 01       	movw	r30, r18
   119b8:	80 87       	std	Z+8, r24	; 0x08
   119ba:	91 87       	std	Z+9, r25	; 0x09
   119bc:	a2 87       	std	Z+10, r26	; 0x0a
   119be:	b3 87       	std	Z+11, r27	; 0x0b
   119c0:	89 81       	ldd	r24, Y+1	; 0x01
   119c2:	9a 81       	ldd	r25, Y+2	; 0x02
   119c4:	fc 01       	movw	r30, r24
   119c6:	81 a5       	ldd	r24, Z+41	; 0x29
   119c8:	92 a5       	ldd	r25, Z+42	; 0x2a
   119ca:	a3 a5       	ldd	r26, Z+43	; 0x2b
   119cc:	b4 a5       	ldd	r27, Z+44	; 0x2c
   119ce:	20 e0       	ldi	r18, 0x00	; 0
   119d0:	30 e0       	ldi	r19, 0x00	; 0
   119d2:	a9 01       	movw	r20, r18
   119d4:	bc 01       	movw	r22, r24
   119d6:	cd 01       	movw	r24, r26
   119d8:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   119dc:	88 23       	and	r24, r24
   119de:	3c f4       	brge	.+14     	; 0x119ee <handle_decel+0xf4>
   119e0:	89 81       	ldd	r24, Y+1	; 0x01
   119e2:	9a 81       	ldd	r25, Y+2	; 0x02
   119e4:	fc 01       	movw	r30, r24
   119e6:	11 a6       	std	Z+41, r1	; 0x29
   119e8:	12 a6       	std	Z+42, r1	; 0x2a
   119ea:	13 a6       	std	Z+43, r1	; 0x2b
   119ec:	14 a6       	std	Z+44, r1	; 0x2c
   119ee:	89 81       	ldd	r24, Y+1	; 0x01
   119f0:	9a 81       	ldd	r25, Y+2	; 0x02
   119f2:	fc 01       	movw	r30, r24
   119f4:	81 a5       	ldd	r24, Z+41	; 0x29
   119f6:	92 a5       	ldd	r25, Z+42	; 0x2a
   119f8:	a3 a5       	ldd	r26, Z+43	; 0x2b
   119fa:	b4 a5       	ldd	r27, Z+44	; 0x2c
   119fc:	bc 01       	movw	r22, r24
   119fe:	cd 01       	movw	r24, r26
   11a00:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
   11a04:	dc 01       	movw	r26, r24
   11a06:	cb 01       	movw	r24, r22
   11a08:	9c 01       	movw	r18, r24
   11a0a:	89 81       	ldd	r24, Y+1	; 0x01
   11a0c:	9a 81       	ldd	r25, Y+2	; 0x02
   11a0e:	80 96       	adiw	r24, 0x20	; 32
   11a10:	b9 01       	movw	r22, r18
   11a12:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <pwm_set_frequency>
   11a16:	89 81       	ldd	r24, Y+1	; 0x01
   11a18:	9a 81       	ldd	r25, Y+2	; 0x02
   11a1a:	fc 01       	movw	r30, r24
   11a1c:	21 a9       	ldd	r18, Z+49	; 0x31
   11a1e:	89 81       	ldd	r24, Y+1	; 0x01
   11a20:	9a 81       	ldd	r25, Y+2	; 0x02
   11a22:	80 96       	adiw	r24, 0x20	; 32
   11a24:	62 2f       	mov	r22, r18
   11a26:	0e 94 bd b3 	call	0x1677a	; 0x1677a <pwm_start>
   11a2a:	89 81       	ldd	r24, Y+1	; 0x01
   11a2c:	9a 81       	ldd	r25, Y+2	; 0x02
   11a2e:	fc 01       	movw	r30, r24
   11a30:	84 89       	ldd	r24, Z+20	; 0x14
   11a32:	95 89       	ldd	r25, Z+21	; 0x15
   11a34:	a6 89       	ldd	r26, Z+22	; 0x16
   11a36:	b7 89       	ldd	r27, Z+23	; 0x17
   11a38:	20 e0       	ldi	r18, 0x00	; 0
   11a3a:	30 e0       	ldi	r19, 0x00	; 0
   11a3c:	40 e2       	ldi	r20, 0x20	; 32
   11a3e:	51 e4       	ldi	r21, 0x41	; 65
   11a40:	bc 01       	movw	r22, r24
   11a42:	cd 01       	movw	r24, r26
   11a44:	0e 94 16 b4 	call	0x1682c	; 0x1682c <__subsf3>
   11a48:	dc 01       	movw	r26, r24
   11a4a:	cb 01       	movw	r24, r22
   11a4c:	29 81       	ldd	r18, Y+1	; 0x01
   11a4e:	3a 81       	ldd	r19, Y+2	; 0x02
   11a50:	f9 01       	movw	r30, r18
   11a52:	84 8b       	std	Z+20, r24	; 0x14
   11a54:	95 8b       	std	Z+21, r25	; 0x15
   11a56:	a6 8b       	std	Z+22, r26	; 0x16
   11a58:	b7 8b       	std	Z+23, r27	; 0x17
   11a5a:	0a c0       	rjmp	.+20     	; 0x11a70 <handle_decel+0x176>
   11a5c:	89 81       	ldd	r24, Y+1	; 0x01
   11a5e:	9a 81       	ldd	r25, Y+2	; 0x02
   11a60:	fc 01       	movw	r30, r24
   11a62:	10 8e       	std	Z+24, r1	; 0x18
   11a64:	11 8e       	std	Z+25, r1	; 0x19
   11a66:	12 8e       	std	Z+26, r1	; 0x1a
   11a68:	13 8e       	std	Z+27, r1	; 0x1b
   11a6a:	89 81       	ldd	r24, Y+1	; 0x01
   11a6c:	9a 81       	ldd	r25, Y+2	; 0x02
   11a6e:	02 d2       	rcall	.+1028   	; 0x11e74 <stop_motor>
   11a70:	00 00       	nop
   11a72:	0f 90       	pop	r0
   11a74:	0f 90       	pop	r0
   11a76:	df 91       	pop	r29
   11a78:	cf 91       	pop	r28
   11a7a:	ff 90       	pop	r15
   11a7c:	ef 90       	pop	r14
   11a7e:	df 90       	pop	r13
   11a80:	cf 90       	pop	r12
   11a82:	08 95       	ret

00011a84 <init_motor_timers>:
   11a84:	cf 93       	push	r28
   11a86:	df 93       	push	r29
   11a88:	1f 92       	push	r1
   11a8a:	1f 92       	push	r1
   11a8c:	cd b7       	in	r28, 0x3d	; 61
   11a8e:	de b7       	in	r29, 0x3e	; 62
   11a90:	89 83       	std	Y+1, r24	; 0x01
   11a92:	9a 83       	std	Y+2, r25	; 0x02
   11a94:	89 81       	ldd	r24, Y+1	; 0x01
   11a96:	9a 81       	ldd	r25, Y+2	; 0x02
   11a98:	fc 01       	movw	r30, r24
   11a9a:	40 a5       	ldd	r20, Z+40	; 0x28
   11a9c:	89 81       	ldd	r24, Y+1	; 0x01
   11a9e:	9a 81       	ldd	r25, Y+2	; 0x02
   11aa0:	fc 01       	movw	r30, r24
   11aa2:	57 a1       	ldd	r21, Z+39	; 0x27
   11aa4:	89 81       	ldd	r24, Y+1	; 0x01
   11aa6:	9a 81       	ldd	r25, Y+2	; 0x02
   11aa8:	80 96       	adiw	r24, 0x20	; 32
   11aaa:	20 e0       	ldi	r18, 0x00	; 0
   11aac:	30 e0       	ldi	r19, 0x00	; 0
   11aae:	65 2f       	mov	r22, r21
   11ab0:	0e 94 36 b2 	call	0x1646c	; 0x1646c <pwm_init>
   11ab4:	00 00       	nop
   11ab6:	0f 90       	pop	r0
   11ab8:	0f 90       	pop	r0
   11aba:	df 91       	pop	r29
   11abc:	cf 91       	pop	r28
   11abe:	08 95       	ret

00011ac0 <init_stepper_motor_pins>:
   11ac0:	cf 93       	push	r28
   11ac2:	df 93       	push	r29
   11ac4:	cd b7       	in	r28, 0x3d	; 61
   11ac6:	de b7       	in	r29, 0x3e	; 62
   11ac8:	63 e0       	ldi	r22, 0x03	; 3
   11aca:	70 e0       	ldi	r23, 0x00	; 0
   11acc:	8a e3       	ldi	r24, 0x3A	; 58
   11ace:	e1 d9       	rcall	.-3134   	; 0x10e92 <ioport_configure_pin>
   11ad0:	61 e0       	ldi	r22, 0x01	; 1
   11ad2:	70 e0       	ldi	r23, 0x00	; 0
   11ad4:	84 e2       	ldi	r24, 0x24	; 36
   11ad6:	dd d9       	rcall	.-3142   	; 0x10e92 <ioport_configure_pin>
   11ad8:	63 e0       	ldi	r22, 0x03	; 3
   11ada:	70 e0       	ldi	r23, 0x00	; 0
   11adc:	8d e3       	ldi	r24, 0x3D	; 61
   11ade:	d9 d9       	rcall	.-3150   	; 0x10e92 <ioport_configure_pin>
   11ae0:	61 e0       	ldi	r22, 0x01	; 1
   11ae2:	70 e0       	ldi	r23, 0x00	; 0
   11ae4:	89 e3       	ldi	r24, 0x39	; 57
   11ae6:	d5 d9       	rcall	.-3158   	; 0x10e92 <ioport_configure_pin>
   11ae8:	61 e0       	ldi	r22, 0x01	; 1
   11aea:	70 e0       	ldi	r23, 0x00	; 0
   11aec:	88 e3       	ldi	r24, 0x38	; 56
   11aee:	d1 d9       	rcall	.-3166   	; 0x10e92 <ioport_configure_pin>
   11af0:	61 e0       	ldi	r22, 0x01	; 1
   11af2:	70 e0       	ldi	r23, 0x00	; 0
   11af4:	8b e3       	ldi	r24, 0x3B	; 59
   11af6:	cd d9       	rcall	.-3174   	; 0x10e92 <ioport_configure_pin>
   11af8:	60 e0       	ldi	r22, 0x00	; 0
   11afa:	70 e0       	ldi	r23, 0x00	; 0
   11afc:	8f e3       	ldi	r24, 0x3F	; 63
   11afe:	c9 d9       	rcall	.-3182   	; 0x10e92 <ioport_configure_pin>
   11b00:	63 e0       	ldi	r22, 0x03	; 3
   11b02:	70 e0       	ldi	r23, 0x00	; 0
   11b04:	82 e4       	ldi	r24, 0x42	; 66
   11b06:	c5 d9       	rcall	.-3190   	; 0x10e92 <ioport_configure_pin>
   11b08:	61 e0       	ldi	r22, 0x01	; 1
   11b0a:	70 e0       	ldi	r23, 0x00	; 0
   11b0c:	8b e2       	ldi	r24, 0x2B	; 43
   11b0e:	c1 d9       	rcall	.-3198   	; 0x10e92 <ioport_configure_pin>
   11b10:	63 e0       	ldi	r22, 0x03	; 3
   11b12:	70 e0       	ldi	r23, 0x00	; 0
   11b14:	85 e4       	ldi	r24, 0x45	; 69
   11b16:	bd d9       	rcall	.-3206   	; 0x10e92 <ioport_configure_pin>
   11b18:	61 e0       	ldi	r22, 0x01	; 1
   11b1a:	70 e0       	ldi	r23, 0x00	; 0
   11b1c:	81 e4       	ldi	r24, 0x41	; 65
   11b1e:	b9 d9       	rcall	.-3214   	; 0x10e92 <ioport_configure_pin>
   11b20:	61 e0       	ldi	r22, 0x01	; 1
   11b22:	70 e0       	ldi	r23, 0x00	; 0
   11b24:	80 e4       	ldi	r24, 0x40	; 64
   11b26:	b5 d9       	rcall	.-3222   	; 0x10e92 <ioport_configure_pin>
   11b28:	61 e0       	ldi	r22, 0x01	; 1
   11b2a:	70 e0       	ldi	r23, 0x00	; 0
   11b2c:	83 e4       	ldi	r24, 0x43	; 67
   11b2e:	b1 d9       	rcall	.-3230   	; 0x10e92 <ioport_configure_pin>
   11b30:	60 e0       	ldi	r22, 0x00	; 0
   11b32:	70 e0       	ldi	r23, 0x00	; 0
   11b34:	87 e4       	ldi	r24, 0x47	; 71
   11b36:	ad d9       	rcall	.-3238   	; 0x10e92 <ioport_configure_pin>
   11b38:	63 e0       	ldi	r22, 0x03	; 3
   11b3a:	70 e0       	ldi	r23, 0x00	; 0
   11b3c:	8a e4       	ldi	r24, 0x4A	; 74
   11b3e:	a9 d9       	rcall	.-3246   	; 0x10e92 <ioport_configure_pin>
   11b40:	61 e0       	ldi	r22, 0x01	; 1
   11b42:	70 e0       	ldi	r23, 0x00	; 0
   11b44:	89 e1       	ldi	r24, 0x19	; 25
   11b46:	a5 d9       	rcall	.-3254   	; 0x10e92 <ioport_configure_pin>
   11b48:	63 e0       	ldi	r22, 0x03	; 3
   11b4a:	70 e0       	ldi	r23, 0x00	; 0
   11b4c:	8d e4       	ldi	r24, 0x4D	; 77
   11b4e:	a1 d9       	rcall	.-3262   	; 0x10e92 <ioport_configure_pin>
   11b50:	61 e0       	ldi	r22, 0x01	; 1
   11b52:	70 e0       	ldi	r23, 0x00	; 0
   11b54:	89 e4       	ldi	r24, 0x49	; 73
   11b56:	9d d9       	rcall	.-3270   	; 0x10e92 <ioport_configure_pin>
   11b58:	61 e0       	ldi	r22, 0x01	; 1
   11b5a:	70 e0       	ldi	r23, 0x00	; 0
   11b5c:	88 e4       	ldi	r24, 0x48	; 72
   11b5e:	99 d9       	rcall	.-3278   	; 0x10e92 <ioport_configure_pin>
   11b60:	61 e0       	ldi	r22, 0x01	; 1
   11b62:	70 e0       	ldi	r23, 0x00	; 0
   11b64:	8b e4       	ldi	r24, 0x4B	; 75
   11b66:	95 d9       	rcall	.-3286   	; 0x10e92 <ioport_configure_pin>
   11b68:	60 e0       	ldi	r22, 0x00	; 0
   11b6a:	70 e0       	ldi	r23, 0x00	; 0
   11b6c:	8f e4       	ldi	r24, 0x4F	; 79
   11b6e:	91 d9       	rcall	.-3294   	; 0x10e92 <ioport_configure_pin>
   11b70:	63 e0       	ldi	r22, 0x03	; 3
   11b72:	70 e0       	ldi	r23, 0x00	; 0
   11b74:	8a e2       	ldi	r24, 0x2A	; 42
   11b76:	8d d9       	rcall	.-3302   	; 0x10e92 <ioport_configure_pin>
   11b78:	61 e0       	ldi	r22, 0x01	; 1
   11b7a:	70 e0       	ldi	r23, 0x00	; 0
   11b7c:	80 e1       	ldi	r24, 0x10	; 16
   11b7e:	89 d9       	rcall	.-3310   	; 0x10e92 <ioport_configure_pin>
   11b80:	63 e0       	ldi	r22, 0x03	; 3
   11b82:	70 e0       	ldi	r23, 0x00	; 0
   11b84:	8d e2       	ldi	r24, 0x2D	; 45
   11b86:	85 d9       	rcall	.-3318   	; 0x10e92 <ioport_configure_pin>
   11b88:	61 e0       	ldi	r22, 0x01	; 1
   11b8a:	70 e0       	ldi	r23, 0x00	; 0
   11b8c:	89 e2       	ldi	r24, 0x29	; 41
   11b8e:	81 d9       	rcall	.-3326   	; 0x10e92 <ioport_configure_pin>
   11b90:	61 e0       	ldi	r22, 0x01	; 1
   11b92:	70 e0       	ldi	r23, 0x00	; 0
   11b94:	88 e2       	ldi	r24, 0x28	; 40
   11b96:	7d d9       	rcall	.-3334   	; 0x10e92 <ioport_configure_pin>
   11b98:	60 e0       	ldi	r22, 0x00	; 0
   11b9a:	70 e0       	ldi	r23, 0x00	; 0
   11b9c:	8f e2       	ldi	r24, 0x2F	; 47
   11b9e:	79 d9       	rcall	.-3342   	; 0x10e92 <ioport_configure_pin>
   11ba0:	00 00       	nop
   11ba2:	df 91       	pop	r29
   11ba4:	cf 91       	pop	r28
   11ba6:	08 95       	ret

00011ba8 <get_motor_hold_current_percent>:
   11ba8:	cf 93       	push	r28
   11baa:	df 93       	push	r29
   11bac:	00 d0       	rcall	.+0      	; 0x11bae <get_motor_hold_current_percent+0x6>
   11bae:	1f 92       	push	r1
   11bb0:	cd b7       	in	r28, 0x3d	; 61
   11bb2:	de b7       	in	r29, 0x3e	; 62
   11bb4:	8b 83       	std	Y+3, r24	; 0x03
   11bb6:	9c 83       	std	Y+4, r25	; 0x04
   11bb8:	19 82       	std	Y+1, r1	; 0x01
   11bba:	1a 82       	std	Y+2, r1	; 0x02
   11bbc:	8b 81       	ldd	r24, Y+3	; 0x03
   11bbe:	9c 81       	ldd	r25, Y+4	; 0x04
   11bc0:	fc 01       	movw	r30, r24
   11bc2:	82 a9       	ldd	r24, Z+50	; 0x32
   11bc4:	93 a9       	ldd	r25, Z+51	; 0x33
   11bc6:	88 27       	eor	r24, r24
   11bc8:	96 70       	andi	r25, 0x06	; 6
   11bca:	89 2f       	mov	r24, r25
   11bcc:	99 27       	eor	r25, r25
   11bce:	86 95       	lsr	r24
   11bd0:	8a 83       	std	Y+2, r24	; 0x02
   11bd2:	8a 81       	ldd	r24, Y+2	; 0x02
   11bd4:	88 2f       	mov	r24, r24
   11bd6:	90 e0       	ldi	r25, 0x00	; 0
   11bd8:	81 30       	cpi	r24, 0x01	; 1
   11bda:	91 05       	cpc	r25, r1
   11bdc:	79 f0       	breq	.+30     	; 0x11bfc <get_motor_hold_current_percent+0x54>
   11bde:	82 30       	cpi	r24, 0x02	; 2
   11be0:	91 05       	cpc	r25, r1
   11be2:	1c f4       	brge	.+6      	; 0x11bea <get_motor_hold_current_percent+0x42>
   11be4:	89 2b       	or	r24, r25
   11be6:	39 f0       	breq	.+14     	; 0x11bf6 <get_motor_hold_current_percent+0x4e>
   11be8:	12 c0       	rjmp	.+36     	; 0x11c0e <get_motor_hold_current_percent+0x66>
   11bea:	82 30       	cpi	r24, 0x02	; 2
   11bec:	91 05       	cpc	r25, r1
   11bee:	49 f0       	breq	.+18     	; 0x11c02 <get_motor_hold_current_percent+0x5a>
   11bf0:	03 97       	sbiw	r24, 0x03	; 3
   11bf2:	51 f0       	breq	.+20     	; 0x11c08 <get_motor_hold_current_percent+0x60>
   11bf4:	0c c0       	rjmp	.+24     	; 0x11c0e <get_motor_hold_current_percent+0x66>
   11bf6:	89 e1       	ldi	r24, 0x19	; 25
   11bf8:	89 83       	std	Y+1, r24	; 0x01
   11bfa:	0b c0       	rjmp	.+22     	; 0x11c12 <get_motor_hold_current_percent+0x6a>
   11bfc:	82 e3       	ldi	r24, 0x32	; 50
   11bfe:	89 83       	std	Y+1, r24	; 0x01
   11c00:	08 c0       	rjmp	.+16     	; 0x11c12 <get_motor_hold_current_percent+0x6a>
   11c02:	8b e4       	ldi	r24, 0x4B	; 75
   11c04:	89 83       	std	Y+1, r24	; 0x01
   11c06:	05 c0       	rjmp	.+10     	; 0x11c12 <get_motor_hold_current_percent+0x6a>
   11c08:	84 e6       	ldi	r24, 0x64	; 100
   11c0a:	89 83       	std	Y+1, r24	; 0x01
   11c0c:	02 c0       	rjmp	.+4      	; 0x11c12 <get_motor_hold_current_percent+0x6a>
   11c0e:	19 82       	std	Y+1, r1	; 0x01
   11c10:	00 00       	nop
   11c12:	8b 81       	ldd	r24, Y+3	; 0x03
   11c14:	9c 81       	ldd	r25, Y+4	; 0x04
   11c16:	fc 01       	movw	r30, r24
   11c18:	83 81       	ldd	r24, Z+3	; 0x03
   11c1a:	88 23       	and	r24, r24
   11c1c:	09 f4       	brne	.+2      	; 0x11c20 <get_motor_hold_current_percent+0x78>
   11c1e:	19 82       	std	Y+1, r1	; 0x01
   11c20:	89 81       	ldd	r24, Y+1	; 0x01
   11c22:	24 96       	adiw	r28, 0x04	; 4
   11c24:	cd bf       	out	0x3d, r28	; 61
   11c26:	de bf       	out	0x3e, r29	; 62
   11c28:	df 91       	pop	r29
   11c2a:	cf 91       	pop	r28
   11c2c:	08 95       	ret

00011c2e <set_motor_hold_current>:
   11c2e:	cf 93       	push	r28
   11c30:	df 93       	push	r29
   11c32:	cd b7       	in	r28, 0x3d	; 61
   11c34:	de b7       	in	r29, 0x3e	; 62
   11c36:	2c 97       	sbiw	r28, 0x0c	; 12
   11c38:	cd bf       	out	0x3d, r28	; 61
   11c3a:	de bf       	out	0x3e, r29	; 62
   11c3c:	8a 87       	std	Y+10, r24	; 0x0a
   11c3e:	9b 87       	std	Y+11, r25	; 0x0b
   11c40:	6c 87       	std	Y+12, r22	; 0x0c
   11c42:	81 e0       	ldi	r24, 0x01	; 1
   11c44:	89 83       	std	Y+1, r24	; 0x01
   11c46:	8c 85       	ldd	r24, Y+12	; 0x0c
   11c48:	88 2f       	mov	r24, r24
   11c4a:	90 e0       	ldi	r25, 0x00	; 0
   11c4c:	82 33       	cpi	r24, 0x32	; 50
   11c4e:	91 05       	cpc	r25, r1
   11c50:	69 f1       	breq	.+90     	; 0x11cac <set_motor_hold_current+0x7e>
   11c52:	83 33       	cpi	r24, 0x33	; 51
   11c54:	91 05       	cpc	r25, r1
   11c56:	2c f4       	brge	.+10     	; 0x11c62 <set_motor_hold_current+0x34>
   11c58:	00 97       	sbiw	r24, 0x00	; 0
   11c5a:	59 f0       	breq	.+22     	; 0x11c72 <set_motor_hold_current+0x44>
   11c5c:	49 97       	sbiw	r24, 0x19	; 25
   11c5e:	69 f0       	breq	.+26     	; 0x11c7a <set_motor_hold_current+0x4c>
   11c60:	70 c0       	rjmp	.+224    	; 0x11d42 <set_motor_hold_current+0x114>
   11c62:	8b 34       	cpi	r24, 0x4B	; 75
   11c64:	91 05       	cpc	r25, r1
   11c66:	d9 f1       	breq	.+118    	; 0x11cde <set_motor_hold_current+0xb0>
   11c68:	84 36       	cpi	r24, 0x64	; 100
   11c6a:	91 05       	cpc	r25, r1
   11c6c:	09 f4       	brne	.+2      	; 0x11c70 <set_motor_hold_current+0x42>
   11c6e:	50 c0       	rjmp	.+160    	; 0x11d10 <set_motor_hold_current+0xe2>
   11c70:	68 c0       	rjmp	.+208    	; 0x11d42 <set_motor_hold_current+0x114>
   11c72:	8a 85       	ldd	r24, Y+10	; 0x0a
   11c74:	9b 85       	ldd	r25, Y+11	; 0x0b
   11c76:	71 d1       	rcall	.+738    	; 0x11f5a <disable_motor>
   11c78:	66 c0       	rjmp	.+204    	; 0x11d46 <set_motor_hold_current+0x118>
   11c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
   11c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
   11c7e:	fc 01       	movw	r30, r24
   11c80:	82 a9       	ldd	r24, Z+50	; 0x32
   11c82:	93 a9       	ldd	r25, Z+51	; 0x33
   11c84:	9c 01       	movw	r18, r24
   11c86:	3d 7f       	andi	r19, 0xFD	; 253
   11c88:	8a 85       	ldd	r24, Y+10	; 0x0a
   11c8a:	9b 85       	ldd	r25, Y+11	; 0x0b
   11c8c:	fc 01       	movw	r30, r24
   11c8e:	22 ab       	std	Z+50, r18	; 0x32
   11c90:	33 ab       	std	Z+51, r19	; 0x33
   11c92:	8a 85       	ldd	r24, Y+10	; 0x0a
   11c94:	9b 85       	ldd	r25, Y+11	; 0x0b
   11c96:	fc 01       	movw	r30, r24
   11c98:	82 a9       	ldd	r24, Z+50	; 0x32
   11c9a:	93 a9       	ldd	r25, Z+51	; 0x33
   11c9c:	9c 01       	movw	r18, r24
   11c9e:	3b 7f       	andi	r19, 0xFB	; 251
   11ca0:	8a 85       	ldd	r24, Y+10	; 0x0a
   11ca2:	9b 85       	ldd	r25, Y+11	; 0x0b
   11ca4:	fc 01       	movw	r30, r24
   11ca6:	22 ab       	std	Z+50, r18	; 0x32
   11ca8:	33 ab       	std	Z+51, r19	; 0x33
   11caa:	4d c0       	rjmp	.+154    	; 0x11d46 <set_motor_hold_current+0x118>
   11cac:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cae:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cb0:	fc 01       	movw	r30, r24
   11cb2:	82 a9       	ldd	r24, Z+50	; 0x32
   11cb4:	93 a9       	ldd	r25, Z+51	; 0x33
   11cb6:	9c 01       	movw	r18, r24
   11cb8:	32 60       	ori	r19, 0x02	; 2
   11cba:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cbc:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cbe:	fc 01       	movw	r30, r24
   11cc0:	22 ab       	std	Z+50, r18	; 0x32
   11cc2:	33 ab       	std	Z+51, r19	; 0x33
   11cc4:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cc6:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cc8:	fc 01       	movw	r30, r24
   11cca:	82 a9       	ldd	r24, Z+50	; 0x32
   11ccc:	93 a9       	ldd	r25, Z+51	; 0x33
   11cce:	9c 01       	movw	r18, r24
   11cd0:	3b 7f       	andi	r19, 0xFB	; 251
   11cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cd6:	fc 01       	movw	r30, r24
   11cd8:	22 ab       	std	Z+50, r18	; 0x32
   11cda:	33 ab       	std	Z+51, r19	; 0x33
   11cdc:	34 c0       	rjmp	.+104    	; 0x11d46 <set_motor_hold_current+0x118>
   11cde:	8a 85       	ldd	r24, Y+10	; 0x0a
   11ce0:	9b 85       	ldd	r25, Y+11	; 0x0b
   11ce2:	fc 01       	movw	r30, r24
   11ce4:	82 a9       	ldd	r24, Z+50	; 0x32
   11ce6:	93 a9       	ldd	r25, Z+51	; 0x33
   11ce8:	9c 01       	movw	r18, r24
   11cea:	3d 7f       	andi	r19, 0xFD	; 253
   11cec:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cee:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cf0:	fc 01       	movw	r30, r24
   11cf2:	22 ab       	std	Z+50, r18	; 0x32
   11cf4:	33 ab       	std	Z+51, r19	; 0x33
   11cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cfa:	fc 01       	movw	r30, r24
   11cfc:	82 a9       	ldd	r24, Z+50	; 0x32
   11cfe:	93 a9       	ldd	r25, Z+51	; 0x33
   11d00:	9c 01       	movw	r18, r24
   11d02:	34 60       	ori	r19, 0x04	; 4
   11d04:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d06:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d08:	fc 01       	movw	r30, r24
   11d0a:	22 ab       	std	Z+50, r18	; 0x32
   11d0c:	33 ab       	std	Z+51, r19	; 0x33
   11d0e:	1b c0       	rjmp	.+54     	; 0x11d46 <set_motor_hold_current+0x118>
   11d10:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d12:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d14:	fc 01       	movw	r30, r24
   11d16:	82 a9       	ldd	r24, Z+50	; 0x32
   11d18:	93 a9       	ldd	r25, Z+51	; 0x33
   11d1a:	9c 01       	movw	r18, r24
   11d1c:	32 60       	ori	r19, 0x02	; 2
   11d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d20:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d22:	fc 01       	movw	r30, r24
   11d24:	22 ab       	std	Z+50, r18	; 0x32
   11d26:	33 ab       	std	Z+51, r19	; 0x33
   11d28:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d2a:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d2c:	fc 01       	movw	r30, r24
   11d2e:	82 a9       	ldd	r24, Z+50	; 0x32
   11d30:	93 a9       	ldd	r25, Z+51	; 0x33
   11d32:	9c 01       	movw	r18, r24
   11d34:	34 60       	ori	r19, 0x04	; 4
   11d36:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d38:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d3a:	fc 01       	movw	r30, r24
   11d3c:	22 ab       	std	Z+50, r18	; 0x32
   11d3e:	33 ab       	std	Z+51, r19	; 0x33
   11d40:	02 c0       	rjmp	.+4      	; 0x11d46 <set_motor_hold_current+0x118>
   11d42:	19 82       	std	Y+1, r1	; 0x01
   11d44:	00 00       	nop
   11d46:	89 81       	ldd	r24, Y+1	; 0x01
   11d48:	88 23       	and	r24, r24
   11d4a:	19 f1       	breq	.+70     	; 0x11d92 <set_motor_hold_current+0x164>
   11d4c:	8c 85       	ldd	r24, Y+12	; 0x0c
   11d4e:	88 23       	and	r24, r24
   11d50:	01 f1       	breq	.+64     	; 0x11d92 <set_motor_hold_current+0x164>
   11d52:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d54:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d56:	e7 d0       	rcall	.+462    	; 0x11f26 <enable_motor>
   11d58:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d5c:	fc 01       	movw	r30, r24
   11d5e:	82 a9       	ldd	r24, Z+50	; 0x32
   11d60:	93 a9       	ldd	r25, Z+51	; 0x33
   11d62:	89 2f       	mov	r24, r25
   11d64:	99 27       	eor	r25, r25
   11d66:	8a 83       	std	Y+2, r24	; 0x02
   11d68:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d6a:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d6c:	fc 01       	movw	r30, r24
   11d6e:	82 a9       	ldd	r24, Z+50	; 0x32
   11d70:	93 a9       	ldd	r25, Z+51	; 0x33
   11d72:	8b 83       	std	Y+3, r24	; 0x03
   11d74:	8a 85       	ldd	r24, Y+10	; 0x0a
   11d76:	9b 85       	ldd	r25, Y+11	; 0x0b
   11d78:	8b 5b       	subi	r24, 0xBB	; 187
   11d7a:	9f 4f       	sbci	r25, 0xFF	; 255
   11d7c:	fc 01       	movw	r30, r24
   11d7e:	30 81       	ld	r19, Z
   11d80:	ce 01       	movw	r24, r28
   11d82:	02 96       	adiw	r24, 0x02	; 2
   11d84:	22 e0       	ldi	r18, 0x02	; 2
   11d86:	ac 01       	movw	r20, r24
   11d88:	63 2f       	mov	r22, r19
   11d8a:	80 ec       	ldi	r24, 0xC0	; 192
   11d8c:	9a e0       	ldi	r25, 0x0A	; 10
   11d8e:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <send_msg>
   11d92:	89 81       	ldd	r24, Y+1	; 0x01
   11d94:	2c 96       	adiw	r28, 0x0c	; 12
   11d96:	cd bf       	out	0x3d, r28	; 61
   11d98:	de bf       	out	0x3e, r29	; 62
   11d9a:	df 91       	pop	r29
   11d9c:	cf 91       	pop	r28
   11d9e:	08 95       	ret

00011da0 <start_motor>:
   11da0:	cf 93       	push	r28
   11da2:	df 93       	push	r29
   11da4:	1f 92       	push	r1
   11da6:	1f 92       	push	r1
   11da8:	cd b7       	in	r28, 0x3d	; 61
   11daa:	de b7       	in	r29, 0x3e	; 62
   11dac:	89 83       	std	Y+1, r24	; 0x01
   11dae:	9a 83       	std	Y+2, r25	; 0x02
   11db0:	89 81       	ldd	r24, Y+1	; 0x01
   11db2:	9a 81       	ldd	r25, Y+2	; 0x02
   11db4:	21 e0       	ldi	r18, 0x01	; 1
   11db6:	fc 01       	movw	r30, r24
   11db8:	23 83       	std	Z+3, r18	; 0x03
   11dba:	89 81       	ldd	r24, Y+1	; 0x01
   11dbc:	9a 81       	ldd	r25, Y+2	; 0x02
   11dbe:	fc 01       	movw	r30, r24
   11dc0:	80 81       	ld	r24, Z
   11dc2:	88 23       	and	r24, r24
   11dc4:	71 f4       	brne	.+28     	; 0x11de2 <start_motor+0x42>
   11dc6:	8a e0       	ldi	r24, 0x0A	; 10
   11dc8:	4c d9       	rcall	.-3432   	; 0x11062 <ioport_get_pin_level>
   11dca:	98 2f       	mov	r25, r24
   11dcc:	81 e0       	ldi	r24, 0x01	; 1
   11dce:	89 27       	eor	r24, r25
   11dd0:	88 23       	and	r24, r24
   11dd2:	39 f0       	breq	.+14     	; 0x11de2 <start_motor+0x42>
   11dd4:	89 81       	ldd	r24, Y+1	; 0x01
   11dd6:	9a 81       	ldd	r25, Y+2	; 0x02
   11dd8:	fc 01       	movw	r30, r24
   11dda:	82 81       	ldd	r24, Z+2	; 0x02
   11ddc:	81 30       	cpi	r24, 0x01	; 1
   11dde:	09 f4       	brne	.+2      	; 0x11de2 <start_motor+0x42>
   11de0:	43 c0       	rjmp	.+134    	; 0x11e68 <start_motor+0xc8>
   11de2:	89 81       	ldd	r24, Y+1	; 0x01
   11de4:	9a 81       	ldd	r25, Y+2	; 0x02
   11de6:	8c 5b       	subi	r24, 0xBC	; 188
   11de8:	9f 4f       	sbci	r25, 0xFF	; 255
   11dea:	fc 01       	movw	r30, r24
   11dec:	80 81       	ld	r24, Z
   11dee:	e3 d8       	rcall	.-3642   	; 0x10fb6 <ioport_set_pin_high>
   11df0:	89 81       	ldd	r24, Y+1	; 0x01
   11df2:	9a 81       	ldd	r25, Y+2	; 0x02
   11df4:	fc 01       	movw	r30, r24
   11df6:	81 a5       	ldd	r24, Z+41	; 0x29
   11df8:	92 a5       	ldd	r25, Z+42	; 0x2a
   11dfa:	a3 a5       	ldd	r26, Z+43	; 0x2b
   11dfc:	b4 a5       	ldd	r27, Z+44	; 0x2c
   11dfe:	20 e0       	ldi	r18, 0x00	; 0
   11e00:	30 e0       	ldi	r19, 0x00	; 0
   11e02:	a9 01       	movw	r20, r18
   11e04:	bc 01       	movw	r22, r24
   11e06:	cd 01       	movw	r24, r26
   11e08:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   11e0c:	88 23       	and	r24, r24
   11e0e:	79 f4       	brne	.+30     	; 0x11e2e <start_motor+0x8e>
   11e10:	89 81       	ldd	r24, Y+1	; 0x01
   11e12:	9a 81       	ldd	r25, Y+2	; 0x02
   11e14:	fc 01       	movw	r30, r24
   11e16:	85 a5       	ldd	r24, Z+45	; 0x2d
   11e18:	96 a5       	ldd	r25, Z+46	; 0x2e
   11e1a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   11e1c:	b0 a9       	ldd	r27, Z+48	; 0x30
   11e1e:	89 2b       	or	r24, r25
   11e20:	8a 2b       	or	r24, r26
   11e22:	8b 2b       	or	r24, r27
   11e24:	21 f4       	brne	.+8      	; 0x11e2e <start_motor+0x8e>
   11e26:	89 81       	ldd	r24, Y+1	; 0x01
   11e28:	9a 81       	ldd	r25, Y+2	; 0x02
   11e2a:	24 d0       	rcall	.+72     	; 0x11e74 <stop_motor>
   11e2c:	1d c0       	rjmp	.+58     	; 0x11e68 <start_motor+0xc8>
   11e2e:	89 81       	ldd	r24, Y+1	; 0x01
   11e30:	9a 81       	ldd	r25, Y+2	; 0x02
   11e32:	fc 01       	movw	r30, r24
   11e34:	81 a5       	ldd	r24, Z+41	; 0x29
   11e36:	92 a5       	ldd	r25, Z+42	; 0x2a
   11e38:	a3 a5       	ldd	r26, Z+43	; 0x2b
   11e3a:	b4 a5       	ldd	r27, Z+44	; 0x2c
   11e3c:	bc 01       	movw	r22, r24
   11e3e:	cd 01       	movw	r24, r26
   11e40:	0e 94 26 b5 	call	0x16a4c	; 0x16a4c <__fixunssfsi>
   11e44:	9b 01       	movw	r18, r22
   11e46:	ac 01       	movw	r20, r24
   11e48:	89 81       	ldd	r24, Y+1	; 0x01
   11e4a:	9a 81       	ldd	r25, Y+2	; 0x02
   11e4c:	80 96       	adiw	r24, 0x20	; 32
   11e4e:	ba 01       	movw	r22, r20
   11e50:	a9 01       	movw	r20, r18
   11e52:	ee d0       	rcall	.+476    	; 0x12030 <pwm_set_frequency_32bit>
   11e54:	89 81       	ldd	r24, Y+1	; 0x01
   11e56:	9a 81       	ldd	r25, Y+2	; 0x02
   11e58:	fc 01       	movw	r30, r24
   11e5a:	21 a9       	ldd	r18, Z+49	; 0x31
   11e5c:	89 81       	ldd	r24, Y+1	; 0x01
   11e5e:	9a 81       	ldd	r25, Y+2	; 0x02
   11e60:	80 96       	adiw	r24, 0x20	; 32
   11e62:	62 2f       	mov	r22, r18
   11e64:	0e 94 bd b3 	call	0x1677a	; 0x1677a <pwm_start>
   11e68:	00 00       	nop
   11e6a:	0f 90       	pop	r0
   11e6c:	0f 90       	pop	r0
   11e6e:	df 91       	pop	r29
   11e70:	cf 91       	pop	r28
   11e72:	08 95       	ret

00011e74 <stop_motor>:
   11e74:	cf 93       	push	r28
   11e76:	df 93       	push	r29
   11e78:	1f 92       	push	r1
   11e7a:	1f 92       	push	r1
   11e7c:	cd b7       	in	r28, 0x3d	; 61
   11e7e:	de b7       	in	r29, 0x3e	; 62
   11e80:	89 83       	std	Y+1, r24	; 0x01
   11e82:	9a 83       	std	Y+2, r25	; 0x02
   11e84:	89 81       	ldd	r24, Y+1	; 0x01
   11e86:	9a 81       	ldd	r25, Y+2	; 0x02
   11e88:	fc 01       	movw	r30, r24
   11e8a:	84 89       	ldd	r24, Z+20	; 0x14
   11e8c:	95 89       	ldd	r25, Z+21	; 0x15
   11e8e:	a6 89       	ldd	r26, Z+22	; 0x16
   11e90:	b7 89       	ldd	r27, Z+23	; 0x17
   11e92:	20 e0       	ldi	r18, 0x00	; 0
   11e94:	30 e0       	ldi	r19, 0x00	; 0
   11e96:	a9 01       	movw	r20, r18
   11e98:	bc 01       	movw	r22, r24
   11e9a:	cd 01       	movw	r24, r26
   11e9c:	0e 94 7b b4 	call	0x168f6	; 0x168f6 <__cmpsf2>
   11ea0:	88 23       	and	r24, r24
   11ea2:	e1 f0       	breq	.+56     	; 0x11edc <stop_motor+0x68>
   11ea4:	89 81       	ldd	r24, Y+1	; 0x01
   11ea6:	9a 81       	ldd	r25, Y+2	; 0x02
   11ea8:	fc 01       	movw	r30, r24
   11eaa:	81 a5       	ldd	r24, Z+41	; 0x29
   11eac:	92 a5       	ldd	r25, Z+42	; 0x2a
   11eae:	a3 a5       	ldd	r26, Z+43	; 0x2b
   11eb0:	b4 a5       	ldd	r27, Z+44	; 0x2c
   11eb2:	29 81       	ldd	r18, Y+1	; 0x01
   11eb4:	3a 81       	ldd	r19, Y+2	; 0x02
   11eb6:	f9 01       	movw	r30, r18
   11eb8:	24 89       	ldd	r18, Z+20	; 0x14
   11eba:	35 89       	ldd	r19, Z+21	; 0x15
   11ebc:	46 89       	ldd	r20, Z+22	; 0x16
   11ebe:	57 89       	ldd	r21, Z+23	; 0x17
   11ec0:	bc 01       	movw	r22, r24
   11ec2:	cd 01       	movw	r24, r26
   11ec4:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__divsf3>
   11ec8:	dc 01       	movw	r26, r24
   11eca:	cb 01       	movw	r24, r22
   11ecc:	29 81       	ldd	r18, Y+1	; 0x01
   11ece:	3a 81       	ldd	r19, Y+2	; 0x02
   11ed0:	f9 01       	movw	r30, r18
   11ed2:	80 8f       	std	Z+24, r24	; 0x18
   11ed4:	91 8f       	std	Z+25, r25	; 0x19
   11ed6:	a2 8f       	std	Z+26, r26	; 0x1a
   11ed8:	b3 8f       	std	Z+27, r27	; 0x1b
   11eda:	1f c0       	rjmp	.+62     	; 0x11f1a <stop_motor+0xa6>
   11edc:	89 81       	ldd	r24, Y+1	; 0x01
   11ede:	9a 81       	ldd	r25, Y+2	; 0x02
   11ee0:	fc 01       	movw	r30, r24
   11ee2:	13 82       	std	Z+3, r1	; 0x03
   11ee4:	89 81       	ldd	r24, Y+1	; 0x01
   11ee6:	9a 81       	ldd	r25, Y+2	; 0x02
   11ee8:	fc 01       	movw	r30, r24
   11eea:	10 86       	std	Z+8, r1	; 0x08
   11eec:	11 86       	std	Z+9, r1	; 0x09
   11eee:	12 86       	std	Z+10, r1	; 0x0a
   11ef0:	13 86       	std	Z+11, r1	; 0x0b
   11ef2:	89 81       	ldd	r24, Y+1	; 0x01
   11ef4:	9a 81       	ldd	r25, Y+2	; 0x02
   11ef6:	80 96       	adiw	r24, 0x20	; 32
   11ef8:	60 e0       	ldi	r22, 0x00	; 0
   11efa:	32 da       	rcall	.-2972   	; 0x11360 <pwm_set_duty_cycle_percent>
   11efc:	89 81       	ldd	r24, Y+1	; 0x01
   11efe:	9a 81       	ldd	r25, Y+2	; 0x02
   11f00:	80 96       	adiw	r24, 0x20	; 32
   11f02:	60 e0       	ldi	r22, 0x00	; 0
   11f04:	70 e0       	ldi	r23, 0x00	; 0
   11f06:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <pwm_set_frequency>
   11f0a:	89 81       	ldd	r24, Y+1	; 0x01
   11f0c:	9a 81       	ldd	r25, Y+2	; 0x02
   11f0e:	80 5c       	subi	r24, 0xC0	; 192
   11f10:	9f 4f       	sbci	r25, 0xFF	; 255
   11f12:	fc 01       	movw	r30, r24
   11f14:	80 81       	ld	r24, Z
   11f16:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <ioport_set_pin_low>
   11f1a:	00 00       	nop
   11f1c:	0f 90       	pop	r0
   11f1e:	0f 90       	pop	r0
   11f20:	df 91       	pop	r29
   11f22:	cf 91       	pop	r28
   11f24:	08 95       	ret

00011f26 <enable_motor>:
   11f26:	cf 93       	push	r28
   11f28:	df 93       	push	r29
   11f2a:	1f 92       	push	r1
   11f2c:	1f 92       	push	r1
   11f2e:	cd b7       	in	r28, 0x3d	; 61
   11f30:	de b7       	in	r29, 0x3e	; 62
   11f32:	89 83       	std	Y+1, r24	; 0x01
   11f34:	9a 83       	std	Y+2, r25	; 0x02
   11f36:	89 81       	ldd	r24, Y+1	; 0x01
   11f38:	9a 81       	ldd	r25, Y+2	; 0x02
   11f3a:	21 e0       	ldi	r18, 0x01	; 1
   11f3c:	fc 01       	movw	r30, r24
   11f3e:	23 83       	std	Z+3, r18	; 0x03
   11f40:	89 81       	ldd	r24, Y+1	; 0x01
   11f42:	9a 81       	ldd	r25, Y+2	; 0x02
   11f44:	8c 5b       	subi	r24, 0xBC	; 188
   11f46:	9f 4f       	sbci	r25, 0xFF	; 255
   11f48:	fc 01       	movw	r30, r24
   11f4a:	80 81       	ld	r24, Z
   11f4c:	34 d8       	rcall	.-3992   	; 0x10fb6 <ioport_set_pin_high>
   11f4e:	00 00       	nop
   11f50:	0f 90       	pop	r0
   11f52:	0f 90       	pop	r0
   11f54:	df 91       	pop	r29
   11f56:	cf 91       	pop	r28
   11f58:	08 95       	ret

00011f5a <disable_motor>:
   11f5a:	cf 93       	push	r28
   11f5c:	df 93       	push	r29
   11f5e:	1f 92       	push	r1
   11f60:	1f 92       	push	r1
   11f62:	cd b7       	in	r28, 0x3d	; 61
   11f64:	de b7       	in	r29, 0x3e	; 62
   11f66:	89 83       	std	Y+1, r24	; 0x01
   11f68:	9a 83       	std	Y+2, r25	; 0x02
   11f6a:	89 81       	ldd	r24, Y+1	; 0x01
   11f6c:	9a 81       	ldd	r25, Y+2	; 0x02
   11f6e:	fc 01       	movw	r30, r24
   11f70:	13 82       	std	Z+3, r1	; 0x03
   11f72:	89 81       	ldd	r24, Y+1	; 0x01
   11f74:	9a 81       	ldd	r25, Y+2	; 0x02
   11f76:	8c 5b       	subi	r24, 0xBC	; 188
   11f78:	9f 4f       	sbci	r25, 0xFF	; 255
   11f7a:	fc 01       	movw	r30, r24
   11f7c:	80 81       	ld	r24, Z
   11f7e:	0e 94 86 87 	call	0x10f0c	; 0x10f0c <ioport_set_pin_low>
   11f82:	00 00       	nop
   11f84:	0f 90       	pop	r0
   11f86:	0f 90       	pop	r0
   11f88:	df 91       	pop	r29
   11f8a:	cf 91       	pop	r28
   11f8c:	08 95       	ret

00011f8e <reset_motor_config>:

//Resets motorConfig struct to initial state
void reset_motor_config(motorConfig *motor)
{
   11f8e:	cf 93       	push	r28
   11f90:	df 93       	push	r29
   11f92:	1f 92       	push	r1
   11f94:	1f 92       	push	r1
   11f96:	cd b7       	in	r28, 0x3d	; 61
   11f98:	de b7       	in	r29, 0x3e	; 62
   11f9a:	89 83       	std	Y+1, r24	; 0x01
   11f9c:	9a 83       	std	Y+2, r25	; 0x02
	motor->controlType = DISCRETE_CONTROL;
   11f9e:	89 81       	ldd	r24, Y+1	; 0x01
   11fa0:	9a 81       	ldd	r25, Y+2	; 0x02
   11fa2:	fc 01       	movw	r30, r24
   11fa4:	11 82       	std	Z+1, r1	; 0x01
	motor->direction = DIR_CW;
   11fa6:	89 81       	ldd	r24, Y+1	; 0x01
   11fa8:	9a 81       	ldd	r25, Y+2	; 0x02
   11faa:	fc 01       	movw	r30, r24
   11fac:	12 82       	std	Z+2, r1	; 0x02
	motor->enabled = FALSE;
   11fae:	89 81       	ldd	r24, Y+1	; 0x01
   11fb0:	9a 81       	ldd	r25, Y+2	; 0x02
   11fb2:	fc 01       	movw	r30, r24
   11fb4:	13 82       	std	Z+3, r1	; 0x03
	motor->speed = 0;
   11fb6:	89 81       	ldd	r24, Y+1	; 0x01
   11fb8:	9a 81       	ldd	r25, Y+2	; 0x02
   11fba:	fc 01       	movw	r30, r24
   11fbc:	10 86       	std	Z+8, r1	; 0x08
   11fbe:	11 86       	std	Z+9, r1	; 0x09
   11fc0:	12 86       	std	Z+10, r1	; 0x0a
   11fc2:	13 86       	std	Z+11, r1	; 0x0b
	motor->accelTime = 0;
   11fc4:	89 81       	ldd	r24, Y+1	; 0x01
   11fc6:	9a 81       	ldd	r25, Y+2	; 0x02
   11fc8:	fc 01       	movw	r30, r24
   11fca:	14 86       	std	Z+12, r1	; 0x0c
   11fcc:	15 86       	std	Z+13, r1	; 0x0d
   11fce:	16 86       	std	Z+14, r1	; 0x0e
   11fd0:	17 86       	std	Z+15, r1	; 0x0f
	motor->accelRate = 0;
   11fd2:	89 81       	ldd	r24, Y+1	; 0x01
   11fd4:	9a 81       	ldd	r25, Y+2	; 0x02
   11fd6:	fc 01       	movw	r30, r24
   11fd8:	10 8a       	std	Z+16, r1	; 0x10
   11fda:	11 8a       	std	Z+17, r1	; 0x11
   11fdc:	12 8a       	std	Z+18, r1	; 0x12
   11fde:	13 8a       	std	Z+19, r1	; 0x13
	motor->stepsToMove = 0;
   11fe0:	89 81       	ldd	r24, Y+1	; 0x01
   11fe2:	9a 81       	ldd	r25, Y+2	; 0x02
   11fe4:	fc 01       	movw	r30, r24
   11fe6:	14 8e       	std	Z+28, r1	; 0x1c
   11fe8:	15 8e       	std	Z+29, r1	; 0x1d
	motor->stepsToMove = 0;
   11fea:	89 81       	ldd	r24, Y+1	; 0x01
   11fec:	9a 81       	ldd	r25, Y+2	; 0x02
   11fee:	fc 01       	movw	r30, r24
   11ff0:	14 8e       	std	Z+28, r1	; 0x1c
   11ff2:	15 8e       	std	Z+29, r1	; 0x1d
	motor->stepRes = STEP_FULL;
   11ff4:	89 81       	ldd	r24, Y+1	; 0x01
   11ff6:	9a 81       	ldd	r25, Y+2	; 0x02
   11ff8:	21 e0       	ldi	r18, 0x01	; 1
   11ffa:	fc 01       	movw	r30, r24
   11ffc:	27 8f       	std	Z+31, r18	; 0x1f
	motor->PWMFreq = 0;
   11ffe:	89 81       	ldd	r24, Y+1	; 0x01
   12000:	9a 81       	ldd	r25, Y+2	; 0x02
   12002:	fc 01       	movw	r30, r24
   12004:	11 a6       	std	Z+41, r1	; 0x29
   12006:	12 a6       	std	Z+42, r1	; 0x2a
   12008:	13 a6       	std	Z+43, r1	; 0x2b
   1200a:	14 a6       	std	Z+44, r1	; 0x2c
	motor->PWMEndFreq = 0;
   1200c:	89 81       	ldd	r24, Y+1	; 0x01
   1200e:	9a 81       	ldd	r25, Y+2	; 0x02
   12010:	fc 01       	movw	r30, r24
   12012:	15 a6       	std	Z+45, r1	; 0x2d
   12014:	16 a6       	std	Z+46, r1	; 0x2e
   12016:	17 a6       	std	Z+47, r1	; 0x2f
   12018:	10 aa       	std	Z+48, r1	; 0x30
	motor->PWMDuty = 50;
   1201a:	89 81       	ldd	r24, Y+1	; 0x01
   1201c:	9a 81       	ldd	r25, Y+2	; 0x02
   1201e:	22 e3       	ldi	r18, 0x32	; 50
   12020:	fc 01       	movw	r30, r24
   12022:	21 ab       	std	Z+49, r18	; 0x31
}
   12024:	00 00       	nop
   12026:	0f 90       	pop	r0
   12028:	0f 90       	pop	r0
   1202a:	df 91       	pop	r29
   1202c:	cf 91       	pop	r28
   1202e:	08 95       	ret

00012030 <pwm_set_frequency_32bit>:

//Same as pwm_set_frequency in HAL but with uint32_t input
void pwm_set_frequency_32bit(struct pwm_config *config, uint32_t freq_hz)
{
   12030:	cf 93       	push	r28
   12032:	df 93       	push	r29
   12034:	cd b7       	in	r28, 0x3d	; 61
   12036:	de b7       	in	r29, 0x3e	; 62
   12038:	2e 97       	sbiw	r28, 0x0e	; 14
   1203a:	cd bf       	out	0x3d, r28	; 61
   1203c:	de bf       	out	0x3e, r29	; 62
   1203e:	89 87       	std	Y+9, r24	; 0x09
   12040:	9a 87       	std	Y+10, r25	; 0x0a
   12042:	4b 87       	std	Y+11, r20	; 0x0b
   12044:	5c 87       	std	Y+12, r21	; 0x0c
   12046:	6d 87       	std	Y+13, r22	; 0x0d
   12048:	7e 87       	std	Y+14, r23	; 0x0e
	uint32_t cpu_hz = sysclk_get_cpu_hz();
   1204a:	14 d9       	rcall	.-3544   	; 0x11274 <sysclk_get_cpu_hz>
   1204c:	dc 01       	movw	r26, r24
   1204e:	cb 01       	movw	r24, r22
   12050:	8b 83       	std	Y+3, r24	; 0x03
   12052:	9c 83       	std	Y+4, r25	; 0x04
   12054:	ad 83       	std	Y+5, r26	; 0x05
   12056:	be 83       	std	Y+6, r27	; 0x06
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
   12058:	8b 81       	ldd	r24, Y+3	; 0x03
   1205a:	9c 81       	ldd	r25, Y+4	; 0x04
   1205c:	ad 81       	ldd	r26, Y+5	; 0x05
   1205e:	be 81       	ldd	r27, Y+6	; 0x06
   12060:	2b 85       	ldd	r18, Y+11	; 0x0b
   12062:	3c 85       	ldd	r19, Y+12	; 0x0c
   12064:	4d 85       	ldd	r20, Y+13	; 0x0d
   12066:	5e 85       	ldd	r21, Y+14	; 0x0e
   12068:	bc 01       	movw	r22, r24
   1206a:	cd 01       	movw	r24, r26
   1206c:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   12070:	da 01       	movw	r26, r20
   12072:	c9 01       	movw	r24, r18
   12074:	2f ef       	ldi	r18, 0xFF	; 255
   12076:	3f ef       	ldi	r19, 0xFF	; 255
   12078:	40 e0       	ldi	r20, 0x00	; 0
   1207a:	50 e0       	ldi	r21, 0x00	; 0
   1207c:	bc 01       	movw	r22, r24
   1207e:	cd 01       	movw	r24, r26
   12080:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   12084:	da 01       	movw	r26, r20
   12086:	c9 01       	movw	r24, r18
   12088:	8f 83       	std	Y+7, r24	; 0x07
   1208a:	98 87       	std	Y+8, r25	; 0x08
	if (smallest_div < 1) {
   1208c:	8f 81       	ldd	r24, Y+7	; 0x07
   1208e:	98 85       	ldd	r25, Y+8	; 0x08
   12090:	89 2b       	or	r24, r25
   12092:	51 f4       	brne	.+20     	; 0x120a8 <pwm_set_frequency_32bit+0x78>
		dividor = 1;
   12094:	81 e0       	ldi	r24, 0x01	; 1
   12096:	90 e0       	ldi	r25, 0x00	; 0
   12098:	89 83       	std	Y+1, r24	; 0x01
   1209a:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1;
   1209c:	89 85       	ldd	r24, Y+9	; 0x09
   1209e:	9a 85       	ldd	r25, Y+10	; 0x0a
   120a0:	21 e0       	ldi	r18, 0x01	; 1
   120a2:	fc 01       	movw	r30, r24
   120a4:	24 83       	std	Z+4, r18	; 0x04
   120a6:	52 c0       	rjmp	.+164    	; 0x1214c <pwm_set_frequency_32bit+0x11c>
	} else if (smallest_div < 2) {
   120a8:	8f 81       	ldd	r24, Y+7	; 0x07
   120aa:	98 85       	ldd	r25, Y+8	; 0x08
   120ac:	02 97       	sbiw	r24, 0x02	; 2
   120ae:	50 f4       	brcc	.+20     	; 0x120c4 <pwm_set_frequency_32bit+0x94>
		dividor = 2;
   120b0:	82 e0       	ldi	r24, 0x02	; 2
   120b2:	90 e0       	ldi	r25, 0x00	; 0
   120b4:	89 83       	std	Y+1, r24	; 0x01
   120b6:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV2;
   120b8:	89 85       	ldd	r24, Y+9	; 0x09
   120ba:	9a 85       	ldd	r25, Y+10	; 0x0a
   120bc:	22 e0       	ldi	r18, 0x02	; 2
   120be:	fc 01       	movw	r30, r24
   120c0:	24 83       	std	Z+4, r18	; 0x04
   120c2:	44 c0       	rjmp	.+136    	; 0x1214c <pwm_set_frequency_32bit+0x11c>
	} else if (smallest_div < 4) {
   120c4:	8f 81       	ldd	r24, Y+7	; 0x07
   120c6:	98 85       	ldd	r25, Y+8	; 0x08
   120c8:	04 97       	sbiw	r24, 0x04	; 4
   120ca:	50 f4       	brcc	.+20     	; 0x120e0 <pwm_set_frequency_32bit+0xb0>
		dividor = 4;
   120cc:	84 e0       	ldi	r24, 0x04	; 4
   120ce:	90 e0       	ldi	r25, 0x00	; 0
   120d0:	89 83       	std	Y+1, r24	; 0x01
   120d2:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV4;
   120d4:	89 85       	ldd	r24, Y+9	; 0x09
   120d6:	9a 85       	ldd	r25, Y+10	; 0x0a
   120d8:	23 e0       	ldi	r18, 0x03	; 3
   120da:	fc 01       	movw	r30, r24
   120dc:	24 83       	std	Z+4, r18	; 0x04
   120de:	36 c0       	rjmp	.+108    	; 0x1214c <pwm_set_frequency_32bit+0x11c>
	} else if (smallest_div < 8) {
   120e0:	8f 81       	ldd	r24, Y+7	; 0x07
   120e2:	98 85       	ldd	r25, Y+8	; 0x08
   120e4:	08 97       	sbiw	r24, 0x08	; 8
   120e6:	50 f4       	brcc	.+20     	; 0x120fc <pwm_set_frequency_32bit+0xcc>
		dividor = 8;
   120e8:	88 e0       	ldi	r24, 0x08	; 8
   120ea:	90 e0       	ldi	r25, 0x00	; 0
   120ec:	89 83       	std	Y+1, r24	; 0x01
   120ee:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV8;
   120f0:	89 85       	ldd	r24, Y+9	; 0x09
   120f2:	9a 85       	ldd	r25, Y+10	; 0x0a
   120f4:	24 e0       	ldi	r18, 0x04	; 4
   120f6:	fc 01       	movw	r30, r24
   120f8:	24 83       	std	Z+4, r18	; 0x04
   120fa:	28 c0       	rjmp	.+80     	; 0x1214c <pwm_set_frequency_32bit+0x11c>
	} else if (smallest_div < 64) {
   120fc:	8f 81       	ldd	r24, Y+7	; 0x07
   120fe:	98 85       	ldd	r25, Y+8	; 0x08
   12100:	80 34       	cpi	r24, 0x40	; 64
   12102:	91 05       	cpc	r25, r1
   12104:	50 f4       	brcc	.+20     	; 0x1211a <pwm_set_frequency_32bit+0xea>
		dividor = 64;
   12106:	80 e4       	ldi	r24, 0x40	; 64
   12108:	90 e0       	ldi	r25, 0x00	; 0
   1210a:	89 83       	std	Y+1, r24	; 0x01
   1210c:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV64;
   1210e:	89 85       	ldd	r24, Y+9	; 0x09
   12110:	9a 85       	ldd	r25, Y+10	; 0x0a
   12112:	25 e0       	ldi	r18, 0x05	; 5
   12114:	fc 01       	movw	r30, r24
   12116:	24 83       	std	Z+4, r18	; 0x04
   12118:	19 c0       	rjmp	.+50     	; 0x1214c <pwm_set_frequency_32bit+0x11c>
	} else if (smallest_div < 256) {
   1211a:	8f 81       	ldd	r24, Y+7	; 0x07
   1211c:	98 85       	ldd	r25, Y+8	; 0x08
   1211e:	8f 3f       	cpi	r24, 0xFF	; 255
   12120:	91 05       	cpc	r25, r1
   12122:	09 f0       	breq	.+2      	; 0x12126 <pwm_set_frequency_32bit+0xf6>
   12124:	50 f4       	brcc	.+20     	; 0x1213a <pwm_set_frequency_32bit+0x10a>
		dividor = 256;
   12126:	80 e0       	ldi	r24, 0x00	; 0
   12128:	91 e0       	ldi	r25, 0x01	; 1
   1212a:	89 83       	std	Y+1, r24	; 0x01
   1212c:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV256;
   1212e:	89 85       	ldd	r24, Y+9	; 0x09
   12130:	9a 85       	ldd	r25, Y+10	; 0x0a
   12132:	26 e0       	ldi	r18, 0x06	; 6
   12134:	fc 01       	movw	r30, r24
   12136:	24 83       	std	Z+4, r18	; 0x04
   12138:	09 c0       	rjmp	.+18     	; 0x1214c <pwm_set_frequency_32bit+0x11c>
	} else {
		dividor = 1024;
   1213a:	80 e0       	ldi	r24, 0x00	; 0
   1213c:	94 e0       	ldi	r25, 0x04	; 4
   1213e:	89 83       	std	Y+1, r24	; 0x01
   12140:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1024;
   12142:	89 85       	ldd	r24, Y+9	; 0x09
   12144:	9a 85       	ldd	r25, Y+10	; 0x0a
   12146:	27 e0       	ldi	r18, 0x07	; 7
   12148:	fc 01       	movw	r30, r24
   1214a:	24 83       	std	Z+4, r18	; 0x04
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
   1214c:	89 81       	ldd	r24, Y+1	; 0x01
   1214e:	9a 81       	ldd	r25, Y+2	; 0x02
   12150:	9c 01       	movw	r18, r24
   12152:	40 e0       	ldi	r20, 0x00	; 0
   12154:	50 e0       	ldi	r21, 0x00	; 0
   12156:	8b 81       	ldd	r24, Y+3	; 0x03
   12158:	9c 81       	ldd	r25, Y+4	; 0x04
   1215a:	ad 81       	ldd	r26, Y+5	; 0x05
   1215c:	be 81       	ldd	r27, Y+6	; 0x06
   1215e:	bc 01       	movw	r22, r24
   12160:	cd 01       	movw	r24, r26
   12162:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   12166:	da 01       	movw	r26, r20
   12168:	c9 01       	movw	r24, r18
   1216a:	2b 85       	ldd	r18, Y+11	; 0x0b
   1216c:	3c 85       	ldd	r19, Y+12	; 0x0c
   1216e:	4d 85       	ldd	r20, Y+13	; 0x0d
   12170:	5e 85       	ldd	r21, Y+14	; 0x0e
   12172:	bc 01       	movw	r22, r24
   12174:	cd 01       	movw	r24, r26
   12176:	0e 94 25 b7 	call	0x16e4a	; 0x16e4a <__udivmodsi4>
   1217a:	da 01       	movw	r26, r20
   1217c:	c9 01       	movw	r24, r18
   1217e:	9c 01       	movw	r18, r24
   12180:	89 85       	ldd	r24, Y+9	; 0x09
   12182:	9a 85       	ldd	r25, Y+10	; 0x0a
   12184:	fc 01       	movw	r30, r24
   12186:	25 83       	std	Z+5, r18	; 0x05
   12188:	36 83       	std	Z+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
   1218a:	89 85       	ldd	r24, Y+9	; 0x09
   1218c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1218e:	fc 01       	movw	r30, r24
   12190:	85 81       	ldd	r24, Z+5	; 0x05
   12192:	96 81       	ldd	r25, Z+6	; 0x06
   12194:	84 36       	cpi	r24, 0x64	; 100
   12196:	91 05       	cpc	r25, r1
   12198:	48 f4       	brcc	.+18     	; 0x121ac <pwm_set_frequency_32bit+0x17c>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
   1219a:	89 85       	ldd	r24, Y+9	; 0x09
   1219c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1219e:	fc 01       	movw	r30, r24
   121a0:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
   121a2:	89 85       	ldd	r24, Y+9	; 0x09
   121a4:	9a 85       	ldd	r25, Y+10	; 0x0a
   121a6:	fc 01       	movw	r30, r24
   121a8:	15 82       	std	Z+5, r1	; 0x05
   121aa:	16 82       	std	Z+6, r1	; 0x06
		Assert(false);
	}
}
   121ac:	00 00       	nop
   121ae:	2e 96       	adiw	r28, 0x0e	; 14
   121b0:	cd bf       	out	0x3d, r28	; 61
   121b2:	de bf       	out	0x3e, r29	; 62
   121b4:	df 91       	pop	r29
   121b6:	cf 91       	pop	r28
   121b8:	08 95       	ret

000121ba <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
   121ba:	cf 93       	push	r28
   121bc:	df 93       	push	r29
   121be:	1f 92       	push	r1
   121c0:	cd b7       	in	r28, 0x3d	; 61
   121c2:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
   121c4:	8f e3       	ldi	r24, 0x3F	; 63
   121c6:	90 e0       	ldi	r25, 0x00	; 0
   121c8:	fc 01       	movw	r30, r24
   121ca:	80 81       	ld	r24, Z
   121cc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
   121ce:	f8 94       	cli
	return flags;
   121d0:	89 81       	ldd	r24, Y+1	; 0x01
}
   121d2:	0f 90       	pop	r0
   121d4:	df 91       	pop	r29
   121d6:	cf 91       	pop	r28
   121d8:	08 95       	ret

000121da <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   121da:	cf 93       	push	r28
   121dc:	df 93       	push	r29
   121de:	1f 92       	push	r1
   121e0:	cd b7       	in	r28, 0x3d	; 61
   121e2:	de b7       	in	r29, 0x3e	; 62
   121e4:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
   121e6:	8f e3       	ldi	r24, 0x3F	; 63
   121e8:	90 e0       	ldi	r25, 0x00	; 0
   121ea:	29 81       	ldd	r18, Y+1	; 0x01
   121ec:	fc 01       	movw	r30, r24
   121ee:	20 83       	st	Z, r18
}
   121f0:	00 00       	nop
   121f2:	0f 90       	pop	r0
   121f4:	df 91       	pop	r29
   121f6:	cf 91       	pop	r28
   121f8:	08 95       	ret

000121fa <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
   121fa:	cf 93       	push	r28
   121fc:	df 93       	push	r29
   121fe:	1f 92       	push	r1
   12200:	cd b7       	in	r28, 0x3d	; 61
   12202:	de b7       	in	r29, 0x3e	; 62
   12204:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
   12206:	89 81       	ldd	r24, Y+1	; 0x01
   12208:	88 2f       	mov	r24, r24
   1220a:	90 e0       	ldi	r25, 0x00	; 0
   1220c:	bc 01       	movw	r22, r24
   1220e:	82 e0       	ldi	r24, 0x02	; 2
   12210:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <nvm_read_byte>
}
   12214:	0f 90       	pop	r0
   12216:	df 91       	pop	r29
   12218:	cf 91       	pop	r28
   1221a:	08 95       	ret

0001221c <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
   1221c:	cf 93       	push	r28
   1221e:	df 93       	push	r29
   12220:	00 d0       	rcall	.+0      	; 0x12222 <adc_get_calibration_data+0x6>
   12222:	cd b7       	in	r28, 0x3d	; 61
   12224:	de b7       	in	r29, 0x3e	; 62
   12226:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;

	switch (cal) {
   12228:	8b 81       	ldd	r24, Y+3	; 0x03
   1222a:	88 2f       	mov	r24, r24
   1222c:	90 e0       	ldi	r25, 0x00	; 0
   1222e:	81 30       	cpi	r24, 0x01	; 1
   12230:	91 05       	cpc	r25, r1
   12232:	e9 f0       	breq	.+58     	; 0x1226e <adc_get_calibration_data+0x52>
   12234:	82 30       	cpi	r24, 0x02	; 2
   12236:	91 05       	cpc	r25, r1
   12238:	89 f1       	breq	.+98     	; 0x1229c <adc_get_calibration_data+0x80>
   1223a:	89 2b       	or	r24, r25
   1223c:	09 f0       	breq	.+2      	; 0x12240 <adc_get_calibration_data+0x24>
   1223e:	45 c0       	rjmp	.+138    	; 0x122ca <adc_get_calibration_data+0xae>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
   12240:	81 e2       	ldi	r24, 0x21	; 33
   12242:	db df       	rcall	.-74     	; 0x121fa <nvm_read_production_signature_row>
   12244:	88 2f       	mov	r24, r24
   12246:	90 e0       	ldi	r25, 0x00	; 0
   12248:	89 83       	std	Y+1, r24	; 0x01
   1224a:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
   1224c:	89 81       	ldd	r24, Y+1	; 0x01
   1224e:	9a 81       	ldd	r25, Y+2	; 0x02
   12250:	98 2f       	mov	r25, r24
   12252:	88 27       	eor	r24, r24
   12254:	89 83       	std	Y+1, r24	; 0x01
   12256:	9a 83       	std	Y+2, r25	; 0x02
		data |= nvm_read_production_signature_row(ADCACAL0);
   12258:	80 e2       	ldi	r24, 0x20	; 32
   1225a:	cf df       	rcall	.-98     	; 0x121fa <nvm_read_production_signature_row>
   1225c:	88 2f       	mov	r24, r24
   1225e:	90 e0       	ldi	r25, 0x00	; 0
   12260:	29 81       	ldd	r18, Y+1	; 0x01
   12262:	3a 81       	ldd	r19, Y+2	; 0x02
   12264:	82 2b       	or	r24, r18
   12266:	93 2b       	or	r25, r19
   12268:	89 83       	std	Y+1, r24	; 0x01
   1226a:	9a 83       	std	Y+2, r25	; 0x02
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
   1226c:	30 c0       	rjmp	.+96     	; 0x122ce <adc_get_calibration_data+0xb2>
   1226e:	85 e2       	ldi	r24, 0x25	; 37
   12270:	c4 df       	rcall	.-120    	; 0x121fa <nvm_read_production_signature_row>
   12272:	88 2f       	mov	r24, r24
   12274:	90 e0       	ldi	r25, 0x00	; 0
   12276:	89 83       	std	Y+1, r24	; 0x01
   12278:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
   1227a:	89 81       	ldd	r24, Y+1	; 0x01
   1227c:	9a 81       	ldd	r25, Y+2	; 0x02
   1227e:	98 2f       	mov	r25, r24
   12280:	88 27       	eor	r24, r24
   12282:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(ADCBCAL0);
   12284:	9a 83       	std	Y+2, r25	; 0x02
   12286:	84 e2       	ldi	r24, 0x24	; 36
   12288:	b8 df       	rcall	.-144    	; 0x121fa <nvm_read_production_signature_row>
   1228a:	88 2f       	mov	r24, r24
   1228c:	90 e0       	ldi	r25, 0x00	; 0
   1228e:	29 81       	ldd	r18, Y+1	; 0x01
   12290:	3a 81       	ldd	r19, Y+2	; 0x02
   12292:	82 2b       	or	r24, r18
   12294:	93 2b       	or	r25, r19
   12296:	89 83       	std	Y+1, r24	; 0x01
		break;
   12298:	9a 83       	std	Y+2, r25	; 0x02
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
   1229a:	19 c0       	rjmp	.+50     	; 0x122ce <adc_get_calibration_data+0xb2>
   1229c:	8f e2       	ldi	r24, 0x2F	; 47
   1229e:	ad df       	rcall	.-166    	; 0x121fa <nvm_read_production_signature_row>
   122a0:	88 2f       	mov	r24, r24
   122a2:	90 e0       	ldi	r25, 0x00	; 0
   122a4:	89 83       	std	Y+1, r24	; 0x01
   122a6:	9a 83       	std	Y+2, r25	; 0x02
		data <<= 8;
   122a8:	89 81       	ldd	r24, Y+1	; 0x01
   122aa:	9a 81       	ldd	r25, Y+2	; 0x02
   122ac:	98 2f       	mov	r25, r24
   122ae:	88 27       	eor	r24, r24
   122b0:	89 83       	std	Y+1, r24	; 0x01
		data |= nvm_read_production_signature_row(TEMPSENSE0);
   122b2:	9a 83       	std	Y+2, r25	; 0x02
   122b4:	8e e2       	ldi	r24, 0x2E	; 46
   122b6:	a1 df       	rcall	.-190    	; 0x121fa <nvm_read_production_signature_row>
   122b8:	88 2f       	mov	r24, r24
   122ba:	90 e0       	ldi	r25, 0x00	; 0
   122bc:	29 81       	ldd	r18, Y+1	; 0x01
   122be:	3a 81       	ldd	r19, Y+2	; 0x02
   122c0:	82 2b       	or	r24, r18
   122c2:	93 2b       	or	r25, r19
   122c4:	89 83       	std	Y+1, r24	; 0x01
   122c6:	9a 83       	std	Y+2, r25	; 0x02
		break;
   122c8:	02 c0       	rjmp	.+4      	; 0x122ce <adc_get_calibration_data+0xb2>
		break;
#endif

	default:
		Assert(0);
		data = 0;
   122ca:	19 82       	std	Y+1, r1	; 0x01
   122cc:	1a 82       	std	Y+2, r1	; 0x02
	}

	return data;
   122ce:	89 81       	ldd	r24, Y+1	; 0x01
   122d0:	9a 81       	ldd	r25, Y+2	; 0x02
}
   122d2:	23 96       	adiw	r28, 0x03	; 3
   122d4:	cd bf       	out	0x3d, r28	; 61
   122d6:	de bf       	out	0x3e, r29	; 62
   122d8:	df 91       	pop	r29
   122da:	cf 91       	pop	r28
   122dc:	08 95       	ret

000122de <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
   122de:	1f 92       	push	r1
   122e0:	0f 92       	push	r0
   122e2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   122e6:	0f 92       	push	r0
   122e8:	11 24       	eor	r1, r1
   122ea:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   122ee:	0f 92       	push	r0
   122f0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   122f4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   122f8:	0f 92       	push	r0
   122fa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   122fe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12302:	0f 92       	push	r0
   12304:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12308:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1230c:	0f 92       	push	r0
   1230e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12312:	2f 93       	push	r18
   12314:	3f 93       	push	r19
   12316:	4f 93       	push	r20
   12318:	5f 93       	push	r21
   1231a:	6f 93       	push	r22
   1231c:	7f 93       	push	r23
   1231e:	8f 93       	push	r24
   12320:	9f 93       	push	r25
   12322:	af 93       	push	r26
   12324:	bf 93       	push	r27
   12326:	ef 93       	push	r30
   12328:	ff 93       	push	r31
   1232a:	cf 93       	push	r28
   1232c:	df 93       	push	r29
   1232e:	00 d0       	rcall	.+0      	; 0x12330 <__vector_71+0x52>
   12330:	1f 92       	push	r1
   12332:	cd b7       	in	r28, 0x3d	; 61
   12334:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
   12336:	20 91 b5 29 	lds	r18, 0x29B5	; 0x8029b5 <adca_callback>
   1233a:	30 91 b6 29 	lds	r19, 0x29B6	; 0x8029b6 <adca_callback+0x1>
   1233e:	80 e0       	ldi	r24, 0x00	; 0
   12340:	92 e0       	ldi	r25, 0x02	; 2
   12342:	89 83       	std	Y+1, r24	; 0x01
   12344:	9a 83       	std	Y+2, r25	; 0x02
   12346:	81 e0       	ldi	r24, 0x01	; 1
   12348:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   1234a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   1234c:	8b 81       	ldd	r24, Y+3	; 0x03
   1234e:	88 2f       	mov	r24, r24
   12350:	90 e0       	ldi	r25, 0x00	; 0
   12352:	83 70       	andi	r24, 0x03	; 3
   12354:	99 27       	eor	r25, r25
   12356:	89 2b       	or	r24, r25
   12358:	39 f4       	brne	.+14     	; 0x12368 <__vector_71+0x8a>
		index += 2;
   1235a:	8c 81       	ldd	r24, Y+4	; 0x04
   1235c:	8e 5f       	subi	r24, 0xFE	; 254
   1235e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   12360:	8b 81       	ldd	r24, Y+3	; 0x03
   12362:	86 95       	lsr	r24
   12364:	86 95       	lsr	r24
   12366:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   12368:	8b 81       	ldd	r24, Y+3	; 0x03
   1236a:	88 2f       	mov	r24, r24
   1236c:	90 e0       	ldi	r25, 0x00	; 0
   1236e:	81 70       	andi	r24, 0x01	; 1
   12370:	99 27       	eor	r25, r25
   12372:	89 2b       	or	r24, r25
   12374:	19 f4       	brne	.+6      	; 0x1237c <__vector_71+0x9e>
		index++;
   12376:	8c 81       	ldd	r24, Y+4	; 0x04
   12378:	8f 5f       	subi	r24, 0xFF	; 255
   1237a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   1237c:	89 81       	ldd	r24, Y+1	; 0x01
   1237e:	9a 81       	ldd	r25, Y+2	; 0x02
   12380:	ac 01       	movw	r20, r24
   12382:	40 5e       	subi	r20, 0xE0	; 224
   12384:	5f 4f       	sbci	r21, 0xFF	; 255
   12386:	8c 81       	ldd	r24, Y+4	; 0x04
   12388:	88 2f       	mov	r24, r24
   1238a:	90 e0       	ldi	r25, 0x00	; 0
   1238c:	88 0f       	add	r24, r24
   1238e:	99 1f       	adc	r25, r25
   12390:	88 0f       	add	r24, r24
   12392:	99 1f       	adc	r25, r25
   12394:	88 0f       	add	r24, r24
   12396:	99 1f       	adc	r25, r25
   12398:	84 0f       	add	r24, r20
   1239a:	95 1f       	adc	r25, r21
   1239c:	fc 01       	movw	r30, r24
   1239e:	84 81       	ldd	r24, Z+4	; 0x04
   123a0:	95 81       	ldd	r25, Z+5	; 0x05
   123a2:	ac 01       	movw	r20, r24
   123a4:	61 e0       	ldi	r22, 0x01	; 1
   123a6:	80 e0       	ldi	r24, 0x00	; 0
   123a8:	92 e0       	ldi	r25, 0x02	; 2
   123aa:	f9 01       	movw	r30, r18
   123ac:	19 95       	eicall
}
   123ae:	00 00       	nop
   123b0:	24 96       	adiw	r28, 0x04	; 4
   123b2:	cd bf       	out	0x3d, r28	; 61
   123b4:	de bf       	out	0x3e, r29	; 62
   123b6:	df 91       	pop	r29
   123b8:	cf 91       	pop	r28
   123ba:	ff 91       	pop	r31
   123bc:	ef 91       	pop	r30
   123be:	bf 91       	pop	r27
   123c0:	af 91       	pop	r26
   123c2:	9f 91       	pop	r25
   123c4:	8f 91       	pop	r24
   123c6:	7f 91       	pop	r23
   123c8:	6f 91       	pop	r22
   123ca:	5f 91       	pop	r21
   123cc:	4f 91       	pop	r20
   123ce:	3f 91       	pop	r19
   123d0:	2f 91       	pop	r18
   123d2:	0f 90       	pop	r0
   123d4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   123d8:	0f 90       	pop	r0
   123da:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   123de:	0f 90       	pop	r0
   123e0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   123e4:	0f 90       	pop	r0
   123e6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   123ea:	0f 90       	pop	r0
   123ec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   123f0:	0f 90       	pop	r0
   123f2:	1f 90       	pop	r1
   123f4:	18 95       	reti

000123f6 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
   123f6:	1f 92       	push	r1
   123f8:	0f 92       	push	r0
   123fa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   123fe:	0f 92       	push	r0
   12400:	11 24       	eor	r1, r1
   12402:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12406:	0f 92       	push	r0
   12408:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1240c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12410:	0f 92       	push	r0
   12412:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12416:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1241a:	0f 92       	push	r0
   1241c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12420:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12424:	0f 92       	push	r0
   12426:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1242a:	2f 93       	push	r18
   1242c:	3f 93       	push	r19
   1242e:	4f 93       	push	r20
   12430:	5f 93       	push	r21
   12432:	6f 93       	push	r22
   12434:	7f 93       	push	r23
   12436:	8f 93       	push	r24
   12438:	9f 93       	push	r25
   1243a:	af 93       	push	r26
   1243c:	bf 93       	push	r27
   1243e:	ef 93       	push	r30
   12440:	ff 93       	push	r31
   12442:	cf 93       	push	r28
   12444:	df 93       	push	r29
   12446:	00 d0       	rcall	.+0      	; 0x12448 <__vector_72+0x52>
   12448:	1f 92       	push	r1
   1244a:	cd b7       	in	r28, 0x3d	; 61
   1244c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
   1244e:	20 91 b5 29 	lds	r18, 0x29B5	; 0x8029b5 <adca_callback>
   12452:	30 91 b6 29 	lds	r19, 0x29B6	; 0x8029b6 <adca_callback+0x1>
   12456:	80 e0       	ldi	r24, 0x00	; 0
   12458:	92 e0       	ldi	r25, 0x02	; 2
   1245a:	89 83       	std	Y+1, r24	; 0x01
   1245c:	9a 83       	std	Y+2, r25	; 0x02
   1245e:	82 e0       	ldi	r24, 0x02	; 2
   12460:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   12462:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   12464:	8b 81       	ldd	r24, Y+3	; 0x03
   12466:	88 2f       	mov	r24, r24
   12468:	90 e0       	ldi	r25, 0x00	; 0
   1246a:	83 70       	andi	r24, 0x03	; 3
   1246c:	99 27       	eor	r25, r25
   1246e:	89 2b       	or	r24, r25
   12470:	39 f4       	brne	.+14     	; 0x12480 <__vector_72+0x8a>
		index += 2;
   12472:	8c 81       	ldd	r24, Y+4	; 0x04
   12474:	8e 5f       	subi	r24, 0xFE	; 254
   12476:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   12478:	8b 81       	ldd	r24, Y+3	; 0x03
   1247a:	86 95       	lsr	r24
   1247c:	86 95       	lsr	r24
   1247e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   12480:	8b 81       	ldd	r24, Y+3	; 0x03
   12482:	88 2f       	mov	r24, r24
   12484:	90 e0       	ldi	r25, 0x00	; 0
   12486:	81 70       	andi	r24, 0x01	; 1
   12488:	99 27       	eor	r25, r25
   1248a:	89 2b       	or	r24, r25
   1248c:	19 f4       	brne	.+6      	; 0x12494 <__vector_72+0x9e>
		index++;
   1248e:	8c 81       	ldd	r24, Y+4	; 0x04
   12490:	8f 5f       	subi	r24, 0xFF	; 255
   12492:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   12494:	89 81       	ldd	r24, Y+1	; 0x01
   12496:	9a 81       	ldd	r25, Y+2	; 0x02
   12498:	ac 01       	movw	r20, r24
   1249a:	40 5e       	subi	r20, 0xE0	; 224
   1249c:	5f 4f       	sbci	r21, 0xFF	; 255
   1249e:	8c 81       	ldd	r24, Y+4	; 0x04
   124a0:	88 2f       	mov	r24, r24
   124a2:	90 e0       	ldi	r25, 0x00	; 0
   124a4:	88 0f       	add	r24, r24
   124a6:	99 1f       	adc	r25, r25
   124a8:	88 0f       	add	r24, r24
   124aa:	99 1f       	adc	r25, r25
   124ac:	88 0f       	add	r24, r24
   124ae:	99 1f       	adc	r25, r25
   124b0:	84 0f       	add	r24, r20
   124b2:	95 1f       	adc	r25, r21
   124b4:	fc 01       	movw	r30, r24
   124b6:	84 81       	ldd	r24, Z+4	; 0x04
   124b8:	95 81       	ldd	r25, Z+5	; 0x05
   124ba:	ac 01       	movw	r20, r24
   124bc:	62 e0       	ldi	r22, 0x02	; 2
   124be:	80 e0       	ldi	r24, 0x00	; 0
   124c0:	92 e0       	ldi	r25, 0x02	; 2
   124c2:	f9 01       	movw	r30, r18
   124c4:	19 95       	eicall
}
   124c6:	00 00       	nop
   124c8:	24 96       	adiw	r28, 0x04	; 4
   124ca:	cd bf       	out	0x3d, r28	; 61
   124cc:	de bf       	out	0x3e, r29	; 62
   124ce:	df 91       	pop	r29
   124d0:	cf 91       	pop	r28
   124d2:	ff 91       	pop	r31
   124d4:	ef 91       	pop	r30
   124d6:	bf 91       	pop	r27
   124d8:	af 91       	pop	r26
   124da:	9f 91       	pop	r25
   124dc:	8f 91       	pop	r24
   124de:	7f 91       	pop	r23
   124e0:	6f 91       	pop	r22
   124e2:	5f 91       	pop	r21
   124e4:	4f 91       	pop	r20
   124e6:	3f 91       	pop	r19
   124e8:	2f 91       	pop	r18
   124ea:	0f 90       	pop	r0
   124ec:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   124f0:	0f 90       	pop	r0
   124f2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   124f6:	0f 90       	pop	r0
   124f8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   124fc:	0f 90       	pop	r0
   124fe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12502:	0f 90       	pop	r0
   12504:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12508:	0f 90       	pop	r0
   1250a:	1f 90       	pop	r1
   1250c:	18 95       	reti

0001250e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
   1250e:	1f 92       	push	r1
   12510:	0f 92       	push	r0
   12512:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12516:	0f 92       	push	r0
   12518:	11 24       	eor	r1, r1
   1251a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1251e:	0f 92       	push	r0
   12520:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12524:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12528:	0f 92       	push	r0
   1252a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1252e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12532:	0f 92       	push	r0
   12534:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12538:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1253c:	0f 92       	push	r0
   1253e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12542:	2f 93       	push	r18
   12544:	3f 93       	push	r19
   12546:	4f 93       	push	r20
   12548:	5f 93       	push	r21
   1254a:	6f 93       	push	r22
   1254c:	7f 93       	push	r23
   1254e:	8f 93       	push	r24
   12550:	9f 93       	push	r25
   12552:	af 93       	push	r26
   12554:	bf 93       	push	r27
   12556:	ef 93       	push	r30
   12558:	ff 93       	push	r31
   1255a:	cf 93       	push	r28
   1255c:	df 93       	push	r29
   1255e:	00 d0       	rcall	.+0      	; 0x12560 <__vector_73+0x52>
   12560:	1f 92       	push	r1
   12562:	cd b7       	in	r28, 0x3d	; 61
   12564:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
   12566:	20 91 b5 29 	lds	r18, 0x29B5	; 0x8029b5 <adca_callback>
   1256a:	30 91 b6 29 	lds	r19, 0x29B6	; 0x8029b6 <adca_callback+0x1>
   1256e:	80 e0       	ldi	r24, 0x00	; 0
   12570:	92 e0       	ldi	r25, 0x02	; 2
   12572:	89 83       	std	Y+1, r24	; 0x01
   12574:	9a 83       	std	Y+2, r25	; 0x02
   12576:	84 e0       	ldi	r24, 0x04	; 4
   12578:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   1257a:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   1257c:	8b 81       	ldd	r24, Y+3	; 0x03
   1257e:	88 2f       	mov	r24, r24
   12580:	90 e0       	ldi	r25, 0x00	; 0
   12582:	83 70       	andi	r24, 0x03	; 3
   12584:	99 27       	eor	r25, r25
   12586:	89 2b       	or	r24, r25
   12588:	39 f4       	brne	.+14     	; 0x12598 <__vector_73+0x8a>
		index += 2;
   1258a:	8c 81       	ldd	r24, Y+4	; 0x04
   1258c:	8e 5f       	subi	r24, 0xFE	; 254
   1258e:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   12590:	8b 81       	ldd	r24, Y+3	; 0x03
   12592:	86 95       	lsr	r24
   12594:	86 95       	lsr	r24
   12596:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   12598:	8b 81       	ldd	r24, Y+3	; 0x03
   1259a:	88 2f       	mov	r24, r24
   1259c:	90 e0       	ldi	r25, 0x00	; 0
   1259e:	81 70       	andi	r24, 0x01	; 1
   125a0:	99 27       	eor	r25, r25
   125a2:	89 2b       	or	r24, r25
   125a4:	19 f4       	brne	.+6      	; 0x125ac <__vector_73+0x9e>
		index++;
   125a6:	8c 81       	ldd	r24, Y+4	; 0x04
   125a8:	8f 5f       	subi	r24, 0xFF	; 255
   125aa:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   125ac:	89 81       	ldd	r24, Y+1	; 0x01
   125ae:	9a 81       	ldd	r25, Y+2	; 0x02
   125b0:	ac 01       	movw	r20, r24
   125b2:	40 5e       	subi	r20, 0xE0	; 224
   125b4:	5f 4f       	sbci	r21, 0xFF	; 255
   125b6:	8c 81       	ldd	r24, Y+4	; 0x04
   125b8:	88 2f       	mov	r24, r24
   125ba:	90 e0       	ldi	r25, 0x00	; 0
   125bc:	88 0f       	add	r24, r24
   125be:	99 1f       	adc	r25, r25
   125c0:	88 0f       	add	r24, r24
   125c2:	99 1f       	adc	r25, r25
   125c4:	88 0f       	add	r24, r24
   125c6:	99 1f       	adc	r25, r25
   125c8:	84 0f       	add	r24, r20
   125ca:	95 1f       	adc	r25, r21
   125cc:	fc 01       	movw	r30, r24
   125ce:	84 81       	ldd	r24, Z+4	; 0x04
   125d0:	95 81       	ldd	r25, Z+5	; 0x05
   125d2:	ac 01       	movw	r20, r24
   125d4:	64 e0       	ldi	r22, 0x04	; 4
   125d6:	80 e0       	ldi	r24, 0x00	; 0
   125d8:	92 e0       	ldi	r25, 0x02	; 2
   125da:	f9 01       	movw	r30, r18
   125dc:	19 95       	eicall
}
   125de:	00 00       	nop
   125e0:	24 96       	adiw	r28, 0x04	; 4
   125e2:	cd bf       	out	0x3d, r28	; 61
   125e4:	de bf       	out	0x3e, r29	; 62
   125e6:	df 91       	pop	r29
   125e8:	cf 91       	pop	r28
   125ea:	ff 91       	pop	r31
   125ec:	ef 91       	pop	r30
   125ee:	bf 91       	pop	r27
   125f0:	af 91       	pop	r26
   125f2:	9f 91       	pop	r25
   125f4:	8f 91       	pop	r24
   125f6:	7f 91       	pop	r23
   125f8:	6f 91       	pop	r22
   125fa:	5f 91       	pop	r21
   125fc:	4f 91       	pop	r20
   125fe:	3f 91       	pop	r19
   12600:	2f 91       	pop	r18
   12602:	0f 90       	pop	r0
   12604:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12608:	0f 90       	pop	r0
   1260a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1260e:	0f 90       	pop	r0
   12610:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12614:	0f 90       	pop	r0
   12616:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1261a:	0f 90       	pop	r0
   1261c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12620:	0f 90       	pop	r0
   12622:	1f 90       	pop	r1
   12624:	18 95       	reti

00012626 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
   12626:	1f 92       	push	r1
   12628:	0f 92       	push	r0
   1262a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1262e:	0f 92       	push	r0
   12630:	11 24       	eor	r1, r1
   12632:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12636:	0f 92       	push	r0
   12638:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1263c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12640:	0f 92       	push	r0
   12642:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12646:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1264a:	0f 92       	push	r0
   1264c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12650:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12654:	0f 92       	push	r0
   12656:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1265a:	2f 93       	push	r18
   1265c:	3f 93       	push	r19
   1265e:	4f 93       	push	r20
   12660:	5f 93       	push	r21
   12662:	6f 93       	push	r22
   12664:	7f 93       	push	r23
   12666:	8f 93       	push	r24
   12668:	9f 93       	push	r25
   1266a:	af 93       	push	r26
   1266c:	bf 93       	push	r27
   1266e:	ef 93       	push	r30
   12670:	ff 93       	push	r31
   12672:	cf 93       	push	r28
   12674:	df 93       	push	r29
   12676:	00 d0       	rcall	.+0      	; 0x12678 <__vector_74+0x52>
   12678:	1f 92       	push	r1
   1267a:	cd b7       	in	r28, 0x3d	; 61
   1267c:	de b7       	in	r29, 0x3e	; 62
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
   1267e:	20 91 b5 29 	lds	r18, 0x29B5	; 0x8029b5 <adca_callback>
   12682:	30 91 b6 29 	lds	r19, 0x29B6	; 0x8029b6 <adca_callback+0x1>
   12686:	80 e0       	ldi	r24, 0x00	; 0
   12688:	92 e0       	ldi	r25, 0x02	; 2
   1268a:	89 83       	std	Y+1, r24	; 0x01
   1268c:	9a 83       	std	Y+2, r25	; 0x02
   1268e:	88 e0       	ldi	r24, 0x08	; 8
   12690:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   12692:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   12694:	8b 81       	ldd	r24, Y+3	; 0x03
   12696:	88 2f       	mov	r24, r24
   12698:	90 e0       	ldi	r25, 0x00	; 0
   1269a:	83 70       	andi	r24, 0x03	; 3
   1269c:	99 27       	eor	r25, r25
   1269e:	89 2b       	or	r24, r25
   126a0:	39 f4       	brne	.+14     	; 0x126b0 <__vector_74+0x8a>
		index += 2;
   126a2:	8c 81       	ldd	r24, Y+4	; 0x04
   126a4:	8e 5f       	subi	r24, 0xFE	; 254
   126a6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   126a8:	8b 81       	ldd	r24, Y+3	; 0x03
   126aa:	86 95       	lsr	r24
   126ac:	86 95       	lsr	r24
   126ae:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   126b0:	8b 81       	ldd	r24, Y+3	; 0x03
   126b2:	88 2f       	mov	r24, r24
   126b4:	90 e0       	ldi	r25, 0x00	; 0
   126b6:	81 70       	andi	r24, 0x01	; 1
   126b8:	99 27       	eor	r25, r25
   126ba:	89 2b       	or	r24, r25
   126bc:	19 f4       	brne	.+6      	; 0x126c4 <__vector_74+0x9e>
		index++;
   126be:	8c 81       	ldd	r24, Y+4	; 0x04
   126c0:	8f 5f       	subi	r24, 0xFF	; 255
   126c2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   126c4:	89 81       	ldd	r24, Y+1	; 0x01
   126c6:	9a 81       	ldd	r25, Y+2	; 0x02
   126c8:	ac 01       	movw	r20, r24
   126ca:	40 5e       	subi	r20, 0xE0	; 224
   126cc:	5f 4f       	sbci	r21, 0xFF	; 255
   126ce:	8c 81       	ldd	r24, Y+4	; 0x04
   126d0:	88 2f       	mov	r24, r24
   126d2:	90 e0       	ldi	r25, 0x00	; 0
   126d4:	88 0f       	add	r24, r24
   126d6:	99 1f       	adc	r25, r25
   126d8:	88 0f       	add	r24, r24
   126da:	99 1f       	adc	r25, r25
   126dc:	88 0f       	add	r24, r24
   126de:	99 1f       	adc	r25, r25
   126e0:	84 0f       	add	r24, r20
   126e2:	95 1f       	adc	r25, r21
   126e4:	fc 01       	movw	r30, r24
   126e6:	84 81       	ldd	r24, Z+4	; 0x04
   126e8:	95 81       	ldd	r25, Z+5	; 0x05
   126ea:	ac 01       	movw	r20, r24
   126ec:	68 e0       	ldi	r22, 0x08	; 8
   126ee:	80 e0       	ldi	r24, 0x00	; 0
   126f0:	92 e0       	ldi	r25, 0x02	; 2
   126f2:	f9 01       	movw	r30, r18
   126f4:	19 95       	eicall
}
   126f6:	00 00       	nop
   126f8:	24 96       	adiw	r28, 0x04	; 4
   126fa:	cd bf       	out	0x3d, r28	; 61
   126fc:	de bf       	out	0x3e, r29	; 62
   126fe:	df 91       	pop	r29
   12700:	cf 91       	pop	r28
   12702:	ff 91       	pop	r31
   12704:	ef 91       	pop	r30
   12706:	bf 91       	pop	r27
   12708:	af 91       	pop	r26
   1270a:	9f 91       	pop	r25
   1270c:	8f 91       	pop	r24
   1270e:	7f 91       	pop	r23
   12710:	6f 91       	pop	r22
   12712:	5f 91       	pop	r21
   12714:	4f 91       	pop	r20
   12716:	3f 91       	pop	r19
   12718:	2f 91       	pop	r18
   1271a:	0f 90       	pop	r0
   1271c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12720:	0f 90       	pop	r0
   12722:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12726:	0f 90       	pop	r0
   12728:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1272c:	0f 90       	pop	r0
   1272e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12732:	0f 90       	pop	r0
   12734:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12738:	0f 90       	pop	r0
   1273a:	1f 90       	pop	r1
   1273c:	18 95       	reti

0001273e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
   1273e:	1f 92       	push	r1
   12740:	0f 92       	push	r0
   12742:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12746:	0f 92       	push	r0
   12748:	11 24       	eor	r1, r1
   1274a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1274e:	0f 92       	push	r0
   12750:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12754:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12758:	0f 92       	push	r0
   1275a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1275e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12762:	0f 92       	push	r0
   12764:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12768:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1276c:	0f 92       	push	r0
   1276e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12772:	2f 93       	push	r18
   12774:	3f 93       	push	r19
   12776:	4f 93       	push	r20
   12778:	5f 93       	push	r21
   1277a:	6f 93       	push	r22
   1277c:	7f 93       	push	r23
   1277e:	8f 93       	push	r24
   12780:	9f 93       	push	r25
   12782:	af 93       	push	r26
   12784:	bf 93       	push	r27
   12786:	ef 93       	push	r30
   12788:	ff 93       	push	r31
   1278a:	cf 93       	push	r28
   1278c:	df 93       	push	r29
   1278e:	00 d0       	rcall	.+0      	; 0x12790 <__vector_39+0x52>
   12790:	1f 92       	push	r1
   12792:	cd b7       	in	r28, 0x3d	; 61
   12794:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
   12796:	20 91 b3 29 	lds	r18, 0x29B3	; 0x8029b3 <adcb_callback>
   1279a:	30 91 b4 29 	lds	r19, 0x29B4	; 0x8029b4 <adcb_callback+0x1>
   1279e:	80 e4       	ldi	r24, 0x40	; 64
   127a0:	92 e0       	ldi	r25, 0x02	; 2
   127a2:	89 83       	std	Y+1, r24	; 0x01
   127a4:	9a 83       	std	Y+2, r25	; 0x02
   127a6:	81 e0       	ldi	r24, 0x01	; 1
   127a8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   127aa:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   127ac:	8b 81       	ldd	r24, Y+3	; 0x03
   127ae:	88 2f       	mov	r24, r24
   127b0:	90 e0       	ldi	r25, 0x00	; 0
   127b2:	83 70       	andi	r24, 0x03	; 3
   127b4:	99 27       	eor	r25, r25
   127b6:	89 2b       	or	r24, r25
   127b8:	39 f4       	brne	.+14     	; 0x127c8 <__vector_39+0x8a>
		index += 2;
   127ba:	8c 81       	ldd	r24, Y+4	; 0x04
   127bc:	8e 5f       	subi	r24, 0xFE	; 254
   127be:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   127c0:	8b 81       	ldd	r24, Y+3	; 0x03
   127c2:	86 95       	lsr	r24
   127c4:	86 95       	lsr	r24
   127c6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   127c8:	8b 81       	ldd	r24, Y+3	; 0x03
   127ca:	88 2f       	mov	r24, r24
   127cc:	90 e0       	ldi	r25, 0x00	; 0
   127ce:	81 70       	andi	r24, 0x01	; 1
   127d0:	99 27       	eor	r25, r25
   127d2:	89 2b       	or	r24, r25
   127d4:	19 f4       	brne	.+6      	; 0x127dc <__vector_39+0x9e>
		index++;
   127d6:	8c 81       	ldd	r24, Y+4	; 0x04
   127d8:	8f 5f       	subi	r24, 0xFF	; 255
   127da:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   127dc:	89 81       	ldd	r24, Y+1	; 0x01
   127de:	9a 81       	ldd	r25, Y+2	; 0x02
   127e0:	ac 01       	movw	r20, r24
   127e2:	40 5e       	subi	r20, 0xE0	; 224
   127e4:	5f 4f       	sbci	r21, 0xFF	; 255
   127e6:	8c 81       	ldd	r24, Y+4	; 0x04
   127e8:	88 2f       	mov	r24, r24
   127ea:	90 e0       	ldi	r25, 0x00	; 0
   127ec:	88 0f       	add	r24, r24
   127ee:	99 1f       	adc	r25, r25
   127f0:	88 0f       	add	r24, r24
   127f2:	99 1f       	adc	r25, r25
   127f4:	88 0f       	add	r24, r24
   127f6:	99 1f       	adc	r25, r25
   127f8:	84 0f       	add	r24, r20
   127fa:	95 1f       	adc	r25, r21
   127fc:	fc 01       	movw	r30, r24
   127fe:	84 81       	ldd	r24, Z+4	; 0x04
   12800:	95 81       	ldd	r25, Z+5	; 0x05
   12802:	ac 01       	movw	r20, r24
   12804:	61 e0       	ldi	r22, 0x01	; 1
   12806:	80 e4       	ldi	r24, 0x40	; 64
   12808:	92 e0       	ldi	r25, 0x02	; 2
   1280a:	f9 01       	movw	r30, r18
   1280c:	19 95       	eicall
}
   1280e:	00 00       	nop
   12810:	24 96       	adiw	r28, 0x04	; 4
   12812:	cd bf       	out	0x3d, r28	; 61
   12814:	de bf       	out	0x3e, r29	; 62
   12816:	df 91       	pop	r29
   12818:	cf 91       	pop	r28
   1281a:	ff 91       	pop	r31
   1281c:	ef 91       	pop	r30
   1281e:	bf 91       	pop	r27
   12820:	af 91       	pop	r26
   12822:	9f 91       	pop	r25
   12824:	8f 91       	pop	r24
   12826:	7f 91       	pop	r23
   12828:	6f 91       	pop	r22
   1282a:	5f 91       	pop	r21
   1282c:	4f 91       	pop	r20
   1282e:	3f 91       	pop	r19
   12830:	2f 91       	pop	r18
   12832:	0f 90       	pop	r0
   12834:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12838:	0f 90       	pop	r0
   1283a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1283e:	0f 90       	pop	r0
   12840:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12844:	0f 90       	pop	r0
   12846:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1284a:	0f 90       	pop	r0
   1284c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12850:	0f 90       	pop	r0
   12852:	1f 90       	pop	r1
   12854:	18 95       	reti

00012856 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
   12856:	1f 92       	push	r1
   12858:	0f 92       	push	r0
   1285a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1285e:	0f 92       	push	r0
   12860:	11 24       	eor	r1, r1
   12862:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12866:	0f 92       	push	r0
   12868:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1286c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12870:	0f 92       	push	r0
   12872:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12876:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1287a:	0f 92       	push	r0
   1287c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12880:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12884:	0f 92       	push	r0
   12886:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1288a:	2f 93       	push	r18
   1288c:	3f 93       	push	r19
   1288e:	4f 93       	push	r20
   12890:	5f 93       	push	r21
   12892:	6f 93       	push	r22
   12894:	7f 93       	push	r23
   12896:	8f 93       	push	r24
   12898:	9f 93       	push	r25
   1289a:	af 93       	push	r26
   1289c:	bf 93       	push	r27
   1289e:	ef 93       	push	r30
   128a0:	ff 93       	push	r31
   128a2:	cf 93       	push	r28
   128a4:	df 93       	push	r29
   128a6:	00 d0       	rcall	.+0      	; 0x128a8 <__vector_40+0x52>
   128a8:	1f 92       	push	r1
   128aa:	cd b7       	in	r28, 0x3d	; 61
   128ac:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
   128ae:	20 91 b3 29 	lds	r18, 0x29B3	; 0x8029b3 <adcb_callback>
   128b2:	30 91 b4 29 	lds	r19, 0x29B4	; 0x8029b4 <adcb_callback+0x1>
   128b6:	80 e4       	ldi	r24, 0x40	; 64
   128b8:	92 e0       	ldi	r25, 0x02	; 2
   128ba:	89 83       	std	Y+1, r24	; 0x01
   128bc:	9a 83       	std	Y+2, r25	; 0x02
   128be:	82 e0       	ldi	r24, 0x02	; 2
   128c0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   128c2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   128c4:	8b 81       	ldd	r24, Y+3	; 0x03
   128c6:	88 2f       	mov	r24, r24
   128c8:	90 e0       	ldi	r25, 0x00	; 0
   128ca:	83 70       	andi	r24, 0x03	; 3
   128cc:	99 27       	eor	r25, r25
   128ce:	89 2b       	or	r24, r25
   128d0:	39 f4       	brne	.+14     	; 0x128e0 <__vector_40+0x8a>
		index += 2;
   128d2:	8c 81       	ldd	r24, Y+4	; 0x04
   128d4:	8e 5f       	subi	r24, 0xFE	; 254
   128d6:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   128d8:	8b 81       	ldd	r24, Y+3	; 0x03
   128da:	86 95       	lsr	r24
   128dc:	86 95       	lsr	r24
   128de:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   128e0:	8b 81       	ldd	r24, Y+3	; 0x03
   128e2:	88 2f       	mov	r24, r24
   128e4:	90 e0       	ldi	r25, 0x00	; 0
   128e6:	81 70       	andi	r24, 0x01	; 1
   128e8:	99 27       	eor	r25, r25
   128ea:	89 2b       	or	r24, r25
   128ec:	19 f4       	brne	.+6      	; 0x128f4 <__vector_40+0x9e>
		index++;
   128ee:	8c 81       	ldd	r24, Y+4	; 0x04
   128f0:	8f 5f       	subi	r24, 0xFF	; 255
   128f2:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   128f4:	89 81       	ldd	r24, Y+1	; 0x01
   128f6:	9a 81       	ldd	r25, Y+2	; 0x02
   128f8:	ac 01       	movw	r20, r24
   128fa:	40 5e       	subi	r20, 0xE0	; 224
   128fc:	5f 4f       	sbci	r21, 0xFF	; 255
   128fe:	8c 81       	ldd	r24, Y+4	; 0x04
   12900:	88 2f       	mov	r24, r24
   12902:	90 e0       	ldi	r25, 0x00	; 0
   12904:	88 0f       	add	r24, r24
   12906:	99 1f       	adc	r25, r25
   12908:	88 0f       	add	r24, r24
   1290a:	99 1f       	adc	r25, r25
   1290c:	88 0f       	add	r24, r24
   1290e:	99 1f       	adc	r25, r25
   12910:	84 0f       	add	r24, r20
   12912:	95 1f       	adc	r25, r21
   12914:	fc 01       	movw	r30, r24
   12916:	84 81       	ldd	r24, Z+4	; 0x04
   12918:	95 81       	ldd	r25, Z+5	; 0x05
   1291a:	ac 01       	movw	r20, r24
   1291c:	62 e0       	ldi	r22, 0x02	; 2
   1291e:	80 e4       	ldi	r24, 0x40	; 64
   12920:	92 e0       	ldi	r25, 0x02	; 2
   12922:	f9 01       	movw	r30, r18
   12924:	19 95       	eicall
}
   12926:	00 00       	nop
   12928:	24 96       	adiw	r28, 0x04	; 4
   1292a:	cd bf       	out	0x3d, r28	; 61
   1292c:	de bf       	out	0x3e, r29	; 62
   1292e:	df 91       	pop	r29
   12930:	cf 91       	pop	r28
   12932:	ff 91       	pop	r31
   12934:	ef 91       	pop	r30
   12936:	bf 91       	pop	r27
   12938:	af 91       	pop	r26
   1293a:	9f 91       	pop	r25
   1293c:	8f 91       	pop	r24
   1293e:	7f 91       	pop	r23
   12940:	6f 91       	pop	r22
   12942:	5f 91       	pop	r21
   12944:	4f 91       	pop	r20
   12946:	3f 91       	pop	r19
   12948:	2f 91       	pop	r18
   1294a:	0f 90       	pop	r0
   1294c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12950:	0f 90       	pop	r0
   12952:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12956:	0f 90       	pop	r0
   12958:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1295c:	0f 90       	pop	r0
   1295e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12962:	0f 90       	pop	r0
   12964:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12968:	0f 90       	pop	r0
   1296a:	1f 90       	pop	r1
   1296c:	18 95       	reti

0001296e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
   1296e:	1f 92       	push	r1
   12970:	0f 92       	push	r0
   12972:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12976:	0f 92       	push	r0
   12978:	11 24       	eor	r1, r1
   1297a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1297e:	0f 92       	push	r0
   12980:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12984:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12988:	0f 92       	push	r0
   1298a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1298e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12992:	0f 92       	push	r0
   12994:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12998:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1299c:	0f 92       	push	r0
   1299e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   129a2:	2f 93       	push	r18
   129a4:	3f 93       	push	r19
   129a6:	4f 93       	push	r20
   129a8:	5f 93       	push	r21
   129aa:	6f 93       	push	r22
   129ac:	7f 93       	push	r23
   129ae:	8f 93       	push	r24
   129b0:	9f 93       	push	r25
   129b2:	af 93       	push	r26
   129b4:	bf 93       	push	r27
   129b6:	ef 93       	push	r30
   129b8:	ff 93       	push	r31
   129ba:	cf 93       	push	r28
   129bc:	df 93       	push	r29
   129be:	00 d0       	rcall	.+0      	; 0x129c0 <__vector_41+0x52>
   129c0:	1f 92       	push	r1
   129c2:	cd b7       	in	r28, 0x3d	; 61
   129c4:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
   129c6:	20 91 b3 29 	lds	r18, 0x29B3	; 0x8029b3 <adcb_callback>
   129ca:	30 91 b4 29 	lds	r19, 0x29B4	; 0x8029b4 <adcb_callback+0x1>
   129ce:	80 e4       	ldi	r24, 0x40	; 64
   129d0:	92 e0       	ldi	r25, 0x02	; 2
   129d2:	89 83       	std	Y+1, r24	; 0x01
   129d4:	9a 83       	std	Y+2, r25	; 0x02
   129d6:	84 e0       	ldi	r24, 0x04	; 4
   129d8:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   129da:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   129dc:	8b 81       	ldd	r24, Y+3	; 0x03
   129de:	88 2f       	mov	r24, r24
   129e0:	90 e0       	ldi	r25, 0x00	; 0
   129e2:	83 70       	andi	r24, 0x03	; 3
   129e4:	99 27       	eor	r25, r25
   129e6:	89 2b       	or	r24, r25
   129e8:	39 f4       	brne	.+14     	; 0x129f8 <__vector_41+0x8a>
		index += 2;
   129ea:	8c 81       	ldd	r24, Y+4	; 0x04
   129ec:	8e 5f       	subi	r24, 0xFE	; 254
   129ee:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   129f0:	8b 81       	ldd	r24, Y+3	; 0x03
   129f2:	86 95       	lsr	r24
   129f4:	86 95       	lsr	r24
   129f6:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   129f8:	8b 81       	ldd	r24, Y+3	; 0x03
   129fa:	88 2f       	mov	r24, r24
   129fc:	90 e0       	ldi	r25, 0x00	; 0
   129fe:	81 70       	andi	r24, 0x01	; 1
   12a00:	99 27       	eor	r25, r25
   12a02:	89 2b       	or	r24, r25
   12a04:	19 f4       	brne	.+6      	; 0x12a0c <__vector_41+0x9e>
		index++;
   12a06:	8c 81       	ldd	r24, Y+4	; 0x04
   12a08:	8f 5f       	subi	r24, 0xFF	; 255
   12a0a:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   12a0c:	89 81       	ldd	r24, Y+1	; 0x01
   12a0e:	9a 81       	ldd	r25, Y+2	; 0x02
   12a10:	ac 01       	movw	r20, r24
   12a12:	40 5e       	subi	r20, 0xE0	; 224
   12a14:	5f 4f       	sbci	r21, 0xFF	; 255
   12a16:	8c 81       	ldd	r24, Y+4	; 0x04
   12a18:	88 2f       	mov	r24, r24
   12a1a:	90 e0       	ldi	r25, 0x00	; 0
   12a1c:	88 0f       	add	r24, r24
   12a1e:	99 1f       	adc	r25, r25
   12a20:	88 0f       	add	r24, r24
   12a22:	99 1f       	adc	r25, r25
   12a24:	88 0f       	add	r24, r24
   12a26:	99 1f       	adc	r25, r25
   12a28:	84 0f       	add	r24, r20
   12a2a:	95 1f       	adc	r25, r21
   12a2c:	fc 01       	movw	r30, r24
   12a2e:	84 81       	ldd	r24, Z+4	; 0x04
   12a30:	95 81       	ldd	r25, Z+5	; 0x05
   12a32:	ac 01       	movw	r20, r24
   12a34:	64 e0       	ldi	r22, 0x04	; 4
   12a36:	80 e4       	ldi	r24, 0x40	; 64
   12a38:	92 e0       	ldi	r25, 0x02	; 2
   12a3a:	f9 01       	movw	r30, r18
   12a3c:	19 95       	eicall
}
   12a3e:	00 00       	nop
   12a40:	24 96       	adiw	r28, 0x04	; 4
   12a42:	cd bf       	out	0x3d, r28	; 61
   12a44:	de bf       	out	0x3e, r29	; 62
   12a46:	df 91       	pop	r29
   12a48:	cf 91       	pop	r28
   12a4a:	ff 91       	pop	r31
   12a4c:	ef 91       	pop	r30
   12a4e:	bf 91       	pop	r27
   12a50:	af 91       	pop	r26
   12a52:	9f 91       	pop	r25
   12a54:	8f 91       	pop	r24
   12a56:	7f 91       	pop	r23
   12a58:	6f 91       	pop	r22
   12a5a:	5f 91       	pop	r21
   12a5c:	4f 91       	pop	r20
   12a5e:	3f 91       	pop	r19
   12a60:	2f 91       	pop	r18
   12a62:	0f 90       	pop	r0
   12a64:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12a68:	0f 90       	pop	r0
   12a6a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12a6e:	0f 90       	pop	r0
   12a70:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12a74:	0f 90       	pop	r0
   12a76:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12a7a:	0f 90       	pop	r0
   12a7c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12a80:	0f 90       	pop	r0
   12a82:	1f 90       	pop	r1
   12a84:	18 95       	reti

00012a86 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
   12a86:	1f 92       	push	r1
   12a88:	0f 92       	push	r0
   12a8a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12a8e:	0f 92       	push	r0
   12a90:	11 24       	eor	r1, r1
   12a92:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12a96:	0f 92       	push	r0
   12a98:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12a9c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12aa0:	0f 92       	push	r0
   12aa2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12aa6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12aaa:	0f 92       	push	r0
   12aac:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12ab0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12ab4:	0f 92       	push	r0
   12ab6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12aba:	2f 93       	push	r18
   12abc:	3f 93       	push	r19
   12abe:	4f 93       	push	r20
   12ac0:	5f 93       	push	r21
   12ac2:	6f 93       	push	r22
   12ac4:	7f 93       	push	r23
   12ac6:	8f 93       	push	r24
   12ac8:	9f 93       	push	r25
   12aca:	af 93       	push	r26
   12acc:	bf 93       	push	r27
   12ace:	ef 93       	push	r30
   12ad0:	ff 93       	push	r31
   12ad2:	cf 93       	push	r28
   12ad4:	df 93       	push	r29
   12ad6:	00 d0       	rcall	.+0      	; 0x12ad8 <__vector_42+0x52>
   12ad8:	1f 92       	push	r1
   12ada:	cd b7       	in	r28, 0x3d	; 61
   12adc:	de b7       	in	r29, 0x3e	; 62
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
   12ade:	20 91 b3 29 	lds	r18, 0x29B3	; 0x8029b3 <adcb_callback>
   12ae2:	30 91 b4 29 	lds	r19, 0x29B4	; 0x8029b4 <adcb_callback+0x1>
   12ae6:	80 e4       	ldi	r24, 0x40	; 64
   12ae8:	92 e0       	ldi	r25, 0x02	; 2
   12aea:	89 83       	std	Y+1, r24	; 0x01
   12aec:	9a 83       	std	Y+2, r25	; 0x02
   12aee:	88 e0       	ldi	r24, 0x08	; 8
   12af0:	8b 83       	std	Y+3, r24	; 0x03
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   12af2:	1c 82       	std	Y+4, r1	; 0x04
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   12af4:	8b 81       	ldd	r24, Y+3	; 0x03
   12af6:	88 2f       	mov	r24, r24
   12af8:	90 e0       	ldi	r25, 0x00	; 0
   12afa:	83 70       	andi	r24, 0x03	; 3
   12afc:	99 27       	eor	r25, r25
   12afe:	89 2b       	or	r24, r25
   12b00:	39 f4       	brne	.+14     	; 0x12b10 <__vector_42+0x8a>
		index += 2;
   12b02:	8c 81       	ldd	r24, Y+4	; 0x04
   12b04:	8e 5f       	subi	r24, 0xFE	; 254
   12b06:	8c 83       	std	Y+4, r24	; 0x04
		ch_mask >>= 2;
   12b08:	8b 81       	ldd	r24, Y+3	; 0x03
   12b0a:	86 95       	lsr	r24
   12b0c:	86 95       	lsr	r24
   12b0e:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   12b10:	8b 81       	ldd	r24, Y+3	; 0x03
   12b12:	88 2f       	mov	r24, r24
   12b14:	90 e0       	ldi	r25, 0x00	; 0
   12b16:	81 70       	andi	r24, 0x01	; 1
   12b18:	99 27       	eor	r25, r25
   12b1a:	89 2b       	or	r24, r25
   12b1c:	19 f4       	brne	.+6      	; 0x12b24 <__vector_42+0x9e>
		index++;
   12b1e:	8c 81       	ldd	r24, Y+4	; 0x04
   12b20:	8f 5f       	subi	r24, 0xFF	; 255
   12b22:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   12b24:	89 81       	ldd	r24, Y+1	; 0x01
   12b26:	9a 81       	ldd	r25, Y+2	; 0x02
   12b28:	ac 01       	movw	r20, r24
   12b2a:	40 5e       	subi	r20, 0xE0	; 224
   12b2c:	5f 4f       	sbci	r21, 0xFF	; 255
   12b2e:	8c 81       	ldd	r24, Y+4	; 0x04
   12b30:	88 2f       	mov	r24, r24
   12b32:	90 e0       	ldi	r25, 0x00	; 0
   12b34:	88 0f       	add	r24, r24
   12b36:	99 1f       	adc	r25, r25
   12b38:	88 0f       	add	r24, r24
   12b3a:	99 1f       	adc	r25, r25
   12b3c:	88 0f       	add	r24, r24
   12b3e:	99 1f       	adc	r25, r25
   12b40:	84 0f       	add	r24, r20
   12b42:	95 1f       	adc	r25, r21
   12b44:	fc 01       	movw	r30, r24
   12b46:	84 81       	ldd	r24, Z+4	; 0x04
   12b48:	95 81       	ldd	r25, Z+5	; 0x05
   12b4a:	ac 01       	movw	r20, r24
   12b4c:	68 e0       	ldi	r22, 0x08	; 8
   12b4e:	80 e4       	ldi	r24, 0x40	; 64
   12b50:	92 e0       	ldi	r25, 0x02	; 2
   12b52:	f9 01       	movw	r30, r18
   12b54:	19 95       	eicall
}
   12b56:	00 00       	nop
   12b58:	24 96       	adiw	r28, 0x04	; 4
   12b5a:	cd bf       	out	0x3d, r28	; 61
   12b5c:	de bf       	out	0x3e, r29	; 62
   12b5e:	df 91       	pop	r29
   12b60:	cf 91       	pop	r28
   12b62:	ff 91       	pop	r31
   12b64:	ef 91       	pop	r30
   12b66:	bf 91       	pop	r27
   12b68:	af 91       	pop	r26
   12b6a:	9f 91       	pop	r25
   12b6c:	8f 91       	pop	r24
   12b6e:	7f 91       	pop	r23
   12b70:	6f 91       	pop	r22
   12b72:	5f 91       	pop	r21
   12b74:	4f 91       	pop	r20
   12b76:	3f 91       	pop	r19
   12b78:	2f 91       	pop	r18
   12b7a:	0f 90       	pop	r0
   12b7c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   12b80:	0f 90       	pop	r0
   12b82:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   12b86:	0f 90       	pop	r0
   12b88:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   12b8c:	0f 90       	pop	r0
   12b8e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   12b92:	0f 90       	pop	r0
   12b94:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   12b98:	0f 90       	pop	r0
   12b9a:	1f 90       	pop	r1
   12b9c:	18 95       	reti

00012b9e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
   12b9e:	cf 93       	push	r28
   12ba0:	df 93       	push	r29
   12ba2:	cd b7       	in	r28, 0x3d	; 61
   12ba4:	de b7       	in	r29, 0x3e	; 62
   12ba6:	28 97       	sbiw	r28, 0x08	; 8
   12ba8:	cd bf       	out	0x3d, r28	; 61
   12baa:	de bf       	out	0x3e, r29	; 62
   12bac:	8d 83       	std	Y+5, r24	; 0x05
   12bae:	9e 83       	std	Y+6, r25	; 0x06
   12bb0:	6f 83       	std	Y+7, r22	; 0x07
   12bb2:	78 87       	std	Y+8, r23	; 0x08
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
   12bb4:	8d 81       	ldd	r24, Y+5	; 0x05
   12bb6:	9e 81       	ldd	r25, Y+6	; 0x06
   12bb8:	81 15       	cp	r24, r1
   12bba:	92 40       	sbci	r25, 0x02	; 2
   12bbc:	29 f4       	brne	.+10     	; 0x12bc8 <adc_write_configuration+0x2a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
   12bbe:	80 e0       	ldi	r24, 0x00	; 0
   12bc0:	2d db       	rcall	.-2470   	; 0x1221c <adc_get_calibration_data>
   12bc2:	89 83       	std	Y+1, r24	; 0x01
   12bc4:	9a 83       	std	Y+2, r25	; 0x02
   12bc6:	0a c0       	rjmp	.+20     	; 0x12bdc <adc_write_configuration+0x3e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
   12bc8:	8d 81       	ldd	r24, Y+5	; 0x05
   12bca:	9e 81       	ldd	r25, Y+6	; 0x06
   12bcc:	80 34       	cpi	r24, 0x40	; 64
   12bce:	92 40       	sbci	r25, 0x02	; 2
   12bd0:	09 f0       	breq	.+2      	; 0x12bd4 <adc_write_configuration+0x36>
   12bd2:	58 c0       	rjmp	.+176    	; 0x12c84 <adc_write_configuration+0xe6>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
   12bd4:	81 e0       	ldi	r24, 0x01	; 1
   12bd6:	22 db       	rcall	.-2492   	; 0x1221c <adc_get_calibration_data>
   12bd8:	89 83       	std	Y+1, r24	; 0x01
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
   12bda:	9a 83       	std	Y+2, r25	; 0x02
   12bdc:	ee da       	rcall	.-2596   	; 0x121ba <cpu_irq_save>
   12bde:	8b 83       	std	Y+3, r24	; 0x03
	adc_enable_clock(adc);
   12be0:	8d 81       	ldd	r24, Y+5	; 0x05
   12be2:	9e 81       	ldd	r25, Y+6	; 0x06
   12be4:	0e 94 c4 86 	call	0x10d88	; 0x10d88 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
   12be8:	8d 81       	ldd	r24, Y+5	; 0x05
   12bea:	9e 81       	ldd	r25, Y+6	; 0x06
   12bec:	fc 01       	movw	r30, r24
   12bee:	80 81       	ld	r24, Z
   12bf0:	81 70       	andi	r24, 0x01	; 1
   12bf2:	8c 83       	std	Y+4, r24	; 0x04

	adc->CTRLA = ADC_FLUSH_bm;
   12bf4:	8d 81       	ldd	r24, Y+5	; 0x05
   12bf6:	9e 81       	ldd	r25, Y+6	; 0x06
   12bf8:	22 e0       	ldi	r18, 0x02	; 2
   12bfa:	fc 01       	movw	r30, r24
   12bfc:	20 83       	st	Z, r18
	adc->CAL = cal;
   12bfe:	8d 81       	ldd	r24, Y+5	; 0x05
   12c00:	9e 81       	ldd	r25, Y+6	; 0x06
   12c02:	29 81       	ldd	r18, Y+1	; 0x01
   12c04:	3a 81       	ldd	r19, Y+2	; 0x02
   12c06:	fc 01       	movw	r30, r24
   12c08:	24 87       	std	Z+12, r18	; 0x0c
   12c0a:	35 87       	std	Z+13, r19	; 0x0d
	adc->CMP = conf->cmp;
   12c0c:	8f 81       	ldd	r24, Y+7	; 0x07
   12c0e:	98 85       	ldd	r25, Y+8	; 0x08
   12c10:	fc 01       	movw	r30, r24
   12c12:	25 81       	ldd	r18, Z+5	; 0x05
   12c14:	36 81       	ldd	r19, Z+6	; 0x06
   12c16:	8d 81       	ldd	r24, Y+5	; 0x05
   12c18:	9e 81       	ldd	r25, Y+6	; 0x06
   12c1a:	fc 01       	movw	r30, r24
   12c1c:	20 8f       	std	Z+24, r18	; 0x18
   12c1e:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
   12c20:	8f 81       	ldd	r24, Y+7	; 0x07
   12c22:	98 85       	ldd	r25, Y+8	; 0x08
   12c24:	fc 01       	movw	r30, r24
   12c26:	22 81       	ldd	r18, Z+2	; 0x02
   12c28:	8d 81       	ldd	r24, Y+5	; 0x05
   12c2a:	9e 81       	ldd	r25, Y+6	; 0x06
   12c2c:	fc 01       	movw	r30, r24
   12c2e:	22 83       	std	Z+2, r18	; 0x02
	adc->PRESCALER = conf->prescaler;
   12c30:	8f 81       	ldd	r24, Y+7	; 0x07
   12c32:	98 85       	ldd	r25, Y+8	; 0x08
   12c34:	fc 01       	movw	r30, r24
   12c36:	24 81       	ldd	r18, Z+4	; 0x04
   12c38:	8d 81       	ldd	r24, Y+5	; 0x05
   12c3a:	9e 81       	ldd	r25, Y+6	; 0x06
   12c3c:	fc 01       	movw	r30, r24
   12c3e:	24 83       	std	Z+4, r18	; 0x04
	adc->EVCTRL = conf->evctrl;
   12c40:	8f 81       	ldd	r24, Y+7	; 0x07
   12c42:	98 85       	ldd	r25, Y+8	; 0x08
   12c44:	fc 01       	movw	r30, r24
   12c46:	23 81       	ldd	r18, Z+3	; 0x03
   12c48:	8d 81       	ldd	r24, Y+5	; 0x05
   12c4a:	9e 81       	ldd	r25, Y+6	; 0x06
   12c4c:	fc 01       	movw	r30, r24
   12c4e:	23 83       	std	Z+3, r18	; 0x03
	adc->CTRLB = conf->ctrlb;
   12c50:	8f 81       	ldd	r24, Y+7	; 0x07
   12c52:	98 85       	ldd	r25, Y+8	; 0x08
   12c54:	fc 01       	movw	r30, r24
   12c56:	21 81       	ldd	r18, Z+1	; 0x01
   12c58:	8d 81       	ldd	r24, Y+5	; 0x05
   12c5a:	9e 81       	ldd	r25, Y+6	; 0x06
   12c5c:	fc 01       	movw	r30, r24
   12c5e:	21 83       	std	Z+1, r18	; 0x01

	adc->CTRLA = enable | conf->ctrla;
   12c60:	8f 81       	ldd	r24, Y+7	; 0x07
   12c62:	98 85       	ldd	r25, Y+8	; 0x08
   12c64:	fc 01       	movw	r30, r24
   12c66:	90 81       	ld	r25, Z
   12c68:	8c 81       	ldd	r24, Y+4	; 0x04
   12c6a:	29 2f       	mov	r18, r25
   12c6c:	28 2b       	or	r18, r24
   12c6e:	8d 81       	ldd	r24, Y+5	; 0x05
   12c70:	9e 81       	ldd	r25, Y+6	; 0x06
   12c72:	fc 01       	movw	r30, r24
   12c74:	20 83       	st	Z, r18

	adc_disable_clock(adc);
   12c76:	8d 81       	ldd	r24, Y+5	; 0x05
   12c78:	9e 81       	ldd	r25, Y+6	; 0x06
   12c7a:	0e 94 f5 86 	call	0x10dea	; 0x10dea <adc_disable_clock>

	cpu_irq_restore(flags);
   12c7e:	8b 81       	ldd	r24, Y+3	; 0x03
   12c80:	ac da       	rcall	.-2728   	; 0x121da <cpu_irq_restore>
   12c82:	01 c0       	rjmp	.+2      	; 0x12c86 <adc_write_configuration+0xe8>
	} else
#endif

	{
		Assert(0);
		return;
   12c84:	00 00       	nop
	adc->CTRLA = enable | conf->ctrla;

	adc_disable_clock(adc);

	cpu_irq_restore(flags);
}
   12c86:	28 96       	adiw	r28, 0x08	; 8
   12c88:	cd bf       	out	0x3d, r28	; 61
   12c8a:	de bf       	out	0x3e, r29	; 62
   12c8c:	df 91       	pop	r29
   12c8e:	cf 91       	pop	r28
   12c90:	08 95       	ret

00012c92 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
   12c92:	cf 93       	push	r28
   12c94:	df 93       	push	r29
   12c96:	cd b7       	in	r28, 0x3d	; 61
   12c98:	de b7       	in	r29, 0x3e	; 62
   12c9a:	25 97       	sbiw	r28, 0x05	; 5
   12c9c:	cd bf       	out	0x3d, r28	; 61
   12c9e:	de bf       	out	0x3e, r29	; 62
   12ca0:	8a 83       	std	Y+2, r24	; 0x02
   12ca2:	9b 83       	std	Y+3, r25	; 0x03
   12ca4:	6c 83       	std	Y+4, r22	; 0x04
   12ca6:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags = cpu_irq_save();
   12ca8:	88 da       	rcall	.-2800   	; 0x121ba <cpu_irq_save>
   12caa:	89 83       	std	Y+1, r24	; 0x01

	adc_enable_clock(adc);
   12cac:	8a 81       	ldd	r24, Y+2	; 0x02
   12cae:	9b 81       	ldd	r25, Y+3	; 0x03
   12cb0:	0e 94 c4 86 	call	0x10d88	; 0x10d88 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
   12cb4:	8a 81       	ldd	r24, Y+2	; 0x02
   12cb6:	9b 81       	ldd	r25, Y+3	; 0x03
   12cb8:	fc 01       	movw	r30, r24
   12cba:	80 81       	ld	r24, Z
   12cbc:	28 2f       	mov	r18, r24
   12cbe:	20 7c       	andi	r18, 0xC0	; 192
   12cc0:	8c 81       	ldd	r24, Y+4	; 0x04
   12cc2:	9d 81       	ldd	r25, Y+5	; 0x05
   12cc4:	fc 01       	movw	r30, r24
   12cc6:	20 83       	st	Z, r18

	conf->cmp = adc->CMP;
   12cc8:	8a 81       	ldd	r24, Y+2	; 0x02
   12cca:	9b 81       	ldd	r25, Y+3	; 0x03
   12ccc:	fc 01       	movw	r30, r24
   12cce:	20 8d       	ldd	r18, Z+24	; 0x18
   12cd0:	31 8d       	ldd	r19, Z+25	; 0x19
   12cd2:	8c 81       	ldd	r24, Y+4	; 0x04
   12cd4:	9d 81       	ldd	r25, Y+5	; 0x05
   12cd6:	fc 01       	movw	r30, r24
   12cd8:	25 83       	std	Z+5, r18	; 0x05
   12cda:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
   12cdc:	8a 81       	ldd	r24, Y+2	; 0x02
   12cde:	9b 81       	ldd	r25, Y+3	; 0x03
   12ce0:	fc 01       	movw	r30, r24
   12ce2:	22 81       	ldd	r18, Z+2	; 0x02
   12ce4:	8c 81       	ldd	r24, Y+4	; 0x04
   12ce6:	9d 81       	ldd	r25, Y+5	; 0x05
   12ce8:	fc 01       	movw	r30, r24
   12cea:	22 83       	std	Z+2, r18	; 0x02
	conf->prescaler = adc->PRESCALER;
   12cec:	8a 81       	ldd	r24, Y+2	; 0x02
   12cee:	9b 81       	ldd	r25, Y+3	; 0x03
   12cf0:	fc 01       	movw	r30, r24
   12cf2:	24 81       	ldd	r18, Z+4	; 0x04
   12cf4:	8c 81       	ldd	r24, Y+4	; 0x04
   12cf6:	9d 81       	ldd	r25, Y+5	; 0x05
   12cf8:	fc 01       	movw	r30, r24
   12cfa:	24 83       	std	Z+4, r18	; 0x04
	conf->evctrl = adc->EVCTRL;
   12cfc:	8a 81       	ldd	r24, Y+2	; 0x02
   12cfe:	9b 81       	ldd	r25, Y+3	; 0x03
   12d00:	fc 01       	movw	r30, r24
   12d02:	23 81       	ldd	r18, Z+3	; 0x03
   12d04:	8c 81       	ldd	r24, Y+4	; 0x04
   12d06:	9d 81       	ldd	r25, Y+5	; 0x05
   12d08:	fc 01       	movw	r30, r24
   12d0a:	23 83       	std	Z+3, r18	; 0x03
	conf->ctrlb = adc->CTRLB;
   12d0c:	8a 81       	ldd	r24, Y+2	; 0x02
   12d0e:	9b 81       	ldd	r25, Y+3	; 0x03
   12d10:	fc 01       	movw	r30, r24
   12d12:	21 81       	ldd	r18, Z+1	; 0x01
   12d14:	8c 81       	ldd	r24, Y+4	; 0x04
   12d16:	9d 81       	ldd	r25, Y+5	; 0x05
   12d18:	fc 01       	movw	r30, r24
   12d1a:	21 83       	std	Z+1, r18	; 0x01

	adc_disable_clock(adc);
   12d1c:	8a 81       	ldd	r24, Y+2	; 0x02
   12d1e:	9b 81       	ldd	r25, Y+3	; 0x03
   12d20:	0e 94 f5 86 	call	0x10dea	; 0x10dea <adc_disable_clock>

	cpu_irq_restore(flags);
   12d24:	89 81       	ldd	r24, Y+1	; 0x01
   12d26:	59 da       	rcall	.-2894   	; 0x121da <cpu_irq_restore>
}
   12d28:	00 00       	nop
   12d2a:	25 96       	adiw	r28, 0x05	; 5
   12d2c:	cd bf       	out	0x3d, r28	; 61
   12d2e:	de bf       	out	0x3e, r29	; 62
   12d30:	df 91       	pop	r29
   12d32:	cf 91       	pop	r28
   12d34:	08 95       	ret

00012d36 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
   12d36:	cf 93       	push	r28
   12d38:	df 93       	push	r29
   12d3a:	cd b7       	in	r28, 0x3d	; 61
   12d3c:	de b7       	in	r29, 0x3e	; 62
   12d3e:	2c 97       	sbiw	r28, 0x0c	; 12
   12d40:	cd bf       	out	0x3d, r28	; 61
   12d42:	de bf       	out	0x3e, r29	; 62
   12d44:	88 87       	std	Y+8, r24	; 0x08
   12d46:	99 87       	std	Y+9, r25	; 0x09
   12d48:	6a 87       	std	Y+10, r22	; 0x0a
   12d4a:	4b 87       	std	Y+11, r20	; 0x0b
   12d4c:	5c 87       	std	Y+12, r21	; 0x0c
   12d4e:	88 85       	ldd	r24, Y+8	; 0x08
   12d50:	99 85       	ldd	r25, Y+9	; 0x09
   12d52:	8c 83       	std	Y+4, r24	; 0x04
   12d54:	9d 83       	std	Y+5, r25	; 0x05
   12d56:	8a 85       	ldd	r24, Y+10	; 0x0a
   12d58:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   12d5a:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   12d5c:	8e 81       	ldd	r24, Y+6	; 0x06
   12d5e:	88 2f       	mov	r24, r24
   12d60:	90 e0       	ldi	r25, 0x00	; 0
   12d62:	83 70       	andi	r24, 0x03	; 3
   12d64:	99 27       	eor	r25, r25
   12d66:	89 2b       	or	r24, r25
   12d68:	39 f4       	brne	.+14     	; 0x12d78 <adcch_write_configuration+0x42>
		index += 2;
   12d6a:	8f 81       	ldd	r24, Y+7	; 0x07
   12d6c:	8e 5f       	subi	r24, 0xFE	; 254
   12d6e:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
   12d70:	8e 81       	ldd	r24, Y+6	; 0x06
   12d72:	86 95       	lsr	r24
   12d74:	86 95       	lsr	r24
   12d76:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   12d78:	8e 81       	ldd	r24, Y+6	; 0x06
   12d7a:	88 2f       	mov	r24, r24
   12d7c:	90 e0       	ldi	r25, 0x00	; 0
   12d7e:	81 70       	andi	r24, 0x01	; 1
   12d80:	99 27       	eor	r25, r25
   12d82:	89 2b       	or	r24, r25
   12d84:	19 f4       	brne	.+6      	; 0x12d8c <adcch_write_configuration+0x56>
		index++;
   12d86:	8f 81       	ldd	r24, Y+7	; 0x07
   12d88:	8f 5f       	subi	r24, 0xFF	; 255
   12d8a:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   12d8c:	8c 81       	ldd	r24, Y+4	; 0x04
   12d8e:	9d 81       	ldd	r25, Y+5	; 0x05
   12d90:	9c 01       	movw	r18, r24
   12d92:	20 5e       	subi	r18, 0xE0	; 224
   12d94:	3f 4f       	sbci	r19, 0xFF	; 255
   12d96:	8f 81       	ldd	r24, Y+7	; 0x07
   12d98:	88 2f       	mov	r24, r24
   12d9a:	90 e0       	ldi	r25, 0x00	; 0
   12d9c:	88 0f       	add	r24, r24
   12d9e:	99 1f       	adc	r25, r25
   12da0:	88 0f       	add	r24, r24
   12da2:	99 1f       	adc	r25, r25
   12da4:	88 0f       	add	r24, r24
   12da6:	99 1f       	adc	r25, r25
   12da8:	82 0f       	add	r24, r18
   12daa:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
   12dac:	89 83       	std	Y+1, r24	; 0x01
   12dae:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
   12db0:	04 da       	rcall	.-3064   	; 0x121ba <cpu_irq_save>
   12db2:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
	}
#endif

	adc_enable_clock(adc);
   12db4:	88 85       	ldd	r24, Y+8	; 0x08
   12db6:	99 85       	ldd	r25, Y+9	; 0x09
   12db8:	0e 94 c4 86 	call	0x10d88	; 0x10d88 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
   12dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
   12dbe:	9c 85       	ldd	r25, Y+12	; 0x0c
   12dc0:	fc 01       	movw	r30, r24
   12dc2:	20 81       	ld	r18, Z
   12dc4:	89 81       	ldd	r24, Y+1	; 0x01
   12dc6:	9a 81       	ldd	r25, Y+2	; 0x02
   12dc8:	fc 01       	movw	r30, r24
   12dca:	20 83       	st	Z, r18
	adc_ch->INTCTRL = ch_conf->intctrl;
   12dcc:	8b 85       	ldd	r24, Y+11	; 0x0b
   12dce:	9c 85       	ldd	r25, Y+12	; 0x0c
   12dd0:	fc 01       	movw	r30, r24
   12dd2:	22 81       	ldd	r18, Z+2	; 0x02
   12dd4:	89 81       	ldd	r24, Y+1	; 0x01
   12dd6:	9a 81       	ldd	r25, Y+2	; 0x02
   12dd8:	fc 01       	movw	r30, r24
   12dda:	22 83       	std	Z+2, r18	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
   12ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
   12dde:	9c 85       	ldd	r25, Y+12	; 0x0c
   12de0:	fc 01       	movw	r30, r24
   12de2:	21 81       	ldd	r18, Z+1	; 0x01
   12de4:	89 81       	ldd	r24, Y+1	; 0x01
   12de6:	9a 81       	ldd	r25, Y+2	; 0x02
   12de8:	fc 01       	movw	r30, r24
   12dea:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
   12dec:	8a 85       	ldd	r24, Y+10	; 0x0a
   12dee:	88 2f       	mov	r24, r24
   12df0:	90 e0       	ldi	r25, 0x00	; 0
   12df2:	81 70       	andi	r24, 0x01	; 1
   12df4:	99 27       	eor	r25, r25
   12df6:	89 2b       	or	r24, r25
   12df8:	41 f0       	breq	.+16     	; 0x12e0a <adcch_write_configuration+0xd4>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
   12dfa:	8b 85       	ldd	r24, Y+11	; 0x0b
   12dfc:	9c 85       	ldd	r25, Y+12	; 0x0c
   12dfe:	fc 01       	movw	r30, r24
   12e00:	23 81       	ldd	r18, Z+3	; 0x03
   12e02:	89 81       	ldd	r24, Y+1	; 0x01
   12e04:	9a 81       	ldd	r25, Y+2	; 0x02
   12e06:	fc 01       	movw	r30, r24
   12e08:	26 83       	std	Z+6, r18	; 0x06
	}
	adc_disable_clock(adc);
   12e0a:	88 85       	ldd	r24, Y+8	; 0x08
   12e0c:	99 85       	ldd	r25, Y+9	; 0x09
   12e0e:	0e 94 f5 86 	call	0x10dea	; 0x10dea <adc_disable_clock>

	cpu_irq_restore(flags);
   12e12:	8b 81       	ldd	r24, Y+3	; 0x03
   12e14:	e2 d9       	rcall	.-3132   	; 0x121da <cpu_irq_restore>
}
   12e16:	00 00       	nop
   12e18:	2c 96       	adiw	r28, 0x0c	; 12
   12e1a:	cd bf       	out	0x3d, r28	; 61
   12e1c:	de bf       	out	0x3e, r29	; 62
   12e1e:	df 91       	pop	r29
   12e20:	cf 91       	pop	r28
   12e22:	08 95       	ret

00012e24 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
   12e24:	cf 93       	push	r28
   12e26:	df 93       	push	r29
   12e28:	cd b7       	in	r28, 0x3d	; 61
   12e2a:	de b7       	in	r29, 0x3e	; 62
   12e2c:	2c 97       	sbiw	r28, 0x0c	; 12
   12e2e:	cd bf       	out	0x3d, r28	; 61
   12e30:	de bf       	out	0x3e, r29	; 62
   12e32:	88 87       	std	Y+8, r24	; 0x08
   12e34:	99 87       	std	Y+9, r25	; 0x09
   12e36:	6a 87       	std	Y+10, r22	; 0x0a
   12e38:	4b 87       	std	Y+11, r20	; 0x0b
   12e3a:	5c 87       	std	Y+12, r21	; 0x0c
   12e3c:	88 85       	ldd	r24, Y+8	; 0x08
   12e3e:	99 85       	ldd	r25, Y+9	; 0x09
   12e40:	8c 83       	std	Y+4, r24	; 0x04
   12e42:	9d 83       	std	Y+5, r25	; 0x05
   12e44:	8a 85       	ldd	r24, Y+10	; 0x0a
   12e46:	8e 83       	std	Y+6, r24	; 0x06
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
   12e48:	1f 82       	std	Y+7, r1	; 0x07
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
   12e4a:	8e 81       	ldd	r24, Y+6	; 0x06
   12e4c:	88 2f       	mov	r24, r24
   12e4e:	90 e0       	ldi	r25, 0x00	; 0
   12e50:	83 70       	andi	r24, 0x03	; 3
   12e52:	99 27       	eor	r25, r25
   12e54:	89 2b       	or	r24, r25
   12e56:	39 f4       	brne	.+14     	; 0x12e66 <adcch_read_configuration+0x42>
		index += 2;
   12e58:	8f 81       	ldd	r24, Y+7	; 0x07
   12e5a:	8e 5f       	subi	r24, 0xFE	; 254
   12e5c:	8f 83       	std	Y+7, r24	; 0x07
		ch_mask >>= 2;
   12e5e:	8e 81       	ldd	r24, Y+6	; 0x06
   12e60:	86 95       	lsr	r24
   12e62:	86 95       	lsr	r24
   12e64:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
   12e66:	8e 81       	ldd	r24, Y+6	; 0x06
   12e68:	88 2f       	mov	r24, r24
   12e6a:	90 e0       	ldi	r25, 0x00	; 0
   12e6c:	81 70       	andi	r24, 0x01	; 1
   12e6e:	99 27       	eor	r25, r25
   12e70:	89 2b       	or	r24, r25
   12e72:	19 f4       	brne	.+6      	; 0x12e7a <adcch_read_configuration+0x56>
		index++;
   12e74:	8f 81       	ldd	r24, Y+7	; 0x07
   12e76:	8f 5f       	subi	r24, 0xFF	; 255
   12e78:	8f 83       	std	Y+7, r24	; 0x07
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
   12e7a:	8c 81       	ldd	r24, Y+4	; 0x04
   12e7c:	9d 81       	ldd	r25, Y+5	; 0x05
   12e7e:	9c 01       	movw	r18, r24
   12e80:	20 5e       	subi	r18, 0xE0	; 224
   12e82:	3f 4f       	sbci	r19, 0xFF	; 255
   12e84:	8f 81       	ldd	r24, Y+7	; 0x07
   12e86:	88 2f       	mov	r24, r24
   12e88:	90 e0       	ldi	r25, 0x00	; 0
   12e8a:	88 0f       	add	r24, r24
   12e8c:	99 1f       	adc	r25, r25
   12e8e:	88 0f       	add	r24, r24
   12e90:	99 1f       	adc	r25, r25
   12e92:	88 0f       	add	r24, r24
   12e94:	99 1f       	adc	r25, r25
   12e96:	82 0f       	add	r24, r18
   12e98:	93 1f       	adc	r25, r19
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);
   12e9a:	89 83       	std	Y+1, r24	; 0x01
   12e9c:	9a 83       	std	Y+2, r25	; 0x02

	flags = cpu_irq_save();
   12e9e:	8d d9       	rcall	.-3302   	; 0x121ba <cpu_irq_save>
   12ea0:	8b 83       	std	Y+3, r24	; 0x03

	adc_enable_clock(adc);
   12ea2:	88 85       	ldd	r24, Y+8	; 0x08
   12ea4:	99 85       	ldd	r25, Y+9	; 0x09
   12ea6:	0e 94 c4 86 	call	0x10d88	; 0x10d88 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
   12eaa:	89 81       	ldd	r24, Y+1	; 0x01
   12eac:	9a 81       	ldd	r25, Y+2	; 0x02
   12eae:	fc 01       	movw	r30, r24
   12eb0:	20 81       	ld	r18, Z
   12eb2:	8b 85       	ldd	r24, Y+11	; 0x0b
   12eb4:	9c 85       	ldd	r25, Y+12	; 0x0c
   12eb6:	fc 01       	movw	r30, r24
   12eb8:	20 83       	st	Z, r18
	ch_conf->intctrl = adc_ch->INTCTRL;
   12eba:	89 81       	ldd	r24, Y+1	; 0x01
   12ebc:	9a 81       	ldd	r25, Y+2	; 0x02
   12ebe:	fc 01       	movw	r30, r24
   12ec0:	22 81       	ldd	r18, Z+2	; 0x02
   12ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
   12ec4:	9c 85       	ldd	r25, Y+12	; 0x0c
   12ec6:	fc 01       	movw	r30, r24
   12ec8:	22 83       	std	Z+2, r18	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
   12eca:	89 81       	ldd	r24, Y+1	; 0x01
   12ecc:	9a 81       	ldd	r25, Y+2	; 0x02
   12ece:	fc 01       	movw	r30, r24
   12ed0:	21 81       	ldd	r18, Z+1	; 0x01
   12ed2:	8b 85       	ldd	r24, Y+11	; 0x0b
   12ed4:	9c 85       	ldd	r25, Y+12	; 0x0c
   12ed6:	fc 01       	movw	r30, r24
   12ed8:	21 83       	std	Z+1, r18	; 0x01
	if (ch_mask & ADC_CH0) {
   12eda:	8a 85       	ldd	r24, Y+10	; 0x0a
   12edc:	88 2f       	mov	r24, r24
   12ede:	90 e0       	ldi	r25, 0x00	; 0
   12ee0:	81 70       	andi	r24, 0x01	; 1
   12ee2:	99 27       	eor	r25, r25
   12ee4:	89 2b       	or	r24, r25
   12ee6:	41 f0       	breq	.+16     	; 0x12ef8 <adcch_read_configuration+0xd4>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
   12ee8:	89 81       	ldd	r24, Y+1	; 0x01
   12eea:	9a 81       	ldd	r25, Y+2	; 0x02
   12eec:	fc 01       	movw	r30, r24
   12eee:	26 81       	ldd	r18, Z+6	; 0x06
   12ef0:	8b 85       	ldd	r24, Y+11	; 0x0b
   12ef2:	9c 85       	ldd	r25, Y+12	; 0x0c
   12ef4:	fc 01       	movw	r30, r24
   12ef6:	23 83       	std	Z+3, r18	; 0x03
	}
	adc_disable_clock(adc);
   12ef8:	88 85       	ldd	r24, Y+8	; 0x08
   12efa:	99 85       	ldd	r25, Y+9	; 0x09
   12efc:	0e 94 f5 86 	call	0x10dea	; 0x10dea <adc_disable_clock>

	cpu_irq_restore(flags);
   12f00:	8b 81       	ldd	r24, Y+3	; 0x03
   12f02:	6b d9       	rcall	.-3370   	; 0x121da <cpu_irq_restore>
}
   12f04:	00 00       	nop
   12f06:	2c 96       	adiw	r28, 0x0c	; 12
   12f08:	cd bf       	out	0x3d, r28	; 61
   12f0a:	de bf       	out	0x3e, r29	; 62
   12f0c:	df 91       	pop	r29
   12f0e:	cf 91       	pop	r28
   12f10:	08 95       	ret

00012f12 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
   12f12:	cf 93       	push	r28
   12f14:	df 93       	push	r29
   12f16:	00 d0       	rcall	.+0      	; 0x12f18 <ioport_configure_port_pin+0x6>
   12f18:	00 d0       	rcall	.+0      	; 0x12f1a <ioport_configure_port_pin+0x8>
   12f1a:	cd b7       	in	r28, 0x3d	; 61
   12f1c:	de b7       	in	r29, 0x3e	; 62
   12f1e:	8a 83       	std	Y+2, r24	; 0x02
   12f20:	9b 83       	std	Y+3, r25	; 0x03
   12f22:	6c 83       	std	Y+4, r22	; 0x04
   12f24:	4d 83       	std	Y+5, r20	; 0x05
   12f26:	5e 83       	std	Y+6, r21	; 0x06
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
   12f28:	19 82       	std	Y+1, r1	; 0x01
   12f2a:	20 c0       	rjmp	.+64     	; 0x12f6c <ioport_configure_port_pin+0x5a>
		if (pin_mask & (1 << pin)) {
   12f2c:	8c 81       	ldd	r24, Y+4	; 0x04
   12f2e:	88 2f       	mov	r24, r24
   12f30:	90 e0       	ldi	r25, 0x00	; 0
   12f32:	29 81       	ldd	r18, Y+1	; 0x01
   12f34:	22 2f       	mov	r18, r18
   12f36:	30 e0       	ldi	r19, 0x00	; 0
   12f38:	02 c0       	rjmp	.+4      	; 0x12f3e <ioport_configure_port_pin+0x2c>
   12f3a:	95 95       	asr	r25
   12f3c:	87 95       	ror	r24
   12f3e:	2a 95       	dec	r18
   12f40:	e2 f7       	brpl	.-8      	; 0x12f3a <ioport_configure_port_pin+0x28>
   12f42:	81 70       	andi	r24, 0x01	; 1
   12f44:	99 27       	eor	r25, r25
   12f46:	89 2b       	or	r24, r25
   12f48:	71 f0       	breq	.+28     	; 0x12f66 <ioport_configure_port_pin+0x54>
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
   12f4a:	89 81       	ldd	r24, Y+1	; 0x01
   12f4c:	88 2f       	mov	r24, r24
   12f4e:	90 e0       	ldi	r25, 0x00	; 0
   12f50:	40 96       	adiw	r24, 0x10	; 16
   12f52:	2a 81       	ldd	r18, Y+2	; 0x02
   12f54:	3b 81       	ldd	r19, Y+3	; 0x03
   12f56:	82 0f       	add	r24, r18
   12f58:	93 1f       	adc	r25, r19
   12f5a:	2d 81       	ldd	r18, Y+5	; 0x05
   12f5c:	3e 81       	ldd	r19, Y+6	; 0x06
   12f5e:	23 2f       	mov	r18, r19
   12f60:	33 27       	eor	r19, r19
   12f62:	fc 01       	movw	r30, r24
   12f64:	20 83       	st	Z, r18
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
   12f66:	89 81       	ldd	r24, Y+1	; 0x01
   12f68:	8f 5f       	subi	r24, 0xFF	; 255
   12f6a:	89 83       	std	Y+1, r24	; 0x01
   12f6c:	89 81       	ldd	r24, Y+1	; 0x01
   12f6e:	88 30       	cpi	r24, 0x08	; 8
   12f70:	e8 f2       	brcs	.-70     	; 0x12f2c <ioport_configure_port_pin+0x1a>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
   12f72:	8d 81       	ldd	r24, Y+5	; 0x05
   12f74:	9e 81       	ldd	r25, Y+6	; 0x06
   12f76:	81 70       	andi	r24, 0x01	; 1
   12f78:	99 27       	eor	r25, r25
   12f7a:	89 2b       	or	r24, r25
   12f7c:	d1 f0       	breq	.+52     	; 0x12fb2 <ioport_configure_port_pin+0xa0>
		if (flags & IOPORT_INIT_HIGH) {
   12f7e:	8d 81       	ldd	r24, Y+5	; 0x05
   12f80:	9e 81       	ldd	r25, Y+6	; 0x06
   12f82:	82 70       	andi	r24, 0x02	; 2
   12f84:	99 27       	eor	r25, r25
   12f86:	89 2b       	or	r24, r25
   12f88:	39 f0       	breq	.+14     	; 0x12f98 <ioport_configure_port_pin+0x86>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
   12f8a:	8a 81       	ldd	r24, Y+2	; 0x02
   12f8c:	9b 81       	ldd	r25, Y+3	; 0x03
   12f8e:	05 96       	adiw	r24, 0x05	; 5
   12f90:	2c 81       	ldd	r18, Y+4	; 0x04
   12f92:	fc 01       	movw	r30, r24
   12f94:	20 83       	st	Z, r18
   12f96:	06 c0       	rjmp	.+12     	; 0x12fa4 <ioport_configure_port_pin+0x92>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
   12f98:	8a 81       	ldd	r24, Y+2	; 0x02
   12f9a:	9b 81       	ldd	r25, Y+3	; 0x03
   12f9c:	06 96       	adiw	r24, 0x06	; 6
   12f9e:	2c 81       	ldd	r18, Y+4	; 0x04
   12fa0:	fc 01       	movw	r30, r24
   12fa2:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
   12fa4:	8a 81       	ldd	r24, Y+2	; 0x02
   12fa6:	9b 81       	ldd	r25, Y+3	; 0x03
   12fa8:	01 96       	adiw	r24, 0x01	; 1
   12faa:	2c 81       	ldd	r18, Y+4	; 0x04
   12fac:	fc 01       	movw	r30, r24
   12fae:	20 83       	st	Z, r18
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
	}
}
   12fb0:	06 c0       	rjmp	.+12     	; 0x12fbe <ioport_configure_port_pin+0xac>
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
   12fb2:	8a 81       	ldd	r24, Y+2	; 0x02
   12fb4:	9b 81       	ldd	r25, Y+3	; 0x03
   12fb6:	02 96       	adiw	r24, 0x02	; 2
   12fb8:	2c 81       	ldd	r18, Y+4	; 0x04
   12fba:	fc 01       	movw	r30, r24
   12fbc:	20 83       	st	Z, r18
	}
}
   12fbe:	00 00       	nop
   12fc0:	26 96       	adiw	r28, 0x06	; 6
   12fc2:	cd bf       	out	0x3d, r28	; 61
   12fc4:	de bf       	out	0x3e, r29	; 62
   12fc6:	df 91       	pop	r29
   12fc8:	cf 91       	pop	r28
   12fca:	08 95       	ret

00012fcc <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
   12fcc:	cf 93       	push	r28
   12fce:	df 93       	push	r29
   12fd0:	1f 92       	push	r1
   12fd2:	cd b7       	in	r28, 0x3d	; 61
   12fd4:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
   12fd6:	8f e3       	ldi	r24, 0x3F	; 63
   12fd8:	90 e0       	ldi	r25, 0x00	; 0
   12fda:	fc 01       	movw	r30, r24
   12fdc:	80 81       	ld	r24, Z
   12fde:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
   12fe0:	f8 94       	cli
	return flags;
   12fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
   12fe4:	0f 90       	pop	r0
   12fe6:	df 91       	pop	r29
   12fe8:	cf 91       	pop	r28
   12fea:	08 95       	ret

00012fec <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   12fec:	cf 93       	push	r28
   12fee:	df 93       	push	r29
   12ff0:	1f 92       	push	r1
   12ff2:	cd b7       	in	r28, 0x3d	; 61
   12ff4:	de b7       	in	r29, 0x3e	; 62
   12ff6:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
   12ff8:	8f e3       	ldi	r24, 0x3F	; 63
   12ffa:	90 e0       	ldi	r25, 0x00	; 0
   12ffc:	29 81       	ldd	r18, Y+1	; 0x01
   12ffe:	fc 01       	movw	r30, r24
   13000:	20 83       	st	Z, r18
}
   13002:	00 00       	nop
   13004:	0f 90       	pop	r0
   13006:	df 91       	pop	r29
   13008:	cf 91       	pop	r28
   1300a:	08 95       	ret

0001300c <osc_enable_internal>:
 * \brief Enable internal oscillator \a id
 *
 * Do not call this function directly. Use osc_enable() instead.
 */
static inline void osc_enable_internal(uint8_t id)
{
   1300c:	cf 93       	push	r28
   1300e:	df 93       	push	r29
   13010:	1f 92       	push	r1
   13012:	1f 92       	push	r1
   13014:	cd b7       	in	r28, 0x3d	; 61
   13016:	de b7       	in	r29, 0x3e	; 62
   13018:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
   1301a:	d8 df       	rcall	.-80     	; 0x12fcc <cpu_irq_save>
   1301c:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
   1301e:	80 e5       	ldi	r24, 0x50	; 80
   13020:	90 e0       	ldi	r25, 0x00	; 0
   13022:	20 e5       	ldi	r18, 0x50	; 80
   13024:	30 e0       	ldi	r19, 0x00	; 0
   13026:	f9 01       	movw	r30, r18
   13028:	30 81       	ld	r19, Z
   1302a:	2a 81       	ldd	r18, Y+2	; 0x02
   1302c:	23 2b       	or	r18, r19
   1302e:	fc 01       	movw	r30, r24
   13030:	20 83       	st	Z, r18
#if (XMEGA_E && CONFIG_SYSCLK_RC8MHZ_LPM)
	if(id == OSC_ID_RC8MHZ) {
		OSC.CTRL |= OSC_RC8MLPM_bm;
	}
#endif
	cpu_irq_restore(flags);
   13032:	89 81       	ldd	r24, Y+1	; 0x01
   13034:	db df       	rcall	.-74     	; 0x12fec <cpu_irq_restore>
}
   13036:	00 00       	nop
   13038:	0f 90       	pop	r0
   1303a:	0f 90       	pop	r0
   1303c:	df 91       	pop	r29
   1303e:	cf 91       	pop	r28
   13040:	08 95       	ret

00013042 <osc_enable_external>:
 * Do not call this function directly. Use osc_enable() instead. Also
 * note that this function is only available if the board actually has
 * an external oscillator crystal.
 */
static inline void osc_enable_external(uint8_t id)
{
   13042:	cf 93       	push	r28
   13044:	df 93       	push	r29
   13046:	1f 92       	push	r1
   13048:	1f 92       	push	r1
   1304a:	cd b7       	in	r28, 0x3d	; 61
   1304c:	de b7       	in	r29, 0x3e	; 62
   1304e:	8a 83       	std	Y+2, r24	; 0x02

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
   13050:	80 e5       	ldi	r24, 0x50	; 80
   13052:	90 e0       	ldi	r25, 0x00	; 0
   13054:	23 ec       	ldi	r18, 0xC3	; 195
   13056:	fc 01       	movw	r30, r24
   13058:	22 83       	std	Z+2, r18	; 0x02
#else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
   1305a:	b8 df       	rcall	.-144    	; 0x12fcc <cpu_irq_save>
   1305c:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL |= id;
   1305e:	80 e5       	ldi	r24, 0x50	; 80
   13060:	90 e0       	ldi	r25, 0x00	; 0
   13062:	20 e5       	ldi	r18, 0x50	; 80
   13064:	30 e0       	ldi	r19, 0x00	; 0
   13066:	f9 01       	movw	r30, r18
   13068:	30 81       	ld	r19, Z
   1306a:	2a 81       	ldd	r18, Y+2	; 0x02
   1306c:	23 2b       	or	r18, r19
   1306e:	fc 01       	movw	r30, r24
   13070:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
   13072:	89 81       	ldd	r24, Y+1	; 0x01
   13074:	bb df       	rcall	.-138    	; 0x12fec <cpu_irq_restore>
}
   13076:	00 00       	nop
   13078:	0f 90       	pop	r0
   1307a:	0f 90       	pop	r0
   1307c:	df 91       	pop	r29
   1307e:	cf 91       	pop	r28
   13080:	08 95       	ret

00013082 <osc_disable>:
	Assert(false); // No external oscillator on the selected board
}
#endif

static inline void osc_disable(uint8_t id)
{
   13082:	cf 93       	push	r28
   13084:	df 93       	push	r29
   13086:	1f 92       	push	r1
   13088:	1f 92       	push	r1
   1308a:	cd b7       	in	r28, 0x3d	; 61
   1308c:	de b7       	in	r29, 0x3e	; 62
   1308e:	8a 83       	std	Y+2, r24	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
   13090:	9d df       	rcall	.-198    	; 0x12fcc <cpu_irq_save>
   13092:	89 83       	std	Y+1, r24	; 0x01
	OSC.CTRL &= ~id;
   13094:	80 e5       	ldi	r24, 0x50	; 80
   13096:	90 e0       	ldi	r25, 0x00	; 0
   13098:	20 e5       	ldi	r18, 0x50	; 80
   1309a:	30 e0       	ldi	r19, 0x00	; 0
   1309c:	f9 01       	movw	r30, r18
   1309e:	20 81       	ld	r18, Z
   130a0:	32 2f       	mov	r19, r18
   130a2:	2a 81       	ldd	r18, Y+2	; 0x02
   130a4:	20 95       	com	r18
   130a6:	23 23       	and	r18, r19
   130a8:	fc 01       	movw	r30, r24
   130aa:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
   130ac:	89 81       	ldd	r24, Y+1	; 0x01
   130ae:	9e df       	rcall	.-196    	; 0x12fec <cpu_irq_restore>
}
   130b0:	00 00       	nop
   130b2:	0f 90       	pop	r0
   130b4:	0f 90       	pop	r0
   130b6:	df 91       	pop	r29
   130b8:	cf 91       	pop	r28
   130ba:	08 95       	ret

000130bc <osc_enable>:

static inline void osc_enable(uint8_t id)
{
   130bc:	cf 93       	push	r28
   130be:	df 93       	push	r29
   130c0:	1f 92       	push	r1
   130c2:	cd b7       	in	r28, 0x3d	; 61
   130c4:	de b7       	in	r29, 0x3e	; 62
   130c6:	89 83       	std	Y+1, r24	; 0x01
	if (id != OSC_ID_XOSC) {
   130c8:	89 81       	ldd	r24, Y+1	; 0x01
   130ca:	88 30       	cpi	r24, 0x08	; 8
   130cc:	19 f0       	breq	.+6      	; 0x130d4 <osc_enable+0x18>
		osc_enable_internal(id);
   130ce:	89 81       	ldd	r24, Y+1	; 0x01
   130d0:	9d df       	rcall	.-198    	; 0x1300c <osc_enable_internal>
	} else {
		osc_enable_external(id);
	}
}
   130d2:	02 c0       	rjmp	.+4      	; 0x130d8 <osc_enable+0x1c>
static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
	} else {
		osc_enable_external(id);
   130d4:	89 81       	ldd	r24, Y+1	; 0x01
   130d6:	b5 df       	rcall	.-150    	; 0x13042 <osc_enable_external>
	}
}
   130d8:	00 00       	nop
   130da:	0f 90       	pop	r0
   130dc:	df 91       	pop	r29
   130de:	cf 91       	pop	r28
   130e0:	08 95       	ret

000130e2 <osc_is_ready>:

static inline bool osc_is_ready(uint8_t id)
{
   130e2:	cf 93       	push	r28
   130e4:	df 93       	push	r29
   130e6:	1f 92       	push	r1
   130e8:	cd b7       	in	r28, 0x3d	; 61
   130ea:	de b7       	in	r29, 0x3e	; 62
   130ec:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
   130ee:	80 e5       	ldi	r24, 0x50	; 80
   130f0:	90 e0       	ldi	r25, 0x00	; 0
   130f2:	fc 01       	movw	r30, r24
   130f4:	91 81       	ldd	r25, Z+1	; 0x01
   130f6:	89 81       	ldd	r24, Y+1	; 0x01
   130f8:	98 23       	and	r25, r24
   130fa:	81 e0       	ldi	r24, 0x01	; 1
   130fc:	99 23       	and	r25, r25
   130fe:	09 f4       	brne	.+2      	; 0x13102 <osc_is_ready+0x20>
   13100:	80 e0       	ldi	r24, 0x00	; 0
}
   13102:	0f 90       	pop	r0
   13104:	df 91       	pop	r29
   13106:	cf 91       	pop	r28
   13108:	08 95       	ret

0001310a <osc_enable_autocalibration>:
 * \arg \c OSC_ID_RC32KHZ or \c OSC_ID_XOSC for internal or external 32 kHz
 * reference, respectively.
 * \arg \c OSC_ID_USBSOF for 32 MHz only when USB is available and running.
 */
static inline void osc_enable_autocalibration(uint8_t id, uint8_t ref_id)
{
   1310a:	cf 93       	push	r28
   1310c:	df 93       	push	r29
   1310e:	00 d0       	rcall	.+0      	; 0x13110 <osc_enable_autocalibration+0x6>
   13110:	cd b7       	in	r28, 0x3d	; 61
   13112:	de b7       	in	r29, 0x3e	; 62
   13114:	8a 83       	std	Y+2, r24	; 0x02
   13116:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags;

	flags = cpu_irq_save();
   13118:	59 df       	rcall	.-334    	; 0x12fcc <cpu_irq_save>
   1311a:	89 83       	std	Y+1, r24	; 0x01
	switch (id) {
   1311c:	8a 81       	ldd	r24, Y+2	; 0x02
   1311e:	88 2f       	mov	r24, r24
   13120:	90 e0       	ldi	r25, 0x00	; 0
   13122:	81 30       	cpi	r24, 0x01	; 1
   13124:	91 05       	cpc	r25, r1
   13126:	19 f0       	breq	.+6      	; 0x1312e <osc_enable_autocalibration+0x24>
   13128:	02 97       	sbiw	r24, 0x02	; 2
   1312a:	19 f1       	breq	.+70     	; 0x13172 <osc_enable_autocalibration+0x68>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
		break;

	default:
		Assert(false);
		break;
   1312c:	66 c0       	rjmp	.+204    	; 0x131fa <osc_enable_autocalibration+0xf0>
	flags = cpu_irq_save();
	switch (id) {
	case OSC_ID_RC2MHZ:
#if !XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ) || (ref_id == OSC_ID_XOSC));
		if (ref_id == OSC_ID_XOSC) {
   1312e:	8b 81       	ldd	r24, Y+3	; 0x03
   13130:	88 30       	cpi	r24, 0x08	; 8
   13132:	61 f4       	brne	.+24     	; 0x1314c <osc_enable_autocalibration+0x42>
			osc_enable(OSC_ID_RC32KHZ);
   13134:	84 e0       	ldi	r24, 0x04	; 4
   13136:	c2 df       	rcall	.-124    	; 0x130bc <osc_enable>
			OSC.DFLLCTRL |= OSC_RC2MCREF_bm;
   13138:	80 e5       	ldi	r24, 0x50	; 80
   1313a:	90 e0       	ldi	r25, 0x00	; 0
   1313c:	20 e5       	ldi	r18, 0x50	; 80
   1313e:	30 e0       	ldi	r19, 0x00	; 0
   13140:	f9 01       	movw	r30, r18
   13142:	26 81       	ldd	r18, Z+6	; 0x06
   13144:	21 60       	ori	r18, 0x01	; 1
   13146:	fc 01       	movw	r30, r24
   13148:	26 83       	std	Z+6, r18	; 0x06
   1314a:	09 c0       	rjmp	.+18     	; 0x1315e <osc_enable_autocalibration+0x54>
		} else {
			OSC.DFLLCTRL &= ~(OSC_RC2MCREF_bm);
   1314c:	80 e5       	ldi	r24, 0x50	; 80
   1314e:	90 e0       	ldi	r25, 0x00	; 0
   13150:	20 e5       	ldi	r18, 0x50	; 80
   13152:	30 e0       	ldi	r19, 0x00	; 0
   13154:	f9 01       	movw	r30, r18
   13156:	26 81       	ldd	r18, Z+6	; 0x06
   13158:	2e 7f       	andi	r18, 0xFE	; 254
   1315a:	fc 01       	movw	r30, r24
   1315c:	26 83       	std	Z+6, r18	; 0x06
		}
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
   1315e:	88 e6       	ldi	r24, 0x68	; 104
   13160:	90 e0       	ldi	r25, 0x00	; 0
   13162:	28 e6       	ldi	r18, 0x68	; 104
   13164:	30 e0       	ldi	r19, 0x00	; 0
   13166:	f9 01       	movw	r30, r18
   13168:	20 81       	ld	r18, Z
   1316a:	21 60       	ori	r18, 0x01	; 1
   1316c:	fc 01       	movw	r30, r24
   1316e:	20 83       	st	Z, r18
#endif
		break;
   13170:	44 c0       	rjmp	.+136    	; 0x131fa <osc_enable_autocalibration+0xf0>
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
   13172:	80 e5       	ldi	r24, 0x50	; 80
   13174:	90 e0       	ldi	r25, 0x00	; 0
   13176:	20 e5       	ldi	r18, 0x50	; 80
   13178:	30 e0       	ldi	r19, 0x00	; 0
   1317a:	f9 01       	movw	r30, r18
   1317c:	26 81       	ldd	r18, Z+6	; 0x06
   1317e:	29 7f       	andi	r18, 0xF9	; 249
   13180:	fc 01       	movw	r30, r24
   13182:	26 83       	std	Z+6, r18	; 0x06

		if (ref_id == OSC_ID_XOSC) {
   13184:	8b 81       	ldd	r24, Y+3	; 0x03
   13186:	88 30       	cpi	r24, 0x08	; 8
			osc_enable(OSC_ID_RC32KHZ);
   13188:	61 f4       	brne	.+24     	; 0x131a2 <osc_enable_autocalibration+0x98>
   1318a:	84 e0       	ldi	r24, 0x04	; 4
   1318c:	97 df       	rcall	.-210    	; 0x130bc <osc_enable>
			OSC.DFLLCTRL |= OSC_RC32MCREF_XOSC32K_gc;
   1318e:	80 e5       	ldi	r24, 0x50	; 80
   13190:	90 e0       	ldi	r25, 0x00	; 0
   13192:	20 e5       	ldi	r18, 0x50	; 80
   13194:	30 e0       	ldi	r19, 0x00	; 0
   13196:	f9 01       	movw	r30, r18
   13198:	26 81       	ldd	r18, Z+6	; 0x06
   1319a:	22 60       	ori	r18, 0x02	; 2
   1319c:	fc 01       	movw	r30, r24
   1319e:	26 83       	std	Z+6, r18	; 0x06
   131a0:	22 c0       	rjmp	.+68     	; 0x131e6 <osc_enable_autocalibration+0xdc>
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
   131a2:	8b 81       	ldd	r24, Y+3	; 0x03
   131a4:	84 30       	cpi	r24, 0x04	; 4
   131a6:	49 f4       	brne	.+18     	; 0x131ba <osc_enable_autocalibration+0xb0>
			OSC.DFLLCTRL |= OSC_RC32MCREF_RC32K_gc;
   131a8:	80 e5       	ldi	r24, 0x50	; 80
   131aa:	90 e0       	ldi	r25, 0x00	; 0
   131ac:	20 e5       	ldi	r18, 0x50	; 80
   131ae:	30 e0       	ldi	r19, 0x00	; 0
   131b0:	f9 01       	movw	r30, r18
   131b2:	26 81       	ldd	r18, Z+6	; 0x06
   131b4:	fc 01       	movw	r30, r24
   131b6:	26 83       	std	Z+6, r18	; 0x06
   131b8:	16 c0       	rjmp	.+44     	; 0x131e6 <osc_enable_autocalibration+0xdc>
		}
# if !XMEGA_E
		else if (ref_id == OSC_ID_USBSOF) {
   131ba:	8b 81       	ldd	r24, Y+3	; 0x03
   131bc:	8f 3f       	cpi	r24, 0xFF	; 255
   131be:	99 f4       	brne	.+38     	; 0x131e6 <osc_enable_autocalibration+0xdc>
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
   131c0:	80 e6       	ldi	r24, 0x60	; 96
   131c2:	90 e0       	ldi	r25, 0x00	; 0
   131c4:	20 e8       	ldi	r18, 0x80	; 128
   131c6:	fc 01       	movw	r30, r24
   131c8:	25 83       	std	Z+5, r18	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
   131ca:	80 e6       	ldi	r24, 0x60	; 96
   131cc:	90 e0       	ldi	r25, 0x00	; 0
   131ce:	2b eb       	ldi	r18, 0xBB	; 187
   131d0:	fc 01       	movw	r30, r24
   131d2:	26 83       	std	Z+6, r18	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
   131d4:	80 e5       	ldi	r24, 0x50	; 80
   131d6:	90 e0       	ldi	r25, 0x00	; 0
   131d8:	20 e5       	ldi	r18, 0x50	; 80
   131da:	30 e0       	ldi	r19, 0x00	; 0
   131dc:	f9 01       	movw	r30, r18
   131de:	26 81       	ldd	r18, Z+6	; 0x06
   131e0:	24 60       	ori	r18, 0x04	; 4
   131e2:	fc 01       	movw	r30, r24
   131e4:	26 83       	std	Z+6, r18	; 0x06
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
   131e6:	80 e6       	ldi	r24, 0x60	; 96
   131e8:	90 e0       	ldi	r25, 0x00	; 0
   131ea:	20 e6       	ldi	r18, 0x60	; 96
   131ec:	30 e0       	ldi	r19, 0x00	; 0
   131ee:	f9 01       	movw	r30, r18
   131f0:	20 81       	ld	r18, Z
   131f2:	21 60       	ori	r18, 0x01	; 1
   131f4:	fc 01       	movw	r30, r24
		break;
   131f6:	20 83       	st	Z, r18

	default:
		Assert(false);
		break;
	}
	cpu_irq_restore(flags);
   131f8:	00 00       	nop
   131fa:	89 81       	ldd	r24, Y+1	; 0x01
   131fc:	f7 de       	rcall	.-530    	; 0x12fec <cpu_irq_restore>
}
   131fe:	00 00       	nop
   13200:	23 96       	adiw	r28, 0x03	; 3
   13202:	cd bf       	out	0x3d, r28	; 61
   13204:	de bf       	out	0x3e, r29	; 62
   13206:	df 91       	pop	r29
   13208:	cf 91       	pop	r28
   1320a:	08 95       	ret

0001320c <osc_user_calibration>:
 * \arg \c OSC_ID_RC2MHZ or \c OSC_ID_RC32MHZ.
 * \param calib The specific calibration value required:
 *
 */
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
   1320c:	cf 93       	push	r28
   1320e:	df 93       	push	r29
   13210:	00 d0       	rcall	.+0      	; 0x13212 <osc_user_calibration+0x6>
   13212:	cd b7       	in	r28, 0x3d	; 61
   13214:	de b7       	in	r29, 0x3e	; 62
   13216:	89 83       	std	Y+1, r24	; 0x01
   13218:	6a 83       	std	Y+2, r22	; 0x02
   1321a:	7b 83       	std	Y+3, r23	; 0x03
	switch (id) {
   1321c:	89 81       	ldd	r24, Y+1	; 0x01
   1321e:	88 2f       	mov	r24, r24
   13220:	90 e0       	ldi	r25, 0x00	; 0
   13222:	81 30       	cpi	r24, 0x01	; 1
   13224:	91 05       	cpc	r25, r1
   13226:	19 f0       	breq	.+6      	; 0x1322e <osc_user_calibration+0x22>
   13228:	02 97       	sbiw	r24, 0x02	; 2
   1322a:	81 f0       	breq	.+32     	; 0x1324c <osc_user_calibration+0x40>
		break;
#endif

	default:
		Assert(false);
		break;
   1322c:	1e c0       	rjmp	.+60     	; 0x1326a <osc_user_calibration+0x5e>
static inline void osc_user_calibration(uint8_t id, uint16_t calib)
{
	switch (id) {
	case OSC_ID_RC2MHZ:
#if !XMEGA_E
		DFLLRC2M.CALA=LSB(calib);
   1322e:	88 e6       	ldi	r24, 0x68	; 104
   13230:	90 e0       	ldi	r25, 0x00	; 0
   13232:	9e 01       	movw	r18, r28
   13234:	2e 5f       	subi	r18, 0xFE	; 254
   13236:	3f 4f       	sbci	r19, 0xFF	; 255
   13238:	f9 01       	movw	r30, r18
   1323a:	20 81       	ld	r18, Z
   1323c:	fc 01       	movw	r30, r24
   1323e:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC2M.CALB=MSB(calib);
   13240:	88 e6       	ldi	r24, 0x68	; 104
   13242:	90 e0       	ldi	r25, 0x00	; 0
   13244:	2b 81       	ldd	r18, Y+3	; 0x03
   13246:	fc 01       	movw	r30, r24
   13248:	23 83       	std	Z+3, r18	; 0x03
#endif
		break;
   1324a:	0f c0       	rjmp	.+30     	; 0x1326a <osc_user_calibration+0x5e>

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
   1324c:	80 e6       	ldi	r24, 0x60	; 96
   1324e:	90 e0       	ldi	r25, 0x00	; 0
   13250:	9e 01       	movw	r18, r28
   13252:	2e 5f       	subi	r18, 0xFE	; 254
   13254:	3f 4f       	sbci	r19, 0xFF	; 255
   13256:	f9 01       	movw	r30, r18
   13258:	20 81       	ld	r18, Z
   1325a:	fc 01       	movw	r30, r24
   1325c:	22 83       	std	Z+2, r18	; 0x02
		DFLLRC32M.CALB=MSB(calib);
   1325e:	80 e6       	ldi	r24, 0x60	; 96
   13260:	90 e0       	ldi	r25, 0x00	; 0
   13262:	2b 81       	ldd	r18, Y+3	; 0x03
   13264:	fc 01       	movw	r30, r24
   13266:	23 83       	std	Z+3, r18	; 0x03
		break;
   13268:	00 00       	nop

	default:
		Assert(false);
		break;
	}
}
   1326a:	00 00       	nop
   1326c:	23 96       	adiw	r28, 0x03	; 3
   1326e:	cd bf       	out	0x3d, r28	; 61
   13270:	de bf       	out	0x3e, r29	; 62
   13272:	df 91       	pop	r29
   13274:	cf 91       	pop	r28
   13276:	08 95       	ret

00013278 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   13278:	cf 93       	push	r28
   1327a:	df 93       	push	r29
   1327c:	1f 92       	push	r1
   1327e:	cd b7       	in	r28, 0x3d	; 61
   13280:	de b7       	in	r29, 0x3e	; 62
   13282:	89 83       	std	Y+1, r24	; 0x01
	while (!osc_is_ready(id)) {
   13284:	00 00       	nop
   13286:	89 81       	ldd	r24, Y+1	; 0x01
   13288:	2c df       	rcall	.-424    	; 0x130e2 <osc_is_ready>
   1328a:	98 2f       	mov	r25, r24
   1328c:	81 e0       	ldi	r24, 0x01	; 1
   1328e:	89 27       	eor	r24, r25
   13290:	88 23       	and	r24, r24
   13292:	c9 f7       	brne	.-14     	; 0x13286 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
   13294:	00 00       	nop
   13296:	0f 90       	pop	r0
   13298:	df 91       	pop	r29
   1329a:	cf 91       	pop	r28
   1329c:	08 95       	ret

0001329e <pll_config_init>:
 *   - If \a src is PLL_SRC_32MHZ, \a div must be set to 4.
 *   - Otherwise, \a div must be set to 1.
 */
static inline void pll_config_init(struct pll_config *cfg, enum pll_source src,
		unsigned int div, unsigned int mul)
{
   1329e:	cf 93       	push	r28
   132a0:	df 93       	push	r29
   132a2:	cd b7       	in	r28, 0x3d	; 61
   132a4:	de b7       	in	r29, 0x3e	; 62
   132a6:	27 97       	sbiw	r28, 0x07	; 7
   132a8:	cd bf       	out	0x3d, r28	; 61
   132aa:	de bf       	out	0x3e, r29	; 62
   132ac:	89 83       	std	Y+1, r24	; 0x01
   132ae:	9a 83       	std	Y+2, r25	; 0x02
   132b0:	6b 83       	std	Y+3, r22	; 0x03
   132b2:	4c 83       	std	Y+4, r20	; 0x04
   132b4:	5d 83       	std	Y+5, r21	; 0x05
   132b6:	2e 83       	std	Y+6, r18	; 0x06
   132b8:	3f 83       	std	Y+7, r19	; 0x07
	} else {
		Assert(div == 1);
	}

	/* Initialize the configuration */
	cfg->ctrl = src | (mul << OSC_PLLFAC_gp);
   132ba:	9e 81       	ldd	r25, Y+6	; 0x06
   132bc:	8b 81       	ldd	r24, Y+3	; 0x03
   132be:	29 2f       	mov	r18, r25
   132c0:	28 2b       	or	r18, r24
   132c2:	89 81       	ldd	r24, Y+1	; 0x01
   132c4:	9a 81       	ldd	r25, Y+2	; 0x02
   132c6:	fc 01       	movw	r30, r24
   132c8:	20 83       	st	Z, r18
}
   132ca:	00 00       	nop
   132cc:	27 96       	adiw	r28, 0x07	; 7
   132ce:	cd bf       	out	0x3d, r28	; 61
   132d0:	de bf       	out	0x3e, r29	; 62
   132d2:	df 91       	pop	r29
   132d4:	cf 91       	pop	r28
   132d6:	08 95       	ret

000132d8 <pll_config_write>:
	cfg->ctrl = OSC.PLLCTRL;
}

static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
   132d8:	cf 93       	push	r28
   132da:	df 93       	push	r29
   132dc:	00 d0       	rcall	.+0      	; 0x132de <pll_config_write+0x6>
   132de:	1f 92       	push	r1
   132e0:	cd b7       	in	r28, 0x3d	; 61
   132e2:	de b7       	in	r29, 0x3e	; 62
   132e4:	89 83       	std	Y+1, r24	; 0x01
   132e6:	9a 83       	std	Y+2, r25	; 0x02
   132e8:	6b 83       	std	Y+3, r22	; 0x03
   132ea:	7c 83       	std	Y+4, r23	; 0x04
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
   132ec:	80 e5       	ldi	r24, 0x50	; 80
   132ee:	90 e0       	ldi	r25, 0x00	; 0
   132f0:	29 81       	ldd	r18, Y+1	; 0x01
   132f2:	3a 81       	ldd	r19, Y+2	; 0x02
   132f4:	f9 01       	movw	r30, r18
   132f6:	20 81       	ld	r18, Z
   132f8:	fc 01       	movw	r30, r24
   132fa:	25 83       	std	Z+5, r18	; 0x05
}
   132fc:	00 00       	nop
   132fe:	24 96       	adiw	r28, 0x04	; 4
   13300:	cd bf       	out	0x3d, r28	; 61
   13302:	de bf       	out	0x3e, r29	; 62
   13304:	df 91       	pop	r29
   13306:	cf 91       	pop	r28
   13308:	08 95       	ret

0001330a <pll_enable>:
 * \ref sysclk_init() is used, the user must ensure that the desired reference
 * is enabled prior to calling this function.
 */
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
   1330a:	cf 93       	push	r28
   1330c:	df 93       	push	r29
   1330e:	cd b7       	in	r28, 0x3d	; 61
   13310:	de b7       	in	r29, 0x3e	; 62
   13312:	25 97       	sbiw	r28, 0x05	; 5
   13314:	cd bf       	out	0x3d, r28	; 61
   13316:	de bf       	out	0x3e, r29	; 62
   13318:	8a 83       	std	Y+2, r24	; 0x02
   1331a:	9b 83       	std	Y+3, r25	; 0x03
   1331c:	6c 83       	std	Y+4, r22	; 0x04
   1331e:	7d 83       	std	Y+5, r23	; 0x05
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
   13320:	55 de       	rcall	.-854    	; 0x12fcc <cpu_irq_save>
   13322:	89 83       	std	Y+1, r24	; 0x01
	pll_config_write(cfg, pll_id);
   13324:	2c 81       	ldd	r18, Y+4	; 0x04
   13326:	3d 81       	ldd	r19, Y+5	; 0x05
   13328:	8a 81       	ldd	r24, Y+2	; 0x02
   1332a:	9b 81       	ldd	r25, Y+3	; 0x03
   1332c:	b9 01       	movw	r22, r18
   1332e:	d4 df       	rcall	.-88     	; 0x132d8 <pll_config_write>
	OSC.CTRL |= OSC_PLLEN_bm;
   13330:	80 e5       	ldi	r24, 0x50	; 80
   13332:	90 e0       	ldi	r25, 0x00	; 0
   13334:	20 e5       	ldi	r18, 0x50	; 80
   13336:	30 e0       	ldi	r19, 0x00	; 0
   13338:	f9 01       	movw	r30, r18
   1333a:	20 81       	ld	r18, Z
   1333c:	20 61       	ori	r18, 0x10	; 16
   1333e:	fc 01       	movw	r30, r24
	cpu_irq_restore(flags);
   13340:	20 83       	st	Z, r18
   13342:	89 81       	ldd	r24, Y+1	; 0x01
   13344:	53 de       	rcall	.-858    	; 0x12fec <cpu_irq_restore>
}
   13346:	00 00       	nop
   13348:	25 96       	adiw	r28, 0x05	; 5
   1334a:	cd bf       	out	0x3d, r28	; 61
   1334c:	de bf       	out	0x3e, r29	; 62
   1334e:	df 91       	pop	r29
   13350:	cf 91       	pop	r28
   13352:	08 95       	ret

00013354 <pll_is_locked>:
	OSC.CTRL &= ~OSC_PLLEN_bm;
	cpu_irq_restore(flags);
}

static inline bool pll_is_locked(unsigned int pll_id)
{
   13354:	cf 93       	push	r28
   13356:	df 93       	push	r29
   13358:	1f 92       	push	r1
   1335a:	1f 92       	push	r1
   1335c:	cd b7       	in	r28, 0x3d	; 61
   1335e:	de b7       	in	r29, 0x3e	; 62
   13360:	89 83       	std	Y+1, r24	; 0x01
   13362:	9a 83       	std	Y+2, r25	; 0x02
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
   13364:	80 e5       	ldi	r24, 0x50	; 80
   13366:	90 e0       	ldi	r25, 0x00	; 0
   13368:	fc 01       	movw	r30, r24
   1336a:	81 81       	ldd	r24, Z+1	; 0x01
   1336c:	88 2f       	mov	r24, r24
   1336e:	90 e0       	ldi	r25, 0x00	; 0
   13370:	80 71       	andi	r24, 0x10	; 16
   13372:	99 27       	eor	r25, r25
   13374:	21 e0       	ldi	r18, 0x01	; 1
   13376:	89 2b       	or	r24, r25
   13378:	09 f4       	brne	.+2      	; 0x1337c <pll_is_locked+0x28>
   1337a:	20 e0       	ldi	r18, 0x00	; 0
   1337c:	82 2f       	mov	r24, r18
}
   1337e:	0f 90       	pop	r0
   13380:	0f 90       	pop	r0
   13382:	df 91       	pop	r29
   13384:	cf 91       	pop	r28
   13386:	08 95       	ret

00013388 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
   13388:	cf 93       	push	r28
   1338a:	df 93       	push	r29
   1338c:	1f 92       	push	r1
   1338e:	cd b7       	in	r28, 0x3d	; 61
   13390:	de b7       	in	r29, 0x3e	; 62
   13392:	89 83       	std	Y+1, r24	; 0x01
	switch (src) {
   13394:	89 81       	ldd	r24, Y+1	; 0x01
   13396:	88 2f       	mov	r24, r24
   13398:	90 e0       	ldi	r25, 0x00	; 0
   1339a:	80 38       	cpi	r24, 0x80	; 128
   1339c:	91 05       	cpc	r25, r1
   1339e:	31 f0       	breq	.+12     	; 0x133ac <pll_enable_source+0x24>
   133a0:	80 3c       	cpi	r24, 0xC0	; 192
   133a2:	91 05       	cpc	r25, r1
   133a4:	91 f0       	breq	.+36     	; 0x133ca <pll_enable_source+0x42>
   133a6:	89 2b       	or	r24, r25
   133a8:	e1 f0       	breq	.+56     	; 0x133e2 <pll_enable_source+0x5a>
			osc_wait_ready(OSC_ID_XOSC);
		}
		break;
	default:
		Assert(false);
		break;
   133aa:	20 c0       	rjmp	.+64     	; 0x133ec <pll_enable_source+0x64>
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
   133ac:	82 e0       	ldi	r24, 0x02	; 2
   133ae:	99 de       	rcall	.-718    	; 0x130e2 <osc_is_ready>
   133b0:	98 2f       	mov	r25, r24
   133b2:	81 e0       	ldi	r24, 0x01	; 1
   133b4:	89 27       	eor	r24, r25
   133b6:	88 23       	and	r24, r24
   133b8:	b1 f0       	breq	.+44     	; 0x133e6 <pll_enable_source+0x5e>
			osc_enable(OSC_ID_RC32MHZ);
   133ba:	82 e0       	ldi	r24, 0x02	; 2
   133bc:	7f de       	rcall	.-770    	; 0x130bc <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
   133be:	82 e0       	ldi	r24, 0x02	; 2
   133c0:	5b df       	rcall	.-330    	; 0x13278 <osc_wait_ready>
			if (CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
					!= OSC_ID_USBSOF) {
				osc_enable(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
   133c2:	6f ef       	ldi	r22, 0xFF	; 255
   133c4:	82 e0       	ldi	r24, 0x02	; 2
   133c6:	a1 de       	rcall	.-702    	; 0x1310a <osc_enable_autocalibration>
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		break;
   133c8:	0e c0       	rjmp	.+28     	; 0x133e6 <pll_enable_source+0x5e>

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
   133ca:	88 e0       	ldi	r24, 0x08	; 8
   133cc:	8a de       	rcall	.-748    	; 0x130e2 <osc_is_ready>
   133ce:	98 2f       	mov	r25, r24
   133d0:	81 e0       	ldi	r24, 0x01	; 1
   133d2:	89 27       	eor	r24, r25
   133d4:	88 23       	and	r24, r24
			osc_enable(OSC_ID_XOSC);
   133d6:	49 f0       	breq	.+18     	; 0x133ea <pll_enable_source+0x62>
   133d8:	88 e0       	ldi	r24, 0x08	; 8
   133da:	70 de       	rcall	.-800    	; 0x130bc <osc_enable>
			osc_wait_ready(OSC_ID_XOSC);
   133dc:	88 e0       	ldi	r24, 0x08	; 8
   133de:	4c df       	rcall	.-360    	; 0x13278 <osc_wait_ready>
   133e0:	04 c0       	rjmp	.+8      	; 0x133ea <pll_enable_source+0x62>
		}
		break;
   133e2:	00 00       	nop

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;
   133e4:	03 c0       	rjmp	.+6      	; 0x133ec <pll_enable_source+0x64>
   133e6:	00 00       	nop
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		break;
   133e8:	01 c0       	rjmp	.+2      	; 0x133ec <pll_enable_source+0x64>
   133ea:	00 00       	nop
	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
			osc_enable(OSC_ID_XOSC);
			osc_wait_ready(OSC_ID_XOSC);
		}
		break;
   133ec:	00 00       	nop
	default:
		Assert(false);
		break;
	}
}
   133ee:	0f 90       	pop	r0
   133f0:	df 91       	pop	r29
   133f2:	cf 91       	pop	r28
   133f4:	08 95       	ret

000133f6 <pll_enable_config_defaults>:
   133f6:	cf 93       	push	r28

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
   133f8:	df 93       	push	r29
   133fa:	00 d0       	rcall	.+0      	; 0x133fc <pll_enable_config_defaults+0x6>
   133fc:	cd b7       	in	r28, 0x3d	; 61
   133fe:	de b7       	in	r29, 0x3e	; 62
   13400:	8a 83       	std	Y+2, r24	; 0x02
   13402:	9b 83       	std	Y+3, r25	; 0x03
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
   13404:	8a 81       	ldd	r24, Y+2	; 0x02
   13406:	9b 81       	ldd	r25, Y+3	; 0x03
   13408:	a5 df       	rcall	.-182    	; 0x13354 <pll_is_locked>
   1340a:	88 23       	and	r24, r24
   1340c:	01 f5       	brne	.+64     	; 0x1344e <pll_enable_config_defaults+0x58>
		return; // Pll already running
	}
	switch (pll_id) {
   1340e:	8a 81       	ldd	r24, Y+2	; 0x02
   13410:	9b 81       	ldd	r25, Y+3	; 0x03
   13412:	89 2b       	or	r24, r25
   13414:	09 f0       	breq	.+2      	; 0x13418 <pll_enable_config_defaults+0x22>
				CONFIG_PLL0_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   13416:	0b c0       	rjmp	.+22     	; 0x1342e <pll_enable_config_defaults+0x38>
		return; // Pll already running
	}
	switch (pll_id) {
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   13418:	80 ec       	ldi	r24, 0xC0	; 192
   1341a:	b6 df       	rcall	.-148    	; 0x13388 <pll_enable_source>
		pll_config_init(&pllcfg,
   1341c:	22 e0       	ldi	r18, 0x02	; 2
   1341e:	30 e0       	ldi	r19, 0x00	; 0
   13420:	41 e0       	ldi	r20, 0x01	; 1
   13422:	50 e0       	ldi	r21, 0x00	; 0
   13424:	60 ec       	ldi	r22, 0xC0	; 192
   13426:	ce 01       	movw	r24, r28
   13428:	01 96       	adiw	r24, 0x01	; 1
   1342a:	39 df       	rcall	.-398    	; 0x1329e <pll_config_init>
				CONFIG_PLL0_SOURCE,
				CONFIG_PLL0_DIV,
				CONFIG_PLL0_MUL);
		break;
   1342c:	00 00       	nop
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
   1342e:	8a 81       	ldd	r24, Y+2	; 0x02
   13430:	9b 81       	ldd	r25, Y+3	; 0x03
   13432:	bc 01       	movw	r22, r24
   13434:	ce 01       	movw	r24, r28
   13436:	01 96       	adiw	r24, 0x01	; 1
   13438:	68 df       	rcall	.-304    	; 0x1330a <pll_enable>
	while (!pll_is_locked(pll_id));
   1343a:	00 00       	nop
   1343c:	8a 81       	ldd	r24, Y+2	; 0x02
   1343e:	9b 81       	ldd	r25, Y+3	; 0x03
   13440:	89 df       	rcall	.-238    	; 0x13354 <pll_is_locked>
   13442:	98 2f       	mov	r25, r24
   13444:	81 e0       	ldi	r24, 0x01	; 1
   13446:	89 27       	eor	r24, r25
   13448:	88 23       	and	r24, r24
   1344a:	c1 f7       	brne	.-16     	; 0x1343c <pll_enable_config_defaults+0x46>
   1344c:	01 c0       	rjmp	.+2      	; 0x13450 <pll_enable_config_defaults+0x5a>
   1344e:	00 00       	nop
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
   13450:	23 96       	adiw	r28, 0x03	; 3
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
   13452:	cd bf       	out	0x3d, r28	; 61
   13454:	de bf       	out	0x3e, r29	; 62
   13456:	df 91       	pop	r29
   13458:	cf 91       	pop	r28
   1345a:	08 95       	ret

0001345c <nvm_read_production_signature_row>:
   1345c:	cf 93       	push	r28
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
   1345e:	df 93       	push	r29
   13460:	1f 92       	push	r1
   13462:	cd b7       	in	r28, 0x3d	; 61
   13464:	de b7       	in	r29, 0x3e	; 62
   13466:	89 83       	std	Y+1, r24	; 0x01
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
   13468:	89 81       	ldd	r24, Y+1	; 0x01
   1346a:	88 2f       	mov	r24, r24
   1346c:	90 e0       	ldi	r25, 0x00	; 0
   1346e:	bc 01       	movw	r22, r24
   13470:	82 e0       	ldi	r24, 0x02	; 2
   13472:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <nvm_read_byte>
}
   13476:	0f 90       	pop	r0
   13478:	df 91       	pop	r29
   1347a:	cf 91       	pop	r28
   1347c:	08 95       	ret

0001347e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
   1347e:	0f 93       	push	r16
   13480:	1f 93       	push	r17
   13482:	cf 93       	push	r28
   13484:	df 93       	push	r29
   13486:	00 d0       	rcall	.+0      	; 0x13488 <sysclk_init+0xa>
   13488:	00 d0       	rcall	.+0      	; 0x1348a <sysclk_init+0xc>
   1348a:	cd b7       	in	r28, 0x3d	; 61
   1348c:	de b7       	in	r29, 0x3e	; 62
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
   1348e:	80 e7       	ldi	r24, 0x70	; 112
   13490:	90 e0       	ldi	r25, 0x00	; 0
   13492:	89 83       	std	Y+1, r24	; 0x01
   13494:	9a 83       	std	Y+2, r25	; 0x02
#ifdef CONFIG_OSC_RC32_CAL
	uint16_t cal;
	/* avoid Cppcheck Warning */
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;
   13496:	1c 82       	std	Y+4, r1	; 0x04

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
   13498:	1b 82       	std	Y+3, r1	; 0x03
   1349a:	0d c0       	rjmp	.+26     	; 0x134b6 <sysclk_init+0x38>
		*(reg++) = 0xff;
   1349c:	89 81       	ldd	r24, Y+1	; 0x01
   1349e:	9a 81       	ldd	r25, Y+2	; 0x02
   134a0:	9c 01       	movw	r18, r24
   134a2:	2f 5f       	subi	r18, 0xFF	; 255
   134a4:	3f 4f       	sbci	r19, 0xFF	; 255
   134a6:	29 83       	std	Y+1, r18	; 0x01
   134a8:	3a 83       	std	Y+2, r19	; 0x02
   134aa:	2f ef       	ldi	r18, 0xFF	; 255
   134ac:	fc 01       	movw	r30, r24
   134ae:	20 83       	st	Z, r18
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
   134b0:	8b 81       	ldd	r24, Y+3	; 0x03
   134b2:	8f 5f       	subi	r24, 0xFF	; 255
   134b4:	8b 83       	std	Y+3, r24	; 0x03
   134b6:	8b 81       	ldd	r24, Y+3	; 0x03
   134b8:	87 30       	cpi	r24, 0x07	; 7
   134ba:	80 f3       	brcs	.-32     	; 0x1349c <sysclk_init+0x1e>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
   134bc:	8e 01       	movw	r16, r28
   134be:	0b 5f       	subi	r16, 0xFB	; 251
   134c0:	1f 4f       	sbci	r17, 0xFF	; 255
   134c2:	0f 5f       	subi	r16, 0xFF	; 255
   134c4:	1f 4f       	sbci	r17, 0xFF	; 255
   134c6:	8c e1       	ldi	r24, 0x1C	; 28
   134c8:	c9 df       	rcall	.-110    	; 0x1345c <nvm_read_production_signature_row>
   134ca:	f8 01       	movw	r30, r16
   134cc:	80 83       	st	Z, r24
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
   134ce:	8e 01       	movw	r16, r28
   134d0:	0b 5f       	subi	r16, 0xFB	; 251
   134d2:	1f 4f       	sbci	r17, 0xFF	; 255
   134d4:	8d e1       	ldi	r24, 0x1D	; 29
   134d6:	c2 df       	rcall	.-124    	; 0x1345c <nvm_read_production_signature_row>
   134d8:	f8 01       	movw	r30, r16
   134da:	80 83       	st	Z, r24
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
   134dc:	8d 81       	ldd	r24, Y+5	; 0x05
   134de:	9e 81       	ldd	r25, Y+6	; 0x06
   134e0:	01 96       	adiw	r24, 0x01	; 1
   134e2:	21 f4       	brne	.+8      	; 0x134ec <sysclk_init+0x6e>
		cal = 0x2340;
   134e4:	80 e4       	ldi	r24, 0x40	; 64
   134e6:	93 e2       	ldi	r25, 0x23	; 35
   134e8:	8d 83       	std	Y+5, r24	; 0x05
   134ea:	9e 83       	std	Y+6, r25	; 0x06
	}
	osc_user_calibration(OSC_ID_RC32MHZ,cal);
   134ec:	8d 81       	ldd	r24, Y+5	; 0x05
   134ee:	9e 81       	ldd	r25, Y+6	; 0x06
   134f0:	bc 01       	movw	r22, r24
   134f2:	82 e0       	ldi	r24, 0x02	; 2
   134f4:	8b de       	rcall	.-746    	; 0x1320c <osc_user_calibration>
#ifdef CONFIG_PLL0_SOURCE
		case SYSCLK_SRC_PLL:
			if (CONFIG_PLL0_SOURCE == PLL_SRC_RC2MHZ) {
				need_rc2mhz = true;
			}
			pll_enable_config_defaults(0);
   134f6:	80 e0       	ldi	r24, 0x00	; 0
   134f8:	90 e0       	ldi	r25, 0x00	; 0
   134fa:	7d df       	rcall	.-262    	; 0x133f6 <pll_enable_config_defaults>
   134fc:	00 00       	nop
			break;
   134fe:	64 e0       	ldi	r22, 0x04	; 4
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
   13500:	80 e4       	ldi	r24, 0x40	; 64
   13502:	90 e0       	ldi	r25, 0x00	; 0
   13504:	0e 94 fc b3 	call	0x167f8	; 0x167f8 <ccp_write_io>
   13508:	8c 81       	ldd	r24, Y+4	; 0x04
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
	}

	if (need_rc2mhz) {
   1350a:	88 23       	and	r24, r24
   1350c:	11 f4       	brne	.+4      	; 0x13512 <sysclk_init+0x94>
		osc_wait_ready(CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
		osc_enable_autocalibration(OSC_ID_RC2MHZ,
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
   1350e:	81 e0       	ldi	r24, 0x01	; 1
   13510:	b8 dd       	rcall	.-1168   	; 0x13082 <osc_disable>
   13512:	26 96       	adiw	r28, 0x06	; 6
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
   13514:	cd bf       	out	0x3d, r28	; 61
   13516:	de bf       	out	0x3e, r29	; 62
   13518:	df 91       	pop	r29
   1351a:	cf 91       	pop	r28
   1351c:	1f 91       	pop	r17
   1351e:	0f 91       	pop	r16
   13520:	08 95       	ret

00013522 <sysclk_enable_module>:
   13522:	cf 93       	push	r28

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
   13524:	df 93       	push	r29
   13526:	00 d0       	rcall	.+0      	; 0x13528 <sysclk_enable_module+0x6>
   13528:	cd b7       	in	r28, 0x3d	; 61
   1352a:	de b7       	in	r29, 0x3e	; 62
   1352c:	8a 83       	std	Y+2, r24	; 0x02
   1352e:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
   13530:	4d dd       	rcall	.-1382   	; 0x12fcc <cpu_irq_save>
   13532:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
   13534:	8a 81       	ldd	r24, Y+2	; 0x02
   13536:	88 2f       	mov	r24, r24
   13538:	90 e0       	ldi	r25, 0x00	; 0
   1353a:	80 59       	subi	r24, 0x90	; 144
   1353c:	9f 4f       	sbci	r25, 0xFF	; 255
   1353e:	2a 81       	ldd	r18, Y+2	; 0x02
   13540:	22 2f       	mov	r18, r18
   13542:	30 e0       	ldi	r19, 0x00	; 0
   13544:	20 59       	subi	r18, 0x90	; 144
   13546:	3f 4f       	sbci	r19, 0xFF	; 255
   13548:	f9 01       	movw	r30, r18
   1354a:	20 81       	ld	r18, Z
   1354c:	32 2f       	mov	r19, r18
   1354e:	2b 81       	ldd	r18, Y+3	; 0x03
   13550:	20 95       	com	r18
   13552:	23 23       	and	r18, r19
   13554:	fc 01       	movw	r30, r24
   13556:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
   13558:	89 81       	ldd	r24, Y+1	; 0x01
   1355a:	48 dd       	rcall	.-1392   	; 0x12fec <cpu_irq_restore>
}
   1355c:	00 00       	nop
   1355e:	23 96       	adiw	r28, 0x03	; 3
   13560:	cd bf       	out	0x3d, r28	; 61
   13562:	de bf       	out	0x3e, r29	; 62
   13564:	df 91       	pop	r29
   13566:	cf 91       	pop	r28
   13568:	08 95       	ret

0001356a <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
   1356a:	cf 93       	push	r28
   1356c:	df 93       	push	r29
   1356e:	00 d0       	rcall	.+0      	; 0x13570 <sysclk_disable_module+0x6>
   13570:	cd b7       	in	r28, 0x3d	; 61
   13572:	de b7       	in	r29, 0x3e	; 62
   13574:	8a 83       	std	Y+2, r24	; 0x02
   13576:	6b 83       	std	Y+3, r22	; 0x03
	irqflags_t flags = cpu_irq_save();
   13578:	29 dd       	rcall	.-1454   	; 0x12fcc <cpu_irq_save>
   1357a:	89 83       	std	Y+1, r24	; 0x01

	*((uint8_t *)&PR.PRGEN + port) |= id;
   1357c:	8a 81       	ldd	r24, Y+2	; 0x02
   1357e:	88 2f       	mov	r24, r24
   13580:	90 e0       	ldi	r25, 0x00	; 0
   13582:	80 59       	subi	r24, 0x90	; 144
   13584:	9f 4f       	sbci	r25, 0xFF	; 255
   13586:	2a 81       	ldd	r18, Y+2	; 0x02
   13588:	22 2f       	mov	r18, r18
   1358a:	30 e0       	ldi	r19, 0x00	; 0
   1358c:	20 59       	subi	r18, 0x90	; 144
   1358e:	3f 4f       	sbci	r19, 0xFF	; 255
   13590:	f9 01       	movw	r30, r18
   13592:	30 81       	ld	r19, Z
   13594:	2b 81       	ldd	r18, Y+3	; 0x03
   13596:	23 2b       	or	r18, r19
   13598:	fc 01       	movw	r30, r24
   1359a:	20 83       	st	Z, r18

	cpu_irq_restore(flags);
   1359c:	89 81       	ldd	r24, Y+1	; 0x01
   1359e:	26 dd       	rcall	.-1460   	; 0x12fec <cpu_irq_restore>
}
   135a0:	00 00       	nop
   135a2:	23 96       	adiw	r28, 0x03	; 3
   135a4:	cd bf       	out	0x3d, r28	; 61
   135a6:	de bf       	out	0x3e, r29	; 62
   135a8:	df 91       	pop	r29
   135aa:	cf 91       	pop	r28
   135ac:	08 95       	ret

000135ae <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
   135ae:	cf 93       	push	r28
   135b0:	df 93       	push	r29
   135b2:	1f 92       	push	r1
   135b4:	1f 92       	push	r1
   135b6:	cd b7       	in	r28, 0x3d	; 61
   135b8:	de b7       	in	r29, 0x3e	; 62
   135ba:	8a 83       	std	Y+2, r24	; 0x02

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
   135bc:	8a 81       	ldd	r24, Y+2	; 0x02
   135be:	86 30       	cpi	r24, 0x06	; 6
   135c0:	19 f4       	brne	.+6      	; 0x135c8 <sysclk_enable_usb+0x1a>
		prescaler = CLK_USBPSDIV_8_gc;
   135c2:	88 e1       	ldi	r24, 0x18	; 24
   135c4:	89 83       	std	Y+1, r24	; 0x01
   135c6:	01 c0       	rjmp	.+2      	; 0x135ca <sysclk_enable_usb+0x1c>
	}
	else {
		prescaler = 0;
   135c8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
   135ca:	82 e0       	ldi	r24, 0x02	; 2
   135cc:	8a dd       	rcall	.-1260   	; 0x130e2 <osc_is_ready>
   135ce:	98 2f       	mov	r25, r24
   135d0:	81 e0       	ldi	r24, 0x01	; 1
   135d2:	89 27       	eor	r24, r25
   135d4:	88 23       	and	r24, r24
   135d6:	39 f0       	breq	.+14     	; 0x135e6 <sysclk_enable_usb+0x38>
			osc_enable(OSC_ID_RC32MHZ);
   135d8:	82 e0       	ldi	r24, 0x02	; 2
   135da:	70 dd       	rcall	.-1312   	; 0x130bc <osc_enable>
			osc_wait_ready(OSC_ID_RC32MHZ);
   135dc:	82 e0       	ldi	r24, 0x02	; 2
   135de:	4c de       	rcall	.-872    	; 0x13278 <osc_wait_ready>
			if (CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
					!= OSC_ID_USBSOF) {
				osc_enable(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
   135e0:	6f ef       	ldi	r22, 0xFF	; 255
   135e2:	82 e0       	ldi	r24, 0x02	; 2
   135e4:	92 dd       	rcall	.-1244   	; 0x1310a <osc_enable_autocalibration>
   135e6:	89 81       	ldd	r24, Y+1	; 0x01
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
   135e8:	83 60       	ori	r24, 0x03	; 3
   135ea:	68 2f       	mov	r22, r24
   135ec:	84 e4       	ldi	r24, 0x44	; 68
   135ee:	90 e0       	ldi	r25, 0x00	; 0
   135f0:	0e 94 fc b3 	call	0x167f8	; 0x167f8 <ccp_write_io>
				| CLK_USBSRC_RC32M_gc
				| CLK_USBSEN_bm);
		break;
   135f4:	00 00       	nop
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
   135f6:	60 e4       	ldi	r22, 0x40	; 64
   135f8:	80 e0       	ldi	r24, 0x00	; 0
   135fa:	93 df       	rcall	.-218    	; 0x13522 <sysclk_enable_module>
   135fc:	00 00       	nop
}
   135fe:	0f 90       	pop	r0
   13600:	0f 90       	pop	r0
   13602:	df 91       	pop	r29
   13604:	cf 91       	pop	r28
   13606:	08 95       	ret

00013608 <nvm_wait_until_ready>:
   13608:	cf 93       	push	r28
	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);

	// Restore command register
	NVM.CMD = old_cmd;
}
   1360a:	df 93       	push	r29
   1360c:	cd b7       	in	r28, 0x3d	; 61
   1360e:	de b7       	in	r29, 0x3e	; 62
   13610:	80 ec       	ldi	r24, 0xC0	; 192
   13612:	91 e0       	ldi	r25, 0x01	; 1
   13614:	fc 01       	movw	r30, r24
   13616:	87 85       	ldd	r24, Z+15	; 0x0f
   13618:	88 23       	and	r24, r24
   1361a:	d4 f3       	brlt	.-12     	; 0x13610 <nvm_wait_until_ready+0x8>
   1361c:	00 00       	nop
   1361e:	df 91       	pop	r29
   13620:	cf 91       	pop	r28
   13622:	08 95       	ret

00013624 <nvm_exec>:
   13624:	cf 93       	push	r28
   13626:	df 93       	push	r29
   13628:	cd b7       	in	r28, 0x3d	; 61
   1362a:	de b7       	in	r29, 0x3e	; 62
   1362c:	61 e0       	ldi	r22, 0x01	; 1
   1362e:	8b ec       	ldi	r24, 0xCB	; 203
   13630:	91 e0       	ldi	r25, 0x01	; 1
   13632:	0e 94 fc b3 	call	0x167f8	; 0x167f8 <ccp_write_io>
   13636:	00 00       	nop
   13638:	df 91       	pop	r29
   1363a:	cf 91       	pop	r28
   1363c:	08 95       	ret

0001363e <nvm_issue_command>:
   1363e:	cf 93       	push	r28
   13640:	df 93       	push	r29
   13642:	1f 92       	push	r1
   13644:	1f 92       	push	r1
   13646:	cd b7       	in	r28, 0x3d	; 61
   13648:	de b7       	in	r29, 0x3e	; 62
   1364a:	8a 83       	std	Y+2, r24	; 0x02
   1364c:	80 ec       	ldi	r24, 0xC0	; 192
   1364e:	91 e0       	ldi	r25, 0x01	; 1
   13650:	fc 01       	movw	r30, r24
   13652:	82 85       	ldd	r24, Z+10	; 0x0a
   13654:	89 83       	std	Y+1, r24	; 0x01
   13656:	80 ec       	ldi	r24, 0xC0	; 192
   13658:	91 e0       	ldi	r25, 0x01	; 1
   1365a:	2a 81       	ldd	r18, Y+2	; 0x02
   1365c:	fc 01       	movw	r30, r24
   1365e:	22 87       	std	Z+10, r18	; 0x0a
   13660:	61 e0       	ldi	r22, 0x01	; 1
   13662:	8b ec       	ldi	r24, 0xCB	; 203
   13664:	91 e0       	ldi	r25, 0x01	; 1
   13666:	0e 94 fc b3 	call	0x167f8	; 0x167f8 <ccp_write_io>
   1366a:	80 ec       	ldi	r24, 0xC0	; 192
   1366c:	91 e0       	ldi	r25, 0x01	; 1
   1366e:	29 81       	ldd	r18, Y+1	; 0x01
   13670:	fc 01       	movw	r30, r24
   13672:	22 87       	std	Z+10, r18	; 0x0a
   13674:	00 00       	nop
   13676:	0f 90       	pop	r0
   13678:	0f 90       	pop	r0
   1367a:	df 91       	pop	r29
   1367c:	cf 91       	pop	r28
   1367e:	08 95       	ret

00013680 <nvm_read_user_signature_row>:
   13680:	cf 93       	push	r28
   13682:	df 93       	push	r29
   13684:	1f 92       	push	r1
   13686:	1f 92       	push	r1
   13688:	cd b7       	in	r28, 0x3d	; 61
   1368a:	de b7       	in	r29, 0x3e	; 62
   1368c:	89 83       	std	Y+1, r24	; 0x01
   1368e:	9a 83       	std	Y+2, r25	; 0x02
   13690:	89 81       	ldd	r24, Y+1	; 0x01
   13692:	9a 81       	ldd	r25, Y+2	; 0x02
   13694:	bc 01       	movw	r22, r24
   13696:	81 e0       	ldi	r24, 0x01	; 1
   13698:	0e 94 f2 b3 	call	0x167e4	; 0x167e4 <nvm_read_byte>
   1369c:	0f 90       	pop	r0
   1369e:	0f 90       	pop	r0
   136a0:	df 91       	pop	r29
   136a2:	cf 91       	pop	r28
   136a4:	08 95       	ret

000136a6 <eeprom_enable_mapping>:
   136a6:	cf 93       	push	r28
   136a8:	df 93       	push	r29
   136aa:	cd b7       	in	r28, 0x3d	; 61
   136ac:	de b7       	in	r29, 0x3e	; 62
   136ae:	8c ec       	ldi	r24, 0xCC	; 204
   136b0:	91 e0       	ldi	r25, 0x01	; 1
   136b2:	2c ec       	ldi	r18, 0xCC	; 204
   136b4:	31 e0       	ldi	r19, 0x01	; 1
   136b6:	f9 01       	movw	r30, r18
   136b8:	20 81       	ld	r18, Z
   136ba:	28 60       	ori	r18, 0x08	; 8
   136bc:	fc 01       	movw	r30, r24
   136be:	20 83       	st	Z, r18
   136c0:	00 00       	nop
   136c2:	df 91       	pop	r29
   136c4:	cf 91       	pop	r28
   136c6:	08 95       	ret

000136c8 <eeprom_disable_mapping>:
   136c8:	cf 93       	push	r28
   136ca:	df 93       	push	r29
   136cc:	cd b7       	in	r28, 0x3d	; 61
   136ce:	de b7       	in	r29, 0x3e	; 62
   136d0:	8c ec       	ldi	r24, 0xCC	; 204
   136d2:	91 e0       	ldi	r25, 0x01	; 1
   136d4:	2c ec       	ldi	r18, 0xCC	; 204
   136d6:	31 e0       	ldi	r19, 0x01	; 1
   136d8:	f9 01       	movw	r30, r18
   136da:	20 81       	ld	r18, Z
   136dc:	27 7f       	andi	r18, 0xF7	; 247
   136de:	fc 01       	movw	r30, r24
   136e0:	20 83       	st	Z, r18
   136e2:	00 00       	nop
   136e4:	df 91       	pop	r29
   136e6:	cf 91       	pop	r28
   136e8:	08 95       	ret

000136ea <nvm_flash_read_byte>:
   136ea:	cf 93       	push	r28
   136ec:	df 93       	push	r29
   136ee:	cd b7       	in	r28, 0x3d	; 61
   136f0:	de b7       	in	r29, 0x3e	; 62
   136f2:	29 97       	sbiw	r28, 0x09	; 9
   136f4:	cd bf       	out	0x3d, r28	; 61
   136f6:	de bf       	out	0x3e, r29	; 62
   136f8:	6e 83       	std	Y+6, r22	; 0x06
   136fa:	7f 83       	std	Y+7, r23	; 0x07
   136fc:	88 87       	std	Y+8, r24	; 0x08
   136fe:	99 87       	std	Y+9, r25	; 0x09
   13700:	8e 81       	ldd	r24, Y+6	; 0x06
   13702:	9f 81       	ldd	r25, Y+7	; 0x07
   13704:	a8 85       	ldd	r26, Y+8	; 0x08
   13706:	b9 85       	ldd	r27, Y+9	; 0x09
   13708:	89 83       	std	Y+1, r24	; 0x01
   1370a:	9a 83       	std	Y+2, r25	; 0x02
   1370c:	ab 83       	std	Y+3, r26	; 0x03
   1370e:	bc 83       	std	Y+4, r27	; 0x04
   13710:	89 81       	ldd	r24, Y+1	; 0x01
   13712:	9a 81       	ldd	r25, Y+2	; 0x02
   13714:	ab 81       	ldd	r26, Y+3	; 0x03
   13716:	bc 81       	ldd	r27, Y+4	; 0x04
   13718:	0b b6       	in	r0, 0x3b	; 59
   1371a:	ab bf       	out	0x3b, r26	; 59
   1371c:	fc 01       	movw	r30, r24
   1371e:	87 91       	elpm	r24, Z+
   13720:	0b be       	out	0x3b, r0	; 59
   13722:	8d 83       	std	Y+5, r24	; 0x05
   13724:	8d 81       	ldd	r24, Y+5	; 0x05
   13726:	29 96       	adiw	r28, 0x09	; 9
   13728:	cd bf       	out	0x3d, r28	; 61
   1372a:	de bf       	out	0x3e, r29	; 62
   1372c:	df 91       	pop	r29
   1372e:	cf 91       	pop	r28
   13730:	08 95       	ret

00013732 <nvm_flash_read_word>:
   13732:	cf 93       	push	r28
   13734:	df 93       	push	r29
   13736:	cd b7       	in	r28, 0x3d	; 61
   13738:	de b7       	in	r29, 0x3e	; 62
   1373a:	2a 97       	sbiw	r28, 0x0a	; 10
   1373c:	cd bf       	out	0x3d, r28	; 61
   1373e:	de bf       	out	0x3e, r29	; 62
   13740:	6f 83       	std	Y+7, r22	; 0x07
   13742:	78 87       	std	Y+8, r23	; 0x08
   13744:	89 87       	std	Y+9, r24	; 0x09
   13746:	9a 87       	std	Y+10, r25	; 0x0a
   13748:	8f 81       	ldd	r24, Y+7	; 0x07
   1374a:	98 85       	ldd	r25, Y+8	; 0x08
   1374c:	a9 85       	ldd	r26, Y+9	; 0x09
   1374e:	ba 85       	ldd	r27, Y+10	; 0x0a
   13750:	89 83       	std	Y+1, r24	; 0x01
   13752:	9a 83       	std	Y+2, r25	; 0x02
   13754:	ab 83       	std	Y+3, r26	; 0x03
   13756:	bc 83       	std	Y+4, r27	; 0x04
   13758:	89 81       	ldd	r24, Y+1	; 0x01
   1375a:	9a 81       	ldd	r25, Y+2	; 0x02
   1375c:	ab 81       	ldd	r26, Y+3	; 0x03
   1375e:	bc 81       	ldd	r27, Y+4	; 0x04
   13760:	0b b6       	in	r0, 0x3b	; 59
   13762:	ab bf       	out	0x3b, r26	; 59
   13764:	fc 01       	movw	r30, r24
   13766:	87 91       	elpm	r24, Z+
   13768:	96 91       	elpm	r25, Z
   1376a:	0b be       	out	0x3b, r0	; 59
   1376c:	8d 83       	std	Y+5, r24	; 0x05
   1376e:	9e 83       	std	Y+6, r25	; 0x06
   13770:	8d 81       	ldd	r24, Y+5	; 0x05
   13772:	9e 81       	ldd	r25, Y+6	; 0x06
   13774:	2a 96       	adiw	r28, 0x0a	; 10
   13776:	cd bf       	out	0x3d, r28	; 61
   13778:	de bf       	out	0x3e, r29	; 62
   1377a:	df 91       	pop	r29
   1377c:	cf 91       	pop	r28
   1377e:	08 95       	ret

00013780 <nvm_flash_split_write_app_page>:
   13780:	cf 93       	push	r28
   13782:	df 93       	push	r29
   13784:	00 d0       	rcall	.+0      	; 0x13786 <nvm_flash_split_write_app_page+0x6>
   13786:	1f 92       	push	r1
   13788:	cd b7       	in	r28, 0x3d	; 61
   1378a:	de b7       	in	r29, 0x3e	; 62
   1378c:	69 83       	std	Y+1, r22	; 0x01
   1378e:	7a 83       	std	Y+2, r23	; 0x02
   13790:	8b 83       	std	Y+3, r24	; 0x03
   13792:	9c 83       	std	Y+4, r25	; 0x04
   13794:	39 df       	rcall	.-398    	; 0x13608 <nvm_wait_until_ready>
   13796:	89 81       	ldd	r24, Y+1	; 0x01
   13798:	9a 81       	ldd	r25, Y+2	; 0x02
   1379a:	ab 81       	ldd	r26, Y+3	; 0x03
   1379c:	bc 81       	ldd	r27, Y+4	; 0x04
   1379e:	44 e2       	ldi	r20, 0x24	; 36
   137a0:	bc 01       	movw	r22, r24
   137a2:	cd 01       	movw	r24, r26
   137a4:	0e 94 ba b9 	call	0x17374	; 0x17374 <_etext>
   137a8:	00 00       	nop
   137aa:	24 96       	adiw	r28, 0x04	; 4
   137ac:	cd bf       	out	0x3d, r28	; 61
   137ae:	de bf       	out	0x3e, r29	; 62
   137b0:	df 91       	pop	r29
   137b2:	cf 91       	pop	r28
   137b4:	08 95       	ret

000137b6 <nvm_flash_atomic_write_app_page>:
   137b6:	cf 93       	push	r28
   137b8:	df 93       	push	r29
   137ba:	00 d0       	rcall	.+0      	; 0x137bc <nvm_flash_atomic_write_app_page+0x6>
   137bc:	1f 92       	push	r1
   137be:	cd b7       	in	r28, 0x3d	; 61
   137c0:	de b7       	in	r29, 0x3e	; 62
   137c2:	69 83       	std	Y+1, r22	; 0x01
   137c4:	7a 83       	std	Y+2, r23	; 0x02
   137c6:	8b 83       	std	Y+3, r24	; 0x03
   137c8:	9c 83       	std	Y+4, r25	; 0x04
   137ca:	1e df       	rcall	.-452    	; 0x13608 <nvm_wait_until_ready>
   137cc:	89 81       	ldd	r24, Y+1	; 0x01
   137ce:	9a 81       	ldd	r25, Y+2	; 0x02
   137d0:	ab 81       	ldd	r26, Y+3	; 0x03
   137d2:	bc 81       	ldd	r27, Y+4	; 0x04
   137d4:	45 e2       	ldi	r20, 0x25	; 37
   137d6:	bc 01       	movw	r22, r24
   137d8:	cd 01       	movw	r24, r26
   137da:	0e 94 ba b9 	call	0x17374	; 0x17374 <_etext>
   137de:	00 00       	nop
   137e0:	24 96       	adiw	r28, 0x04	; 4
   137e2:	cd bf       	out	0x3d, r28	; 61
   137e4:	de bf       	out	0x3e, r29	; 62
   137e6:	df 91       	pop	r29
   137e8:	cf 91       	pop	r28
   137ea:	08 95       	ret

000137ec <nvm_flash_erase_user_section>:
   137ec:	cf 93       	push	r28
   137ee:	df 93       	push	r29
   137f0:	cd b7       	in	r28, 0x3d	; 61
   137f2:	de b7       	in	r29, 0x3e	; 62
   137f4:	09 df       	rcall	.-494    	; 0x13608 <nvm_wait_until_ready>
   137f6:	48 e1       	ldi	r20, 0x18	; 24
   137f8:	60 e0       	ldi	r22, 0x00	; 0
   137fa:	70 e0       	ldi	r23, 0x00	; 0
   137fc:	cb 01       	movw	r24, r22
   137fe:	0e 94 ba b9 	call	0x17374	; 0x17374 <_etext>
   13802:	00 00       	nop
   13804:	df 91       	pop	r29
   13806:	cf 91       	pop	r28
   13808:	08 95       	ret

0001380a <nvm_flash_write_user_page>:
   1380a:	cf 93       	push	r28
   1380c:	df 93       	push	r29
   1380e:	cd b7       	in	r28, 0x3d	; 61
   13810:	de b7       	in	r29, 0x3e	; 62
   13812:	fa de       	rcall	.-524    	; 0x13608 <nvm_wait_until_ready>
   13814:	4a e1       	ldi	r20, 0x1A	; 26
   13816:	60 e0       	ldi	r22, 0x00	; 0
   13818:	70 e0       	ldi	r23, 0x00	; 0
   1381a:	cb 01       	movw	r24, r22
   1381c:	0e 94 ba b9 	call	0x17374	; 0x17374 <_etext>
   13820:	00 00       	nop
   13822:	df 91       	pop	r29
   13824:	cf 91       	pop	r28
   13826:	08 95       	ret

00013828 <nvm_eeprom_read_buffer>:
   13828:	cf 93       	push	r28
   1382a:	df 93       	push	r29
   1382c:	00 d0       	rcall	.+0      	; 0x1382e <nvm_eeprom_read_buffer+0x6>
   1382e:	00 d0       	rcall	.+0      	; 0x13830 <nvm_eeprom_read_buffer+0x8>
   13830:	cd b7       	in	r28, 0x3d	; 61
   13832:	de b7       	in	r29, 0x3e	; 62
   13834:	89 83       	std	Y+1, r24	; 0x01
   13836:	9a 83       	std	Y+2, r25	; 0x02
   13838:	6b 83       	std	Y+3, r22	; 0x03
   1383a:	7c 83       	std	Y+4, r23	; 0x04
   1383c:	4d 83       	std	Y+5, r20	; 0x05
   1383e:	5e 83       	std	Y+6, r21	; 0x06
   13840:	e3 de       	rcall	.-570    	; 0x13608 <nvm_wait_until_ready>
   13842:	31 df       	rcall	.-414    	; 0x136a6 <eeprom_enable_mapping>
   13844:	89 81       	ldd	r24, Y+1	; 0x01
   13846:	9a 81       	ldd	r25, Y+2	; 0x02
   13848:	90 5f       	subi	r25, 0xF0	; 240
   1384a:	bc 01       	movw	r22, r24
   1384c:	2d 81       	ldd	r18, Y+5	; 0x05
   1384e:	3e 81       	ldd	r19, Y+6	; 0x06
   13850:	8b 81       	ldd	r24, Y+3	; 0x03
   13852:	9c 81       	ldd	r25, Y+4	; 0x04
   13854:	a9 01       	movw	r20, r18
   13856:	0e 94 ec b7 	call	0x16fd8	; 0x16fd8 <memcpy>
   1385a:	36 df       	rcall	.-404    	; 0x136c8 <eeprom_disable_mapping>
   1385c:	00 00       	nop
   1385e:	26 96       	adiw	r28, 0x06	; 6
   13860:	cd bf       	out	0x3d, r28	; 61
   13862:	de bf       	out	0x3e, r29	; 62
   13864:	df 91       	pop	r29
   13866:	cf 91       	pop	r28
   13868:	08 95       	ret

0001386a <nvm_eeprom_write_byte>:
   1386a:	cf 93       	push	r28
   1386c:	df 93       	push	r29
   1386e:	00 d0       	rcall	.+0      	; 0x13870 <nvm_eeprom_write_byte+0x6>
   13870:	1f 92       	push	r1
   13872:	cd b7       	in	r28, 0x3d	; 61
   13874:	de b7       	in	r29, 0x3e	; 62
   13876:	8a 83       	std	Y+2, r24	; 0x02
   13878:	9b 83       	std	Y+3, r25	; 0x03
   1387a:	6c 83       	std	Y+4, r22	; 0x04
   1387c:	80 ec       	ldi	r24, 0xC0	; 192
   1387e:	91 e0       	ldi	r25, 0x01	; 1
   13880:	fc 01       	movw	r30, r24
   13882:	82 85       	ldd	r24, Z+10	; 0x0a
   13884:	89 83       	std	Y+1, r24	; 0x01
   13886:	7f d0       	rcall	.+254    	; 0x13986 <nvm_eeprom_flush_buffer>
   13888:	bf de       	rcall	.-642    	; 0x13608 <nvm_wait_until_ready>
   1388a:	8a 81       	ldd	r24, Y+2	; 0x02
   1388c:	6c 81       	ldd	r22, Y+4	; 0x04
   1388e:	94 d0       	rcall	.+296    	; 0x139b8 <nvm_eeprom_load_byte_to_buffer>
   13890:	80 ec       	ldi	r24, 0xC0	; 192
   13892:	91 e0       	ldi	r25, 0x01	; 1
   13894:	fc 01       	movw	r30, r24
   13896:	12 82       	std	Z+2, r1	; 0x02
   13898:	80 ec       	ldi	r24, 0xC0	; 192
   1389a:	91 e0       	ldi	r25, 0x01	; 1
   1389c:	2a 81       	ldd	r18, Y+2	; 0x02
   1389e:	3b 81       	ldd	r19, Y+3	; 0x03
   138a0:	23 2f       	mov	r18, r19
   138a2:	33 27       	eor	r19, r19
   138a4:	fc 01       	movw	r30, r24
   138a6:	21 83       	std	Z+1, r18	; 0x01
   138a8:	80 ec       	ldi	r24, 0xC0	; 192
   138aa:	91 e0       	ldi	r25, 0x01	; 1
   138ac:	2a 81       	ldd	r18, Y+2	; 0x02
   138ae:	fc 01       	movw	r30, r24
   138b0:	20 83       	st	Z, r18
   138b2:	80 ec       	ldi	r24, 0xC0	; 192
   138b4:	91 e0       	ldi	r25, 0x01	; 1
   138b6:	25 e3       	ldi	r18, 0x35	; 53
   138b8:	fc 01       	movw	r30, r24
   138ba:	22 87       	std	Z+10, r18	; 0x0a
   138bc:	b3 de       	rcall	.-666    	; 0x13624 <nvm_exec>
   138be:	80 ec       	ldi	r24, 0xC0	; 192
   138c0:	91 e0       	ldi	r25, 0x01	; 1
   138c2:	29 81       	ldd	r18, Y+1	; 0x01
   138c4:	fc 01       	movw	r30, r24
   138c6:	22 87       	std	Z+10, r18	; 0x0a
   138c8:	00 00       	nop
   138ca:	24 96       	adiw	r28, 0x04	; 4
   138cc:	cd bf       	out	0x3d, r28	; 61
   138ce:	de bf       	out	0x3e, r29	; 62
   138d0:	df 91       	pop	r29
   138d2:	cf 91       	pop	r28
   138d4:	08 95       	ret

000138d6 <nvm_eeprom_erase_and_write_buffer>:
   138d6:	cf 93       	push	r28
   138d8:	df 93       	push	r29
   138da:	00 d0       	rcall	.+0      	; 0x138dc <nvm_eeprom_erase_and_write_buffer+0x6>
   138dc:	00 d0       	rcall	.+0      	; 0x138de <nvm_eeprom_erase_and_write_buffer+0x8>
   138de:	cd b7       	in	r28, 0x3d	; 61
   138e0:	de b7       	in	r29, 0x3e	; 62
   138e2:	89 83       	std	Y+1, r24	; 0x01
   138e4:	9a 83       	std	Y+2, r25	; 0x02
   138e6:	6b 83       	std	Y+3, r22	; 0x03
   138e8:	7c 83       	std	Y+4, r23	; 0x04
   138ea:	4d 83       	std	Y+5, r20	; 0x05
   138ec:	5e 83       	std	Y+6, r21	; 0x06
   138ee:	3f c0       	rjmp	.+126    	; 0x1396e <nvm_eeprom_erase_and_write_buffer+0x98>
   138f0:	89 81       	ldd	r24, Y+1	; 0x01
   138f2:	9a 81       	ldd	r25, Y+2	; 0x02
   138f4:	8f 71       	andi	r24, 0x1F	; 31
   138f6:	99 27       	eor	r25, r25
   138f8:	89 2b       	or	r24, r25
   138fa:	11 f5       	brne	.+68     	; 0x13940 <nvm_eeprom_erase_and_write_buffer+0x6a>
   138fc:	8d 81       	ldd	r24, Y+5	; 0x05
   138fe:	9e 81       	ldd	r25, Y+6	; 0x06
   13900:	80 97       	sbiw	r24, 0x20	; 32
   13902:	f0 f0       	brcs	.+60     	; 0x13940 <nvm_eeprom_erase_and_write_buffer+0x6a>
   13904:	8b 81       	ldd	r24, Y+3	; 0x03
   13906:	9c 81       	ldd	r25, Y+4	; 0x04
   13908:	6f d0       	rcall	.+222    	; 0x139e8 <nvm_eeprom_load_page_to_buffer>
   1390a:	89 81       	ldd	r24, Y+1	; 0x01
   1390c:	9a 81       	ldd	r25, Y+2	; 0x02
   1390e:	96 95       	lsr	r25
   13910:	87 95       	ror	r24
   13912:	92 95       	swap	r25
   13914:	82 95       	swap	r24
   13916:	8f 70       	andi	r24, 0x0F	; 15
   13918:	89 27       	eor	r24, r25
   1391a:	9f 70       	andi	r25, 0x0F	; 15
   1391c:	89 27       	eor	r24, r25
   1391e:	87 d0       	rcall	.+270    	; 0x13a2e <nvm_eeprom_atomic_write_page>
   13920:	89 81       	ldd	r24, Y+1	; 0x01
   13922:	9a 81       	ldd	r25, Y+2	; 0x02
   13924:	80 96       	adiw	r24, 0x20	; 32
   13926:	89 83       	std	Y+1, r24	; 0x01
   13928:	9a 83       	std	Y+2, r25	; 0x02
   1392a:	8b 81       	ldd	r24, Y+3	; 0x03
   1392c:	9c 81       	ldd	r25, Y+4	; 0x04
   1392e:	80 96       	adiw	r24, 0x20	; 32
   13930:	8b 83       	std	Y+3, r24	; 0x03
   13932:	9c 83       	std	Y+4, r25	; 0x04
   13934:	8d 81       	ldd	r24, Y+5	; 0x05
   13936:	9e 81       	ldd	r25, Y+6	; 0x06
   13938:	80 97       	sbiw	r24, 0x20	; 32
   1393a:	8d 83       	std	Y+5, r24	; 0x05
   1393c:	9e 83       	std	Y+6, r25	; 0x06
   1393e:	17 c0       	rjmp	.+46     	; 0x1396e <nvm_eeprom_erase_and_write_buffer+0x98>
   13940:	8b 81       	ldd	r24, Y+3	; 0x03
   13942:	9c 81       	ldd	r25, Y+4	; 0x04
   13944:	fc 01       	movw	r30, r24
   13946:	40 81       	ld	r20, Z
   13948:	89 81       	ldd	r24, Y+1	; 0x01
   1394a:	9a 81       	ldd	r25, Y+2	; 0x02
   1394c:	9c 01       	movw	r18, r24
   1394e:	2f 5f       	subi	r18, 0xFF	; 255
   13950:	3f 4f       	sbci	r19, 0xFF	; 255
   13952:	29 83       	std	Y+1, r18	; 0x01
   13954:	3a 83       	std	Y+2, r19	; 0x02
   13956:	64 2f       	mov	r22, r20
   13958:	88 df       	rcall	.-240    	; 0x1386a <nvm_eeprom_write_byte>
   1395a:	8b 81       	ldd	r24, Y+3	; 0x03
   1395c:	9c 81       	ldd	r25, Y+4	; 0x04
   1395e:	01 96       	adiw	r24, 0x01	; 1
   13960:	8b 83       	std	Y+3, r24	; 0x03
   13962:	9c 83       	std	Y+4, r25	; 0x04
   13964:	8d 81       	ldd	r24, Y+5	; 0x05
   13966:	9e 81       	ldd	r25, Y+6	; 0x06
   13968:	01 97       	sbiw	r24, 0x01	; 1
   1396a:	8d 83       	std	Y+5, r24	; 0x05
   1396c:	9e 83       	std	Y+6, r25	; 0x06
   1396e:	8d 81       	ldd	r24, Y+5	; 0x05
   13970:	9e 81       	ldd	r25, Y+6	; 0x06
   13972:	89 2b       	or	r24, r25
   13974:	09 f0       	breq	.+2      	; 0x13978 <nvm_eeprom_erase_and_write_buffer+0xa2>
   13976:	bc cf       	rjmp	.-136    	; 0x138f0 <nvm_eeprom_erase_and_write_buffer+0x1a>
   13978:	00 00       	nop
   1397a:	26 96       	adiw	r28, 0x06	; 6
   1397c:	cd bf       	out	0x3d, r28	; 61
   1397e:	de bf       	out	0x3e, r29	; 62
   13980:	df 91       	pop	r29
   13982:	cf 91       	pop	r28
   13984:	08 95       	ret

00013986 <nvm_eeprom_flush_buffer>:
   13986:	cf 93       	push	r28
   13988:	df 93       	push	r29
   1398a:	cd b7       	in	r28, 0x3d	; 61
   1398c:	de b7       	in	r29, 0x3e	; 62
   1398e:	3c de       	rcall	.-904    	; 0x13608 <nvm_wait_until_ready>
   13990:	80 ec       	ldi	r24, 0xC0	; 192
   13992:	91 e0       	ldi	r25, 0x01	; 1
   13994:	fc 01       	movw	r30, r24
   13996:	87 85       	ldd	r24, Z+15	; 0x0f
   13998:	88 2f       	mov	r24, r24
   1399a:	90 e0       	ldi	r25, 0x00	; 0
   1399c:	82 70       	andi	r24, 0x02	; 2
   1399e:	99 27       	eor	r25, r25
   139a0:	89 2b       	or	r24, r25
   139a2:	31 f0       	breq	.+12     	; 0x139b0 <nvm_eeprom_flush_buffer+0x2a>
   139a4:	80 ec       	ldi	r24, 0xC0	; 192
   139a6:	91 e0       	ldi	r25, 0x01	; 1
   139a8:	26 e3       	ldi	r18, 0x36	; 54
   139aa:	fc 01       	movw	r30, r24
   139ac:	22 87       	std	Z+10, r18	; 0x0a
   139ae:	3a de       	rcall	.-908    	; 0x13624 <nvm_exec>
   139b0:	00 00       	nop
   139b2:	df 91       	pop	r29
   139b4:	cf 91       	pop	r28
   139b6:	08 95       	ret

000139b8 <nvm_eeprom_load_byte_to_buffer>:
   139b8:	cf 93       	push	r28
   139ba:	df 93       	push	r29
   139bc:	1f 92       	push	r1
   139be:	1f 92       	push	r1
   139c0:	cd b7       	in	r28, 0x3d	; 61
   139c2:	de b7       	in	r29, 0x3e	; 62
   139c4:	89 83       	std	Y+1, r24	; 0x01
   139c6:	6a 83       	std	Y+2, r22	; 0x02
   139c8:	1f de       	rcall	.-962    	; 0x13608 <nvm_wait_until_ready>
   139ca:	6d de       	rcall	.-806    	; 0x136a6 <eeprom_enable_mapping>
   139cc:	89 81       	ldd	r24, Y+1	; 0x01
   139ce:	88 2f       	mov	r24, r24
   139d0:	90 e0       	ldi	r25, 0x00	; 0
   139d2:	90 5f       	subi	r25, 0xF0	; 240
   139d4:	2a 81       	ldd	r18, Y+2	; 0x02
   139d6:	fc 01       	movw	r30, r24
   139d8:	20 83       	st	Z, r18
   139da:	76 de       	rcall	.-788    	; 0x136c8 <eeprom_disable_mapping>
   139dc:	00 00       	nop
   139de:	0f 90       	pop	r0
   139e0:	0f 90       	pop	r0
   139e2:	df 91       	pop	r29
   139e4:	cf 91       	pop	r28
   139e6:	08 95       	ret

000139e8 <nvm_eeprom_load_page_to_buffer>:
   139e8:	cf 93       	push	r28
   139ea:	df 93       	push	r29
   139ec:	00 d0       	rcall	.+0      	; 0x139ee <nvm_eeprom_load_page_to_buffer+0x6>
   139ee:	cd b7       	in	r28, 0x3d	; 61
   139f0:	de b7       	in	r29, 0x3e	; 62
   139f2:	8a 83       	std	Y+2, r24	; 0x02
   139f4:	9b 83       	std	Y+3, r25	; 0x03
   139f6:	08 de       	rcall	.-1008   	; 0x13608 <nvm_wait_until_ready>
   139f8:	19 82       	std	Y+1, r1	; 0x01
   139fa:	0f c0       	rjmp	.+30     	; 0x13a1a <nvm_eeprom_load_page_to_buffer+0x32>
   139fc:	8a 81       	ldd	r24, Y+2	; 0x02
   139fe:	9b 81       	ldd	r25, Y+3	; 0x03
   13a00:	fc 01       	movw	r30, r24
   13a02:	80 81       	ld	r24, Z
   13a04:	68 2f       	mov	r22, r24
   13a06:	89 81       	ldd	r24, Y+1	; 0x01
   13a08:	d7 df       	rcall	.-82     	; 0x139b8 <nvm_eeprom_load_byte_to_buffer>
   13a0a:	8a 81       	ldd	r24, Y+2	; 0x02
   13a0c:	9b 81       	ldd	r25, Y+3	; 0x03
   13a0e:	01 96       	adiw	r24, 0x01	; 1
   13a10:	8a 83       	std	Y+2, r24	; 0x02
   13a12:	9b 83       	std	Y+3, r25	; 0x03
   13a14:	89 81       	ldd	r24, Y+1	; 0x01
   13a16:	8f 5f       	subi	r24, 0xFF	; 255
   13a18:	89 83       	std	Y+1, r24	; 0x01
   13a1a:	89 81       	ldd	r24, Y+1	; 0x01
   13a1c:	80 32       	cpi	r24, 0x20	; 32
   13a1e:	70 f3       	brcs	.-36     	; 0x139fc <nvm_eeprom_load_page_to_buffer+0x14>
   13a20:	00 00       	nop
   13a22:	23 96       	adiw	r28, 0x03	; 3
   13a24:	cd bf       	out	0x3d, r28	; 61
   13a26:	de bf       	out	0x3e, r29	; 62
   13a28:	df 91       	pop	r29
   13a2a:	cf 91       	pop	r28
   13a2c:	08 95       	ret

00013a2e <nvm_eeprom_atomic_write_page>:
   13a2e:	cf 93       	push	r28
   13a30:	df 93       	push	r29
   13a32:	00 d0       	rcall	.+0      	; 0x13a34 <nvm_eeprom_atomic_write_page+0x6>
   13a34:	cd b7       	in	r28, 0x3d	; 61
   13a36:	de b7       	in	r29, 0x3e	; 62
   13a38:	8b 83       	std	Y+3, r24	; 0x03
   13a3a:	e6 dd       	rcall	.-1076   	; 0x13608 <nvm_wait_until_ready>
   13a3c:	8b 81       	ldd	r24, Y+3	; 0x03
   13a3e:	88 2f       	mov	r24, r24
   13a40:	90 e0       	ldi	r25, 0x00	; 0
   13a42:	88 0f       	add	r24, r24
   13a44:	99 1f       	adc	r25, r25
   13a46:	82 95       	swap	r24
   13a48:	92 95       	swap	r25
   13a4a:	90 7f       	andi	r25, 0xF0	; 240
   13a4c:	98 27       	eor	r25, r24
   13a4e:	80 7f       	andi	r24, 0xF0	; 240
   13a50:	98 27       	eor	r25, r24
   13a52:	89 83       	std	Y+1, r24	; 0x01
   13a54:	9a 83       	std	Y+2, r25	; 0x02
   13a56:	80 ec       	ldi	r24, 0xC0	; 192
   13a58:	91 e0       	ldi	r25, 0x01	; 1
   13a5a:	fc 01       	movw	r30, r24
   13a5c:	12 82       	std	Z+2, r1	; 0x02
   13a5e:	80 ec       	ldi	r24, 0xC0	; 192
   13a60:	91 e0       	ldi	r25, 0x01	; 1
   13a62:	29 81       	ldd	r18, Y+1	; 0x01
   13a64:	3a 81       	ldd	r19, Y+2	; 0x02
   13a66:	23 2f       	mov	r18, r19
   13a68:	33 27       	eor	r19, r19
   13a6a:	fc 01       	movw	r30, r24
   13a6c:	21 83       	std	Z+1, r18	; 0x01
   13a6e:	80 ec       	ldi	r24, 0xC0	; 192
   13a70:	91 e0       	ldi	r25, 0x01	; 1
   13a72:	29 81       	ldd	r18, Y+1	; 0x01
   13a74:	fc 01       	movw	r30, r24
   13a76:	20 83       	st	Z, r18
   13a78:	85 e3       	ldi	r24, 0x35	; 53
   13a7a:	e1 dd       	rcall	.-1086   	; 0x1363e <nvm_issue_command>
   13a7c:	00 00       	nop
   13a7e:	23 96       	adiw	r28, 0x03	; 3
   13a80:	cd bf       	out	0x3d, r28	; 61
   13a82:	de bf       	out	0x3e, r29	; 62
   13a84:	df 91       	pop	r29
   13a86:	cf 91       	pop	r28
   13a88:	08 95       	ret

00013a8a <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
   13a8a:	cf 93       	push	r28
   13a8c:	df 93       	push	r29
   13a8e:	cd b7       	in	r28, 0x3d	; 61
   13a90:	de b7       	in	r29, 0x3e	; 62
   13a92:	2c 97       	sbiw	r28, 0x0c	; 12
   13a94:	cd bf       	out	0x3d, r28	; 61
   13a96:	de bf       	out	0x3e, r29	; 62
   13a98:	6d 83       	std	Y+5, r22	; 0x05
   13a9a:	7e 83       	std	Y+6, r23	; 0x06
   13a9c:	8f 83       	std	Y+7, r24	; 0x07
   13a9e:	98 87       	std	Y+8, r25	; 0x08
   13aa0:	49 87       	std	Y+9, r20	; 0x09
   13aa2:	5a 87       	std	Y+10, r21	; 0x0a
   13aa4:	2b 87       	std	Y+11, r18	; 0x0b
   13aa6:	3c 87       	std	Y+12, r19	; 0x0c
#if (FLASH_SIZE>0x10000)
	uint32_t opt_address = address;
   13aa8:	8d 81       	ldd	r24, Y+5	; 0x05
   13aaa:	9e 81       	ldd	r25, Y+6	; 0x06
   13aac:	af 81       	ldd	r26, Y+7	; 0x07
   13aae:	b8 85       	ldd	r27, Y+8	; 0x08
   13ab0:	89 83       	std	Y+1, r24	; 0x01
   13ab2:	9a 83       	std	Y+2, r25	; 0x02
   13ab4:	ab 83       	std	Y+3, r26	; 0x03
   13ab6:	bc 83       	std	Y+4, r27	; 0x04
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
   13ab8:	a7 dd       	rcall	.-1202   	; 0x13608 <nvm_wait_until_ready>
	while ( len ) {
   13aba:	21 c0       	rjmp	.+66     	; 0x13afe <nvm_flash_read_buffer+0x74>
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
   13abc:	89 81       	ldd	r24, Y+1	; 0x01
   13abe:	9a 81       	ldd	r25, Y+2	; 0x02
   13ac0:	ab 81       	ldd	r26, Y+3	; 0x03
   13ac2:	bc 81       	ldd	r27, Y+4	; 0x04
   13ac4:	bc 01       	movw	r22, r24
   13ac6:	cd 01       	movw	r24, r26
   13ac8:	10 de       	rcall	.-992    	; 0x136ea <nvm_flash_read_byte>
   13aca:	28 2f       	mov	r18, r24
   13acc:	89 85       	ldd	r24, Y+9	; 0x09
   13ace:	9a 85       	ldd	r25, Y+10	; 0x0a
   13ad0:	fc 01       	movw	r30, r24
   13ad2:	20 83       	st	Z, r18
		buf=(uint8_t*)buf+1;
   13ad4:	89 85       	ldd	r24, Y+9	; 0x09
   13ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
   13ad8:	01 96       	adiw	r24, 0x01	; 1
   13ada:	89 87       	std	Y+9, r24	; 0x09
   13adc:	9a 87       	std	Y+10, r25	; 0x0a
		opt_address++;
   13ade:	89 81       	ldd	r24, Y+1	; 0x01
   13ae0:	9a 81       	ldd	r25, Y+2	; 0x02
   13ae2:	ab 81       	ldd	r26, Y+3	; 0x03
   13ae4:	bc 81       	ldd	r27, Y+4	; 0x04
   13ae6:	01 96       	adiw	r24, 0x01	; 1
   13ae8:	a1 1d       	adc	r26, r1
   13aea:	b1 1d       	adc	r27, r1
   13aec:	89 83       	std	Y+1, r24	; 0x01
   13aee:	9a 83       	std	Y+2, r25	; 0x02
   13af0:	ab 83       	std	Y+3, r26	; 0x03
   13af2:	bc 83       	std	Y+4, r27	; 0x04
		len--;
   13af4:	8b 85       	ldd	r24, Y+11	; 0x0b
   13af6:	9c 85       	ldd	r25, Y+12	; 0x0c
   13af8:	01 97       	sbiw	r24, 0x01	; 1
   13afa:	8b 87       	std	Y+11, r24	; 0x0b
   13afc:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
   13afe:	8b 85       	ldd	r24, Y+11	; 0x0b
   13b00:	9c 85       	ldd	r25, Y+12	; 0x0c
   13b02:	89 2b       	or	r24, r25
   13b04:	d9 f6       	brne	.-74     	; 0x13abc <nvm_flash_read_buffer+0x32>
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
   13b06:	00 00       	nop
   13b08:	2c 96       	adiw	r28, 0x0c	; 12
   13b0a:	cd bf       	out	0x3d, r28	; 61
   13b0c:	de bf       	out	0x3e, r29	; 62
   13b0e:	df 91       	pop	r29
   13b10:	cf 91       	pop	r28
   13b12:	08 95       	ret

00013b14 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
   13b14:	cf 93       	push	r28
   13b16:	df 93       	push	r29
   13b18:	cd b7       	in	r28, 0x3d	; 61
   13b1a:	de b7       	in	r29, 0x3e	; 62
   13b1c:	2a 97       	sbiw	r28, 0x0a	; 10
   13b1e:	cd bf       	out	0x3d, r28	; 61
   13b20:	de bf       	out	0x3e, r29	; 62
   13b22:	6b 83       	std	Y+3, r22	; 0x03
   13b24:	7c 83       	std	Y+4, r23	; 0x04
   13b26:	8d 83       	std	Y+5, r24	; 0x05
   13b28:	9e 83       	std	Y+6, r25	; 0x06
   13b2a:	4f 83       	std	Y+7, r20	; 0x07
   13b2c:	58 87       	std	Y+8, r21	; 0x08
   13b2e:	29 87       	std	Y+9, r18	; 0x09
   13b30:	3a 87       	std	Y+10, r19	; 0x0a
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
   13b32:	8b 81       	ldd	r24, Y+3	; 0x03
   13b34:	9c 81       	ldd	r25, Y+4	; 0x04
   13b36:	91 70       	andi	r25, 0x01	; 1
   13b38:	89 83       	std	Y+1, r24	; 0x01
   13b3a:	9a 83       	std	Y+2, r25	; 0x02
	while ( len ) {
   13b3c:	17 c0       	rjmp	.+46     	; 0x13b6c <nvm_user_sig_read_buffer+0x58>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
   13b3e:	89 81       	ldd	r24, Y+1	; 0x01
   13b40:	9a 81       	ldd	r25, Y+2	; 0x02
   13b42:	9e dd       	rcall	.-1220   	; 0x13680 <nvm_read_user_signature_row>
   13b44:	28 2f       	mov	r18, r24
   13b46:	8f 81       	ldd	r24, Y+7	; 0x07
   13b48:	98 85       	ldd	r25, Y+8	; 0x08
   13b4a:	fc 01       	movw	r30, r24
   13b4c:	20 83       	st	Z, r18
		buf=(uint8_t*)buf+1;
   13b4e:	8f 81       	ldd	r24, Y+7	; 0x07
   13b50:	98 85       	ldd	r25, Y+8	; 0x08
   13b52:	01 96       	adiw	r24, 0x01	; 1
   13b54:	8f 83       	std	Y+7, r24	; 0x07
   13b56:	98 87       	std	Y+8, r25	; 0x08
		opt_address++;
   13b58:	89 81       	ldd	r24, Y+1	; 0x01
   13b5a:	9a 81       	ldd	r25, Y+2	; 0x02
   13b5c:	01 96       	adiw	r24, 0x01	; 1
   13b5e:	89 83       	std	Y+1, r24	; 0x01
   13b60:	9a 83       	std	Y+2, r25	; 0x02
		len--;
   13b62:	89 85       	ldd	r24, Y+9	; 0x09
   13b64:	9a 85       	ldd	r25, Y+10	; 0x0a
   13b66:	01 97       	sbiw	r24, 0x01	; 1
   13b68:	89 87       	std	Y+9, r24	; 0x09
   13b6a:	9a 87       	std	Y+10, r25	; 0x0a
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
   13b6c:	89 85       	ldd	r24, Y+9	; 0x09
   13b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
   13b70:	89 2b       	or	r24, r25
   13b72:	29 f7       	brne	.-54     	; 0x13b3e <nvm_user_sig_read_buffer+0x2a>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
   13b74:	00 00       	nop
   13b76:	2a 96       	adiw	r28, 0x0a	; 10
   13b78:	cd bf       	out	0x3d, r28	; 61
   13b7a:	de bf       	out	0x3e, r29	; 62
   13b7c:	df 91       	pop	r29
   13b7e:	cf 91       	pop	r28
   13b80:	08 95       	ret

00013b82 <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
   13b82:	0f 93       	push	r16
   13b84:	1f 93       	push	r17
   13b86:	cf 93       	push	r28
   13b88:	df 93       	push	r29
   13b8a:	cd b7       	in	r28, 0x3d	; 61
   13b8c:	de b7       	in	r29, 0x3e	; 62
   13b8e:	60 97       	sbiw	r28, 0x10	; 16
   13b90:	cd bf       	out	0x3d, r28	; 61
   13b92:	de bf       	out	0x3e, r29	; 62
   13b94:	68 87       	std	Y+8, r22	; 0x08
   13b96:	79 87       	std	Y+9, r23	; 0x09
   13b98:	8a 87       	std	Y+10, r24	; 0x0a
   13b9a:	9b 87       	std	Y+11, r25	; 0x0b
   13b9c:	4c 87       	std	Y+12, r20	; 0x0c
   13b9e:	5d 87       	std	Y+13, r21	; 0x0d
   13ba0:	2e 87       	std	Y+14, r18	; 0x0e
   13ba2:	3f 87       	std	Y+15, r19	; 0x0f
   13ba4:	08 8b       	std	Y+16, r16	; 0x10
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
   13ba6:	88 85       	ldd	r24, Y+8	; 0x08
   13ba8:	99 85       	ldd	r25, Y+9	; 0x09
   13baa:	8b 83       	std	Y+3, r24	; 0x03
   13bac:	9c 83       	std	Y+4, r25	; 0x04
	bool b_flag_erase = false;
   13bae:	1d 82       	std	Y+5, r1	; 0x05

	while ( len ) {
   13bb0:	83 c0       	rjmp	.+262    	; 0x13cb8 <nvm_user_sig_write_buffer+0x136>
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
   13bb2:	19 82       	std	Y+1, r1	; 0x01
   13bb4:	1a 82       	std	Y+2, r1	; 0x02
   13bb6:	7a c0       	rjmp	.+244    	; 0x13cac <nvm_user_sig_write_buffer+0x12a>
			if (b_blank_check) {
   13bb8:	88 89       	ldd	r24, Y+16	; 0x10
   13bba:	88 23       	and	r24, r24
   13bbc:	d1 f0       	breq	.+52     	; 0x13bf2 <nvm_user_sig_write_buffer+0x70>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
   13bbe:	8e 01       	movw	r16, r28
   13bc0:	0a 5f       	subi	r16, 0xFA	; 250
   13bc2:	1f 4f       	sbci	r17, 0xFF	; 255
   13bc4:	89 81       	ldd	r24, Y+1	; 0x01
   13bc6:	9a 81       	ldd	r25, Y+2	; 0x02
   13bc8:	5b dd       	rcall	.-1354   	; 0x13680 <nvm_read_user_signature_row>
   13bca:	f8 01       	movw	r30, r16
   13bcc:	80 83       	st	Z, r24
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
   13bce:	8e 01       	movw	r16, r28
   13bd0:	0a 5f       	subi	r16, 0xFA	; 250
   13bd2:	1f 4f       	sbci	r17, 0xFF	; 255
   13bd4:	0f 5f       	subi	r16, 0xFF	; 255
   13bd6:	1f 4f       	sbci	r17, 0xFF	; 255
   13bd8:	89 81       	ldd	r24, Y+1	; 0x01
   13bda:	9a 81       	ldd	r25, Y+2	; 0x02
   13bdc:	01 96       	adiw	r24, 0x01	; 1
   13bde:	50 dd       	rcall	.-1376   	; 0x13680 <nvm_read_user_signature_row>
   13be0:	f8 01       	movw	r30, r16
   13be2:	80 83       	st	Z, r24
				if (w_value!=0xFFFF) {
   13be4:	8e 81       	ldd	r24, Y+6	; 0x06
   13be6:	9f 81       	ldd	r25, Y+7	; 0x07
   13be8:	01 96       	adiw	r24, 0x01	; 1
   13bea:	39 f0       	breq	.+14     	; 0x13bfa <nvm_user_sig_write_buffer+0x78>
					b_flag_erase = true; // The page is not empty
   13bec:	81 e0       	ldi	r24, 0x01	; 1
   13bee:	8d 83       	std	Y+5, r24	; 0x05
   13bf0:	04 c0       	rjmp	.+8      	; 0x13bfa <nvm_user_sig_write_buffer+0x78>
				}
			}else{
				w_value = 0xFFFF;
   13bf2:	8f ef       	ldi	r24, 0xFF	; 255
   13bf4:	9f ef       	ldi	r25, 0xFF	; 255
   13bf6:	8e 83       	std	Y+6, r24	; 0x06
   13bf8:	9f 83       	std	Y+7, r25	; 0x07
			}
			// Update flash buffer
			if (len) {
   13bfa:	8e 85       	ldd	r24, Y+14	; 0x0e
   13bfc:	9f 85       	ldd	r25, Y+15	; 0x0f
   13bfe:	89 2b       	or	r24, r25
   13c00:	f1 f0       	breq	.+60     	; 0x13c3e <nvm_user_sig_write_buffer+0xbc>
				if (opt_address == page_pos) {
   13c02:	2b 81       	ldd	r18, Y+3	; 0x03
   13c04:	3c 81       	ldd	r19, Y+4	; 0x04
   13c06:	89 81       	ldd	r24, Y+1	; 0x01
   13c08:	9a 81       	ldd	r25, Y+2	; 0x02
   13c0a:	28 17       	cp	r18, r24
   13c0c:	39 07       	cpc	r19, r25
   13c0e:	b9 f4       	brne	.+46     	; 0x13c3e <nvm_user_sig_write_buffer+0xbc>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
   13c10:	8e 85       	ldd	r24, Y+14	; 0x0e
   13c12:	9f 85       	ldd	r25, Y+15	; 0x0f
   13c14:	01 97       	sbiw	r24, 0x01	; 1
   13c16:	8e 87       	std	Y+14, r24	; 0x0e
   13c18:	9f 87       	std	Y+15, r25	; 0x0f
					opt_address++;
   13c1a:	8b 81       	ldd	r24, Y+3	; 0x03
   13c1c:	9c 81       	ldd	r25, Y+4	; 0x04
   13c1e:	01 96       	adiw	r24, 0x01	; 1
   13c20:	8b 83       	std	Y+3, r24	; 0x03
   13c22:	9c 83       	std	Y+4, r25	; 0x04
					LSB(w_value)=*(uint8_t*)buf;
   13c24:	ce 01       	movw	r24, r28
   13c26:	06 96       	adiw	r24, 0x06	; 6
   13c28:	2c 85       	ldd	r18, Y+12	; 0x0c
   13c2a:	3d 85       	ldd	r19, Y+13	; 0x0d
   13c2c:	f9 01       	movw	r30, r18
   13c2e:	20 81       	ld	r18, Z
   13c30:	fc 01       	movw	r30, r24
   13c32:	20 83       	st	Z, r18
					buf=(uint8_t*)buf+1;
   13c34:	8c 85       	ldd	r24, Y+12	; 0x0c
   13c36:	9d 85       	ldd	r25, Y+13	; 0x0d
   13c38:	01 96       	adiw	r24, 0x01	; 1
   13c3a:	8c 87       	std	Y+12, r24	; 0x0c
   13c3c:	9d 87       	std	Y+13, r25	; 0x0d
				}
			}
			if (len) {
   13c3e:	8e 85       	ldd	r24, Y+14	; 0x0e
   13c40:	9f 85       	ldd	r25, Y+15	; 0x0f
   13c42:	89 2b       	or	r24, r25
   13c44:	11 f1       	breq	.+68     	; 0x13c8a <nvm_user_sig_write_buffer+0x108>
				if (opt_address == (page_pos+1)) {
   13c46:	89 81       	ldd	r24, Y+1	; 0x01
   13c48:	9a 81       	ldd	r25, Y+2	; 0x02
   13c4a:	9c 01       	movw	r18, r24
   13c4c:	2f 5f       	subi	r18, 0xFF	; 255
   13c4e:	3f 4f       	sbci	r19, 0xFF	; 255
   13c50:	8b 81       	ldd	r24, Y+3	; 0x03
   13c52:	9c 81       	ldd	r25, Y+4	; 0x04
   13c54:	28 17       	cp	r18, r24
   13c56:	39 07       	cpc	r19, r25
   13c58:	c1 f4       	brne	.+48     	; 0x13c8a <nvm_user_sig_write_buffer+0x108>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
   13c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
   13c5c:	9f 85       	ldd	r25, Y+15	; 0x0f
   13c5e:	01 97       	sbiw	r24, 0x01	; 1
   13c60:	8e 87       	std	Y+14, r24	; 0x0e
   13c62:	9f 87       	std	Y+15, r25	; 0x0f
					opt_address++;
   13c64:	8b 81       	ldd	r24, Y+3	; 0x03
   13c66:	9c 81       	ldd	r25, Y+4	; 0x04
   13c68:	01 96       	adiw	r24, 0x01	; 1
   13c6a:	8b 83       	std	Y+3, r24	; 0x03
   13c6c:	9c 83       	std	Y+4, r25	; 0x04
					MSB(w_value)=*(uint8_t*)buf;
   13c6e:	ce 01       	movw	r24, r28
   13c70:	06 96       	adiw	r24, 0x06	; 6
   13c72:	01 96       	adiw	r24, 0x01	; 1
   13c74:	2c 85       	ldd	r18, Y+12	; 0x0c
   13c76:	3d 85       	ldd	r19, Y+13	; 0x0d
   13c78:	f9 01       	movw	r30, r18
   13c7a:	20 81       	ld	r18, Z
   13c7c:	fc 01       	movw	r30, r24
   13c7e:	20 83       	st	Z, r18
					buf=(uint8_t*)buf+1;
   13c80:	8c 85       	ldd	r24, Y+12	; 0x0c
   13c82:	9d 85       	ldd	r25, Y+13	; 0x0d
   13c84:	01 96       	adiw	r24, 0x01	; 1
   13c86:	8c 87       	std	Y+12, r24	; 0x0c
   13c88:	9d 87       	std	Y+13, r25	; 0x0d
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
   13c8a:	2e 81       	ldd	r18, Y+6	; 0x06
   13c8c:	3f 81       	ldd	r19, Y+7	; 0x07
   13c8e:	89 81       	ldd	r24, Y+1	; 0x01
   13c90:	9a 81       	ldd	r25, Y+2	; 0x02
   13c92:	cc 01       	movw	r24, r24
   13c94:	a0 e0       	ldi	r26, 0x00	; 0
   13c96:	b0 e0       	ldi	r27, 0x00	; 0
   13c98:	a9 01       	movw	r20, r18
   13c9a:	bc 01       	movw	r22, r24
   13c9c:	cd 01       	movw	r24, r26
   13c9e:	0e 94 c9 b9 	call	0x17392	; 0x17392 <nvm_flash_load_word_to_buffer>
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
   13ca2:	89 81       	ldd	r24, Y+1	; 0x01
   13ca4:	9a 81       	ldd	r25, Y+2	; 0x02
   13ca6:	02 96       	adiw	r24, 0x02	; 2
   13ca8:	89 83       	std	Y+1, r24	; 0x01
   13caa:	9a 83       	std	Y+2, r25	; 0x02
   13cac:	89 81       	ldd	r24, Y+1	; 0x01
   13cae:	9a 81       	ldd	r25, Y+2	; 0x02
   13cb0:	81 15       	cp	r24, r1
   13cb2:	92 40       	sbci	r25, 0x02	; 2
   13cb4:	08 f4       	brcc	.+2      	; 0x13cb8 <nvm_user_sig_write_buffer+0x136>
   13cb6:	80 cf       	rjmp	.-256    	; 0x13bb8 <nvm_user_sig_write_buffer+0x36>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
   13cb8:	8e 85       	ldd	r24, Y+14	; 0x0e
   13cba:	9f 85       	ldd	r25, Y+15	; 0x0f
   13cbc:	89 2b       	or	r24, r25
   13cbe:	09 f0       	breq	.+2      	; 0x13cc2 <nvm_user_sig_write_buffer+0x140>
   13cc0:	78 cf       	rjmp	.-272    	; 0x13bb2 <nvm_user_sig_write_buffer+0x30>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
   13cc2:	8d 81       	ldd	r24, Y+5	; 0x05
   13cc4:	88 23       	and	r24, r24
		nvm_flash_erase_user_section();
   13cc6:	09 f0       	breq	.+2      	; 0x13cca <nvm_user_sig_write_buffer+0x148>
   13cc8:	91 dd       	rcall	.-1246   	; 0x137ec <nvm_flash_erase_user_section>
	}
	nvm_flash_write_user_page();
   13cca:	9f dd       	rcall	.-1218   	; 0x1380a <nvm_flash_write_user_page>
   13ccc:	00 00       	nop
}
   13cce:	60 96       	adiw	r28, 0x10	; 16
   13cd0:	cd bf       	out	0x3d, r28	; 61
   13cd2:	de bf       	out	0x3e, r29	; 62
   13cd4:	df 91       	pop	r29
   13cd6:	cf 91       	pop	r28
   13cd8:	1f 91       	pop	r17
   13cda:	0f 91       	pop	r16
   13cdc:	08 95       	ret

00013cde <nvm_flash_erase_and_write_buffer>:
   13cde:	0f 93       	push	r16
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
   13ce0:	cf 93       	push	r28
   13ce2:	df 93       	push	r29
   13ce4:	cd b7       	in	r28, 0x3d	; 61
   13ce6:	de b7       	in	r29, 0x3e	; 62
   13ce8:	66 97       	sbiw	r28, 0x16	; 22
   13cea:	cd bf       	out	0x3d, r28	; 61
   13cec:	de bf       	out	0x3e, r29	; 62
   13cee:	6e 87       	std	Y+14, r22	; 0x0e
   13cf0:	7f 87       	std	Y+15, r23	; 0x0f
   13cf2:	88 8b       	std	Y+16, r24	; 0x10
   13cf4:	99 8b       	std	Y+17, r25	; 0x11
   13cf6:	4a 8b       	std	Y+18, r20	; 0x12
   13cf8:	5b 8b       	std	Y+19, r21	; 0x13
   13cfa:	2c 8b       	std	Y+20, r18	; 0x14
   13cfc:	3d 8b       	std	Y+21, r19	; 0x15
   13cfe:	0e 8b       	std	Y+22, r16	; 0x16
	uint16_t w_value;
	uint16_t page_pos;
	bool b_flag_erase;
#if (FLASH_SIZE>0x10000)
	uint32_t page_address;
	uint32_t opt_address = address;
   13d00:	8e 85       	ldd	r24, Y+14	; 0x0e
   13d02:	9f 85       	ldd	r25, Y+15	; 0x0f
   13d04:	a8 89       	ldd	r26, Y+16	; 0x10
   13d06:	b9 89       	ldd	r27, Y+17	; 0x11
   13d08:	88 87       	std	Y+8, r24	; 0x08
   13d0a:	99 87       	std	Y+9, r25	; 0x09
   13d0c:	aa 87       	std	Y+10, r26	; 0x0a
   13d0e:	bb 87       	std	Y+11, r27	; 0x0b
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
   13d10:	88 85       	ldd	r24, Y+8	; 0x08
   13d12:	99 85       	ldd	r25, Y+9	; 0x09
   13d14:	aa 85       	ldd	r26, Y+10	; 0x0a
   13d16:	bb 85       	ldd	r27, Y+11	; 0x0b
   13d18:	88 27       	eor	r24, r24
   13d1a:	9e 7f       	andi	r25, 0xFE	; 254
   13d1c:	8c 83       	std	Y+4, r24	; 0x04
   13d1e:	9d 83       	std	Y+5, r25	; 0x05
   13d20:	ae 83       	std	Y+6, r26	; 0x06
   13d22:	bf 83       	std	Y+7, r27	; 0x07

	// For each page
	while ( len ) {
   13d24:	b8 c0       	rjmp	.+368    	; 0x13e96 <nvm_flash_erase_and_write_buffer+0x1b8>
		b_flag_erase = false;
   13d26:	1b 82       	std	Y+3, r1	; 0x03

		nvm_wait_until_ready();
   13d28:	6f dc       	rcall	.-1826   	; 0x13608 <nvm_wait_until_ready>
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
   13d2a:	19 82       	std	Y+1, r1	; 0x01
   13d2c:	1a 82       	std	Y+2, r1	; 0x02
   13d2e:	95 c0       	rjmp	.+298    	; 0x13e5a <nvm_flash_erase_and_write_buffer+0x17c>
			if (b_blank_check) {
   13d30:	8e 89       	ldd	r24, Y+22	; 0x16
   13d32:	88 23       	and	r24, r24
   13d34:	81 f0       	breq	.+32     	; 0x13d56 <nvm_flash_erase_and_write_buffer+0x78>
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
   13d36:	8c 81       	ldd	r24, Y+4	; 0x04
   13d38:	9d 81       	ldd	r25, Y+5	; 0x05
   13d3a:	ae 81       	ldd	r26, Y+6	; 0x06
   13d3c:	bf 81       	ldd	r27, Y+7	; 0x07
   13d3e:	bc 01       	movw	r22, r24
   13d40:	cd 01       	movw	r24, r26
   13d42:	f7 dc       	rcall	.-1554   	; 0x13732 <nvm_flash_read_word>
   13d44:	8c 87       	std	Y+12, r24	; 0x0c
   13d46:	9d 87       	std	Y+13, r25	; 0x0d
				if (w_value!=0xFFFF) {
   13d48:	8c 85       	ldd	r24, Y+12	; 0x0c
   13d4a:	9d 85       	ldd	r25, Y+13	; 0x0d
   13d4c:	01 96       	adiw	r24, 0x01	; 1
   13d4e:	39 f0       	breq	.+14     	; 0x13d5e <nvm_flash_erase_and_write_buffer+0x80>
					b_flag_erase = true; // The page is not empty
   13d50:	81 e0       	ldi	r24, 0x01	; 1
   13d52:	8b 83       	std	Y+3, r24	; 0x03
   13d54:	04 c0       	rjmp	.+8      	; 0x13d5e <nvm_flash_erase_and_write_buffer+0x80>
				}
			}else{
				w_value = 0xFFFF;
   13d56:	8f ef       	ldi	r24, 0xFF	; 255
   13d58:	9f ef       	ldi	r25, 0xFF	; 255
   13d5a:	8c 87       	std	Y+12, r24	; 0x0c
   13d5c:	9d 87       	std	Y+13, r25	; 0x0d
			}

			// Update flash buffer
			if (len) {
   13d5e:	8c 89       	ldd	r24, Y+20	; 0x14
   13d60:	9d 89       	ldd	r25, Y+21	; 0x15
   13d62:	89 2b       	or	r24, r25
   13d64:	51 f1       	breq	.+84     	; 0x13dba <nvm_flash_erase_and_write_buffer+0xdc>
				if (opt_address == page_address) {
   13d66:	28 85       	ldd	r18, Y+8	; 0x08
   13d68:	39 85       	ldd	r19, Y+9	; 0x09
   13d6a:	4a 85       	ldd	r20, Y+10	; 0x0a
   13d6c:	5b 85       	ldd	r21, Y+11	; 0x0b
   13d6e:	8c 81       	ldd	r24, Y+4	; 0x04
   13d70:	9d 81       	ldd	r25, Y+5	; 0x05
   13d72:	ae 81       	ldd	r26, Y+6	; 0x06
   13d74:	bf 81       	ldd	r27, Y+7	; 0x07
   13d76:	28 17       	cp	r18, r24
   13d78:	39 07       	cpc	r19, r25
   13d7a:	4a 07       	cpc	r20, r26
   13d7c:	5b 07       	cpc	r21, r27
   13d7e:	e9 f4       	brne	.+58     	; 0x13dba <nvm_flash_erase_and_write_buffer+0xdc>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
   13d80:	8c 89       	ldd	r24, Y+20	; 0x14
   13d82:	9d 89       	ldd	r25, Y+21	; 0x15
   13d84:	01 97       	sbiw	r24, 0x01	; 1
   13d86:	8c 8b       	std	Y+20, r24	; 0x14
   13d88:	9d 8b       	std	Y+21, r25	; 0x15
					opt_address++;
   13d8a:	88 85       	ldd	r24, Y+8	; 0x08
   13d8c:	99 85       	ldd	r25, Y+9	; 0x09
   13d8e:	aa 85       	ldd	r26, Y+10	; 0x0a
   13d90:	bb 85       	ldd	r27, Y+11	; 0x0b
   13d92:	01 96       	adiw	r24, 0x01	; 1
   13d94:	a1 1d       	adc	r26, r1
   13d96:	b1 1d       	adc	r27, r1
   13d98:	88 87       	std	Y+8, r24	; 0x08
   13d9a:	99 87       	std	Y+9, r25	; 0x09
   13d9c:	aa 87       	std	Y+10, r26	; 0x0a
   13d9e:	bb 87       	std	Y+11, r27	; 0x0b
					LSB(w_value)=*(uint8_t*)buf;
   13da0:	ce 01       	movw	r24, r28
   13da2:	0c 96       	adiw	r24, 0x0c	; 12
   13da4:	2a 89       	ldd	r18, Y+18	; 0x12
   13da6:	3b 89       	ldd	r19, Y+19	; 0x13
   13da8:	f9 01       	movw	r30, r18
   13daa:	20 81       	ld	r18, Z
   13dac:	fc 01       	movw	r30, r24
   13dae:	20 83       	st	Z, r18
					buf=(uint8_t*)buf+1;
   13db0:	8a 89       	ldd	r24, Y+18	; 0x12
   13db2:	9b 89       	ldd	r25, Y+19	; 0x13
   13db4:	01 96       	adiw	r24, 0x01	; 1
   13db6:	8a 8b       	std	Y+18, r24	; 0x12
   13db8:	9b 8b       	std	Y+19, r25	; 0x13
				}
			}
			if (len) {
   13dba:	8c 89       	ldd	r24, Y+20	; 0x14
   13dbc:	9d 89       	ldd	r25, Y+21	; 0x15
   13dbe:	89 2b       	or	r24, r25
   13dc0:	89 f1       	breq	.+98     	; 0x13e24 <nvm_flash_erase_and_write_buffer+0x146>
				if (opt_address == (page_address+1)) {
   13dc2:	8c 81       	ldd	r24, Y+4	; 0x04
   13dc4:	9d 81       	ldd	r25, Y+5	; 0x05
   13dc6:	ae 81       	ldd	r26, Y+6	; 0x06
   13dc8:	bf 81       	ldd	r27, Y+7	; 0x07
   13dca:	9c 01       	movw	r18, r24
   13dcc:	ad 01       	movw	r20, r26
   13dce:	2f 5f       	subi	r18, 0xFF	; 255
   13dd0:	3f 4f       	sbci	r19, 0xFF	; 255
   13dd2:	4f 4f       	sbci	r20, 0xFF	; 255
   13dd4:	5f 4f       	sbci	r21, 0xFF	; 255
   13dd6:	88 85       	ldd	r24, Y+8	; 0x08
   13dd8:	99 85       	ldd	r25, Y+9	; 0x09
   13dda:	aa 85       	ldd	r26, Y+10	; 0x0a
   13ddc:	bb 85       	ldd	r27, Y+11	; 0x0b
   13dde:	28 17       	cp	r18, r24
   13de0:	39 07       	cpc	r19, r25
   13de2:	4a 07       	cpc	r20, r26
   13de4:	5b 07       	cpc	r21, r27
   13de6:	f1 f4       	brne	.+60     	; 0x13e24 <nvm_flash_erase_and_write_buffer+0x146>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
   13de8:	8c 89       	ldd	r24, Y+20	; 0x14
   13dea:	9d 89       	ldd	r25, Y+21	; 0x15
   13dec:	01 97       	sbiw	r24, 0x01	; 1
   13dee:	8c 8b       	std	Y+20, r24	; 0x14
   13df0:	9d 8b       	std	Y+21, r25	; 0x15
					opt_address++;
   13df2:	88 85       	ldd	r24, Y+8	; 0x08
   13df4:	99 85       	ldd	r25, Y+9	; 0x09
   13df6:	aa 85       	ldd	r26, Y+10	; 0x0a
   13df8:	bb 85       	ldd	r27, Y+11	; 0x0b
   13dfa:	01 96       	adiw	r24, 0x01	; 1
   13dfc:	a1 1d       	adc	r26, r1
   13dfe:	b1 1d       	adc	r27, r1
   13e00:	88 87       	std	Y+8, r24	; 0x08
   13e02:	99 87       	std	Y+9, r25	; 0x09
   13e04:	aa 87       	std	Y+10, r26	; 0x0a
   13e06:	bb 87       	std	Y+11, r27	; 0x0b
					MSB(w_value)=*(uint8_t*)buf;
   13e08:	ce 01       	movw	r24, r28
   13e0a:	0c 96       	adiw	r24, 0x0c	; 12
   13e0c:	01 96       	adiw	r24, 0x01	; 1
   13e0e:	2a 89       	ldd	r18, Y+18	; 0x12
   13e10:	3b 89       	ldd	r19, Y+19	; 0x13
   13e12:	f9 01       	movw	r30, r18
   13e14:	20 81       	ld	r18, Z
   13e16:	fc 01       	movw	r30, r24
   13e18:	20 83       	st	Z, r18
					buf=(uint8_t*)buf+1;
   13e1a:	8a 89       	ldd	r24, Y+18	; 0x12
   13e1c:	9b 89       	ldd	r25, Y+19	; 0x13
   13e1e:	01 96       	adiw	r24, 0x01	; 1
   13e20:	8a 8b       	std	Y+18, r24	; 0x12
   13e22:	9b 8b       	std	Y+19, r25	; 0x13
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
   13e24:	2c 85       	ldd	r18, Y+12	; 0x0c
   13e26:	3d 85       	ldd	r19, Y+13	; 0x0d
   13e28:	8c 81       	ldd	r24, Y+4	; 0x04
   13e2a:	9d 81       	ldd	r25, Y+5	; 0x05
   13e2c:	ae 81       	ldd	r26, Y+6	; 0x06
   13e2e:	bf 81       	ldd	r27, Y+7	; 0x07
   13e30:	a9 01       	movw	r20, r18
   13e32:	bc 01       	movw	r22, r24
   13e34:	cd 01       	movw	r24, r26
   13e36:	0e 94 c9 b9 	call	0x17392	; 0x17392 <nvm_flash_load_word_to_buffer>
			page_address+=2;
   13e3a:	8c 81       	ldd	r24, Y+4	; 0x04
   13e3c:	9d 81       	ldd	r25, Y+5	; 0x05
   13e3e:	ae 81       	ldd	r26, Y+6	; 0x06
   13e40:	bf 81       	ldd	r27, Y+7	; 0x07
   13e42:	02 96       	adiw	r24, 0x02	; 2
   13e44:	a1 1d       	adc	r26, r1
   13e46:	b1 1d       	adc	r27, r1
   13e48:	8c 83       	std	Y+4, r24	; 0x04
   13e4a:	9d 83       	std	Y+5, r25	; 0x05
   13e4c:	ae 83       	std	Y+6, r26	; 0x06
   13e4e:	bf 83       	std	Y+7, r27	; 0x07
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
   13e50:	89 81       	ldd	r24, Y+1	; 0x01
   13e52:	9a 81       	ldd	r25, Y+2	; 0x02
   13e54:	02 96       	adiw	r24, 0x02	; 2
   13e56:	89 83       	std	Y+1, r24	; 0x01
   13e58:	9a 83       	std	Y+2, r25	; 0x02
   13e5a:	89 81       	ldd	r24, Y+1	; 0x01
   13e5c:	9a 81       	ldd	r25, Y+2	; 0x02
   13e5e:	81 15       	cp	r24, r1
   13e60:	92 40       	sbci	r25, 0x02	; 2
   13e62:	08 f4       	brcc	.+2      	; 0x13e66 <nvm_flash_erase_and_write_buffer+0x188>
   13e64:	65 cf       	rjmp	.-310    	; 0x13d30 <nvm_flash_erase_and_write_buffer+0x52>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
   13e66:	8b 81       	ldd	r24, Y+3	; 0x03
   13e68:	88 23       	and	r24, r24
   13e6a:	59 f0       	breq	.+22     	; 0x13e82 <nvm_flash_erase_and_write_buffer+0x1a4>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
   13e6c:	8c 81       	ldd	r24, Y+4	; 0x04
   13e6e:	9d 81       	ldd	r25, Y+5	; 0x05
   13e70:	ae 81       	ldd	r26, Y+6	; 0x06
   13e72:	bf 81       	ldd	r27, Y+7	; 0x07
   13e74:	92 50       	subi	r25, 0x02	; 2
   13e76:	a1 09       	sbc	r26, r1
   13e78:	b1 09       	sbc	r27, r1
   13e7a:	bc 01       	movw	r22, r24
   13e7c:	cd 01       	movw	r24, r26
   13e7e:	9b dc       	rcall	.-1738   	; 0x137b6 <nvm_flash_atomic_write_app_page>
   13e80:	0a c0       	rjmp	.+20     	; 0x13e96 <nvm_flash_erase_and_write_buffer+0x1b8>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
   13e82:	8c 81       	ldd	r24, Y+4	; 0x04
   13e84:	9d 81       	ldd	r25, Y+5	; 0x05
   13e86:	ae 81       	ldd	r26, Y+6	; 0x06
   13e88:	bf 81       	ldd	r27, Y+7	; 0x07
   13e8a:	92 50       	subi	r25, 0x02	; 2
   13e8c:	a1 09       	sbc	r26, r1
   13e8e:	b1 09       	sbc	r27, r1
   13e90:	bc 01       	movw	r22, r24
   13e92:	cd 01       	movw	r24, r26
   13e94:	75 dc       	rcall	.-1814   	; 0x13780 <nvm_flash_split_write_app_page>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
   13e96:	8c 89       	ldd	r24, Y+20	; 0x14
   13e98:	9d 89       	ldd	r25, Y+21	; 0x15
   13e9a:	89 2b       	or	r24, r25
   13e9c:	09 f0       	breq	.+2      	; 0x13ea0 <nvm_flash_erase_and_write_buffer+0x1c2>
   13e9e:	43 cf       	rjmp	.-378    	; 0x13d26 <nvm_flash_erase_and_write_buffer+0x48>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
   13ea0:	00 00       	nop
   13ea2:	66 96       	adiw	r28, 0x16	; 22
   13ea4:	cd bf       	out	0x3d, r28	; 61
   13ea6:	de bf       	out	0x3e, r29	; 62
   13ea8:	df 91       	pop	r29
   13eaa:	cf 91       	pop	r28
   13eac:	0f 91       	pop	r16
   13eae:	08 95       	ret

00013eb0 <cpu_irq_save>:
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_err_callback = callback;
	} else
#endif
	{}
}
   13eb0:	cf 93       	push	r28
   13eb2:	df 93       	push	r29
   13eb4:	1f 92       	push	r1
   13eb6:	cd b7       	in	r28, 0x3d	; 61
   13eb8:	de b7       	in	r29, 0x3e	; 62
   13eba:	8f e3       	ldi	r24, 0x3F	; 63
   13ebc:	90 e0       	ldi	r25, 0x00	; 0
   13ebe:	fc 01       	movw	r30, r24
   13ec0:	80 81       	ld	r24, Z
   13ec2:	89 83       	std	Y+1, r24	; 0x01
   13ec4:	f8 94       	cli
   13ec6:	89 81       	ldd	r24, Y+1	; 0x01
   13ec8:	0f 90       	pop	r0
   13eca:	df 91       	pop	r29
   13ecc:	cf 91       	pop	r28
   13ece:	08 95       	ret

00013ed0 <cpu_irq_restore>:
   13ed0:	cf 93       	push	r28
   13ed2:	df 93       	push	r29
   13ed4:	1f 92       	push	r1
   13ed6:	cd b7       	in	r28, 0x3d	; 61
   13ed8:	de b7       	in	r29, 0x3e	; 62
   13eda:	89 83       	std	Y+1, r24	; 0x01
   13edc:	8f e3       	ldi	r24, 0x3F	; 63
   13ede:	90 e0       	ldi	r25, 0x00	; 0
   13ee0:	29 81       	ldd	r18, Y+1	; 0x01
   13ee2:	fc 01       	movw	r30, r24
   13ee4:	20 83       	st	Z, r18
   13ee6:	00 00       	nop
   13ee8:	0f 90       	pop	r0
   13eea:	df 91       	pop	r29
   13eec:	cf 91       	pop	r28
   13eee:	08 95       	ret

00013ef0 <sleepmgr_lock_mode>:
   13ef0:	cf 93       	push	r28
   13ef2:	df 93       	push	r29
   13ef4:	1f 92       	push	r1
   13ef6:	1f 92       	push	r1
   13ef8:	cd b7       	in	r28, 0x3d	; 61
   13efa:	de b7       	in	r29, 0x3e	; 62
   13efc:	8a 83       	std	Y+2, r24	; 0x02
   13efe:	8a 81       	ldd	r24, Y+2	; 0x02
   13f00:	88 2f       	mov	r24, r24
   13f02:	90 e0       	ldi	r25, 0x00	; 0
   13f04:	89 54       	subi	r24, 0x49	; 73
   13f06:	96 4d       	sbci	r25, 0xD6	; 214
   13f08:	fc 01       	movw	r30, r24
   13f0a:	80 81       	ld	r24, Z
   13f0c:	8f 3f       	cpi	r24, 0xFF	; 255
   13f0e:	09 f4       	brne	.+2      	; 0x13f12 <sleepmgr_lock_mode+0x22>
   13f10:	ff cf       	rjmp	.-2      	; 0x13f10 <sleepmgr_lock_mode+0x20>
   13f12:	ce df       	rcall	.-100    	; 0x13eb0 <cpu_irq_save>
   13f14:	89 83       	std	Y+1, r24	; 0x01
   13f16:	8a 81       	ldd	r24, Y+2	; 0x02
   13f18:	88 2f       	mov	r24, r24
   13f1a:	90 e0       	ldi	r25, 0x00	; 0
   13f1c:	9c 01       	movw	r18, r24
   13f1e:	29 54       	subi	r18, 0x49	; 73
   13f20:	36 4d       	sbci	r19, 0xD6	; 214
   13f22:	f9 01       	movw	r30, r18
   13f24:	20 81       	ld	r18, Z
   13f26:	2f 5f       	subi	r18, 0xFF	; 255
   13f28:	89 54       	subi	r24, 0x49	; 73
   13f2a:	96 4d       	sbci	r25, 0xD6	; 214
   13f2c:	fc 01       	movw	r30, r24
   13f2e:	20 83       	st	Z, r18
   13f30:	89 81       	ldd	r24, Y+1	; 0x01
   13f32:	ce df       	rcall	.-100    	; 0x13ed0 <cpu_irq_restore>
   13f34:	00 00       	nop
   13f36:	0f 90       	pop	r0
   13f38:	0f 90       	pop	r0
   13f3a:	df 91       	pop	r29
   13f3c:	cf 91       	pop	r28
   13f3e:	08 95       	ret

00013f40 <__vector_14>:
   13f40:	1f 92       	push	r1
   13f42:	0f 92       	push	r0
   13f44:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   13f48:	0f 92       	push	r0
   13f4a:	11 24       	eor	r1, r1
   13f4c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   13f50:	0f 92       	push	r0
   13f52:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   13f56:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   13f5a:	0f 92       	push	r0
   13f5c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   13f60:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   13f64:	0f 92       	push	r0
   13f66:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   13f6a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   13f6e:	0f 92       	push	r0
   13f70:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   13f74:	2f 93       	push	r18
   13f76:	3f 93       	push	r19
   13f78:	4f 93       	push	r20
   13f7a:	5f 93       	push	r21
   13f7c:	6f 93       	push	r22
   13f7e:	7f 93       	push	r23
   13f80:	8f 93       	push	r24
   13f82:	9f 93       	push	r25
   13f84:	af 93       	push	r26
   13f86:	bf 93       	push	r27
   13f88:	ef 93       	push	r30
   13f8a:	ff 93       	push	r31
   13f8c:	cf 93       	push	r28
   13f8e:	df 93       	push	r29
   13f90:	cd b7       	in	r28, 0x3d	; 61
   13f92:	de b7       	in	r29, 0x3e	; 62
   13f94:	80 91 1f 25 	lds	r24, 0x251F	; 0x80251f <tc_tcc0_ovf_callback>
   13f98:	90 91 20 25 	lds	r25, 0x2520	; 0x802520 <tc_tcc0_ovf_callback+0x1>
   13f9c:	89 2b       	or	r24, r25
   13f9e:	31 f0       	breq	.+12     	; 0x13fac <__vector_14+0x6c>
   13fa0:	80 91 1f 25 	lds	r24, 0x251F	; 0x80251f <tc_tcc0_ovf_callback>
   13fa4:	90 91 20 25 	lds	r25, 0x2520	; 0x802520 <tc_tcc0_ovf_callback+0x1>
   13fa8:	fc 01       	movw	r30, r24
   13faa:	19 95       	eicall
   13fac:	00 00       	nop
   13fae:	df 91       	pop	r29
   13fb0:	cf 91       	pop	r28
   13fb2:	ff 91       	pop	r31
   13fb4:	ef 91       	pop	r30
   13fb6:	bf 91       	pop	r27
   13fb8:	af 91       	pop	r26
   13fba:	9f 91       	pop	r25
   13fbc:	8f 91       	pop	r24
   13fbe:	7f 91       	pop	r23
   13fc0:	6f 91       	pop	r22
   13fc2:	5f 91       	pop	r21
   13fc4:	4f 91       	pop	r20
   13fc6:	3f 91       	pop	r19
   13fc8:	2f 91       	pop	r18
   13fca:	0f 90       	pop	r0
   13fcc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   13fd0:	0f 90       	pop	r0
   13fd2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   13fd6:	0f 90       	pop	r0
   13fd8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   13fdc:	0f 90       	pop	r0
   13fde:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   13fe2:	0f 90       	pop	r0
   13fe4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   13fe8:	0f 90       	pop	r0
   13fea:	1f 90       	pop	r1
   13fec:	18 95       	reti

00013fee <__vector_15>:
   13fee:	1f 92       	push	r1
   13ff0:	0f 92       	push	r0
   13ff2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   13ff6:	0f 92       	push	r0
   13ff8:	11 24       	eor	r1, r1
   13ffa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   13ffe:	0f 92       	push	r0
   14000:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14004:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14008:	0f 92       	push	r0
   1400a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1400e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14012:	0f 92       	push	r0
   14014:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14018:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1401c:	0f 92       	push	r0
   1401e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14022:	2f 93       	push	r18
   14024:	3f 93       	push	r19
   14026:	4f 93       	push	r20
   14028:	5f 93       	push	r21
   1402a:	6f 93       	push	r22
   1402c:	7f 93       	push	r23
   1402e:	8f 93       	push	r24
   14030:	9f 93       	push	r25
   14032:	af 93       	push	r26
   14034:	bf 93       	push	r27
   14036:	ef 93       	push	r30
   14038:	ff 93       	push	r31
   1403a:	cf 93       	push	r28
   1403c:	df 93       	push	r29
   1403e:	cd b7       	in	r28, 0x3d	; 61
   14040:	de b7       	in	r29, 0x3e	; 62
   14042:	80 91 21 25 	lds	r24, 0x2521	; 0x802521 <tc_tcc0_err_callback>
   14046:	90 91 22 25 	lds	r25, 0x2522	; 0x802522 <tc_tcc0_err_callback+0x1>
   1404a:	89 2b       	or	r24, r25
   1404c:	31 f0       	breq	.+12     	; 0x1405a <__vector_15+0x6c>
   1404e:	80 91 21 25 	lds	r24, 0x2521	; 0x802521 <tc_tcc0_err_callback>
   14052:	90 91 22 25 	lds	r25, 0x2522	; 0x802522 <tc_tcc0_err_callback+0x1>
   14056:	fc 01       	movw	r30, r24
   14058:	19 95       	eicall
   1405a:	00 00       	nop
   1405c:	df 91       	pop	r29
   1405e:	cf 91       	pop	r28
   14060:	ff 91       	pop	r31
   14062:	ef 91       	pop	r30
   14064:	bf 91       	pop	r27
   14066:	af 91       	pop	r26
   14068:	9f 91       	pop	r25
   1406a:	8f 91       	pop	r24
   1406c:	7f 91       	pop	r23
   1406e:	6f 91       	pop	r22
   14070:	5f 91       	pop	r21
   14072:	4f 91       	pop	r20
   14074:	3f 91       	pop	r19
   14076:	2f 91       	pop	r18
   14078:	0f 90       	pop	r0
   1407a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1407e:	0f 90       	pop	r0
   14080:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14084:	0f 90       	pop	r0
   14086:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1408a:	0f 90       	pop	r0
   1408c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14090:	0f 90       	pop	r0
   14092:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14096:	0f 90       	pop	r0
   14098:	1f 90       	pop	r1
   1409a:	18 95       	reti

0001409c <__vector_16>:
   1409c:	1f 92       	push	r1
   1409e:	0f 92       	push	r0
   140a0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   140a4:	0f 92       	push	r0
   140a6:	11 24       	eor	r1, r1
   140a8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   140ac:	0f 92       	push	r0
   140ae:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   140b2:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   140b6:	0f 92       	push	r0
   140b8:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   140bc:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   140c0:	0f 92       	push	r0
   140c2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   140c6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   140ca:	0f 92       	push	r0
   140cc:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   140d0:	2f 93       	push	r18
   140d2:	3f 93       	push	r19
   140d4:	4f 93       	push	r20
   140d6:	5f 93       	push	r21
   140d8:	6f 93       	push	r22
   140da:	7f 93       	push	r23
   140dc:	8f 93       	push	r24
   140de:	9f 93       	push	r25
   140e0:	af 93       	push	r26
   140e2:	bf 93       	push	r27
   140e4:	ef 93       	push	r30
   140e6:	ff 93       	push	r31
   140e8:	cf 93       	push	r28
   140ea:	df 93       	push	r29
   140ec:	cd b7       	in	r28, 0x3d	; 61
   140ee:	de b7       	in	r29, 0x3e	; 62
   140f0:	80 91 23 25 	lds	r24, 0x2523	; 0x802523 <tc_tcc0_cca_callback>
   140f4:	90 91 24 25 	lds	r25, 0x2524	; 0x802524 <tc_tcc0_cca_callback+0x1>
   140f8:	89 2b       	or	r24, r25
   140fa:	31 f0       	breq	.+12     	; 0x14108 <__vector_16+0x6c>
   140fc:	80 91 23 25 	lds	r24, 0x2523	; 0x802523 <tc_tcc0_cca_callback>
   14100:	90 91 24 25 	lds	r25, 0x2524	; 0x802524 <tc_tcc0_cca_callback+0x1>
   14104:	fc 01       	movw	r30, r24
   14106:	19 95       	eicall
   14108:	00 00       	nop
   1410a:	df 91       	pop	r29
   1410c:	cf 91       	pop	r28
   1410e:	ff 91       	pop	r31
   14110:	ef 91       	pop	r30
   14112:	bf 91       	pop	r27
   14114:	af 91       	pop	r26
   14116:	9f 91       	pop	r25
   14118:	8f 91       	pop	r24
   1411a:	7f 91       	pop	r23
   1411c:	6f 91       	pop	r22
   1411e:	5f 91       	pop	r21
   14120:	4f 91       	pop	r20
   14122:	3f 91       	pop	r19
   14124:	2f 91       	pop	r18
   14126:	0f 90       	pop	r0
   14128:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1412c:	0f 90       	pop	r0
   1412e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14132:	0f 90       	pop	r0
   14134:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14138:	0f 90       	pop	r0
   1413a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1413e:	0f 90       	pop	r0
   14140:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14144:	0f 90       	pop	r0
   14146:	1f 90       	pop	r1
   14148:	18 95       	reti

0001414a <__vector_17>:
   1414a:	1f 92       	push	r1
   1414c:	0f 92       	push	r0
   1414e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14152:	0f 92       	push	r0
   14154:	11 24       	eor	r1, r1
   14156:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1415a:	0f 92       	push	r0
   1415c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14160:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14164:	0f 92       	push	r0
   14166:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1416a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1416e:	0f 92       	push	r0
   14170:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14174:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14178:	0f 92       	push	r0
   1417a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1417e:	2f 93       	push	r18
   14180:	3f 93       	push	r19
   14182:	4f 93       	push	r20
   14184:	5f 93       	push	r21
   14186:	6f 93       	push	r22
   14188:	7f 93       	push	r23
   1418a:	8f 93       	push	r24
   1418c:	9f 93       	push	r25
   1418e:	af 93       	push	r26
   14190:	bf 93       	push	r27
   14192:	ef 93       	push	r30
   14194:	ff 93       	push	r31
   14196:	cf 93       	push	r28
   14198:	df 93       	push	r29
   1419a:	cd b7       	in	r28, 0x3d	; 61
   1419c:	de b7       	in	r29, 0x3e	; 62
   1419e:	80 91 25 25 	lds	r24, 0x2525	; 0x802525 <tc_tcc0_ccb_callback>
   141a2:	90 91 26 25 	lds	r25, 0x2526	; 0x802526 <tc_tcc0_ccb_callback+0x1>
   141a6:	89 2b       	or	r24, r25
   141a8:	31 f0       	breq	.+12     	; 0x141b6 <__vector_17+0x6c>
   141aa:	80 91 25 25 	lds	r24, 0x2525	; 0x802525 <tc_tcc0_ccb_callback>
   141ae:	90 91 26 25 	lds	r25, 0x2526	; 0x802526 <tc_tcc0_ccb_callback+0x1>
   141b2:	fc 01       	movw	r30, r24
   141b4:	19 95       	eicall
   141b6:	00 00       	nop
   141b8:	df 91       	pop	r29
   141ba:	cf 91       	pop	r28
   141bc:	ff 91       	pop	r31
   141be:	ef 91       	pop	r30
   141c0:	bf 91       	pop	r27
   141c2:	af 91       	pop	r26
   141c4:	9f 91       	pop	r25
   141c6:	8f 91       	pop	r24
   141c8:	7f 91       	pop	r23
   141ca:	6f 91       	pop	r22
   141cc:	5f 91       	pop	r21
   141ce:	4f 91       	pop	r20
   141d0:	3f 91       	pop	r19
   141d2:	2f 91       	pop	r18
   141d4:	0f 90       	pop	r0
   141d6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   141da:	0f 90       	pop	r0
   141dc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   141e0:	0f 90       	pop	r0
   141e2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   141e6:	0f 90       	pop	r0
   141e8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   141ec:	0f 90       	pop	r0
   141ee:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   141f2:	0f 90       	pop	r0
   141f4:	1f 90       	pop	r1
   141f6:	18 95       	reti

000141f8 <__vector_18>:
   141f8:	1f 92       	push	r1
   141fa:	0f 92       	push	r0
   141fc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14200:	0f 92       	push	r0
   14202:	11 24       	eor	r1, r1
   14204:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14208:	0f 92       	push	r0
   1420a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1420e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14212:	0f 92       	push	r0
   14214:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14218:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1421c:	0f 92       	push	r0
   1421e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14222:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14226:	0f 92       	push	r0
   14228:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1422c:	2f 93       	push	r18
   1422e:	3f 93       	push	r19
   14230:	4f 93       	push	r20
   14232:	5f 93       	push	r21
   14234:	6f 93       	push	r22
   14236:	7f 93       	push	r23
   14238:	8f 93       	push	r24
   1423a:	9f 93       	push	r25
   1423c:	af 93       	push	r26
   1423e:	bf 93       	push	r27
   14240:	ef 93       	push	r30
   14242:	ff 93       	push	r31
   14244:	cf 93       	push	r28
   14246:	df 93       	push	r29
   14248:	cd b7       	in	r28, 0x3d	; 61
   1424a:	de b7       	in	r29, 0x3e	; 62
   1424c:	80 91 27 25 	lds	r24, 0x2527	; 0x802527 <tc_tcc0_ccc_callback>
   14250:	90 91 28 25 	lds	r25, 0x2528	; 0x802528 <tc_tcc0_ccc_callback+0x1>
   14254:	89 2b       	or	r24, r25
   14256:	31 f0       	breq	.+12     	; 0x14264 <__vector_18+0x6c>
   14258:	80 91 27 25 	lds	r24, 0x2527	; 0x802527 <tc_tcc0_ccc_callback>
   1425c:	90 91 28 25 	lds	r25, 0x2528	; 0x802528 <tc_tcc0_ccc_callback+0x1>
   14260:	fc 01       	movw	r30, r24
   14262:	19 95       	eicall
   14264:	00 00       	nop
   14266:	df 91       	pop	r29
   14268:	cf 91       	pop	r28
   1426a:	ff 91       	pop	r31
   1426c:	ef 91       	pop	r30
   1426e:	bf 91       	pop	r27
   14270:	af 91       	pop	r26
   14272:	9f 91       	pop	r25
   14274:	8f 91       	pop	r24
   14276:	7f 91       	pop	r23
   14278:	6f 91       	pop	r22
   1427a:	5f 91       	pop	r21
   1427c:	4f 91       	pop	r20
   1427e:	3f 91       	pop	r19
   14280:	2f 91       	pop	r18
   14282:	0f 90       	pop	r0
   14284:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14288:	0f 90       	pop	r0
   1428a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1428e:	0f 90       	pop	r0
   14290:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14294:	0f 90       	pop	r0
   14296:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1429a:	0f 90       	pop	r0
   1429c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   142a0:	0f 90       	pop	r0
   142a2:	1f 90       	pop	r1
   142a4:	18 95       	reti

000142a6 <__vector_19>:
   142a6:	1f 92       	push	r1
   142a8:	0f 92       	push	r0
   142aa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   142ae:	0f 92       	push	r0
   142b0:	11 24       	eor	r1, r1
   142b2:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   142b6:	0f 92       	push	r0
   142b8:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   142bc:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   142c0:	0f 92       	push	r0
   142c2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   142c6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   142ca:	0f 92       	push	r0
   142cc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   142d0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   142d4:	0f 92       	push	r0
   142d6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   142da:	2f 93       	push	r18
   142dc:	3f 93       	push	r19
   142de:	4f 93       	push	r20
   142e0:	5f 93       	push	r21
   142e2:	6f 93       	push	r22
   142e4:	7f 93       	push	r23
   142e6:	8f 93       	push	r24
   142e8:	9f 93       	push	r25
   142ea:	af 93       	push	r26
   142ec:	bf 93       	push	r27
   142ee:	ef 93       	push	r30
   142f0:	ff 93       	push	r31
   142f2:	cf 93       	push	r28
   142f4:	df 93       	push	r29
   142f6:	cd b7       	in	r28, 0x3d	; 61
   142f8:	de b7       	in	r29, 0x3e	; 62
   142fa:	80 91 29 25 	lds	r24, 0x2529	; 0x802529 <tc_tcc0_ccd_callback>
   142fe:	90 91 2a 25 	lds	r25, 0x252A	; 0x80252a <tc_tcc0_ccd_callback+0x1>
   14302:	89 2b       	or	r24, r25
   14304:	31 f0       	breq	.+12     	; 0x14312 <__vector_19+0x6c>
   14306:	80 91 29 25 	lds	r24, 0x2529	; 0x802529 <tc_tcc0_ccd_callback>
   1430a:	90 91 2a 25 	lds	r25, 0x252A	; 0x80252a <tc_tcc0_ccd_callback+0x1>
   1430e:	fc 01       	movw	r30, r24
   14310:	19 95       	eicall
   14312:	00 00       	nop
   14314:	df 91       	pop	r29
   14316:	cf 91       	pop	r28
   14318:	ff 91       	pop	r31
   1431a:	ef 91       	pop	r30
   1431c:	bf 91       	pop	r27
   1431e:	af 91       	pop	r26
   14320:	9f 91       	pop	r25
   14322:	8f 91       	pop	r24
   14324:	7f 91       	pop	r23
   14326:	6f 91       	pop	r22
   14328:	5f 91       	pop	r21
   1432a:	4f 91       	pop	r20
   1432c:	3f 91       	pop	r19
   1432e:	2f 91       	pop	r18
   14330:	0f 90       	pop	r0
   14332:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14336:	0f 90       	pop	r0
   14338:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1433c:	0f 90       	pop	r0
   1433e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14342:	0f 90       	pop	r0
   14344:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14348:	0f 90       	pop	r0
   1434a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1434e:	0f 90       	pop	r0
   14350:	1f 90       	pop	r1
   14352:	18 95       	reti

00014354 <__vector_20>:
   14354:	1f 92       	push	r1
   14356:	0f 92       	push	r0
   14358:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1435c:	0f 92       	push	r0
   1435e:	11 24       	eor	r1, r1
   14360:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14364:	0f 92       	push	r0
   14366:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1436a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1436e:	0f 92       	push	r0
   14370:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14374:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14378:	0f 92       	push	r0
   1437a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1437e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14382:	0f 92       	push	r0
   14384:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14388:	2f 93       	push	r18
   1438a:	3f 93       	push	r19
   1438c:	4f 93       	push	r20
   1438e:	5f 93       	push	r21
   14390:	6f 93       	push	r22
   14392:	7f 93       	push	r23
   14394:	8f 93       	push	r24
   14396:	9f 93       	push	r25
   14398:	af 93       	push	r26
   1439a:	bf 93       	push	r27
   1439c:	ef 93       	push	r30
   1439e:	ff 93       	push	r31
   143a0:	cf 93       	push	r28
   143a2:	df 93       	push	r29
   143a4:	cd b7       	in	r28, 0x3d	; 61
   143a6:	de b7       	in	r29, 0x3e	; 62
   143a8:	80 91 2b 25 	lds	r24, 0x252B	; 0x80252b <tc_tcc1_ovf_callback>
   143ac:	90 91 2c 25 	lds	r25, 0x252C	; 0x80252c <tc_tcc1_ovf_callback+0x1>
   143b0:	89 2b       	or	r24, r25
   143b2:	31 f0       	breq	.+12     	; 0x143c0 <__vector_20+0x6c>
   143b4:	80 91 2b 25 	lds	r24, 0x252B	; 0x80252b <tc_tcc1_ovf_callback>
   143b8:	90 91 2c 25 	lds	r25, 0x252C	; 0x80252c <tc_tcc1_ovf_callback+0x1>
   143bc:	fc 01       	movw	r30, r24
   143be:	19 95       	eicall
   143c0:	00 00       	nop
   143c2:	df 91       	pop	r29
   143c4:	cf 91       	pop	r28
   143c6:	ff 91       	pop	r31
   143c8:	ef 91       	pop	r30
   143ca:	bf 91       	pop	r27
   143cc:	af 91       	pop	r26
   143ce:	9f 91       	pop	r25
   143d0:	8f 91       	pop	r24
   143d2:	7f 91       	pop	r23
   143d4:	6f 91       	pop	r22
   143d6:	5f 91       	pop	r21
   143d8:	4f 91       	pop	r20
   143da:	3f 91       	pop	r19
   143dc:	2f 91       	pop	r18
   143de:	0f 90       	pop	r0
   143e0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   143e4:	0f 90       	pop	r0
   143e6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   143ea:	0f 90       	pop	r0
   143ec:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   143f0:	0f 90       	pop	r0
   143f2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   143f6:	0f 90       	pop	r0
   143f8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   143fc:	0f 90       	pop	r0
   143fe:	1f 90       	pop	r1
   14400:	18 95       	reti

00014402 <__vector_21>:
   14402:	1f 92       	push	r1
   14404:	0f 92       	push	r0
   14406:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1440a:	0f 92       	push	r0
   1440c:	11 24       	eor	r1, r1
   1440e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14412:	0f 92       	push	r0
   14414:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14418:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1441c:	0f 92       	push	r0
   1441e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14422:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14426:	0f 92       	push	r0
   14428:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1442c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14430:	0f 92       	push	r0
   14432:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14436:	2f 93       	push	r18
   14438:	3f 93       	push	r19
   1443a:	4f 93       	push	r20
   1443c:	5f 93       	push	r21
   1443e:	6f 93       	push	r22
   14440:	7f 93       	push	r23
   14442:	8f 93       	push	r24
   14444:	9f 93       	push	r25
   14446:	af 93       	push	r26
   14448:	bf 93       	push	r27
   1444a:	ef 93       	push	r30
   1444c:	ff 93       	push	r31
   1444e:	cf 93       	push	r28
   14450:	df 93       	push	r29
   14452:	cd b7       	in	r28, 0x3d	; 61
   14454:	de b7       	in	r29, 0x3e	; 62
   14456:	80 91 2d 25 	lds	r24, 0x252D	; 0x80252d <tc_tcc1_err_callback>
   1445a:	90 91 2e 25 	lds	r25, 0x252E	; 0x80252e <tc_tcc1_err_callback+0x1>
   1445e:	89 2b       	or	r24, r25
   14460:	31 f0       	breq	.+12     	; 0x1446e <__vector_21+0x6c>
   14462:	80 91 2d 25 	lds	r24, 0x252D	; 0x80252d <tc_tcc1_err_callback>
   14466:	90 91 2e 25 	lds	r25, 0x252E	; 0x80252e <tc_tcc1_err_callback+0x1>
   1446a:	fc 01       	movw	r30, r24
   1446c:	19 95       	eicall
   1446e:	00 00       	nop
   14470:	df 91       	pop	r29
   14472:	cf 91       	pop	r28
   14474:	ff 91       	pop	r31
   14476:	ef 91       	pop	r30
   14478:	bf 91       	pop	r27
   1447a:	af 91       	pop	r26
   1447c:	9f 91       	pop	r25
   1447e:	8f 91       	pop	r24
   14480:	7f 91       	pop	r23
   14482:	6f 91       	pop	r22
   14484:	5f 91       	pop	r21
   14486:	4f 91       	pop	r20
   14488:	3f 91       	pop	r19
   1448a:	2f 91       	pop	r18
   1448c:	0f 90       	pop	r0
   1448e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14492:	0f 90       	pop	r0
   14494:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14498:	0f 90       	pop	r0
   1449a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1449e:	0f 90       	pop	r0
   144a0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   144a4:	0f 90       	pop	r0
   144a6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   144aa:	0f 90       	pop	r0
   144ac:	1f 90       	pop	r1
   144ae:	18 95       	reti

000144b0 <__vector_22>:
   144b0:	1f 92       	push	r1
   144b2:	0f 92       	push	r0
   144b4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   144b8:	0f 92       	push	r0
   144ba:	11 24       	eor	r1, r1
   144bc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   144c0:	0f 92       	push	r0
   144c2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   144c6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   144ca:	0f 92       	push	r0
   144cc:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   144d0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   144d4:	0f 92       	push	r0
   144d6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   144da:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   144de:	0f 92       	push	r0
   144e0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   144e4:	2f 93       	push	r18
   144e6:	3f 93       	push	r19
   144e8:	4f 93       	push	r20
   144ea:	5f 93       	push	r21
   144ec:	6f 93       	push	r22
   144ee:	7f 93       	push	r23
   144f0:	8f 93       	push	r24
   144f2:	9f 93       	push	r25
   144f4:	af 93       	push	r26
   144f6:	bf 93       	push	r27
   144f8:	ef 93       	push	r30
   144fa:	ff 93       	push	r31
   144fc:	cf 93       	push	r28
   144fe:	df 93       	push	r29
   14500:	cd b7       	in	r28, 0x3d	; 61
   14502:	de b7       	in	r29, 0x3e	; 62
   14504:	80 91 2f 25 	lds	r24, 0x252F	; 0x80252f <tc_tcc1_cca_callback>
   14508:	90 91 30 25 	lds	r25, 0x2530	; 0x802530 <tc_tcc1_cca_callback+0x1>
   1450c:	89 2b       	or	r24, r25
   1450e:	31 f0       	breq	.+12     	; 0x1451c <__vector_22+0x6c>
   14510:	80 91 2f 25 	lds	r24, 0x252F	; 0x80252f <tc_tcc1_cca_callback>
   14514:	90 91 30 25 	lds	r25, 0x2530	; 0x802530 <tc_tcc1_cca_callback+0x1>
   14518:	fc 01       	movw	r30, r24
   1451a:	19 95       	eicall
   1451c:	00 00       	nop
   1451e:	df 91       	pop	r29
   14520:	cf 91       	pop	r28
   14522:	ff 91       	pop	r31
   14524:	ef 91       	pop	r30
   14526:	bf 91       	pop	r27
   14528:	af 91       	pop	r26
   1452a:	9f 91       	pop	r25
   1452c:	8f 91       	pop	r24
   1452e:	7f 91       	pop	r23
   14530:	6f 91       	pop	r22
   14532:	5f 91       	pop	r21
   14534:	4f 91       	pop	r20
   14536:	3f 91       	pop	r19
   14538:	2f 91       	pop	r18
   1453a:	0f 90       	pop	r0
   1453c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14540:	0f 90       	pop	r0
   14542:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14546:	0f 90       	pop	r0
   14548:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1454c:	0f 90       	pop	r0
   1454e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14552:	0f 90       	pop	r0
   14554:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14558:	0f 90       	pop	r0
   1455a:	1f 90       	pop	r1
   1455c:	18 95       	reti

0001455e <__vector_23>:
   1455e:	1f 92       	push	r1
   14560:	0f 92       	push	r0
   14562:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14566:	0f 92       	push	r0
   14568:	11 24       	eor	r1, r1
   1456a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1456e:	0f 92       	push	r0
   14570:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14574:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14578:	0f 92       	push	r0
   1457a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1457e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14582:	0f 92       	push	r0
   14584:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14588:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1458c:	0f 92       	push	r0
   1458e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14592:	2f 93       	push	r18
   14594:	3f 93       	push	r19
   14596:	4f 93       	push	r20
   14598:	5f 93       	push	r21
   1459a:	6f 93       	push	r22
   1459c:	7f 93       	push	r23
   1459e:	8f 93       	push	r24
   145a0:	9f 93       	push	r25
   145a2:	af 93       	push	r26
   145a4:	bf 93       	push	r27
   145a6:	ef 93       	push	r30
   145a8:	ff 93       	push	r31
   145aa:	cf 93       	push	r28
   145ac:	df 93       	push	r29
   145ae:	cd b7       	in	r28, 0x3d	; 61
   145b0:	de b7       	in	r29, 0x3e	; 62
   145b2:	80 91 31 25 	lds	r24, 0x2531	; 0x802531 <tc_tcc1_ccb_callback>
   145b6:	90 91 32 25 	lds	r25, 0x2532	; 0x802532 <tc_tcc1_ccb_callback+0x1>
   145ba:	89 2b       	or	r24, r25
   145bc:	31 f0       	breq	.+12     	; 0x145ca <__vector_23+0x6c>
   145be:	80 91 31 25 	lds	r24, 0x2531	; 0x802531 <tc_tcc1_ccb_callback>
   145c2:	90 91 32 25 	lds	r25, 0x2532	; 0x802532 <tc_tcc1_ccb_callback+0x1>
   145c6:	fc 01       	movw	r30, r24
   145c8:	19 95       	eicall
   145ca:	00 00       	nop
   145cc:	df 91       	pop	r29
   145ce:	cf 91       	pop	r28
   145d0:	ff 91       	pop	r31
   145d2:	ef 91       	pop	r30
   145d4:	bf 91       	pop	r27
   145d6:	af 91       	pop	r26
   145d8:	9f 91       	pop	r25
   145da:	8f 91       	pop	r24
   145dc:	7f 91       	pop	r23
   145de:	6f 91       	pop	r22
   145e0:	5f 91       	pop	r21
   145e2:	4f 91       	pop	r20
   145e4:	3f 91       	pop	r19
   145e6:	2f 91       	pop	r18
   145e8:	0f 90       	pop	r0
   145ea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   145ee:	0f 90       	pop	r0
   145f0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   145f4:	0f 90       	pop	r0
   145f6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   145fa:	0f 90       	pop	r0
   145fc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14600:	0f 90       	pop	r0
   14602:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14606:	0f 90       	pop	r0
   14608:	1f 90       	pop	r1
   1460a:	18 95       	reti

0001460c <__vector_77>:
   1460c:	1f 92       	push	r1
   1460e:	0f 92       	push	r0
   14610:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14614:	0f 92       	push	r0
   14616:	11 24       	eor	r1, r1
   14618:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1461c:	0f 92       	push	r0
   1461e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14622:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14626:	0f 92       	push	r0
   14628:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1462c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14630:	0f 92       	push	r0
   14632:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14636:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1463a:	0f 92       	push	r0
   1463c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14640:	2f 93       	push	r18
   14642:	3f 93       	push	r19
   14644:	4f 93       	push	r20
   14646:	5f 93       	push	r21
   14648:	6f 93       	push	r22
   1464a:	7f 93       	push	r23
   1464c:	8f 93       	push	r24
   1464e:	9f 93       	push	r25
   14650:	af 93       	push	r26
   14652:	bf 93       	push	r27
   14654:	ef 93       	push	r30
   14656:	ff 93       	push	r31
   14658:	cf 93       	push	r28
   1465a:	df 93       	push	r29
   1465c:	cd b7       	in	r28, 0x3d	; 61
   1465e:	de b7       	in	r29, 0x3e	; 62
   14660:	80 91 33 25 	lds	r24, 0x2533	; 0x802533 <tc_tcd0_ovf_callback>
   14664:	90 91 34 25 	lds	r25, 0x2534	; 0x802534 <tc_tcd0_ovf_callback+0x1>
   14668:	89 2b       	or	r24, r25
   1466a:	31 f0       	breq	.+12     	; 0x14678 <__vector_77+0x6c>
   1466c:	80 91 33 25 	lds	r24, 0x2533	; 0x802533 <tc_tcd0_ovf_callback>
   14670:	90 91 34 25 	lds	r25, 0x2534	; 0x802534 <tc_tcd0_ovf_callback+0x1>
   14674:	fc 01       	movw	r30, r24
   14676:	19 95       	eicall
   14678:	00 00       	nop
   1467a:	df 91       	pop	r29
   1467c:	cf 91       	pop	r28
   1467e:	ff 91       	pop	r31
   14680:	ef 91       	pop	r30
   14682:	bf 91       	pop	r27
   14684:	af 91       	pop	r26
   14686:	9f 91       	pop	r25
   14688:	8f 91       	pop	r24
   1468a:	7f 91       	pop	r23
   1468c:	6f 91       	pop	r22
   1468e:	5f 91       	pop	r21
   14690:	4f 91       	pop	r20
   14692:	3f 91       	pop	r19
   14694:	2f 91       	pop	r18
   14696:	0f 90       	pop	r0
   14698:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1469c:	0f 90       	pop	r0
   1469e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   146a2:	0f 90       	pop	r0
   146a4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   146a8:	0f 90       	pop	r0
   146aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   146ae:	0f 90       	pop	r0
   146b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   146b4:	0f 90       	pop	r0
   146b6:	1f 90       	pop	r1
   146b8:	18 95       	reti

000146ba <__vector_78>:
   146ba:	1f 92       	push	r1
   146bc:	0f 92       	push	r0
   146be:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   146c2:	0f 92       	push	r0
   146c4:	11 24       	eor	r1, r1
   146c6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   146ca:	0f 92       	push	r0
   146cc:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   146d0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   146d4:	0f 92       	push	r0
   146d6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   146da:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   146de:	0f 92       	push	r0
   146e0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   146e4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   146e8:	0f 92       	push	r0
   146ea:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   146ee:	2f 93       	push	r18
   146f0:	3f 93       	push	r19
   146f2:	4f 93       	push	r20
   146f4:	5f 93       	push	r21
   146f6:	6f 93       	push	r22
   146f8:	7f 93       	push	r23
   146fa:	8f 93       	push	r24
   146fc:	9f 93       	push	r25
   146fe:	af 93       	push	r26
   14700:	bf 93       	push	r27
   14702:	ef 93       	push	r30
   14704:	ff 93       	push	r31
   14706:	cf 93       	push	r28
   14708:	df 93       	push	r29
   1470a:	cd b7       	in	r28, 0x3d	; 61
   1470c:	de b7       	in	r29, 0x3e	; 62
   1470e:	80 91 35 25 	lds	r24, 0x2535	; 0x802535 <tc_tcd0_err_callback>
   14712:	90 91 36 25 	lds	r25, 0x2536	; 0x802536 <tc_tcd0_err_callback+0x1>
   14716:	89 2b       	or	r24, r25
   14718:	31 f0       	breq	.+12     	; 0x14726 <__vector_78+0x6c>
   1471a:	80 91 35 25 	lds	r24, 0x2535	; 0x802535 <tc_tcd0_err_callback>
   1471e:	90 91 36 25 	lds	r25, 0x2536	; 0x802536 <tc_tcd0_err_callback+0x1>
   14722:	fc 01       	movw	r30, r24
   14724:	19 95       	eicall
   14726:	00 00       	nop
   14728:	df 91       	pop	r29
   1472a:	cf 91       	pop	r28
   1472c:	ff 91       	pop	r31
   1472e:	ef 91       	pop	r30
   14730:	bf 91       	pop	r27
   14732:	af 91       	pop	r26
   14734:	9f 91       	pop	r25
   14736:	8f 91       	pop	r24
   14738:	7f 91       	pop	r23
   1473a:	6f 91       	pop	r22
   1473c:	5f 91       	pop	r21
   1473e:	4f 91       	pop	r20
   14740:	3f 91       	pop	r19
   14742:	2f 91       	pop	r18
   14744:	0f 90       	pop	r0
   14746:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1474a:	0f 90       	pop	r0
   1474c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14750:	0f 90       	pop	r0
   14752:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14756:	0f 90       	pop	r0
   14758:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1475c:	0f 90       	pop	r0
   1475e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14762:	0f 90       	pop	r0
   14764:	1f 90       	pop	r1
   14766:	18 95       	reti

00014768 <__vector_79>:
   14768:	1f 92       	push	r1
   1476a:	0f 92       	push	r0
   1476c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14770:	0f 92       	push	r0
   14772:	11 24       	eor	r1, r1
   14774:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14778:	0f 92       	push	r0
   1477a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1477e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14782:	0f 92       	push	r0
   14784:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14788:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1478c:	0f 92       	push	r0
   1478e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14792:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14796:	0f 92       	push	r0
   14798:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1479c:	2f 93       	push	r18
   1479e:	3f 93       	push	r19
   147a0:	4f 93       	push	r20
   147a2:	5f 93       	push	r21
   147a4:	6f 93       	push	r22
   147a6:	7f 93       	push	r23
   147a8:	8f 93       	push	r24
   147aa:	9f 93       	push	r25
   147ac:	af 93       	push	r26
   147ae:	bf 93       	push	r27
   147b0:	ef 93       	push	r30
   147b2:	ff 93       	push	r31
   147b4:	cf 93       	push	r28
   147b6:	df 93       	push	r29
   147b8:	cd b7       	in	r28, 0x3d	; 61
   147ba:	de b7       	in	r29, 0x3e	; 62
   147bc:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <tc_tcd0_cca_callback>
   147c0:	90 91 38 25 	lds	r25, 0x2538	; 0x802538 <tc_tcd0_cca_callback+0x1>
   147c4:	89 2b       	or	r24, r25
   147c6:	31 f0       	breq	.+12     	; 0x147d4 <__vector_79+0x6c>
   147c8:	80 91 37 25 	lds	r24, 0x2537	; 0x802537 <tc_tcd0_cca_callback>
   147cc:	90 91 38 25 	lds	r25, 0x2538	; 0x802538 <tc_tcd0_cca_callback+0x1>
   147d0:	fc 01       	movw	r30, r24
   147d2:	19 95       	eicall
   147d4:	00 00       	nop
   147d6:	df 91       	pop	r29
   147d8:	cf 91       	pop	r28
   147da:	ff 91       	pop	r31
   147dc:	ef 91       	pop	r30
   147de:	bf 91       	pop	r27
   147e0:	af 91       	pop	r26
   147e2:	9f 91       	pop	r25
   147e4:	8f 91       	pop	r24
   147e6:	7f 91       	pop	r23
   147e8:	6f 91       	pop	r22
   147ea:	5f 91       	pop	r21
   147ec:	4f 91       	pop	r20
   147ee:	3f 91       	pop	r19
   147f0:	2f 91       	pop	r18
   147f2:	0f 90       	pop	r0
   147f4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   147f8:	0f 90       	pop	r0
   147fa:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   147fe:	0f 90       	pop	r0
   14800:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14804:	0f 90       	pop	r0
   14806:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1480a:	0f 90       	pop	r0
   1480c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14810:	0f 90       	pop	r0
   14812:	1f 90       	pop	r1
   14814:	18 95       	reti

00014816 <__vector_80>:
   14816:	1f 92       	push	r1
   14818:	0f 92       	push	r0
   1481a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1481e:	0f 92       	push	r0
   14820:	11 24       	eor	r1, r1
   14822:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14826:	0f 92       	push	r0
   14828:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1482c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14830:	0f 92       	push	r0
   14832:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14836:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1483a:	0f 92       	push	r0
   1483c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14840:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14844:	0f 92       	push	r0
   14846:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1484a:	2f 93       	push	r18
   1484c:	3f 93       	push	r19
   1484e:	4f 93       	push	r20
   14850:	5f 93       	push	r21
   14852:	6f 93       	push	r22
   14854:	7f 93       	push	r23
   14856:	8f 93       	push	r24
   14858:	9f 93       	push	r25
   1485a:	af 93       	push	r26
   1485c:	bf 93       	push	r27
   1485e:	ef 93       	push	r30
   14860:	ff 93       	push	r31
   14862:	cf 93       	push	r28
   14864:	df 93       	push	r29
   14866:	cd b7       	in	r28, 0x3d	; 61
   14868:	de b7       	in	r29, 0x3e	; 62
   1486a:	80 91 39 25 	lds	r24, 0x2539	; 0x802539 <tc_tcd0_ccb_callback>
   1486e:	90 91 3a 25 	lds	r25, 0x253A	; 0x80253a <tc_tcd0_ccb_callback+0x1>
   14872:	89 2b       	or	r24, r25
   14874:	31 f0       	breq	.+12     	; 0x14882 <__vector_80+0x6c>
   14876:	80 91 39 25 	lds	r24, 0x2539	; 0x802539 <tc_tcd0_ccb_callback>
   1487a:	90 91 3a 25 	lds	r25, 0x253A	; 0x80253a <tc_tcd0_ccb_callback+0x1>
   1487e:	fc 01       	movw	r30, r24
   14880:	19 95       	eicall
   14882:	00 00       	nop
   14884:	df 91       	pop	r29
   14886:	cf 91       	pop	r28
   14888:	ff 91       	pop	r31
   1488a:	ef 91       	pop	r30
   1488c:	bf 91       	pop	r27
   1488e:	af 91       	pop	r26
   14890:	9f 91       	pop	r25
   14892:	8f 91       	pop	r24
   14894:	7f 91       	pop	r23
   14896:	6f 91       	pop	r22
   14898:	5f 91       	pop	r21
   1489a:	4f 91       	pop	r20
   1489c:	3f 91       	pop	r19
   1489e:	2f 91       	pop	r18
   148a0:	0f 90       	pop	r0
   148a2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   148a6:	0f 90       	pop	r0
   148a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   148ac:	0f 90       	pop	r0
   148ae:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   148b2:	0f 90       	pop	r0
   148b4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   148b8:	0f 90       	pop	r0
   148ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   148be:	0f 90       	pop	r0
   148c0:	1f 90       	pop	r1
   148c2:	18 95       	reti

000148c4 <__vector_81>:
   148c4:	1f 92       	push	r1
   148c6:	0f 92       	push	r0
   148c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   148cc:	0f 92       	push	r0
   148ce:	11 24       	eor	r1, r1
   148d0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   148d4:	0f 92       	push	r0
   148d6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   148da:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   148de:	0f 92       	push	r0
   148e0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   148e4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   148e8:	0f 92       	push	r0
   148ea:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   148ee:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   148f2:	0f 92       	push	r0
   148f4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   148f8:	2f 93       	push	r18
   148fa:	3f 93       	push	r19
   148fc:	4f 93       	push	r20
   148fe:	5f 93       	push	r21
   14900:	6f 93       	push	r22
   14902:	7f 93       	push	r23
   14904:	8f 93       	push	r24
   14906:	9f 93       	push	r25
   14908:	af 93       	push	r26
   1490a:	bf 93       	push	r27
   1490c:	ef 93       	push	r30
   1490e:	ff 93       	push	r31
   14910:	cf 93       	push	r28
   14912:	df 93       	push	r29
   14914:	cd b7       	in	r28, 0x3d	; 61
   14916:	de b7       	in	r29, 0x3e	; 62
   14918:	80 91 3b 25 	lds	r24, 0x253B	; 0x80253b <tc_tcd0_ccc_callback>
   1491c:	90 91 3c 25 	lds	r25, 0x253C	; 0x80253c <tc_tcd0_ccc_callback+0x1>
   14920:	89 2b       	or	r24, r25
   14922:	31 f0       	breq	.+12     	; 0x14930 <__vector_81+0x6c>
   14924:	80 91 3b 25 	lds	r24, 0x253B	; 0x80253b <tc_tcd0_ccc_callback>
   14928:	90 91 3c 25 	lds	r25, 0x253C	; 0x80253c <tc_tcd0_ccc_callback+0x1>
   1492c:	fc 01       	movw	r30, r24
   1492e:	19 95       	eicall
   14930:	00 00       	nop
   14932:	df 91       	pop	r29
   14934:	cf 91       	pop	r28
   14936:	ff 91       	pop	r31
   14938:	ef 91       	pop	r30
   1493a:	bf 91       	pop	r27
   1493c:	af 91       	pop	r26
   1493e:	9f 91       	pop	r25
   14940:	8f 91       	pop	r24
   14942:	7f 91       	pop	r23
   14944:	6f 91       	pop	r22
   14946:	5f 91       	pop	r21
   14948:	4f 91       	pop	r20
   1494a:	3f 91       	pop	r19
   1494c:	2f 91       	pop	r18
   1494e:	0f 90       	pop	r0
   14950:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14954:	0f 90       	pop	r0
   14956:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1495a:	0f 90       	pop	r0
   1495c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14960:	0f 90       	pop	r0
   14962:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14966:	0f 90       	pop	r0
   14968:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1496c:	0f 90       	pop	r0
   1496e:	1f 90       	pop	r1
   14970:	18 95       	reti

00014972 <__vector_82>:
   14972:	1f 92       	push	r1
   14974:	0f 92       	push	r0
   14976:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1497a:	0f 92       	push	r0
   1497c:	11 24       	eor	r1, r1
   1497e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14982:	0f 92       	push	r0
   14984:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14988:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1498c:	0f 92       	push	r0
   1498e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14992:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14996:	0f 92       	push	r0
   14998:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1499c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   149a0:	0f 92       	push	r0
   149a2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   149a6:	2f 93       	push	r18
   149a8:	3f 93       	push	r19
   149aa:	4f 93       	push	r20
   149ac:	5f 93       	push	r21
   149ae:	6f 93       	push	r22
   149b0:	7f 93       	push	r23
   149b2:	8f 93       	push	r24
   149b4:	9f 93       	push	r25
   149b6:	af 93       	push	r26
   149b8:	bf 93       	push	r27
   149ba:	ef 93       	push	r30
   149bc:	ff 93       	push	r31
   149be:	cf 93       	push	r28
   149c0:	df 93       	push	r29
   149c2:	cd b7       	in	r28, 0x3d	; 61
   149c4:	de b7       	in	r29, 0x3e	; 62
   149c6:	80 91 3d 25 	lds	r24, 0x253D	; 0x80253d <tc_tcd0_ccd_callback>
   149ca:	90 91 3e 25 	lds	r25, 0x253E	; 0x80253e <tc_tcd0_ccd_callback+0x1>
   149ce:	89 2b       	or	r24, r25
   149d0:	31 f0       	breq	.+12     	; 0x149de <__vector_82+0x6c>
   149d2:	80 91 3d 25 	lds	r24, 0x253D	; 0x80253d <tc_tcd0_ccd_callback>
   149d6:	90 91 3e 25 	lds	r25, 0x253E	; 0x80253e <tc_tcd0_ccd_callback+0x1>
   149da:	fc 01       	movw	r30, r24
   149dc:	19 95       	eicall
   149de:	00 00       	nop
   149e0:	df 91       	pop	r29
   149e2:	cf 91       	pop	r28
   149e4:	ff 91       	pop	r31
   149e6:	ef 91       	pop	r30
   149e8:	bf 91       	pop	r27
   149ea:	af 91       	pop	r26
   149ec:	9f 91       	pop	r25
   149ee:	8f 91       	pop	r24
   149f0:	7f 91       	pop	r23
   149f2:	6f 91       	pop	r22
   149f4:	5f 91       	pop	r21
   149f6:	4f 91       	pop	r20
   149f8:	3f 91       	pop	r19
   149fa:	2f 91       	pop	r18
   149fc:	0f 90       	pop	r0
   149fe:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14a02:	0f 90       	pop	r0
   14a04:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14a08:	0f 90       	pop	r0
   14a0a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14a0e:	0f 90       	pop	r0
   14a10:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14a14:	0f 90       	pop	r0
   14a16:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14a1a:	0f 90       	pop	r0
   14a1c:	1f 90       	pop	r1
   14a1e:	18 95       	reti

00014a20 <__vector_83>:
   14a20:	1f 92       	push	r1
   14a22:	0f 92       	push	r0
   14a24:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14a28:	0f 92       	push	r0
   14a2a:	11 24       	eor	r1, r1
   14a2c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14a30:	0f 92       	push	r0
   14a32:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14a36:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14a3a:	0f 92       	push	r0
   14a3c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14a40:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14a44:	0f 92       	push	r0
   14a46:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14a4a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14a4e:	0f 92       	push	r0
   14a50:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14a54:	2f 93       	push	r18
   14a56:	3f 93       	push	r19
   14a58:	4f 93       	push	r20
   14a5a:	5f 93       	push	r21
   14a5c:	6f 93       	push	r22
   14a5e:	7f 93       	push	r23
   14a60:	8f 93       	push	r24
   14a62:	9f 93       	push	r25
   14a64:	af 93       	push	r26
   14a66:	bf 93       	push	r27
   14a68:	ef 93       	push	r30
   14a6a:	ff 93       	push	r31
   14a6c:	cf 93       	push	r28
   14a6e:	df 93       	push	r29
   14a70:	cd b7       	in	r28, 0x3d	; 61
   14a72:	de b7       	in	r29, 0x3e	; 62
   14a74:	80 91 3f 25 	lds	r24, 0x253F	; 0x80253f <tc_tcd1_ovf_callback>
   14a78:	90 91 40 25 	lds	r25, 0x2540	; 0x802540 <tc_tcd1_ovf_callback+0x1>
   14a7c:	89 2b       	or	r24, r25
   14a7e:	31 f0       	breq	.+12     	; 0x14a8c <__vector_83+0x6c>
   14a80:	80 91 3f 25 	lds	r24, 0x253F	; 0x80253f <tc_tcd1_ovf_callback>
   14a84:	90 91 40 25 	lds	r25, 0x2540	; 0x802540 <tc_tcd1_ovf_callback+0x1>
   14a88:	fc 01       	movw	r30, r24
   14a8a:	19 95       	eicall
   14a8c:	00 00       	nop
   14a8e:	df 91       	pop	r29
   14a90:	cf 91       	pop	r28
   14a92:	ff 91       	pop	r31
   14a94:	ef 91       	pop	r30
   14a96:	bf 91       	pop	r27
   14a98:	af 91       	pop	r26
   14a9a:	9f 91       	pop	r25
   14a9c:	8f 91       	pop	r24
   14a9e:	7f 91       	pop	r23
   14aa0:	6f 91       	pop	r22
   14aa2:	5f 91       	pop	r21
   14aa4:	4f 91       	pop	r20
   14aa6:	3f 91       	pop	r19
   14aa8:	2f 91       	pop	r18
   14aaa:	0f 90       	pop	r0
   14aac:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14ab0:	0f 90       	pop	r0
   14ab2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14ab6:	0f 90       	pop	r0
   14ab8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14abc:	0f 90       	pop	r0
   14abe:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ac2:	0f 90       	pop	r0
   14ac4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14ac8:	0f 90       	pop	r0
   14aca:	1f 90       	pop	r1
   14acc:	18 95       	reti

00014ace <__vector_84>:
   14ace:	1f 92       	push	r1
   14ad0:	0f 92       	push	r0
   14ad2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14ad6:	0f 92       	push	r0
   14ad8:	11 24       	eor	r1, r1
   14ada:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ade:	0f 92       	push	r0
   14ae0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ae4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14ae8:	0f 92       	push	r0
   14aea:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14aee:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14af2:	0f 92       	push	r0
   14af4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14af8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14afc:	0f 92       	push	r0
   14afe:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14b02:	2f 93       	push	r18
   14b04:	3f 93       	push	r19
   14b06:	4f 93       	push	r20
   14b08:	5f 93       	push	r21
   14b0a:	6f 93       	push	r22
   14b0c:	7f 93       	push	r23
   14b0e:	8f 93       	push	r24
   14b10:	9f 93       	push	r25
   14b12:	af 93       	push	r26
   14b14:	bf 93       	push	r27
   14b16:	ef 93       	push	r30
   14b18:	ff 93       	push	r31
   14b1a:	cf 93       	push	r28
   14b1c:	df 93       	push	r29
   14b1e:	cd b7       	in	r28, 0x3d	; 61
   14b20:	de b7       	in	r29, 0x3e	; 62
   14b22:	80 91 41 25 	lds	r24, 0x2541	; 0x802541 <tc_tcd1_err_callback>
   14b26:	90 91 42 25 	lds	r25, 0x2542	; 0x802542 <tc_tcd1_err_callback+0x1>
   14b2a:	89 2b       	or	r24, r25
   14b2c:	31 f0       	breq	.+12     	; 0x14b3a <__vector_84+0x6c>
   14b2e:	80 91 41 25 	lds	r24, 0x2541	; 0x802541 <tc_tcd1_err_callback>
   14b32:	90 91 42 25 	lds	r25, 0x2542	; 0x802542 <tc_tcd1_err_callback+0x1>
   14b36:	fc 01       	movw	r30, r24
   14b38:	19 95       	eicall
   14b3a:	00 00       	nop
   14b3c:	df 91       	pop	r29
   14b3e:	cf 91       	pop	r28
   14b40:	ff 91       	pop	r31
   14b42:	ef 91       	pop	r30
   14b44:	bf 91       	pop	r27
   14b46:	af 91       	pop	r26
   14b48:	9f 91       	pop	r25
   14b4a:	8f 91       	pop	r24
   14b4c:	7f 91       	pop	r23
   14b4e:	6f 91       	pop	r22
   14b50:	5f 91       	pop	r21
   14b52:	4f 91       	pop	r20
   14b54:	3f 91       	pop	r19
   14b56:	2f 91       	pop	r18
   14b58:	0f 90       	pop	r0
   14b5a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14b5e:	0f 90       	pop	r0
   14b60:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14b64:	0f 90       	pop	r0
   14b66:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14b6a:	0f 90       	pop	r0
   14b6c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14b70:	0f 90       	pop	r0
   14b72:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14b76:	0f 90       	pop	r0
   14b78:	1f 90       	pop	r1
   14b7a:	18 95       	reti

00014b7c <__vector_85>:
   14b7c:	1f 92       	push	r1
   14b7e:	0f 92       	push	r0
   14b80:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14b84:	0f 92       	push	r0
   14b86:	11 24       	eor	r1, r1
   14b88:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14b8c:	0f 92       	push	r0
   14b8e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14b92:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14b96:	0f 92       	push	r0
   14b98:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14b9c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14ba0:	0f 92       	push	r0
   14ba2:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14ba6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14baa:	0f 92       	push	r0
   14bac:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14bb0:	2f 93       	push	r18
   14bb2:	3f 93       	push	r19
   14bb4:	4f 93       	push	r20
   14bb6:	5f 93       	push	r21
   14bb8:	6f 93       	push	r22
   14bba:	7f 93       	push	r23
   14bbc:	8f 93       	push	r24
   14bbe:	9f 93       	push	r25
   14bc0:	af 93       	push	r26
   14bc2:	bf 93       	push	r27
   14bc4:	ef 93       	push	r30
   14bc6:	ff 93       	push	r31
   14bc8:	cf 93       	push	r28
   14bca:	df 93       	push	r29
   14bcc:	cd b7       	in	r28, 0x3d	; 61
   14bce:	de b7       	in	r29, 0x3e	; 62
   14bd0:	80 91 43 25 	lds	r24, 0x2543	; 0x802543 <tc_tcd1_cca_callback>
   14bd4:	90 91 44 25 	lds	r25, 0x2544	; 0x802544 <tc_tcd1_cca_callback+0x1>
   14bd8:	89 2b       	or	r24, r25
   14bda:	31 f0       	breq	.+12     	; 0x14be8 <__vector_85+0x6c>
   14bdc:	80 91 43 25 	lds	r24, 0x2543	; 0x802543 <tc_tcd1_cca_callback>
   14be0:	90 91 44 25 	lds	r25, 0x2544	; 0x802544 <tc_tcd1_cca_callback+0x1>
   14be4:	fc 01       	movw	r30, r24
   14be6:	19 95       	eicall
   14be8:	00 00       	nop
   14bea:	df 91       	pop	r29
   14bec:	cf 91       	pop	r28
   14bee:	ff 91       	pop	r31
   14bf0:	ef 91       	pop	r30
   14bf2:	bf 91       	pop	r27
   14bf4:	af 91       	pop	r26
   14bf6:	9f 91       	pop	r25
   14bf8:	8f 91       	pop	r24
   14bfa:	7f 91       	pop	r23
   14bfc:	6f 91       	pop	r22
   14bfe:	5f 91       	pop	r21
   14c00:	4f 91       	pop	r20
   14c02:	3f 91       	pop	r19
   14c04:	2f 91       	pop	r18
   14c06:	0f 90       	pop	r0
   14c08:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14c0c:	0f 90       	pop	r0
   14c0e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14c12:	0f 90       	pop	r0
   14c14:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14c18:	0f 90       	pop	r0
   14c1a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14c1e:	0f 90       	pop	r0
   14c20:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14c24:	0f 90       	pop	r0
   14c26:	1f 90       	pop	r1
   14c28:	18 95       	reti

00014c2a <__vector_86>:
   14c2a:	1f 92       	push	r1
   14c2c:	0f 92       	push	r0
   14c2e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14c32:	0f 92       	push	r0
   14c34:	11 24       	eor	r1, r1
   14c36:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14c3a:	0f 92       	push	r0
   14c3c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14c40:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14c44:	0f 92       	push	r0
   14c46:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14c4a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14c4e:	0f 92       	push	r0
   14c50:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14c54:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14c58:	0f 92       	push	r0
   14c5a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14c5e:	2f 93       	push	r18
   14c60:	3f 93       	push	r19
   14c62:	4f 93       	push	r20
   14c64:	5f 93       	push	r21
   14c66:	6f 93       	push	r22
   14c68:	7f 93       	push	r23
   14c6a:	8f 93       	push	r24
   14c6c:	9f 93       	push	r25
   14c6e:	af 93       	push	r26
   14c70:	bf 93       	push	r27
   14c72:	ef 93       	push	r30
   14c74:	ff 93       	push	r31
   14c76:	cf 93       	push	r28
   14c78:	df 93       	push	r29
   14c7a:	cd b7       	in	r28, 0x3d	; 61
   14c7c:	de b7       	in	r29, 0x3e	; 62
   14c7e:	80 91 45 25 	lds	r24, 0x2545	; 0x802545 <tc_tcd1_ccb_callback>
   14c82:	90 91 46 25 	lds	r25, 0x2546	; 0x802546 <tc_tcd1_ccb_callback+0x1>
   14c86:	89 2b       	or	r24, r25
   14c88:	31 f0       	breq	.+12     	; 0x14c96 <__vector_86+0x6c>
   14c8a:	80 91 45 25 	lds	r24, 0x2545	; 0x802545 <tc_tcd1_ccb_callback>
   14c8e:	90 91 46 25 	lds	r25, 0x2546	; 0x802546 <tc_tcd1_ccb_callback+0x1>
   14c92:	fc 01       	movw	r30, r24
   14c94:	19 95       	eicall
   14c96:	00 00       	nop
   14c98:	df 91       	pop	r29
   14c9a:	cf 91       	pop	r28
   14c9c:	ff 91       	pop	r31
   14c9e:	ef 91       	pop	r30
   14ca0:	bf 91       	pop	r27
   14ca2:	af 91       	pop	r26
   14ca4:	9f 91       	pop	r25
   14ca6:	8f 91       	pop	r24
   14ca8:	7f 91       	pop	r23
   14caa:	6f 91       	pop	r22
   14cac:	5f 91       	pop	r21
   14cae:	4f 91       	pop	r20
   14cb0:	3f 91       	pop	r19
   14cb2:	2f 91       	pop	r18
   14cb4:	0f 90       	pop	r0
   14cb6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14cba:	0f 90       	pop	r0
   14cbc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14cc0:	0f 90       	pop	r0
   14cc2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14cc6:	0f 90       	pop	r0
   14cc8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ccc:	0f 90       	pop	r0
   14cce:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14cd2:	0f 90       	pop	r0
   14cd4:	1f 90       	pop	r1
   14cd6:	18 95       	reti

00014cd8 <__vector_47>:
   14cd8:	1f 92       	push	r1
   14cda:	0f 92       	push	r0
   14cdc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14ce0:	0f 92       	push	r0
   14ce2:	11 24       	eor	r1, r1
   14ce4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ce8:	0f 92       	push	r0
   14cea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14cee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14cf2:	0f 92       	push	r0
   14cf4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14cf8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14cfc:	0f 92       	push	r0
   14cfe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14d02:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14d06:	0f 92       	push	r0
   14d08:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14d0c:	2f 93       	push	r18
   14d0e:	3f 93       	push	r19
   14d10:	4f 93       	push	r20
   14d12:	5f 93       	push	r21
   14d14:	6f 93       	push	r22
   14d16:	7f 93       	push	r23
   14d18:	8f 93       	push	r24
   14d1a:	9f 93       	push	r25
   14d1c:	af 93       	push	r26
   14d1e:	bf 93       	push	r27
   14d20:	ef 93       	push	r30
   14d22:	ff 93       	push	r31
   14d24:	cf 93       	push	r28
   14d26:	df 93       	push	r29
   14d28:	cd b7       	in	r28, 0x3d	; 61
   14d2a:	de b7       	in	r29, 0x3e	; 62
   14d2c:	80 91 47 25 	lds	r24, 0x2547	; 0x802547 <tc_tce0_ovf_callback>
   14d30:	90 91 48 25 	lds	r25, 0x2548	; 0x802548 <tc_tce0_ovf_callback+0x1>
   14d34:	89 2b       	or	r24, r25
   14d36:	31 f0       	breq	.+12     	; 0x14d44 <__vector_47+0x6c>
   14d38:	80 91 47 25 	lds	r24, 0x2547	; 0x802547 <tc_tce0_ovf_callback>
   14d3c:	90 91 48 25 	lds	r25, 0x2548	; 0x802548 <tc_tce0_ovf_callback+0x1>
   14d40:	fc 01       	movw	r30, r24
   14d42:	19 95       	eicall
   14d44:	00 00       	nop
   14d46:	df 91       	pop	r29
   14d48:	cf 91       	pop	r28
   14d4a:	ff 91       	pop	r31
   14d4c:	ef 91       	pop	r30
   14d4e:	bf 91       	pop	r27
   14d50:	af 91       	pop	r26
   14d52:	9f 91       	pop	r25
   14d54:	8f 91       	pop	r24
   14d56:	7f 91       	pop	r23
   14d58:	6f 91       	pop	r22
   14d5a:	5f 91       	pop	r21
   14d5c:	4f 91       	pop	r20
   14d5e:	3f 91       	pop	r19
   14d60:	2f 91       	pop	r18
   14d62:	0f 90       	pop	r0
   14d64:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14d68:	0f 90       	pop	r0
   14d6a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14d6e:	0f 90       	pop	r0
   14d70:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14d74:	0f 90       	pop	r0
   14d76:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14d7a:	0f 90       	pop	r0
   14d7c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14d80:	0f 90       	pop	r0
   14d82:	1f 90       	pop	r1
   14d84:	18 95       	reti

00014d86 <__vector_48>:
   14d86:	1f 92       	push	r1
   14d88:	0f 92       	push	r0
   14d8a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14d8e:	0f 92       	push	r0
   14d90:	11 24       	eor	r1, r1
   14d92:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14d96:	0f 92       	push	r0
   14d98:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14d9c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14da0:	0f 92       	push	r0
   14da2:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14da6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14daa:	0f 92       	push	r0
   14dac:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14db0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14db4:	0f 92       	push	r0
   14db6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14dba:	2f 93       	push	r18
   14dbc:	3f 93       	push	r19
   14dbe:	4f 93       	push	r20
   14dc0:	5f 93       	push	r21
   14dc2:	6f 93       	push	r22
   14dc4:	7f 93       	push	r23
   14dc6:	8f 93       	push	r24
   14dc8:	9f 93       	push	r25
   14dca:	af 93       	push	r26
   14dcc:	bf 93       	push	r27
   14dce:	ef 93       	push	r30
   14dd0:	ff 93       	push	r31
   14dd2:	cf 93       	push	r28
   14dd4:	df 93       	push	r29
   14dd6:	cd b7       	in	r28, 0x3d	; 61
   14dd8:	de b7       	in	r29, 0x3e	; 62
   14dda:	80 91 49 25 	lds	r24, 0x2549	; 0x802549 <tc_tce0_err_callback>
   14dde:	90 91 4a 25 	lds	r25, 0x254A	; 0x80254a <tc_tce0_err_callback+0x1>
   14de2:	89 2b       	or	r24, r25
   14de4:	31 f0       	breq	.+12     	; 0x14df2 <__vector_48+0x6c>
   14de6:	80 91 49 25 	lds	r24, 0x2549	; 0x802549 <tc_tce0_err_callback>
   14dea:	90 91 4a 25 	lds	r25, 0x254A	; 0x80254a <tc_tce0_err_callback+0x1>
   14dee:	fc 01       	movw	r30, r24
   14df0:	19 95       	eicall
   14df2:	00 00       	nop
   14df4:	df 91       	pop	r29
   14df6:	cf 91       	pop	r28
   14df8:	ff 91       	pop	r31
   14dfa:	ef 91       	pop	r30
   14dfc:	bf 91       	pop	r27
   14dfe:	af 91       	pop	r26
   14e00:	9f 91       	pop	r25
   14e02:	8f 91       	pop	r24
   14e04:	7f 91       	pop	r23
   14e06:	6f 91       	pop	r22
   14e08:	5f 91       	pop	r21
   14e0a:	4f 91       	pop	r20
   14e0c:	3f 91       	pop	r19
   14e0e:	2f 91       	pop	r18
   14e10:	0f 90       	pop	r0
   14e12:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14e16:	0f 90       	pop	r0
   14e18:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14e1c:	0f 90       	pop	r0
   14e1e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14e22:	0f 90       	pop	r0
   14e24:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14e28:	0f 90       	pop	r0
   14e2a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14e2e:	0f 90       	pop	r0
   14e30:	1f 90       	pop	r1
   14e32:	18 95       	reti

00014e34 <__vector_49>:
   14e34:	1f 92       	push	r1
   14e36:	0f 92       	push	r0
   14e38:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14e3c:	0f 92       	push	r0
   14e3e:	11 24       	eor	r1, r1
   14e40:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14e44:	0f 92       	push	r0
   14e46:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14e4a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14e4e:	0f 92       	push	r0
   14e50:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14e54:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14e58:	0f 92       	push	r0
   14e5a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14e5e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14e62:	0f 92       	push	r0
   14e64:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14e68:	2f 93       	push	r18
   14e6a:	3f 93       	push	r19
   14e6c:	4f 93       	push	r20
   14e6e:	5f 93       	push	r21
   14e70:	6f 93       	push	r22
   14e72:	7f 93       	push	r23
   14e74:	8f 93       	push	r24
   14e76:	9f 93       	push	r25
   14e78:	af 93       	push	r26
   14e7a:	bf 93       	push	r27
   14e7c:	ef 93       	push	r30
   14e7e:	ff 93       	push	r31
   14e80:	cf 93       	push	r28
   14e82:	df 93       	push	r29
   14e84:	cd b7       	in	r28, 0x3d	; 61
   14e86:	de b7       	in	r29, 0x3e	; 62
   14e88:	80 91 4b 25 	lds	r24, 0x254B	; 0x80254b <tc_tce0_cca_callback>
   14e8c:	90 91 4c 25 	lds	r25, 0x254C	; 0x80254c <tc_tce0_cca_callback+0x1>
   14e90:	89 2b       	or	r24, r25
   14e92:	31 f0       	breq	.+12     	; 0x14ea0 <__vector_49+0x6c>
   14e94:	80 91 4b 25 	lds	r24, 0x254B	; 0x80254b <tc_tce0_cca_callback>
   14e98:	90 91 4c 25 	lds	r25, 0x254C	; 0x80254c <tc_tce0_cca_callback+0x1>
   14e9c:	fc 01       	movw	r30, r24
   14e9e:	19 95       	eicall
   14ea0:	00 00       	nop
   14ea2:	df 91       	pop	r29
   14ea4:	cf 91       	pop	r28
   14ea6:	ff 91       	pop	r31
   14ea8:	ef 91       	pop	r30
   14eaa:	bf 91       	pop	r27
   14eac:	af 91       	pop	r26
   14eae:	9f 91       	pop	r25
   14eb0:	8f 91       	pop	r24
   14eb2:	7f 91       	pop	r23
   14eb4:	6f 91       	pop	r22
   14eb6:	5f 91       	pop	r21
   14eb8:	4f 91       	pop	r20
   14eba:	3f 91       	pop	r19
   14ebc:	2f 91       	pop	r18
   14ebe:	0f 90       	pop	r0
   14ec0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14ec4:	0f 90       	pop	r0
   14ec6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14eca:	0f 90       	pop	r0
   14ecc:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14ed0:	0f 90       	pop	r0
   14ed2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ed6:	0f 90       	pop	r0
   14ed8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14edc:	0f 90       	pop	r0
   14ede:	1f 90       	pop	r1
   14ee0:	18 95       	reti

00014ee2 <__vector_50>:
   14ee2:	1f 92       	push	r1
   14ee4:	0f 92       	push	r0
   14ee6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14eea:	0f 92       	push	r0
   14eec:	11 24       	eor	r1, r1
   14eee:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ef2:	0f 92       	push	r0
   14ef4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14ef8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14efc:	0f 92       	push	r0
   14efe:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14f02:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14f06:	0f 92       	push	r0
   14f08:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14f0c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14f10:	0f 92       	push	r0
   14f12:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14f16:	2f 93       	push	r18
   14f18:	3f 93       	push	r19
   14f1a:	4f 93       	push	r20
   14f1c:	5f 93       	push	r21
   14f1e:	6f 93       	push	r22
   14f20:	7f 93       	push	r23
   14f22:	8f 93       	push	r24
   14f24:	9f 93       	push	r25
   14f26:	af 93       	push	r26
   14f28:	bf 93       	push	r27
   14f2a:	ef 93       	push	r30
   14f2c:	ff 93       	push	r31
   14f2e:	cf 93       	push	r28
   14f30:	df 93       	push	r29
   14f32:	cd b7       	in	r28, 0x3d	; 61
   14f34:	de b7       	in	r29, 0x3e	; 62
   14f36:	80 91 4d 25 	lds	r24, 0x254D	; 0x80254d <tc_tce0_ccb_callback>
   14f3a:	90 91 4e 25 	lds	r25, 0x254E	; 0x80254e <tc_tce0_ccb_callback+0x1>
   14f3e:	89 2b       	or	r24, r25
   14f40:	31 f0       	breq	.+12     	; 0x14f4e <__vector_50+0x6c>
   14f42:	80 91 4d 25 	lds	r24, 0x254D	; 0x80254d <tc_tce0_ccb_callback>
   14f46:	90 91 4e 25 	lds	r25, 0x254E	; 0x80254e <tc_tce0_ccb_callback+0x1>
   14f4a:	fc 01       	movw	r30, r24
   14f4c:	19 95       	eicall
   14f4e:	00 00       	nop
   14f50:	df 91       	pop	r29
   14f52:	cf 91       	pop	r28
   14f54:	ff 91       	pop	r31
   14f56:	ef 91       	pop	r30
   14f58:	bf 91       	pop	r27
   14f5a:	af 91       	pop	r26
   14f5c:	9f 91       	pop	r25
   14f5e:	8f 91       	pop	r24
   14f60:	7f 91       	pop	r23
   14f62:	6f 91       	pop	r22
   14f64:	5f 91       	pop	r21
   14f66:	4f 91       	pop	r20
   14f68:	3f 91       	pop	r19
   14f6a:	2f 91       	pop	r18
   14f6c:	0f 90       	pop	r0
   14f6e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14f72:	0f 90       	pop	r0
   14f74:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14f78:	0f 90       	pop	r0
   14f7a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14f7e:	0f 90       	pop	r0
   14f80:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14f84:	0f 90       	pop	r0
   14f86:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14f8a:	0f 90       	pop	r0
   14f8c:	1f 90       	pop	r1
   14f8e:	18 95       	reti

00014f90 <__vector_51>:
   14f90:	1f 92       	push	r1
   14f92:	0f 92       	push	r0
   14f94:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   14f98:	0f 92       	push	r0
   14f9a:	11 24       	eor	r1, r1
   14f9c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14fa0:	0f 92       	push	r0
   14fa2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   14fa6:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14faa:	0f 92       	push	r0
   14fac:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   14fb0:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14fb4:	0f 92       	push	r0
   14fb6:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   14fba:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14fbe:	0f 92       	push	r0
   14fc0:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   14fc4:	2f 93       	push	r18
   14fc6:	3f 93       	push	r19
   14fc8:	4f 93       	push	r20
   14fca:	5f 93       	push	r21
   14fcc:	6f 93       	push	r22
   14fce:	7f 93       	push	r23
   14fd0:	8f 93       	push	r24
   14fd2:	9f 93       	push	r25
   14fd4:	af 93       	push	r26
   14fd6:	bf 93       	push	r27
   14fd8:	ef 93       	push	r30
   14fda:	ff 93       	push	r31
   14fdc:	cf 93       	push	r28
   14fde:	df 93       	push	r29
   14fe0:	cd b7       	in	r28, 0x3d	; 61
   14fe2:	de b7       	in	r29, 0x3e	; 62
   14fe4:	80 91 4f 25 	lds	r24, 0x254F	; 0x80254f <tc_tce0_ccc_callback>
   14fe8:	90 91 50 25 	lds	r25, 0x2550	; 0x802550 <tc_tce0_ccc_callback+0x1>
   14fec:	89 2b       	or	r24, r25
   14fee:	31 f0       	breq	.+12     	; 0x14ffc <__vector_51+0x6c>
   14ff0:	80 91 4f 25 	lds	r24, 0x254F	; 0x80254f <tc_tce0_ccc_callback>
   14ff4:	90 91 50 25 	lds	r25, 0x2550	; 0x802550 <tc_tce0_ccc_callback+0x1>
   14ff8:	fc 01       	movw	r30, r24
   14ffa:	19 95       	eicall
   14ffc:	00 00       	nop
   14ffe:	df 91       	pop	r29
   15000:	cf 91       	pop	r28
   15002:	ff 91       	pop	r31
   15004:	ef 91       	pop	r30
   15006:	bf 91       	pop	r27
   15008:	af 91       	pop	r26
   1500a:	9f 91       	pop	r25
   1500c:	8f 91       	pop	r24
   1500e:	7f 91       	pop	r23
   15010:	6f 91       	pop	r22
   15012:	5f 91       	pop	r21
   15014:	4f 91       	pop	r20
   15016:	3f 91       	pop	r19
   15018:	2f 91       	pop	r18
   1501a:	0f 90       	pop	r0
   1501c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15020:	0f 90       	pop	r0
   15022:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15026:	0f 90       	pop	r0
   15028:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1502c:	0f 90       	pop	r0
   1502e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15032:	0f 90       	pop	r0
   15034:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15038:	0f 90       	pop	r0
   1503a:	1f 90       	pop	r1
   1503c:	18 95       	reti

0001503e <__vector_52>:
   1503e:	1f 92       	push	r1
   15040:	0f 92       	push	r0
   15042:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15046:	0f 92       	push	r0
   15048:	11 24       	eor	r1, r1
   1504a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1504e:	0f 92       	push	r0
   15050:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15054:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15058:	0f 92       	push	r0
   1505a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1505e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15062:	0f 92       	push	r0
   15064:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15068:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1506c:	0f 92       	push	r0
   1506e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15072:	2f 93       	push	r18
   15074:	3f 93       	push	r19
   15076:	4f 93       	push	r20
   15078:	5f 93       	push	r21
   1507a:	6f 93       	push	r22
   1507c:	7f 93       	push	r23
   1507e:	8f 93       	push	r24
   15080:	9f 93       	push	r25
   15082:	af 93       	push	r26
   15084:	bf 93       	push	r27
   15086:	ef 93       	push	r30
   15088:	ff 93       	push	r31
   1508a:	cf 93       	push	r28
   1508c:	df 93       	push	r29
   1508e:	cd b7       	in	r28, 0x3d	; 61
   15090:	de b7       	in	r29, 0x3e	; 62
   15092:	80 91 51 25 	lds	r24, 0x2551	; 0x802551 <tc_tce0_ccd_callback>
   15096:	90 91 52 25 	lds	r25, 0x2552	; 0x802552 <tc_tce0_ccd_callback+0x1>
   1509a:	89 2b       	or	r24, r25
   1509c:	31 f0       	breq	.+12     	; 0x150aa <__vector_52+0x6c>
   1509e:	80 91 51 25 	lds	r24, 0x2551	; 0x802551 <tc_tce0_ccd_callback>
   150a2:	90 91 52 25 	lds	r25, 0x2552	; 0x802552 <tc_tce0_ccd_callback+0x1>
   150a6:	fc 01       	movw	r30, r24
   150a8:	19 95       	eicall
   150aa:	00 00       	nop
   150ac:	df 91       	pop	r29
   150ae:	cf 91       	pop	r28
   150b0:	ff 91       	pop	r31
   150b2:	ef 91       	pop	r30
   150b4:	bf 91       	pop	r27
   150b6:	af 91       	pop	r26
   150b8:	9f 91       	pop	r25
   150ba:	8f 91       	pop	r24
   150bc:	7f 91       	pop	r23
   150be:	6f 91       	pop	r22
   150c0:	5f 91       	pop	r21
   150c2:	4f 91       	pop	r20
   150c4:	3f 91       	pop	r19
   150c6:	2f 91       	pop	r18
   150c8:	0f 90       	pop	r0
   150ca:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   150ce:	0f 90       	pop	r0
   150d0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   150d4:	0f 90       	pop	r0
   150d6:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   150da:	0f 90       	pop	r0
   150dc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   150e0:	0f 90       	pop	r0
   150e2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   150e6:	0f 90       	pop	r0
   150e8:	1f 90       	pop	r1
   150ea:	18 95       	reti

000150ec <__vector_53>:
   150ec:	1f 92       	push	r1
   150ee:	0f 92       	push	r0
   150f0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   150f4:	0f 92       	push	r0
   150f6:	11 24       	eor	r1, r1
   150f8:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   150fc:	0f 92       	push	r0
   150fe:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15102:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15106:	0f 92       	push	r0
   15108:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1510c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15110:	0f 92       	push	r0
   15112:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15116:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1511a:	0f 92       	push	r0
   1511c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15120:	2f 93       	push	r18
   15122:	3f 93       	push	r19
   15124:	4f 93       	push	r20
   15126:	5f 93       	push	r21
   15128:	6f 93       	push	r22
   1512a:	7f 93       	push	r23
   1512c:	8f 93       	push	r24
   1512e:	9f 93       	push	r25
   15130:	af 93       	push	r26
   15132:	bf 93       	push	r27
   15134:	ef 93       	push	r30
   15136:	ff 93       	push	r31
   15138:	cf 93       	push	r28
   1513a:	df 93       	push	r29
   1513c:	cd b7       	in	r28, 0x3d	; 61
   1513e:	de b7       	in	r29, 0x3e	; 62
   15140:	80 91 53 25 	lds	r24, 0x2553	; 0x802553 <tc_tce1_ovf_callback>
   15144:	90 91 54 25 	lds	r25, 0x2554	; 0x802554 <tc_tce1_ovf_callback+0x1>
   15148:	89 2b       	or	r24, r25
   1514a:	31 f0       	breq	.+12     	; 0x15158 <__vector_53+0x6c>
   1514c:	80 91 53 25 	lds	r24, 0x2553	; 0x802553 <tc_tce1_ovf_callback>
   15150:	90 91 54 25 	lds	r25, 0x2554	; 0x802554 <tc_tce1_ovf_callback+0x1>
   15154:	fc 01       	movw	r30, r24
   15156:	19 95       	eicall
   15158:	00 00       	nop
   1515a:	df 91       	pop	r29
   1515c:	cf 91       	pop	r28
   1515e:	ff 91       	pop	r31
   15160:	ef 91       	pop	r30
   15162:	bf 91       	pop	r27
   15164:	af 91       	pop	r26
   15166:	9f 91       	pop	r25
   15168:	8f 91       	pop	r24
   1516a:	7f 91       	pop	r23
   1516c:	6f 91       	pop	r22
   1516e:	5f 91       	pop	r21
   15170:	4f 91       	pop	r20
   15172:	3f 91       	pop	r19
   15174:	2f 91       	pop	r18
   15176:	0f 90       	pop	r0
   15178:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1517c:	0f 90       	pop	r0
   1517e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15182:	0f 90       	pop	r0
   15184:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15188:	0f 90       	pop	r0
   1518a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1518e:	0f 90       	pop	r0
   15190:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15194:	0f 90       	pop	r0
   15196:	1f 90       	pop	r1
   15198:	18 95       	reti

0001519a <__vector_54>:
   1519a:	1f 92       	push	r1
   1519c:	0f 92       	push	r0
   1519e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   151a2:	0f 92       	push	r0
   151a4:	11 24       	eor	r1, r1
   151a6:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   151aa:	0f 92       	push	r0
   151ac:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   151b0:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   151b4:	0f 92       	push	r0
   151b6:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   151ba:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   151be:	0f 92       	push	r0
   151c0:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   151c4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   151c8:	0f 92       	push	r0
   151ca:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   151ce:	2f 93       	push	r18
   151d0:	3f 93       	push	r19
   151d2:	4f 93       	push	r20
   151d4:	5f 93       	push	r21
   151d6:	6f 93       	push	r22
   151d8:	7f 93       	push	r23
   151da:	8f 93       	push	r24
   151dc:	9f 93       	push	r25
   151de:	af 93       	push	r26
   151e0:	bf 93       	push	r27
   151e2:	ef 93       	push	r30
   151e4:	ff 93       	push	r31
   151e6:	cf 93       	push	r28
   151e8:	df 93       	push	r29
   151ea:	cd b7       	in	r28, 0x3d	; 61
   151ec:	de b7       	in	r29, 0x3e	; 62
   151ee:	80 91 55 25 	lds	r24, 0x2555	; 0x802555 <tc_tce1_err_callback>
   151f2:	90 91 56 25 	lds	r25, 0x2556	; 0x802556 <tc_tce1_err_callback+0x1>
   151f6:	89 2b       	or	r24, r25
   151f8:	31 f0       	breq	.+12     	; 0x15206 <__vector_54+0x6c>
   151fa:	80 91 55 25 	lds	r24, 0x2555	; 0x802555 <tc_tce1_err_callback>
   151fe:	90 91 56 25 	lds	r25, 0x2556	; 0x802556 <tc_tce1_err_callback+0x1>
   15202:	fc 01       	movw	r30, r24
   15204:	19 95       	eicall
   15206:	00 00       	nop
   15208:	df 91       	pop	r29
   1520a:	cf 91       	pop	r28
   1520c:	ff 91       	pop	r31
   1520e:	ef 91       	pop	r30
   15210:	bf 91       	pop	r27
   15212:	af 91       	pop	r26
   15214:	9f 91       	pop	r25
   15216:	8f 91       	pop	r24
   15218:	7f 91       	pop	r23
   1521a:	6f 91       	pop	r22
   1521c:	5f 91       	pop	r21
   1521e:	4f 91       	pop	r20
   15220:	3f 91       	pop	r19
   15222:	2f 91       	pop	r18
   15224:	0f 90       	pop	r0
   15226:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1522a:	0f 90       	pop	r0
   1522c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15230:	0f 90       	pop	r0
   15232:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15236:	0f 90       	pop	r0
   15238:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1523c:	0f 90       	pop	r0
   1523e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15242:	0f 90       	pop	r0
   15244:	1f 90       	pop	r1
   15246:	18 95       	reti

00015248 <__vector_55>:
   15248:	1f 92       	push	r1
   1524a:	0f 92       	push	r0
   1524c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15250:	0f 92       	push	r0
   15252:	11 24       	eor	r1, r1
   15254:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15258:	0f 92       	push	r0
   1525a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1525e:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15262:	0f 92       	push	r0
   15264:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15268:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1526c:	0f 92       	push	r0
   1526e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15272:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15276:	0f 92       	push	r0
   15278:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1527c:	2f 93       	push	r18
   1527e:	3f 93       	push	r19
   15280:	4f 93       	push	r20
   15282:	5f 93       	push	r21
   15284:	6f 93       	push	r22
   15286:	7f 93       	push	r23
   15288:	8f 93       	push	r24
   1528a:	9f 93       	push	r25
   1528c:	af 93       	push	r26
   1528e:	bf 93       	push	r27
   15290:	ef 93       	push	r30
   15292:	ff 93       	push	r31
   15294:	cf 93       	push	r28
   15296:	df 93       	push	r29
   15298:	cd b7       	in	r28, 0x3d	; 61
   1529a:	de b7       	in	r29, 0x3e	; 62
   1529c:	80 91 57 25 	lds	r24, 0x2557	; 0x802557 <tc_tce1_cca_callback>
   152a0:	90 91 58 25 	lds	r25, 0x2558	; 0x802558 <tc_tce1_cca_callback+0x1>
   152a4:	89 2b       	or	r24, r25
   152a6:	31 f0       	breq	.+12     	; 0x152b4 <__vector_55+0x6c>
   152a8:	80 91 57 25 	lds	r24, 0x2557	; 0x802557 <tc_tce1_cca_callback>
   152ac:	90 91 58 25 	lds	r25, 0x2558	; 0x802558 <tc_tce1_cca_callback+0x1>
   152b0:	fc 01       	movw	r30, r24
   152b2:	19 95       	eicall
   152b4:	00 00       	nop
   152b6:	df 91       	pop	r29
   152b8:	cf 91       	pop	r28
   152ba:	ff 91       	pop	r31
   152bc:	ef 91       	pop	r30
   152be:	bf 91       	pop	r27
   152c0:	af 91       	pop	r26
   152c2:	9f 91       	pop	r25
   152c4:	8f 91       	pop	r24
   152c6:	7f 91       	pop	r23
   152c8:	6f 91       	pop	r22
   152ca:	5f 91       	pop	r21
   152cc:	4f 91       	pop	r20
   152ce:	3f 91       	pop	r19
   152d0:	2f 91       	pop	r18
   152d2:	0f 90       	pop	r0
   152d4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   152d8:	0f 90       	pop	r0
   152da:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   152de:	0f 90       	pop	r0
   152e0:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   152e4:	0f 90       	pop	r0
   152e6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   152ea:	0f 90       	pop	r0
   152ec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   152f0:	0f 90       	pop	r0
   152f2:	1f 90       	pop	r1
   152f4:	18 95       	reti

000152f6 <__vector_56>:
   152f6:	1f 92       	push	r1
   152f8:	0f 92       	push	r0
   152fa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   152fe:	0f 92       	push	r0
   15300:	11 24       	eor	r1, r1
   15302:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15306:	0f 92       	push	r0
   15308:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1530c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15310:	0f 92       	push	r0
   15312:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15316:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1531a:	0f 92       	push	r0
   1531c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15320:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15324:	0f 92       	push	r0
   15326:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1532a:	2f 93       	push	r18
   1532c:	3f 93       	push	r19
   1532e:	4f 93       	push	r20
   15330:	5f 93       	push	r21
   15332:	6f 93       	push	r22
   15334:	7f 93       	push	r23
   15336:	8f 93       	push	r24
   15338:	9f 93       	push	r25
   1533a:	af 93       	push	r26
   1533c:	bf 93       	push	r27
   1533e:	ef 93       	push	r30
   15340:	ff 93       	push	r31
   15342:	cf 93       	push	r28
   15344:	df 93       	push	r29
   15346:	cd b7       	in	r28, 0x3d	; 61
   15348:	de b7       	in	r29, 0x3e	; 62
   1534a:	80 91 59 25 	lds	r24, 0x2559	; 0x802559 <tc_tce1_ccb_callback>
   1534e:	90 91 5a 25 	lds	r25, 0x255A	; 0x80255a <tc_tce1_ccb_callback+0x1>
   15352:	89 2b       	or	r24, r25
   15354:	31 f0       	breq	.+12     	; 0x15362 <__vector_56+0x6c>
   15356:	80 91 59 25 	lds	r24, 0x2559	; 0x802559 <tc_tce1_ccb_callback>
   1535a:	90 91 5a 25 	lds	r25, 0x255A	; 0x80255a <tc_tce1_ccb_callback+0x1>
   1535e:	fc 01       	movw	r30, r24
   15360:	19 95       	eicall
   15362:	00 00       	nop
   15364:	df 91       	pop	r29
   15366:	cf 91       	pop	r28
   15368:	ff 91       	pop	r31
   1536a:	ef 91       	pop	r30
   1536c:	bf 91       	pop	r27
   1536e:	af 91       	pop	r26
   15370:	9f 91       	pop	r25
   15372:	8f 91       	pop	r24
   15374:	7f 91       	pop	r23
   15376:	6f 91       	pop	r22
   15378:	5f 91       	pop	r21
   1537a:	4f 91       	pop	r20
   1537c:	3f 91       	pop	r19
   1537e:	2f 91       	pop	r18
   15380:	0f 90       	pop	r0
   15382:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15386:	0f 90       	pop	r0
   15388:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1538c:	0f 90       	pop	r0
   1538e:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15392:	0f 90       	pop	r0
   15394:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15398:	0f 90       	pop	r0
   1539a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1539e:	0f 90       	pop	r0
   153a0:	1f 90       	pop	r1
   153a2:	18 95       	reti

000153a4 <__vector_108>:
   153a4:	1f 92       	push	r1
   153a6:	0f 92       	push	r0
   153a8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   153ac:	0f 92       	push	r0
   153ae:	11 24       	eor	r1, r1
   153b0:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   153b4:	0f 92       	push	r0
   153b6:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   153ba:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   153be:	0f 92       	push	r0
   153c0:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   153c4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   153c8:	0f 92       	push	r0
   153ca:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   153ce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   153d2:	0f 92       	push	r0
   153d4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   153d8:	2f 93       	push	r18
   153da:	3f 93       	push	r19
   153dc:	4f 93       	push	r20
   153de:	5f 93       	push	r21
   153e0:	6f 93       	push	r22
   153e2:	7f 93       	push	r23
   153e4:	8f 93       	push	r24
   153e6:	9f 93       	push	r25
   153e8:	af 93       	push	r26
   153ea:	bf 93       	push	r27
   153ec:	ef 93       	push	r30
   153ee:	ff 93       	push	r31
   153f0:	cf 93       	push	r28
   153f2:	df 93       	push	r29
   153f4:	cd b7       	in	r28, 0x3d	; 61
   153f6:	de b7       	in	r29, 0x3e	; 62
   153f8:	80 91 5b 25 	lds	r24, 0x255B	; 0x80255b <tc_tcf0_ovf_callback>
   153fc:	90 91 5c 25 	lds	r25, 0x255C	; 0x80255c <tc_tcf0_ovf_callback+0x1>
   15400:	89 2b       	or	r24, r25
   15402:	31 f0       	breq	.+12     	; 0x15410 <__vector_108+0x6c>
   15404:	80 91 5b 25 	lds	r24, 0x255B	; 0x80255b <tc_tcf0_ovf_callback>
   15408:	90 91 5c 25 	lds	r25, 0x255C	; 0x80255c <tc_tcf0_ovf_callback+0x1>
   1540c:	fc 01       	movw	r30, r24
   1540e:	19 95       	eicall
   15410:	00 00       	nop
   15412:	df 91       	pop	r29
   15414:	cf 91       	pop	r28
   15416:	ff 91       	pop	r31
   15418:	ef 91       	pop	r30
   1541a:	bf 91       	pop	r27
   1541c:	af 91       	pop	r26
   1541e:	9f 91       	pop	r25
   15420:	8f 91       	pop	r24
   15422:	7f 91       	pop	r23
   15424:	6f 91       	pop	r22
   15426:	5f 91       	pop	r21
   15428:	4f 91       	pop	r20
   1542a:	3f 91       	pop	r19
   1542c:	2f 91       	pop	r18
   1542e:	0f 90       	pop	r0
   15430:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15434:	0f 90       	pop	r0
   15436:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1543a:	0f 90       	pop	r0
   1543c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15440:	0f 90       	pop	r0
   15442:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15446:	0f 90       	pop	r0
   15448:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1544c:	0f 90       	pop	r0
   1544e:	1f 90       	pop	r1
   15450:	18 95       	reti

00015452 <__vector_109>:
   15452:	1f 92       	push	r1
   15454:	0f 92       	push	r0
   15456:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1545a:	0f 92       	push	r0
   1545c:	11 24       	eor	r1, r1
   1545e:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15462:	0f 92       	push	r0
   15464:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15468:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1546c:	0f 92       	push	r0
   1546e:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15472:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15476:	0f 92       	push	r0
   15478:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1547c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15480:	0f 92       	push	r0
   15482:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15486:	2f 93       	push	r18
   15488:	3f 93       	push	r19
   1548a:	4f 93       	push	r20
   1548c:	5f 93       	push	r21
   1548e:	6f 93       	push	r22
   15490:	7f 93       	push	r23
   15492:	8f 93       	push	r24
   15494:	9f 93       	push	r25
   15496:	af 93       	push	r26
   15498:	bf 93       	push	r27
   1549a:	ef 93       	push	r30
   1549c:	ff 93       	push	r31
   1549e:	cf 93       	push	r28
   154a0:	df 93       	push	r29
   154a2:	cd b7       	in	r28, 0x3d	; 61
   154a4:	de b7       	in	r29, 0x3e	; 62
   154a6:	80 91 5d 25 	lds	r24, 0x255D	; 0x80255d <tc_tcf0_err_callback>
   154aa:	90 91 5e 25 	lds	r25, 0x255E	; 0x80255e <tc_tcf0_err_callback+0x1>
   154ae:	89 2b       	or	r24, r25
   154b0:	31 f0       	breq	.+12     	; 0x154be <__vector_109+0x6c>
   154b2:	80 91 5d 25 	lds	r24, 0x255D	; 0x80255d <tc_tcf0_err_callback>
   154b6:	90 91 5e 25 	lds	r25, 0x255E	; 0x80255e <tc_tcf0_err_callback+0x1>
   154ba:	fc 01       	movw	r30, r24
   154bc:	19 95       	eicall
   154be:	00 00       	nop
   154c0:	df 91       	pop	r29
   154c2:	cf 91       	pop	r28
   154c4:	ff 91       	pop	r31
   154c6:	ef 91       	pop	r30
   154c8:	bf 91       	pop	r27
   154ca:	af 91       	pop	r26
   154cc:	9f 91       	pop	r25
   154ce:	8f 91       	pop	r24
   154d0:	7f 91       	pop	r23
   154d2:	6f 91       	pop	r22
   154d4:	5f 91       	pop	r21
   154d6:	4f 91       	pop	r20
   154d8:	3f 91       	pop	r19
   154da:	2f 91       	pop	r18
   154dc:	0f 90       	pop	r0
   154de:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   154e2:	0f 90       	pop	r0
   154e4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   154e8:	0f 90       	pop	r0
   154ea:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   154ee:	0f 90       	pop	r0
   154f0:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   154f4:	0f 90       	pop	r0
   154f6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   154fa:	0f 90       	pop	r0
   154fc:	1f 90       	pop	r1
   154fe:	18 95       	reti

00015500 <__vector_110>:
   15500:	1f 92       	push	r1
   15502:	0f 92       	push	r0
   15504:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15508:	0f 92       	push	r0
   1550a:	11 24       	eor	r1, r1
   1550c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15510:	0f 92       	push	r0
   15512:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15516:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1551a:	0f 92       	push	r0
   1551c:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15520:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15524:	0f 92       	push	r0
   15526:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1552a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1552e:	0f 92       	push	r0
   15530:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15534:	2f 93       	push	r18
   15536:	3f 93       	push	r19
   15538:	4f 93       	push	r20
   1553a:	5f 93       	push	r21
   1553c:	6f 93       	push	r22
   1553e:	7f 93       	push	r23
   15540:	8f 93       	push	r24
   15542:	9f 93       	push	r25
   15544:	af 93       	push	r26
   15546:	bf 93       	push	r27
   15548:	ef 93       	push	r30
   1554a:	ff 93       	push	r31
   1554c:	cf 93       	push	r28
   1554e:	df 93       	push	r29
   15550:	cd b7       	in	r28, 0x3d	; 61
   15552:	de b7       	in	r29, 0x3e	; 62
   15554:	80 91 5f 25 	lds	r24, 0x255F	; 0x80255f <tc_tcf0_cca_callback>
   15558:	90 91 60 25 	lds	r25, 0x2560	; 0x802560 <tc_tcf0_cca_callback+0x1>
   1555c:	89 2b       	or	r24, r25
   1555e:	31 f0       	breq	.+12     	; 0x1556c <__vector_110+0x6c>
   15560:	80 91 5f 25 	lds	r24, 0x255F	; 0x80255f <tc_tcf0_cca_callback>
   15564:	90 91 60 25 	lds	r25, 0x2560	; 0x802560 <tc_tcf0_cca_callback+0x1>
   15568:	fc 01       	movw	r30, r24
   1556a:	19 95       	eicall
   1556c:	00 00       	nop
   1556e:	df 91       	pop	r29
   15570:	cf 91       	pop	r28
   15572:	ff 91       	pop	r31
   15574:	ef 91       	pop	r30
   15576:	bf 91       	pop	r27
   15578:	af 91       	pop	r26
   1557a:	9f 91       	pop	r25
   1557c:	8f 91       	pop	r24
   1557e:	7f 91       	pop	r23
   15580:	6f 91       	pop	r22
   15582:	5f 91       	pop	r21
   15584:	4f 91       	pop	r20
   15586:	3f 91       	pop	r19
   15588:	2f 91       	pop	r18
   1558a:	0f 90       	pop	r0
   1558c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15590:	0f 90       	pop	r0
   15592:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15596:	0f 90       	pop	r0
   15598:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1559c:	0f 90       	pop	r0
   1559e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   155a2:	0f 90       	pop	r0
   155a4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   155a8:	0f 90       	pop	r0
   155aa:	1f 90       	pop	r1
   155ac:	18 95       	reti

000155ae <__vector_111>:
   155ae:	1f 92       	push	r1
   155b0:	0f 92       	push	r0
   155b2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   155b6:	0f 92       	push	r0
   155b8:	11 24       	eor	r1, r1
   155ba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   155be:	0f 92       	push	r0
   155c0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   155c4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   155c8:	0f 92       	push	r0
   155ca:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   155ce:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   155d2:	0f 92       	push	r0
   155d4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   155d8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   155dc:	0f 92       	push	r0
   155de:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   155e2:	2f 93       	push	r18
   155e4:	3f 93       	push	r19
   155e6:	4f 93       	push	r20
   155e8:	5f 93       	push	r21
   155ea:	6f 93       	push	r22
   155ec:	7f 93       	push	r23
   155ee:	8f 93       	push	r24
   155f0:	9f 93       	push	r25
   155f2:	af 93       	push	r26
   155f4:	bf 93       	push	r27
   155f6:	ef 93       	push	r30
   155f8:	ff 93       	push	r31
   155fa:	cf 93       	push	r28
   155fc:	df 93       	push	r29
   155fe:	cd b7       	in	r28, 0x3d	; 61
   15600:	de b7       	in	r29, 0x3e	; 62
   15602:	80 91 61 25 	lds	r24, 0x2561	; 0x802561 <tc_tcf0_ccb_callback>
   15606:	90 91 62 25 	lds	r25, 0x2562	; 0x802562 <tc_tcf0_ccb_callback+0x1>
   1560a:	89 2b       	or	r24, r25
   1560c:	31 f0       	breq	.+12     	; 0x1561a <__vector_111+0x6c>
   1560e:	80 91 61 25 	lds	r24, 0x2561	; 0x802561 <tc_tcf0_ccb_callback>
   15612:	90 91 62 25 	lds	r25, 0x2562	; 0x802562 <tc_tcf0_ccb_callback+0x1>
   15616:	fc 01       	movw	r30, r24
   15618:	19 95       	eicall
   1561a:	00 00       	nop
   1561c:	df 91       	pop	r29
   1561e:	cf 91       	pop	r28
   15620:	ff 91       	pop	r31
   15622:	ef 91       	pop	r30
   15624:	bf 91       	pop	r27
   15626:	af 91       	pop	r26
   15628:	9f 91       	pop	r25
   1562a:	8f 91       	pop	r24
   1562c:	7f 91       	pop	r23
   1562e:	6f 91       	pop	r22
   15630:	5f 91       	pop	r21
   15632:	4f 91       	pop	r20
   15634:	3f 91       	pop	r19
   15636:	2f 91       	pop	r18
   15638:	0f 90       	pop	r0
   1563a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1563e:	0f 90       	pop	r0
   15640:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15644:	0f 90       	pop	r0
   15646:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1564a:	0f 90       	pop	r0
   1564c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15650:	0f 90       	pop	r0
   15652:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15656:	0f 90       	pop	r0
   15658:	1f 90       	pop	r1
   1565a:	18 95       	reti

0001565c <__vector_112>:
   1565c:	1f 92       	push	r1
   1565e:	0f 92       	push	r0
   15660:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15664:	0f 92       	push	r0
   15666:	11 24       	eor	r1, r1
   15668:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1566c:	0f 92       	push	r0
   1566e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15672:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15676:	0f 92       	push	r0
   15678:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1567c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15680:	0f 92       	push	r0
   15682:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15686:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1568a:	0f 92       	push	r0
   1568c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15690:	2f 93       	push	r18
   15692:	3f 93       	push	r19
   15694:	4f 93       	push	r20
   15696:	5f 93       	push	r21
   15698:	6f 93       	push	r22
   1569a:	7f 93       	push	r23
   1569c:	8f 93       	push	r24
   1569e:	9f 93       	push	r25
   156a0:	af 93       	push	r26
   156a2:	bf 93       	push	r27
   156a4:	ef 93       	push	r30
   156a6:	ff 93       	push	r31
   156a8:	cf 93       	push	r28
   156aa:	df 93       	push	r29
   156ac:	cd b7       	in	r28, 0x3d	; 61
   156ae:	de b7       	in	r29, 0x3e	; 62
   156b0:	80 91 63 25 	lds	r24, 0x2563	; 0x802563 <tc_tcf0_ccc_callback>
   156b4:	90 91 64 25 	lds	r25, 0x2564	; 0x802564 <tc_tcf0_ccc_callback+0x1>
   156b8:	89 2b       	or	r24, r25
   156ba:	31 f0       	breq	.+12     	; 0x156c8 <__vector_112+0x6c>
   156bc:	80 91 63 25 	lds	r24, 0x2563	; 0x802563 <tc_tcf0_ccc_callback>
   156c0:	90 91 64 25 	lds	r25, 0x2564	; 0x802564 <tc_tcf0_ccc_callback+0x1>
   156c4:	fc 01       	movw	r30, r24
   156c6:	19 95       	eicall
   156c8:	00 00       	nop
   156ca:	df 91       	pop	r29
   156cc:	cf 91       	pop	r28
   156ce:	ff 91       	pop	r31
   156d0:	ef 91       	pop	r30
   156d2:	bf 91       	pop	r27
   156d4:	af 91       	pop	r26
   156d6:	9f 91       	pop	r25
   156d8:	8f 91       	pop	r24
   156da:	7f 91       	pop	r23
   156dc:	6f 91       	pop	r22
   156de:	5f 91       	pop	r21
   156e0:	4f 91       	pop	r20
   156e2:	3f 91       	pop	r19
   156e4:	2f 91       	pop	r18
   156e6:	0f 90       	pop	r0
   156e8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   156ec:	0f 90       	pop	r0
   156ee:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   156f2:	0f 90       	pop	r0
   156f4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   156f8:	0f 90       	pop	r0
   156fa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   156fe:	0f 90       	pop	r0
   15700:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15704:	0f 90       	pop	r0
   15706:	1f 90       	pop	r1
   15708:	18 95       	reti

0001570a <__vector_113>:
   1570a:	1f 92       	push	r1
   1570c:	0f 92       	push	r0
   1570e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15712:	0f 92       	push	r0
   15714:	11 24       	eor	r1, r1
   15716:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1571a:	0f 92       	push	r0
   1571c:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15720:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15724:	0f 92       	push	r0
   15726:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1572a:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1572e:	0f 92       	push	r0
   15730:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15734:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15738:	0f 92       	push	r0
   1573a:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1573e:	2f 93       	push	r18
   15740:	3f 93       	push	r19
   15742:	4f 93       	push	r20
   15744:	5f 93       	push	r21
   15746:	6f 93       	push	r22
   15748:	7f 93       	push	r23
   1574a:	8f 93       	push	r24
   1574c:	9f 93       	push	r25
   1574e:	af 93       	push	r26
   15750:	bf 93       	push	r27
   15752:	ef 93       	push	r30
   15754:	ff 93       	push	r31
   15756:	cf 93       	push	r28
   15758:	df 93       	push	r29
   1575a:	cd b7       	in	r28, 0x3d	; 61
   1575c:	de b7       	in	r29, 0x3e	; 62
   1575e:	80 91 65 25 	lds	r24, 0x2565	; 0x802565 <tc_tcf0_ccd_callback>
   15762:	90 91 66 25 	lds	r25, 0x2566	; 0x802566 <tc_tcf0_ccd_callback+0x1>
   15766:	89 2b       	or	r24, r25
   15768:	31 f0       	breq	.+12     	; 0x15776 <__vector_113+0x6c>
   1576a:	80 91 65 25 	lds	r24, 0x2565	; 0x802565 <tc_tcf0_ccd_callback>
   1576e:	90 91 66 25 	lds	r25, 0x2566	; 0x802566 <tc_tcf0_ccd_callback+0x1>
   15772:	fc 01       	movw	r30, r24
   15774:	19 95       	eicall
   15776:	00 00       	nop
   15778:	df 91       	pop	r29
   1577a:	cf 91       	pop	r28
   1577c:	ff 91       	pop	r31
   1577e:	ef 91       	pop	r30
   15780:	bf 91       	pop	r27
   15782:	af 91       	pop	r26
   15784:	9f 91       	pop	r25
   15786:	8f 91       	pop	r24
   15788:	7f 91       	pop	r23
   1578a:	6f 91       	pop	r22
   1578c:	5f 91       	pop	r21
   1578e:	4f 91       	pop	r20
   15790:	3f 91       	pop	r19
   15792:	2f 91       	pop	r18
   15794:	0f 90       	pop	r0
   15796:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1579a:	0f 90       	pop	r0
   1579c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   157a0:	0f 90       	pop	r0
   157a2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   157a6:	0f 90       	pop	r0
   157a8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   157ac:	0f 90       	pop	r0
   157ae:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   157b2:	0f 90       	pop	r0
   157b4:	1f 90       	pop	r1
   157b6:	18 95       	reti

000157b8 <__vector_114>:
   157b8:	1f 92       	push	r1
   157ba:	0f 92       	push	r0
   157bc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   157c0:	0f 92       	push	r0
   157c2:	11 24       	eor	r1, r1
   157c4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   157c8:	0f 92       	push	r0
   157ca:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   157ce:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   157d2:	0f 92       	push	r0
   157d4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   157d8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   157dc:	0f 92       	push	r0
   157de:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   157e2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   157e6:	0f 92       	push	r0
   157e8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   157ec:	2f 93       	push	r18
   157ee:	3f 93       	push	r19
   157f0:	4f 93       	push	r20
   157f2:	5f 93       	push	r21
   157f4:	6f 93       	push	r22
   157f6:	7f 93       	push	r23
   157f8:	8f 93       	push	r24
   157fa:	9f 93       	push	r25
   157fc:	af 93       	push	r26
   157fe:	bf 93       	push	r27
   15800:	ef 93       	push	r30
   15802:	ff 93       	push	r31
   15804:	cf 93       	push	r28
   15806:	df 93       	push	r29
   15808:	cd b7       	in	r28, 0x3d	; 61
   1580a:	de b7       	in	r29, 0x3e	; 62
   1580c:	80 91 67 25 	lds	r24, 0x2567	; 0x802567 <tc_tcf1_ovf_callback>
   15810:	90 91 68 25 	lds	r25, 0x2568	; 0x802568 <tc_tcf1_ovf_callback+0x1>
   15814:	89 2b       	or	r24, r25
   15816:	31 f0       	breq	.+12     	; 0x15824 <__vector_114+0x6c>
   15818:	80 91 67 25 	lds	r24, 0x2567	; 0x802567 <tc_tcf1_ovf_callback>
   1581c:	90 91 68 25 	lds	r25, 0x2568	; 0x802568 <tc_tcf1_ovf_callback+0x1>
   15820:	fc 01       	movw	r30, r24
   15822:	19 95       	eicall
   15824:	00 00       	nop
   15826:	df 91       	pop	r29
   15828:	cf 91       	pop	r28
   1582a:	ff 91       	pop	r31
   1582c:	ef 91       	pop	r30
   1582e:	bf 91       	pop	r27
   15830:	af 91       	pop	r26
   15832:	9f 91       	pop	r25
   15834:	8f 91       	pop	r24
   15836:	7f 91       	pop	r23
   15838:	6f 91       	pop	r22
   1583a:	5f 91       	pop	r21
   1583c:	4f 91       	pop	r20
   1583e:	3f 91       	pop	r19
   15840:	2f 91       	pop	r18
   15842:	0f 90       	pop	r0
   15844:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15848:	0f 90       	pop	r0
   1584a:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1584e:	0f 90       	pop	r0
   15850:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15854:	0f 90       	pop	r0
   15856:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1585a:	0f 90       	pop	r0
   1585c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15860:	0f 90       	pop	r0
   15862:	1f 90       	pop	r1
   15864:	18 95       	reti

00015866 <__vector_115>:
   15866:	1f 92       	push	r1
   15868:	0f 92       	push	r0
   1586a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1586e:	0f 92       	push	r0
   15870:	11 24       	eor	r1, r1
   15872:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15876:	0f 92       	push	r0
   15878:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1587c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15880:	0f 92       	push	r0
   15882:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15886:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1588a:	0f 92       	push	r0
   1588c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15890:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15894:	0f 92       	push	r0
   15896:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   1589a:	2f 93       	push	r18
   1589c:	3f 93       	push	r19
   1589e:	4f 93       	push	r20
   158a0:	5f 93       	push	r21
   158a2:	6f 93       	push	r22
   158a4:	7f 93       	push	r23
   158a6:	8f 93       	push	r24
   158a8:	9f 93       	push	r25
   158aa:	af 93       	push	r26
   158ac:	bf 93       	push	r27
   158ae:	ef 93       	push	r30
   158b0:	ff 93       	push	r31
   158b2:	cf 93       	push	r28
   158b4:	df 93       	push	r29
   158b6:	cd b7       	in	r28, 0x3d	; 61
   158b8:	de b7       	in	r29, 0x3e	; 62
   158ba:	80 91 69 25 	lds	r24, 0x2569	; 0x802569 <tc_tcf1_err_callback>
   158be:	90 91 6a 25 	lds	r25, 0x256A	; 0x80256a <tc_tcf1_err_callback+0x1>
   158c2:	89 2b       	or	r24, r25
   158c4:	31 f0       	breq	.+12     	; 0x158d2 <__vector_115+0x6c>
   158c6:	80 91 69 25 	lds	r24, 0x2569	; 0x802569 <tc_tcf1_err_callback>
   158ca:	90 91 6a 25 	lds	r25, 0x256A	; 0x80256a <tc_tcf1_err_callback+0x1>
   158ce:	fc 01       	movw	r30, r24
   158d0:	19 95       	eicall
   158d2:	00 00       	nop
   158d4:	df 91       	pop	r29
   158d6:	cf 91       	pop	r28
   158d8:	ff 91       	pop	r31
   158da:	ef 91       	pop	r30
   158dc:	bf 91       	pop	r27
   158de:	af 91       	pop	r26
   158e0:	9f 91       	pop	r25
   158e2:	8f 91       	pop	r24
   158e4:	7f 91       	pop	r23
   158e6:	6f 91       	pop	r22
   158e8:	5f 91       	pop	r21
   158ea:	4f 91       	pop	r20
   158ec:	3f 91       	pop	r19
   158ee:	2f 91       	pop	r18
   158f0:	0f 90       	pop	r0
   158f2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   158f6:	0f 90       	pop	r0
   158f8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   158fc:	0f 90       	pop	r0
   158fe:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15902:	0f 90       	pop	r0
   15904:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15908:	0f 90       	pop	r0
   1590a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1590e:	0f 90       	pop	r0
   15910:	1f 90       	pop	r1
   15912:	18 95       	reti

00015914 <__vector_116>:
   15914:	1f 92       	push	r1
   15916:	0f 92       	push	r0
   15918:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   1591c:	0f 92       	push	r0
   1591e:	11 24       	eor	r1, r1
   15920:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15924:	0f 92       	push	r0
   15926:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   1592a:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   1592e:	0f 92       	push	r0
   15930:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15934:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15938:	0f 92       	push	r0
   1593a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   1593e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15942:	0f 92       	push	r0
   15944:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15948:	2f 93       	push	r18
   1594a:	3f 93       	push	r19
   1594c:	4f 93       	push	r20
   1594e:	5f 93       	push	r21
   15950:	6f 93       	push	r22
   15952:	7f 93       	push	r23
   15954:	8f 93       	push	r24
   15956:	9f 93       	push	r25
   15958:	af 93       	push	r26
   1595a:	bf 93       	push	r27
   1595c:	ef 93       	push	r30
   1595e:	ff 93       	push	r31
   15960:	cf 93       	push	r28
   15962:	df 93       	push	r29
   15964:	cd b7       	in	r28, 0x3d	; 61
   15966:	de b7       	in	r29, 0x3e	; 62
   15968:	80 91 6b 25 	lds	r24, 0x256B	; 0x80256b <tc_tcf1_cca_callback>
   1596c:	90 91 6c 25 	lds	r25, 0x256C	; 0x80256c <tc_tcf1_cca_callback+0x1>
   15970:	89 2b       	or	r24, r25
   15972:	31 f0       	breq	.+12     	; 0x15980 <__vector_116+0x6c>
   15974:	80 91 6b 25 	lds	r24, 0x256B	; 0x80256b <tc_tcf1_cca_callback>
   15978:	90 91 6c 25 	lds	r25, 0x256C	; 0x80256c <tc_tcf1_cca_callback+0x1>
   1597c:	fc 01       	movw	r30, r24
   1597e:	19 95       	eicall
   15980:	00 00       	nop
   15982:	df 91       	pop	r29
   15984:	cf 91       	pop	r28
   15986:	ff 91       	pop	r31
   15988:	ef 91       	pop	r30
   1598a:	bf 91       	pop	r27
   1598c:	af 91       	pop	r26
   1598e:	9f 91       	pop	r25
   15990:	8f 91       	pop	r24
   15992:	7f 91       	pop	r23
   15994:	6f 91       	pop	r22
   15996:	5f 91       	pop	r21
   15998:	4f 91       	pop	r20
   1599a:	3f 91       	pop	r19
   1599c:	2f 91       	pop	r18
   1599e:	0f 90       	pop	r0
   159a0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   159a4:	0f 90       	pop	r0
   159a6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   159aa:	0f 90       	pop	r0
   159ac:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   159b0:	0f 90       	pop	r0
   159b2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   159b6:	0f 90       	pop	r0
   159b8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   159bc:	0f 90       	pop	r0
   159be:	1f 90       	pop	r1
   159c0:	18 95       	reti

000159c2 <__vector_117>:
   159c2:	1f 92       	push	r1
   159c4:	0f 92       	push	r0
   159c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   159ca:	0f 92       	push	r0
   159cc:	11 24       	eor	r1, r1
   159ce:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   159d2:	0f 92       	push	r0
   159d4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   159d8:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   159dc:	0f 92       	push	r0
   159de:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   159e2:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   159e6:	0f 92       	push	r0
   159e8:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   159ec:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   159f0:	0f 92       	push	r0
   159f2:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   159f6:	2f 93       	push	r18
   159f8:	3f 93       	push	r19
   159fa:	4f 93       	push	r20
   159fc:	5f 93       	push	r21
   159fe:	6f 93       	push	r22
   15a00:	7f 93       	push	r23
   15a02:	8f 93       	push	r24
   15a04:	9f 93       	push	r25
   15a06:	af 93       	push	r26
   15a08:	bf 93       	push	r27
   15a0a:	ef 93       	push	r30
   15a0c:	ff 93       	push	r31
   15a0e:	cf 93       	push	r28
   15a10:	df 93       	push	r29
   15a12:	cd b7       	in	r28, 0x3d	; 61
   15a14:	de b7       	in	r29, 0x3e	; 62
   15a16:	80 91 6d 25 	lds	r24, 0x256D	; 0x80256d <tc_tcf1_ccb_callback>
   15a1a:	90 91 6e 25 	lds	r25, 0x256E	; 0x80256e <tc_tcf1_ccb_callback+0x1>
   15a1e:	89 2b       	or	r24, r25
   15a20:	31 f0       	breq	.+12     	; 0x15a2e <__vector_117+0x6c>
   15a22:	80 91 6d 25 	lds	r24, 0x256D	; 0x80256d <tc_tcf1_ccb_callback>
   15a26:	90 91 6e 25 	lds	r25, 0x256E	; 0x80256e <tc_tcf1_ccb_callback+0x1>
   15a2a:	fc 01       	movw	r30, r24
   15a2c:	19 95       	eicall
   15a2e:	00 00       	nop
   15a30:	df 91       	pop	r29
   15a32:	cf 91       	pop	r28
   15a34:	ff 91       	pop	r31
   15a36:	ef 91       	pop	r30
   15a38:	bf 91       	pop	r27
   15a3a:	af 91       	pop	r26
   15a3c:	9f 91       	pop	r25
   15a3e:	8f 91       	pop	r24
   15a40:	7f 91       	pop	r23
   15a42:	6f 91       	pop	r22
   15a44:	5f 91       	pop	r21
   15a46:	4f 91       	pop	r20
   15a48:	3f 91       	pop	r19
   15a4a:	2f 91       	pop	r18
   15a4c:	0f 90       	pop	r0
   15a4e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
   15a52:	0f 90       	pop	r0
   15a54:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
   15a58:	0f 90       	pop	r0
   15a5a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
   15a5e:	0f 90       	pop	r0
   15a60:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
   15a64:	0f 90       	pop	r0
   15a66:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
   15a6a:	0f 90       	pop	r0
   15a6c:	1f 90       	pop	r1
   15a6e:	18 95       	reti

00015a70 <tc_enable>:
   15a70:	cf 93       	push	r28
   15a72:	df 93       	push	r29
   15a74:	00 d0       	rcall	.+0      	; 0x15a76 <tc_enable+0x6>
   15a76:	cd b7       	in	r28, 0x3d	; 61
   15a78:	de b7       	in	r29, 0x3e	; 62
   15a7a:	8a 83       	std	Y+2, r24	; 0x02
   15a7c:	9b 83       	std	Y+3, r25	; 0x03
   15a7e:	0e 94 58 9f 	call	0x13eb0	; 0x13eb0 <cpu_irq_save>
   15a82:	89 83       	std	Y+1, r24	; 0x01
   15a84:	8a 81       	ldd	r24, Y+2	; 0x02
   15a86:	9b 81       	ldd	r25, Y+3	; 0x03
   15a88:	81 15       	cp	r24, r1
   15a8a:	98 40       	sbci	r25, 0x08	; 8
   15a8c:	49 f4       	brne	.+18     	; 0x15aa0 <tc_enable+0x30>
   15a8e:	61 e0       	ldi	r22, 0x01	; 1
   15a90:	83 e0       	ldi	r24, 0x03	; 3
   15a92:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15a96:	64 e0       	ldi	r22, 0x04	; 4
   15a98:	83 e0       	ldi	r24, 0x03	; 3
   15a9a:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15a9e:	66 c0       	rjmp	.+204    	; 0x15b6c <tc_enable+0xfc>
   15aa0:	8a 81       	ldd	r24, Y+2	; 0x02
   15aa2:	9b 81       	ldd	r25, Y+3	; 0x03
   15aa4:	80 34       	cpi	r24, 0x40	; 64
   15aa6:	98 40       	sbci	r25, 0x08	; 8
   15aa8:	49 f4       	brne	.+18     	; 0x15abc <tc_enable+0x4c>
   15aaa:	62 e0       	ldi	r22, 0x02	; 2
   15aac:	83 e0       	ldi	r24, 0x03	; 3
   15aae:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15ab2:	64 e0       	ldi	r22, 0x04	; 4
   15ab4:	83 e0       	ldi	r24, 0x03	; 3
   15ab6:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15aba:	58 c0       	rjmp	.+176    	; 0x15b6c <tc_enable+0xfc>
   15abc:	8a 81       	ldd	r24, Y+2	; 0x02
   15abe:	9b 81       	ldd	r25, Y+3	; 0x03
   15ac0:	81 15       	cp	r24, r1
   15ac2:	99 40       	sbci	r25, 0x09	; 9
   15ac4:	49 f4       	brne	.+18     	; 0x15ad8 <tc_enable+0x68>
   15ac6:	61 e0       	ldi	r22, 0x01	; 1
   15ac8:	84 e0       	ldi	r24, 0x04	; 4
   15aca:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15ace:	64 e0       	ldi	r22, 0x04	; 4
   15ad0:	84 e0       	ldi	r24, 0x04	; 4
   15ad2:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15ad6:	4a c0       	rjmp	.+148    	; 0x15b6c <tc_enable+0xfc>
   15ad8:	8a 81       	ldd	r24, Y+2	; 0x02
   15ada:	9b 81       	ldd	r25, Y+3	; 0x03
   15adc:	80 34       	cpi	r24, 0x40	; 64
   15ade:	99 40       	sbci	r25, 0x09	; 9
   15ae0:	49 f4       	brne	.+18     	; 0x15af4 <tc_enable+0x84>
   15ae2:	62 e0       	ldi	r22, 0x02	; 2
   15ae4:	84 e0       	ldi	r24, 0x04	; 4
   15ae6:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15aea:	64 e0       	ldi	r22, 0x04	; 4
   15aec:	84 e0       	ldi	r24, 0x04	; 4
   15aee:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15af2:	3c c0       	rjmp	.+120    	; 0x15b6c <tc_enable+0xfc>
   15af4:	8a 81       	ldd	r24, Y+2	; 0x02
   15af6:	9b 81       	ldd	r25, Y+3	; 0x03
   15af8:	81 15       	cp	r24, r1
   15afa:	9a 40       	sbci	r25, 0x0A	; 10
   15afc:	49 f4       	brne	.+18     	; 0x15b10 <tc_enable+0xa0>
   15afe:	61 e0       	ldi	r22, 0x01	; 1
   15b00:	85 e0       	ldi	r24, 0x05	; 5
   15b02:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b06:	64 e0       	ldi	r22, 0x04	; 4
   15b08:	85 e0       	ldi	r24, 0x05	; 5
   15b0a:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b0e:	2e c0       	rjmp	.+92     	; 0x15b6c <tc_enable+0xfc>
   15b10:	8a 81       	ldd	r24, Y+2	; 0x02
   15b12:	9b 81       	ldd	r25, Y+3	; 0x03
   15b14:	80 34       	cpi	r24, 0x40	; 64
   15b16:	9a 40       	sbci	r25, 0x0A	; 10
   15b18:	49 f4       	brne	.+18     	; 0x15b2c <tc_enable+0xbc>
   15b1a:	62 e0       	ldi	r22, 0x02	; 2
   15b1c:	85 e0       	ldi	r24, 0x05	; 5
   15b1e:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b22:	64 e0       	ldi	r22, 0x04	; 4
   15b24:	85 e0       	ldi	r24, 0x05	; 5
   15b26:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b2a:	20 c0       	rjmp	.+64     	; 0x15b6c <tc_enable+0xfc>
   15b2c:	8a 81       	ldd	r24, Y+2	; 0x02
   15b2e:	9b 81       	ldd	r25, Y+3	; 0x03
   15b30:	81 15       	cp	r24, r1
   15b32:	9b 40       	sbci	r25, 0x0B	; 11
   15b34:	49 f4       	brne	.+18     	; 0x15b48 <tc_enable+0xd8>
   15b36:	61 e0       	ldi	r22, 0x01	; 1
   15b38:	86 e0       	ldi	r24, 0x06	; 6
   15b3a:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b3e:	64 e0       	ldi	r22, 0x04	; 4
   15b40:	86 e0       	ldi	r24, 0x06	; 6
   15b42:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b46:	12 c0       	rjmp	.+36     	; 0x15b6c <tc_enable+0xfc>
   15b48:	8a 81       	ldd	r24, Y+2	; 0x02
   15b4a:	9b 81       	ldd	r25, Y+3	; 0x03
   15b4c:	80 34       	cpi	r24, 0x40	; 64
   15b4e:	9b 40       	sbci	r25, 0x0B	; 11
   15b50:	49 f4       	brne	.+18     	; 0x15b64 <tc_enable+0xf4>
   15b52:	62 e0       	ldi	r22, 0x02	; 2
   15b54:	86 e0       	ldi	r24, 0x06	; 6
   15b56:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b5a:	64 e0       	ldi	r22, 0x04	; 4
   15b5c:	86 e0       	ldi	r24, 0x06	; 6
   15b5e:	0e 94 91 9a 	call	0x13522	; 0x13522 <sysclk_enable_module>
   15b62:	04 c0       	rjmp	.+8      	; 0x15b6c <tc_enable+0xfc>
   15b64:	89 81       	ldd	r24, Y+1	; 0x01
   15b66:	0e 94 68 9f 	call	0x13ed0	; 0x13ed0 <cpu_irq_restore>
   15b6a:	06 c0       	rjmp	.+12     	; 0x15b78 <tc_enable+0x108>
   15b6c:	81 e0       	ldi	r24, 0x01	; 1
   15b6e:	0e 94 78 9f 	call	0x13ef0	; 0x13ef0 <sleepmgr_lock_mode>
   15b72:	89 81       	ldd	r24, Y+1	; 0x01
   15b74:	0e 94 68 9f 	call	0x13ed0	; 0x13ed0 <cpu_irq_restore>
   15b78:	23 96       	adiw	r28, 0x03	; 3
   15b7a:	cd bf       	out	0x3d, r28	; 61
   15b7c:	de bf       	out	0x3e, r29	; 62
   15b7e:	df 91       	pop	r29
   15b80:	cf 91       	pop	r28
   15b82:	08 95       	ret

00015b84 <tc_set_overflow_interrupt_callback>:
   15b84:	cf 93       	push	r28
   15b86:	df 93       	push	r29
   15b88:	00 d0       	rcall	.+0      	; 0x15b8a <tc_set_overflow_interrupt_callback+0x6>
   15b8a:	1f 92       	push	r1
   15b8c:	cd b7       	in	r28, 0x3d	; 61
   15b8e:	de b7       	in	r29, 0x3e	; 62
   15b90:	89 83       	std	Y+1, r24	; 0x01
   15b92:	9a 83       	std	Y+2, r25	; 0x02
   15b94:	6b 83       	std	Y+3, r22	; 0x03
   15b96:	7c 83       	std	Y+4, r23	; 0x04
   15b98:	89 81       	ldd	r24, Y+1	; 0x01
   15b9a:	9a 81       	ldd	r25, Y+2	; 0x02
   15b9c:	81 15       	cp	r24, r1
   15b9e:	98 40       	sbci	r25, 0x08	; 8
   15ba0:	39 f4       	brne	.+14     	; 0x15bb0 <tc_set_overflow_interrupt_callback+0x2c>
   15ba2:	8b 81       	ldd	r24, Y+3	; 0x03
   15ba4:	9c 81       	ldd	r25, Y+4	; 0x04
   15ba6:	80 93 1f 25 	sts	0x251F, r24	; 0x80251f <tc_tcc0_ovf_callback>
   15baa:	90 93 20 25 	sts	0x2520, r25	; 0x802520 <tc_tcc0_ovf_callback+0x1>
   15bae:	53 c0       	rjmp	.+166    	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15bb0:	89 81       	ldd	r24, Y+1	; 0x01
   15bb2:	9a 81       	ldd	r25, Y+2	; 0x02
   15bb4:	80 34       	cpi	r24, 0x40	; 64
   15bb6:	98 40       	sbci	r25, 0x08	; 8
   15bb8:	39 f4       	brne	.+14     	; 0x15bc8 <tc_set_overflow_interrupt_callback+0x44>
   15bba:	8b 81       	ldd	r24, Y+3	; 0x03
   15bbc:	9c 81       	ldd	r25, Y+4	; 0x04
   15bbe:	80 93 2b 25 	sts	0x252B, r24	; 0x80252b <tc_tcc1_ovf_callback>
   15bc2:	90 93 2c 25 	sts	0x252C, r25	; 0x80252c <tc_tcc1_ovf_callback+0x1>
   15bc6:	47 c0       	rjmp	.+142    	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15bc8:	89 81       	ldd	r24, Y+1	; 0x01
   15bca:	9a 81       	ldd	r25, Y+2	; 0x02
   15bcc:	81 15       	cp	r24, r1
   15bce:	99 40       	sbci	r25, 0x09	; 9
   15bd0:	39 f4       	brne	.+14     	; 0x15be0 <tc_set_overflow_interrupt_callback+0x5c>
   15bd2:	8b 81       	ldd	r24, Y+3	; 0x03
   15bd4:	9c 81       	ldd	r25, Y+4	; 0x04
   15bd6:	80 93 33 25 	sts	0x2533, r24	; 0x802533 <tc_tcd0_ovf_callback>
   15bda:	90 93 34 25 	sts	0x2534, r25	; 0x802534 <tc_tcd0_ovf_callback+0x1>
   15bde:	3b c0       	rjmp	.+118    	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15be0:	89 81       	ldd	r24, Y+1	; 0x01
   15be2:	9a 81       	ldd	r25, Y+2	; 0x02
   15be4:	80 34       	cpi	r24, 0x40	; 64
   15be6:	99 40       	sbci	r25, 0x09	; 9
   15be8:	39 f4       	brne	.+14     	; 0x15bf8 <tc_set_overflow_interrupt_callback+0x74>
   15bea:	8b 81       	ldd	r24, Y+3	; 0x03
   15bec:	9c 81       	ldd	r25, Y+4	; 0x04
   15bee:	80 93 3f 25 	sts	0x253F, r24	; 0x80253f <tc_tcd1_ovf_callback>
   15bf2:	90 93 40 25 	sts	0x2540, r25	; 0x802540 <tc_tcd1_ovf_callback+0x1>
   15bf6:	2f c0       	rjmp	.+94     	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15bf8:	89 81       	ldd	r24, Y+1	; 0x01
   15bfa:	9a 81       	ldd	r25, Y+2	; 0x02
   15bfc:	81 15       	cp	r24, r1
   15bfe:	9a 40       	sbci	r25, 0x0A	; 10
   15c00:	39 f4       	brne	.+14     	; 0x15c10 <tc_set_overflow_interrupt_callback+0x8c>
   15c02:	8b 81       	ldd	r24, Y+3	; 0x03
   15c04:	9c 81       	ldd	r25, Y+4	; 0x04
   15c06:	80 93 47 25 	sts	0x2547, r24	; 0x802547 <tc_tce0_ovf_callback>
   15c0a:	90 93 48 25 	sts	0x2548, r25	; 0x802548 <tc_tce0_ovf_callback+0x1>
   15c0e:	23 c0       	rjmp	.+70     	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15c10:	89 81       	ldd	r24, Y+1	; 0x01
   15c12:	9a 81       	ldd	r25, Y+2	; 0x02
   15c14:	80 34       	cpi	r24, 0x40	; 64
   15c16:	9a 40       	sbci	r25, 0x0A	; 10
   15c18:	39 f4       	brne	.+14     	; 0x15c28 <tc_set_overflow_interrupt_callback+0xa4>
   15c1a:	8b 81       	ldd	r24, Y+3	; 0x03
   15c1c:	9c 81       	ldd	r25, Y+4	; 0x04
   15c1e:	80 93 53 25 	sts	0x2553, r24	; 0x802553 <tc_tce1_ovf_callback>
   15c22:	90 93 54 25 	sts	0x2554, r25	; 0x802554 <tc_tce1_ovf_callback+0x1>
   15c26:	17 c0       	rjmp	.+46     	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15c28:	89 81       	ldd	r24, Y+1	; 0x01
   15c2a:	9a 81       	ldd	r25, Y+2	; 0x02
   15c2c:	81 15       	cp	r24, r1
   15c2e:	9b 40       	sbci	r25, 0x0B	; 11
   15c30:	39 f4       	brne	.+14     	; 0x15c40 <tc_set_overflow_interrupt_callback+0xbc>
   15c32:	8b 81       	ldd	r24, Y+3	; 0x03
   15c34:	9c 81       	ldd	r25, Y+4	; 0x04
   15c36:	80 93 5b 25 	sts	0x255B, r24	; 0x80255b <tc_tcf0_ovf_callback>
   15c3a:	90 93 5c 25 	sts	0x255C, r25	; 0x80255c <tc_tcf0_ovf_callback+0x1>
   15c3e:	0b c0       	rjmp	.+22     	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15c40:	89 81       	ldd	r24, Y+1	; 0x01
   15c42:	9a 81       	ldd	r25, Y+2	; 0x02
   15c44:	80 34       	cpi	r24, 0x40	; 64
   15c46:	9b 40       	sbci	r25, 0x0B	; 11
   15c48:	31 f4       	brne	.+12     	; 0x15c56 <tc_set_overflow_interrupt_callback+0xd2>
   15c4a:	8b 81       	ldd	r24, Y+3	; 0x03
   15c4c:	9c 81       	ldd	r25, Y+4	; 0x04
   15c4e:	80 93 67 25 	sts	0x2567, r24	; 0x802567 <tc_tcf1_ovf_callback>
   15c52:	90 93 68 25 	sts	0x2568, r25	; 0x802568 <tc_tcf1_ovf_callback+0x1>
   15c56:	00 00       	nop
   15c58:	24 96       	adiw	r28, 0x04	; 4
   15c5a:	cd bf       	out	0x3d, r28	; 61
   15c5c:	de bf       	out	0x3e, r29	; 62
   15c5e:	df 91       	pop	r29
   15c60:	cf 91       	pop	r28
   15c62:	08 95       	ret

00015c64 <tc_set_cca_interrupt_callback>:

void tc_set_cca_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
   15c64:	cf 93       	push	r28
   15c66:	df 93       	push	r29
   15c68:	00 d0       	rcall	.+0      	; 0x15c6a <tc_set_cca_interrupt_callback+0x6>
   15c6a:	1f 92       	push	r1
   15c6c:	cd b7       	in	r28, 0x3d	; 61
   15c6e:	de b7       	in	r29, 0x3e	; 62
   15c70:	89 83       	std	Y+1, r24	; 0x01
   15c72:	9a 83       	std	Y+2, r25	; 0x02
   15c74:	6b 83       	std	Y+3, r22	; 0x03
   15c76:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
   15c78:	89 81       	ldd	r24, Y+1	; 0x01
   15c7a:	9a 81       	ldd	r25, Y+2	; 0x02
   15c7c:	81 15       	cp	r24, r1
   15c7e:	98 40       	sbci	r25, 0x08	; 8
   15c80:	39 f4       	brne	.+14     	; 0x15c90 <tc_set_cca_interrupt_callback+0x2c>
		tc_tcc0_cca_callback = callback;
   15c82:	8b 81       	ldd	r24, Y+3	; 0x03
   15c84:	9c 81       	ldd	r25, Y+4	; 0x04
   15c86:	80 93 23 25 	sts	0x2523, r24	; 0x802523 <tc_tcc0_cca_callback>
   15c8a:	90 93 24 25 	sts	0x2524, r25	; 0x802524 <tc_tcc0_cca_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_cca_callback = callback;
	}  else
#endif
	{}
}
   15c8e:	53 c0       	rjmp	.+166    	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
		tc_tcc0_cca_callback = callback;
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
   15c90:	89 81       	ldd	r24, Y+1	; 0x01
   15c92:	9a 81       	ldd	r25, Y+2	; 0x02
   15c94:	80 34       	cpi	r24, 0x40	; 64
   15c96:	98 40       	sbci	r25, 0x08	; 8
   15c98:	39 f4       	brne	.+14     	; 0x15ca8 <tc_set_cca_interrupt_callback+0x44>
		tc_tcc1_cca_callback = callback;
   15c9a:	8b 81       	ldd	r24, Y+3	; 0x03
   15c9c:	9c 81       	ldd	r25, Y+4	; 0x04
   15c9e:	80 93 2f 25 	sts	0x252F, r24	; 0x80252f <tc_tcc1_cca_callback>
   15ca2:	90 93 30 25 	sts	0x2530, r25	; 0x802530 <tc_tcc1_cca_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_cca_callback = callback;
	}  else
#endif
	{}
}
   15ca6:	47 c0       	rjmp	.+142    	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		tc_tcc1_cca_callback = callback;
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
   15ca8:	89 81       	ldd	r24, Y+1	; 0x01
   15caa:	9a 81       	ldd	r25, Y+2	; 0x02
   15cac:	81 15       	cp	r24, r1
   15cae:	99 40       	sbci	r25, 0x09	; 9
   15cb0:	39 f4       	brne	.+14     	; 0x15cc0 <tc_set_cca_interrupt_callback+0x5c>
		tc_tcd0_cca_callback = callback;
   15cb2:	8b 81       	ldd	r24, Y+3	; 0x03
   15cb4:	9c 81       	ldd	r25, Y+4	; 0x04
   15cb6:	80 93 37 25 	sts	0x2537, r24	; 0x802537 <tc_tcd0_cca_callback>
   15cba:	90 93 38 25 	sts	0x2538, r25	; 0x802538 <tc_tcd0_cca_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_cca_callback = callback;
	}  else
#endif
	{}
}
   15cbe:	3b c0       	rjmp	.+118    	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
		tc_tcd0_cca_callback = callback;
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
   15cc0:	89 81       	ldd	r24, Y+1	; 0x01
   15cc2:	9a 81       	ldd	r25, Y+2	; 0x02
   15cc4:	80 34       	cpi	r24, 0x40	; 64
   15cc6:	99 40       	sbci	r25, 0x09	; 9
   15cc8:	39 f4       	brne	.+14     	; 0x15cd8 <tc_set_cca_interrupt_callback+0x74>
		tc_tcd1_cca_callback = callback;
   15cca:	8b 81       	ldd	r24, Y+3	; 0x03
   15ccc:	9c 81       	ldd	r25, Y+4	; 0x04
   15cce:	80 93 43 25 	sts	0x2543, r24	; 0x802543 <tc_tcd1_cca_callback>
   15cd2:	90 93 44 25 	sts	0x2544, r25	; 0x802544 <tc_tcd1_cca_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_cca_callback = callback;
	}  else
#endif
	{}
}
   15cd6:	2f c0       	rjmp	.+94     	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_cca_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
   15cd8:	89 81       	ldd	r24, Y+1	; 0x01
   15cda:	9a 81       	ldd	r25, Y+2	; 0x02
   15cdc:	81 15       	cp	r24, r1
   15cde:	9a 40       	sbci	r25, 0x0A	; 10
   15ce0:	39 f4       	brne	.+14     	; 0x15cf0 <tc_set_cca_interrupt_callback+0x8c>
		tc_tce0_cca_callback = callback;
   15ce2:	8b 81       	ldd	r24, Y+3	; 0x03
   15ce4:	9c 81       	ldd	r25, Y+4	; 0x04
   15ce6:	80 93 4b 25 	sts	0x254B, r24	; 0x80254b <tc_tce0_cca_callback>
   15cea:	90 93 4c 25 	sts	0x254C, r25	; 0x80254c <tc_tce0_cca_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_cca_callback = callback;
	}  else
#endif
	{}
}
   15cee:	23 c0       	rjmp	.+70     	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_cca_callback = callback;
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
   15cf0:	89 81       	ldd	r24, Y+1	; 0x01
   15cf2:	9a 81       	ldd	r25, Y+2	; 0x02
   15cf4:	80 34       	cpi	r24, 0x40	; 64
   15cf6:	9a 40       	sbci	r25, 0x0A	; 10
   15cf8:	39 f4       	brne	.+14     	; 0x15d08 <tc_set_cca_interrupt_callback+0xa4>
		tc_tce1_cca_callback = callback;
   15cfa:	8b 81       	ldd	r24, Y+3	; 0x03
   15cfc:	9c 81       	ldd	r25, Y+4	; 0x04
   15cfe:	80 93 57 25 	sts	0x2557, r24	; 0x802557 <tc_tce1_cca_callback>
   15d02:	90 93 58 25 	sts	0x2558, r25	; 0x802558 <tc_tce1_cca_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_cca_callback = callback;
	}  else
#endif
	{}
}
   15d06:	17 c0       	rjmp	.+46     	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_cca_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
   15d08:	89 81       	ldd	r24, Y+1	; 0x01
   15d0a:	9a 81       	ldd	r25, Y+2	; 0x02
   15d0c:	81 15       	cp	r24, r1
   15d0e:	9b 40       	sbci	r25, 0x0B	; 11
   15d10:	39 f4       	brne	.+14     	; 0x15d20 <tc_set_cca_interrupt_callback+0xbc>
		tc_tcf0_cca_callback = callback;
   15d12:	8b 81       	ldd	r24, Y+3	; 0x03
   15d14:	9c 81       	ldd	r25, Y+4	; 0x04
   15d16:	80 93 5f 25 	sts	0x255F, r24	; 0x80255f <tc_tcf0_cca_callback>
   15d1a:	90 93 60 25 	sts	0x2560, r25	; 0x802560 <tc_tcf0_cca_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_cca_callback = callback;
	}  else
#endif
	{}
}
   15d1e:	0b c0       	rjmp	.+22     	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_cca_callback = callback;
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
   15d20:	89 81       	ldd	r24, Y+1	; 0x01
   15d22:	9a 81       	ldd	r25, Y+2	; 0x02
   15d24:	80 34       	cpi	r24, 0x40	; 64
   15d26:	9b 40       	sbci	r25, 0x0B	; 11
   15d28:	31 f4       	brne	.+12     	; 0x15d36 <tc_set_cca_interrupt_callback+0xd2>
		tc_tcf1_cca_callback = callback;
   15d2a:	8b 81       	ldd	r24, Y+3	; 0x03
   15d2c:	9c 81       	ldd	r25, Y+4	; 0x04
   15d2e:	80 93 6b 25 	sts	0x256B, r24	; 0x80256b <tc_tcf1_cca_callback>
   15d32:	90 93 6c 25 	sts	0x256C, r25	; 0x80256c <tc_tcf1_cca_callback+0x1>
	}  else
#endif
	{}
}
   15d36:	00 00       	nop
   15d38:	24 96       	adiw	r28, 0x04	; 4
   15d3a:	cd bf       	out	0x3d, r28	; 61
   15d3c:	de bf       	out	0x3e, r29	; 62
   15d3e:	df 91       	pop	r29
   15d40:	cf 91       	pop	r28
   15d42:	08 95       	ret

00015d44 <tc_set_ccb_interrupt_callback>:

void tc_set_ccb_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
   15d44:	cf 93       	push	r28
   15d46:	df 93       	push	r29
   15d48:	00 d0       	rcall	.+0      	; 0x15d4a <tc_set_ccb_interrupt_callback+0x6>
   15d4a:	1f 92       	push	r1
   15d4c:	cd b7       	in	r28, 0x3d	; 61
   15d4e:	de b7       	in	r29, 0x3e	; 62
   15d50:	89 83       	std	Y+1, r24	; 0x01
   15d52:	9a 83       	std	Y+2, r25	; 0x02
   15d54:	6b 83       	std	Y+3, r22	; 0x03
   15d56:	7c 83       	std	Y+4, r23	; 0x04
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
   15d58:	89 81       	ldd	r24, Y+1	; 0x01
   15d5a:	9a 81       	ldd	r25, Y+2	; 0x02
   15d5c:	81 15       	cp	r24, r1
   15d5e:	98 40       	sbci	r25, 0x08	; 8
   15d60:	39 f4       	brne	.+14     	; 0x15d70 <tc_set_ccb_interrupt_callback+0x2c>
		tc_tcc0_ccb_callback = callback;
   15d62:	8b 81       	ldd	r24, Y+3	; 0x03
   15d64:	9c 81       	ldd	r25, Y+4	; 0x04
   15d66:	80 93 25 25 	sts	0x2525, r24	; 0x802525 <tc_tcc0_ccb_callback>
   15d6a:	90 93 26 25 	sts	0x2526, r25	; 0x802526 <tc_tcc0_ccb_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ccb_callback = callback;
	} else
#endif
	{}
}
   15d6e:	53 c0       	rjmp	.+166    	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
		tc_tcc0_ccb_callback = callback;
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
   15d70:	89 81       	ldd	r24, Y+1	; 0x01
   15d72:	9a 81       	ldd	r25, Y+2	; 0x02
   15d74:	80 34       	cpi	r24, 0x40	; 64
   15d76:	98 40       	sbci	r25, 0x08	; 8
   15d78:	39 f4       	brne	.+14     	; 0x15d88 <tc_set_ccb_interrupt_callback+0x44>
		tc_tcc1_ccb_callback = callback;
   15d7a:	8b 81       	ldd	r24, Y+3	; 0x03
   15d7c:	9c 81       	ldd	r25, Y+4	; 0x04
   15d7e:	80 93 31 25 	sts	0x2531, r24	; 0x802531 <tc_tcc1_ccb_callback>
   15d82:	90 93 32 25 	sts	0x2532, r25	; 0x802532 <tc_tcc1_ccb_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ccb_callback = callback;
	} else
#endif
	{}
}
   15d86:	47 c0       	rjmp	.+142    	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
		tc_tcc1_ccb_callback = callback;
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
   15d88:	89 81       	ldd	r24, Y+1	; 0x01
   15d8a:	9a 81       	ldd	r25, Y+2	; 0x02
   15d8c:	81 15       	cp	r24, r1
   15d8e:	99 40       	sbci	r25, 0x09	; 9
   15d90:	39 f4       	brne	.+14     	; 0x15da0 <tc_set_ccb_interrupt_callback+0x5c>
		tc_tcd0_ccb_callback = callback;
   15d92:	8b 81       	ldd	r24, Y+3	; 0x03
   15d94:	9c 81       	ldd	r25, Y+4	; 0x04
   15d96:	80 93 39 25 	sts	0x2539, r24	; 0x802539 <tc_tcd0_ccb_callback>
   15d9a:	90 93 3a 25 	sts	0x253A, r25	; 0x80253a <tc_tcd0_ccb_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ccb_callback = callback;
	} else
#endif
	{}
}
   15d9e:	3b c0       	rjmp	.+118    	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
		tc_tcd0_ccb_callback = callback;
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
   15da0:	89 81       	ldd	r24, Y+1	; 0x01
   15da2:	9a 81       	ldd	r25, Y+2	; 0x02
   15da4:	80 34       	cpi	r24, 0x40	; 64
   15da6:	99 40       	sbci	r25, 0x09	; 9
   15da8:	39 f4       	brne	.+14     	; 0x15db8 <tc_set_ccb_interrupt_callback+0x74>
		tc_tcd1_ccb_callback = callback;
   15daa:	8b 81       	ldd	r24, Y+3	; 0x03
   15dac:	9c 81       	ldd	r25, Y+4	; 0x04
   15dae:	80 93 45 25 	sts	0x2545, r24	; 0x802545 <tc_tcd1_ccb_callback>
   15db2:	90 93 46 25 	sts	0x2546, r25	; 0x802546 <tc_tcd1_ccb_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ccb_callback = callback;
	} else
#endif
	{}
}
   15db6:	2f c0       	rjmp	.+94     	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
		tc_tcd1_ccb_callback = callback;
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
   15db8:	89 81       	ldd	r24, Y+1	; 0x01
   15dba:	9a 81       	ldd	r25, Y+2	; 0x02
   15dbc:	81 15       	cp	r24, r1
   15dbe:	9a 40       	sbci	r25, 0x0A	; 10
   15dc0:	39 f4       	brne	.+14     	; 0x15dd0 <tc_set_ccb_interrupt_callback+0x8c>
		tc_tce0_ccb_callback = callback;
   15dc2:	8b 81       	ldd	r24, Y+3	; 0x03
   15dc4:	9c 81       	ldd	r25, Y+4	; 0x04
   15dc6:	80 93 4d 25 	sts	0x254D, r24	; 0x80254d <tc_tce0_ccb_callback>
   15dca:	90 93 4e 25 	sts	0x254E, r25	; 0x80254e <tc_tce0_ccb_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ccb_callback = callback;
	} else
#endif
	{}
}
   15dce:	23 c0       	rjmp	.+70     	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
		tc_tce0_ccb_callback = callback;
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
   15dd0:	89 81       	ldd	r24, Y+1	; 0x01
   15dd2:	9a 81       	ldd	r25, Y+2	; 0x02
   15dd4:	80 34       	cpi	r24, 0x40	; 64
   15dd6:	9a 40       	sbci	r25, 0x0A	; 10
   15dd8:	39 f4       	brne	.+14     	; 0x15de8 <tc_set_ccb_interrupt_callback+0xa4>
		tc_tce1_ccb_callback = callback;
   15dda:	8b 81       	ldd	r24, Y+3	; 0x03
   15ddc:	9c 81       	ldd	r25, Y+4	; 0x04
   15dde:	80 93 59 25 	sts	0x2559, r24	; 0x802559 <tc_tce1_ccb_callback>
   15de2:	90 93 5a 25 	sts	0x255A, r25	; 0x80255a <tc_tce1_ccb_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ccb_callback = callback;
	} else
#endif
	{}
}
   15de6:	17 c0       	rjmp	.+46     	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
		tc_tce1_ccb_callback = callback;
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
   15de8:	89 81       	ldd	r24, Y+1	; 0x01
   15dea:	9a 81       	ldd	r25, Y+2	; 0x02
   15dec:	81 15       	cp	r24, r1
   15dee:	9b 40       	sbci	r25, 0x0B	; 11
   15df0:	39 f4       	brne	.+14     	; 0x15e00 <tc_set_ccb_interrupt_callback+0xbc>
		tc_tcf0_ccb_callback = callback;
   15df2:	8b 81       	ldd	r24, Y+3	; 0x03
   15df4:	9c 81       	ldd	r25, Y+4	; 0x04
   15df6:	80 93 61 25 	sts	0x2561, r24	; 0x802561 <tc_tcf0_ccb_callback>
   15dfa:	90 93 62 25 	sts	0x2562, r25	; 0x802562 <tc_tcf0_ccb_callback+0x1>
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
		tc_tcf1_ccb_callback = callback;
	} else
#endif
	{}
}
   15dfe:	0b c0       	rjmp	.+22     	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
		tc_tcf0_ccb_callback = callback;
	} else
#endif
#ifdef TCF1
	if ((uintptr_t) tc == (uintptr_t) & TCF1) {
   15e00:	89 81       	ldd	r24, Y+1	; 0x01
   15e02:	9a 81       	ldd	r25, Y+2	; 0x02
   15e04:	80 34       	cpi	r24, 0x40	; 64
   15e06:	9b 40       	sbci	r25, 0x0B	; 11
   15e08:	31 f4       	brne	.+12     	; 0x15e16 <tc_set_ccb_interrupt_callback+0xd2>
		tc_tcf1_ccb_callback = callback;
   15e0a:	8b 81       	ldd	r24, Y+3	; 0x03
   15e0c:	9c 81       	ldd	r25, Y+4	; 0x04
   15e0e:	80 93 6d 25 	sts	0x256D, r24	; 0x80256d <tc_tcf1_ccb_callback>
   15e12:	90 93 6e 25 	sts	0x256E, r25	; 0x80256e <tc_tcf1_ccb_callback+0x1>
	} else
#endif
	{}
}
   15e16:	00 00       	nop
   15e18:	24 96       	adiw	r28, 0x04	; 4
   15e1a:	cd bf       	out	0x3d, r28	; 61
   15e1c:	de bf       	out	0x3e, r29	; 62
   15e1e:	df 91       	pop	r29
   15e20:	cf 91       	pop	r28
   15e22:	08 95       	ret

00015e24 <wdt_wait_while_busy>:
	uint8_t temp = (WDT_WPER_gm & (win_period << WDT_WPER_gp)) |
			(WDT.WINCTRL & WDT_WEN_bm) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
   15e24:	cf 93       	push	r28
   15e26:	df 93       	push	r29
   15e28:	cd b7       	in	r28, 0x3d	; 61
   15e2a:	de b7       	in	r29, 0x3e	; 62
   15e2c:	00 00       	nop
   15e2e:	80 e8       	ldi	r24, 0x80	; 128
   15e30:	90 e0       	ldi	r25, 0x00	; 0
   15e32:	fc 01       	movw	r30, r24
   15e34:	82 81       	ldd	r24, Z+2	; 0x02
   15e36:	88 2f       	mov	r24, r24
   15e38:	90 e0       	ldi	r25, 0x00	; 0
   15e3a:	81 70       	andi	r24, 0x01	; 1
   15e3c:	99 27       	eor	r25, r25
   15e3e:	89 2b       	or	r24, r25
   15e40:	b1 f7       	brne	.-20     	; 0x15e2e <wdt_wait_while_busy+0xa>
   15e42:	00 00       	nop
   15e44:	df 91       	pop	r29
   15e46:	cf 91       	pop	r28
   15e48:	08 95       	ret

00015e4a <wdt_set_timeout_period>:
   15e4a:	cf 93       	push	r28
   15e4c:	df 93       	push	r29
   15e4e:	1f 92       	push	r1
   15e50:	1f 92       	push	r1
   15e52:	cd b7       	in	r28, 0x3d	; 61
   15e54:	de b7       	in	r29, 0x3e	; 62
   15e56:	8a 83       	std	Y+2, r24	; 0x02
   15e58:	8a 81       	ldd	r24, Y+2	; 0x02
   15e5a:	88 2f       	mov	r24, r24
   15e5c:	90 e0       	ldi	r25, 0x00	; 0
   15e5e:	88 0f       	add	r24, r24
   15e60:	99 1f       	adc	r25, r25
   15e62:	88 0f       	add	r24, r24
   15e64:	99 1f       	adc	r25, r25
   15e66:	28 2f       	mov	r18, r24
   15e68:	2c 73       	andi	r18, 0x3C	; 60
   15e6a:	80 e8       	ldi	r24, 0x80	; 128
   15e6c:	90 e0       	ldi	r25, 0x00	; 0
   15e6e:	fc 01       	movw	r30, r24
   15e70:	80 81       	ld	r24, Z
   15e72:	82 70       	andi	r24, 0x02	; 2
   15e74:	82 2b       	or	r24, r18
   15e76:	81 60       	ori	r24, 0x01	; 1
   15e78:	89 83       	std	Y+1, r24	; 0x01
   15e7a:	69 81       	ldd	r22, Y+1	; 0x01
   15e7c:	80 e8       	ldi	r24, 0x80	; 128
   15e7e:	90 e0       	ldi	r25, 0x00	; 0
   15e80:	bb d4       	rcall	.+2422   	; 0x167f8 <ccp_write_io>
   15e82:	d0 df       	rcall	.-96     	; 0x15e24 <wdt_wait_while_busy>
   15e84:	00 00       	nop
   15e86:	0f 90       	pop	r0
   15e88:	0f 90       	pop	r0
   15e8a:	df 91       	pop	r29
   15e8c:	cf 91       	pop	r28
   15e8e:	08 95       	ret

00015e90 <wdt_disable>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
   15e90:	cf 93       	push	r28
   15e92:	df 93       	push	r29
   15e94:	1f 92       	push	r1
   15e96:	cd b7       	in	r28, 0x3d	; 61
   15e98:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
   15e9a:	80 e8       	ldi	r24, 0x80	; 128
   15e9c:	90 e0       	ldi	r25, 0x00	; 0
   15e9e:	fc 01       	movw	r30, r24
   15ea0:	80 81       	ld	r24, Z
   15ea2:	8c 7f       	andi	r24, 0xFC	; 252
   15ea4:	81 60       	ori	r24, 0x01	; 1
   15ea6:	89 83       	std	Y+1, r24	; 0x01
	ccp_write_io((void *)&WDT.CTRL, temp);
   15ea8:	69 81       	ldd	r22, Y+1	; 0x01
   15eaa:	80 e8       	ldi	r24, 0x80	; 128
   15eac:	90 e0       	ldi	r25, 0x00	; 0
   15eae:	a4 d4       	rcall	.+2376   	; 0x167f8 <ccp_write_io>
}
   15eb0:	00 00       	nop
   15eb2:	0f 90       	pop	r0
   15eb4:	df 91       	pop	r29
   15eb6:	cf 91       	pop	r28
   15eb8:	08 95       	ret

00015eba <wdt_enable>:
 *  automatically ignored during the change enable period. The function will
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
   15eba:	cf 93       	push	r28
   15ebc:	df 93       	push	r29
   15ebe:	1f 92       	push	r1
   15ec0:	cd b7       	in	r28, 0x3d	; 61
   15ec2:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
   15ec4:	80 e8       	ldi	r24, 0x80	; 128
   15ec6:	90 e0       	ldi	r25, 0x00	; 0
   15ec8:	fc 01       	movw	r30, r24
   15eca:	80 81       	ld	r24, Z
   15ecc:	8c 73       	andi	r24, 0x3C	; 60
   15ece:	83 60       	ori	r24, 0x03	; 3
   15ed0:	89 83       	std	Y+1, r24	; 0x01
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
   15ed2:	69 81       	ldd	r22, Y+1	; 0x01
   15ed4:	80 e8       	ldi	r24, 0x80	; 128
   15ed6:	90 e0       	ldi	r25, 0x00	; 0
   15ed8:	8f d4       	rcall	.+2334   	; 0x167f8 <ccp_write_io>
	wdt_wait_while_busy();
   15eda:	a4 df       	rcall	.-184    	; 0x15e24 <wdt_wait_while_busy>
   15edc:	00 00       	nop
}
   15ede:	0f 90       	pop	r0
   15ee0:	df 91       	pop	r29
   15ee2:	cf 91       	pop	r28
   15ee4:	08 95       	ret

00015ee6 <osc_get_rate>:
   15ee6:	cf 93       	push	r28
//@}

static inline uint32_t osc_get_rate(uint8_t id)
{
   15ee8:	df 93       	push	r29
   15eea:	1f 92       	push	r1
   15eec:	cd b7       	in	r28, 0x3d	; 61
   15eee:	de b7       	in	r29, 0x3e	; 62
   15ef0:	89 83       	std	Y+1, r24	; 0x01
	Assert(id != OSC_ID_USBSOF);

	switch (id) {
   15ef2:	89 81       	ldd	r24, Y+1	; 0x01
   15ef4:	88 2f       	mov	r24, r24
   15ef6:	90 e0       	ldi	r25, 0x00	; 0
   15ef8:	82 30       	cpi	r24, 0x02	; 2
   15efa:	91 05       	cpc	r25, r1
   15efc:	89 f0       	breq	.+34     	; 0x15f20 <osc_get_rate+0x3a>
   15efe:	83 30       	cpi	r24, 0x03	; 3
   15f00:	91 05       	cpc	r25, r1
   15f02:	1c f4       	brge	.+6      	; 0x15f0a <osc_get_rate+0x24>
   15f04:	01 97       	sbiw	r24, 0x01	; 1
   15f06:	39 f0       	breq	.+14     	; 0x15f16 <osc_get_rate+0x30>
   15f08:	1a c0       	rjmp	.+52     	; 0x15f3e <osc_get_rate+0x58>
   15f0a:	84 30       	cpi	r24, 0x04	; 4
   15f0c:	91 05       	cpc	r25, r1
   15f0e:	69 f0       	breq	.+26     	; 0x15f2a <osc_get_rate+0x44>
   15f10:	08 97       	sbiw	r24, 0x08	; 8
   15f12:	81 f0       	breq	.+32     	; 0x15f34 <osc_get_rate+0x4e>
   15f14:	14 c0       	rjmp	.+40     	; 0x15f3e <osc_get_rate+0x58>
	case OSC_ID_RC2MHZ:
		return 2000000UL;
   15f16:	80 e8       	ldi	r24, 0x80	; 128
   15f18:	94 e8       	ldi	r25, 0x84	; 132
   15f1a:	ae e1       	ldi	r26, 0x1E	; 30
   15f1c:	b0 e0       	ldi	r27, 0x00	; 0
   15f1e:	12 c0       	rjmp	.+36     	; 0x15f44 <osc_get_rate+0x5e>

	case OSC_ID_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
   15f20:	80 e0       	ldi	r24, 0x00	; 0
   15f22:	9c e6       	ldi	r25, 0x6C	; 108
   15f24:	ac ed       	ldi	r26, 0xDC	; 220
   15f26:	b2 e0       	ldi	r27, 0x02	; 2
   15f28:	0d c0       	rjmp	.+26     	; 0x15f44 <osc_get_rate+0x5e>
#else
		return 32000000UL;
#endif

	case OSC_ID_RC32KHZ:
		return 32768UL;
   15f2a:	80 e0       	ldi	r24, 0x00	; 0
   15f2c:	90 e8       	ldi	r25, 0x80	; 128
   15f2e:	a0 e0       	ldi	r26, 0x00	; 0
   15f30:	b0 e0       	ldi	r27, 0x00	; 0
   15f32:	08 c0       	rjmp	.+16     	; 0x15f44 <osc_get_rate+0x5e>

#ifdef BOARD_XOSC_HZ
	case OSC_ID_XOSC:
		return BOARD_XOSC_HZ;
   15f34:	80 e0       	ldi	r24, 0x00	; 0
   15f36:	94 e2       	ldi	r25, 0x24	; 36
   15f38:	a4 ef       	ldi	r26, 0xF4	; 244
   15f3a:	b0 e0       	ldi	r27, 0x00	; 0
   15f3c:	03 c0       	rjmp	.+6      	; 0x15f44 <osc_get_rate+0x5e>
#endif

	default:
		Assert(false);
		return 0;
   15f3e:	80 e0       	ldi	r24, 0x00	; 0
   15f40:	90 e0       	ldi	r25, 0x00	; 0
   15f42:	dc 01       	movw	r26, r24
	}
}
   15f44:	bc 01       	movw	r22, r24
   15f46:	cd 01       	movw	r24, r26
   15f48:	0f 90       	pop	r0
   15f4a:	df 91       	pop	r29
   15f4c:	cf 91       	pop	r28
   15f4e:	08 95       	ret

00015f50 <pll_get_default_rate_priv>:
 *
 * \retval Output clock rate from PLL.
 */
static inline uint32_t pll_get_default_rate_priv(enum pll_source src,
		unsigned int mul, unsigned int div)
{
   15f50:	cf 93       	push	r28
   15f52:	df 93       	push	r29
   15f54:	cd b7       	in	r28, 0x3d	; 61
   15f56:	de b7       	in	r29, 0x3e	; 62
   15f58:	29 97       	sbiw	r28, 0x09	; 9
   15f5a:	cd bf       	out	0x3d, r28	; 61
   15f5c:	de bf       	out	0x3e, r29	; 62
   15f5e:	8d 83       	std	Y+5, r24	; 0x05
   15f60:	6e 83       	std	Y+6, r22	; 0x06
   15f62:	7f 83       	std	Y+7, r23	; 0x07
   15f64:	48 87       	std	Y+8, r20	; 0x08
   15f66:	59 87       	std	Y+9, r21	; 0x09
	uint32_t rate;

	switch (src) {
   15f68:	8d 81       	ldd	r24, Y+5	; 0x05
   15f6a:	88 2f       	mov	r24, r24
   15f6c:	90 e0       	ldi	r25, 0x00	; 0
   15f6e:	80 38       	cpi	r24, 0x80	; 128
   15f70:	91 05       	cpc	r25, r1
   15f72:	79 f0       	breq	.+30     	; 0x15f92 <pll_get_default_rate_priv+0x42>
   15f74:	80 3c       	cpi	r24, 0xC0	; 192
   15f76:	91 05       	cpc	r25, r1
   15f78:	a9 f0       	breq	.+42     	; 0x15fa4 <pll_get_default_rate_priv+0x54>
   15f7a:	89 2b       	or	r24, r25
   15f7c:	09 f0       	breq	.+2      	; 0x15f80 <pll_get_default_rate_priv+0x30>
		rate = osc_get_rate(OSC_ID_XOSC);
		Assert(div == 1);
		break;

	default:
		break;
   15f7e:	1b c0       	rjmp	.+54     	; 0x15fb6 <pll_get_default_rate_priv+0x66>
{
	uint32_t rate;

	switch (src) {
	case PLL_SRC_RC2MHZ:
		rate = 2000000UL;
   15f80:	80 e8       	ldi	r24, 0x80	; 128
   15f82:	94 e8       	ldi	r25, 0x84	; 132
   15f84:	ae e1       	ldi	r26, 0x1E	; 30
   15f86:	b0 e0       	ldi	r27, 0x00	; 0
   15f88:	89 83       	std	Y+1, r24	; 0x01
   15f8a:	9a 83       	std	Y+2, r25	; 0x02
   15f8c:	ab 83       	std	Y+3, r26	; 0x03
   15f8e:	bc 83       	std	Y+4, r27	; 0x04
		Assert(div == 1);
		break;
   15f90:	12 c0       	rjmp	.+36     	; 0x15fb6 <pll_get_default_rate_priv+0x66>

	case PLL_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL //32MHz oscillator is calibrated to another frequency
		rate = CONFIG_OSC_RC32_CAL / 4;
   15f92:	80 e0       	ldi	r24, 0x00	; 0
   15f94:	9b e1       	ldi	r25, 0x1B	; 27
   15f96:	a7 eb       	ldi	r26, 0xB7	; 183
   15f98:	b0 e0       	ldi	r27, 0x00	; 0
   15f9a:	89 83       	std	Y+1, r24	; 0x01
   15f9c:	9a 83       	std	Y+2, r25	; 0x02
   15f9e:	ab 83       	std	Y+3, r26	; 0x03
   15fa0:	bc 83       	std	Y+4, r27	; 0x04
#else
		rate = 8000000UL;
 #endif
		Assert(div == 4);
		break;
   15fa2:	09 c0       	rjmp	.+18     	; 0x15fb6 <pll_get_default_rate_priv+0x66>

	case PLL_SRC_XOSC:
		rate = osc_get_rate(OSC_ID_XOSC);
   15fa4:	88 e0       	ldi	r24, 0x08	; 8
   15fa6:	9f df       	rcall	.-194    	; 0x15ee6 <osc_get_rate>
   15fa8:	dc 01       	movw	r26, r24
   15faa:	cb 01       	movw	r24, r22
   15fac:	89 83       	std	Y+1, r24	; 0x01
   15fae:	9a 83       	std	Y+2, r25	; 0x02
   15fb0:	ab 83       	std	Y+3, r26	; 0x03
   15fb2:	bc 83       	std	Y+4, r27	; 0x04
		Assert(div == 1);
		break;
   15fb4:	00 00       	nop
		break;
	}

	Assert(rate >= 440000UL);

	rate *= mul;
   15fb6:	8e 81       	ldd	r24, Y+6	; 0x06
   15fb8:	9f 81       	ldd	r25, Y+7	; 0x07
   15fba:	cc 01       	movw	r24, r24
   15fbc:	a0 e0       	ldi	r26, 0x00	; 0
   15fbe:	b0 e0       	ldi	r27, 0x00	; 0
   15fc0:	29 81       	ldd	r18, Y+1	; 0x01
   15fc2:	3a 81       	ldd	r19, Y+2	; 0x02
   15fc4:	4b 81       	ldd	r20, Y+3	; 0x03
   15fc6:	5c 81       	ldd	r21, Y+4	; 0x04
   15fc8:	bc 01       	movw	r22, r24
   15fca:	cd 01       	movw	r24, r26
   15fcc:	1b d7       	rcall	.+3638   	; 0x16e04 <__mulsi3>
   15fce:	dc 01       	movw	r26, r24
   15fd0:	cb 01       	movw	r24, r22
   15fd2:	89 83       	std	Y+1, r24	; 0x01
   15fd4:	9a 83       	std	Y+2, r25	; 0x02
   15fd6:	ab 83       	std	Y+3, r26	; 0x03
   15fd8:	bc 83       	std	Y+4, r27	; 0x04

	Assert(rate >= PLL_MIN_HZ);
	Assert(rate <= PLL_MAX_HZ);

	return rate;
   15fda:	89 81       	ldd	r24, Y+1	; 0x01
   15fdc:	9a 81       	ldd	r25, Y+2	; 0x02
   15fde:	ab 81       	ldd	r26, Y+3	; 0x03
   15fe0:	bc 81       	ldd	r27, Y+4	; 0x04
}
   15fe2:	bc 01       	movw	r22, r24
   15fe4:	cd 01       	movw	r24, r26
   15fe6:	29 96       	adiw	r28, 0x09	; 9
   15fe8:	cd bf       	out	0x3d, r28	; 61
   15fea:	de bf       	out	0x3e, r29	; 62
   15fec:	df 91       	pop	r29
   15fee:	cf 91       	pop	r28
   15ff0:	08 95       	ret

00015ff2 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
   15ff2:	cf 93       	push	r28
   15ff4:	df 93       	push	r29
   15ff6:	cd b7       	in	r28, 0x3d	; 61
   15ff8:	de b7       	in	r29, 0x3e	; 62
		return BOARD_XOSC_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL:
		return pll_get_default_rate(0);
   15ffa:	41 e0       	ldi	r20, 0x01	; 1
   15ffc:	50 e0       	ldi	r21, 0x00	; 0
   15ffe:	62 e0       	ldi	r22, 0x02	; 2
   16000:	70 e0       	ldi	r23, 0x00	; 0
   16002:	80 ec       	ldi	r24, 0xC0	; 192
   16004:	a5 df       	rcall	.-182    	; 0x15f50 <pll_get_default_rate_priv>
   16006:	dc 01       	movw	r26, r24
   16008:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
   1600a:	bc 01       	movw	r22, r24
   1600c:	cd 01       	movw	r24, r26
   1600e:	df 91       	pop	r29
   16010:	cf 91       	pop	r28
   16012:	08 95       	ret

00016014 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
   16014:	cf 93       	push	r28
   16016:	df 93       	push	r29
   16018:	1f 92       	push	r1
   1601a:	cd b7       	in	r28, 0x3d	; 61
   1601c:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
   1601e:	19 82       	std	Y+1, r1	; 0x01
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
	}

	return sysclk_get_main_hz() >> shift;
   16020:	e8 df       	rcall	.-48     	; 0x15ff2 <sysclk_get_main_hz>
   16022:	dc 01       	movw	r26, r24
   16024:	cb 01       	movw	r24, r22
   16026:	29 81       	ldd	r18, Y+1	; 0x01
   16028:	22 2f       	mov	r18, r18
   1602a:	30 e0       	ldi	r19, 0x00	; 0
   1602c:	04 c0       	rjmp	.+8      	; 0x16036 <sysclk_get_per4_hz+0x22>
   1602e:	b6 95       	lsr	r27
   16030:	a7 95       	ror	r26
   16032:	97 95       	ror	r25
   16034:	87 95       	ror	r24
   16036:	2a 95       	dec	r18
   16038:	d2 f7       	brpl	.-12     	; 0x1602e <sysclk_get_per4_hz+0x1a>
}
   1603a:	bc 01       	movw	r22, r24
   1603c:	cd 01       	movw	r24, r26
   1603e:	0f 90       	pop	r0
   16040:	df 91       	pop	r29
   16042:	cf 91       	pop	r28
   16044:	08 95       	ret

00016046 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
   16046:	cf 93       	push	r28
   16048:	df 93       	push	r29
   1604a:	cd b7       	in	r28, 0x3d	; 61
   1604c:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
   1604e:	e2 df       	rcall	.-60     	; 0x16014 <sysclk_get_per4_hz>
   16050:	dc 01       	movw	r26, r24
   16052:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
   16054:	bc 01       	movw	r22, r24
   16056:	cd 01       	movw	r24, r26
   16058:	df 91       	pop	r29
   1605a:	cf 91       	pop	r28
   1605c:	08 95       	ret

0001605e <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
   1605e:	cf 93       	push	r28
   16060:	df 93       	push	r29
   16062:	cd b7       	in	r28, 0x3d	; 61
   16064:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
   16066:	ef df       	rcall	.-34     	; 0x16046 <sysclk_get_per2_hz>
   16068:	dc 01       	movw	r26, r24
   1606a:	cb 01       	movw	r24, r22
}
   1606c:	bc 01       	movw	r22, r24
   1606e:	cd 01       	movw	r24, r26
   16070:	df 91       	pop	r29
   16072:	cf 91       	pop	r28
   16074:	08 95       	ret

00016076 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   16076:	cf 93       	push	r28
   16078:	df 93       	push	r29
   1607a:	cd b7       	in	r28, 0x3d	; 61
   1607c:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
   1607e:	ef df       	rcall	.-34     	; 0x1605e <sysclk_get_per_hz>
   16080:	dc 01       	movw	r26, r24
   16082:	cb 01       	movw	r24, r22
}
   16084:	bc 01       	movw	r22, r24
   16086:	cd 01       	movw	r24, r26
   16088:	df 91       	pop	r29
   1608a:	cf 91       	pop	r28
   1608c:	08 95       	ret

0001608e <tc_write_clock_source>:
 * \param TC_CLKSEL_enum Clock source selection
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
   1608e:	cf 93       	push	r28
   16090:	df 93       	push	r29
   16092:	00 d0       	rcall	.+0      	; 0x16094 <tc_write_clock_source+0x6>
   16094:	cd b7       	in	r28, 0x3d	; 61
   16096:	de b7       	in	r29, 0x3e	; 62
   16098:	89 83       	std	Y+1, r24	; 0x01
   1609a:	9a 83       	std	Y+2, r25	; 0x02
   1609c:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
   1609e:	89 81       	ldd	r24, Y+1	; 0x01
   160a0:	9a 81       	ldd	r25, Y+2	; 0x02
   160a2:	fc 01       	movw	r30, r24
   160a4:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
   160a6:	98 2f       	mov	r25, r24
   160a8:	90 7f       	andi	r25, 0xF0	; 240
   160aa:	8b 81       	ldd	r24, Y+3	; 0x03
   160ac:	89 2b       	or	r24, r25
   160ae:	28 2f       	mov	r18, r24
   160b0:	89 81       	ldd	r24, Y+1	; 0x01
   160b2:	9a 81       	ldd	r25, Y+2	; 0x02
   160b4:	fc 01       	movw	r30, r24
   160b6:	20 83       	st	Z, r18
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
			TC_CLKSEL_enum;
}
   160b8:	00 00       	nop
   160ba:	23 96       	adiw	r28, 0x03	; 3
   160bc:	cd bf       	out	0x3d, r28	; 61
   160be:	de bf       	out	0x3e, r29	; 62
   160c0:	df 91       	pop	r29
   160c2:	cf 91       	pop	r28
   160c4:	08 95       	ret

000160c6 <tc_write_period>:
 *
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
   160c6:	cf 93       	push	r28
   160c8:	df 93       	push	r29
   160ca:	00 d0       	rcall	.+0      	; 0x160cc <tc_write_period+0x6>
   160cc:	1f 92       	push	r1
   160ce:	cd b7       	in	r28, 0x3d	; 61
   160d0:	de b7       	in	r29, 0x3e	; 62
   160d2:	89 83       	std	Y+1, r24	; 0x01
   160d4:	9a 83       	std	Y+2, r25	; 0x02
   160d6:	6b 83       	std	Y+3, r22	; 0x03
   160d8:	7c 83       	std	Y+4, r23	; 0x04
	((TC0_t *)tc)->PER = per_value;
   160da:	89 81       	ldd	r24, Y+1	; 0x01
   160dc:	9a 81       	ldd	r25, Y+2	; 0x02
   160de:	2b 81       	ldd	r18, Y+3	; 0x03
   160e0:	3c 81       	ldd	r19, Y+4	; 0x04
   160e2:	fc 01       	movw	r30, r24
   160e4:	26 a3       	std	Z+38, r18	; 0x26
   160e6:	37 a3       	std	Z+39, r19	; 0x27
}
   160e8:	00 00       	nop
   160ea:	24 96       	adiw	r28, 0x04	; 4
   160ec:	cd bf       	out	0x3d, r28	; 61
   160ee:	de bf       	out	0x3e, r29	; 62
   160f0:	df 91       	pop	r29
   160f2:	cf 91       	pop	r28
   160f4:	08 95       	ret

000160f6 <tc_enable_cc_channels>:
 * \param tc Pointer to TC module.
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
   160f6:	cf 93       	push	r28
   160f8:	df 93       	push	r29
   160fa:	00 d0       	rcall	.+0      	; 0x160fc <tc_enable_cc_channels+0x6>
   160fc:	cd b7       	in	r28, 0x3d	; 61
   160fe:	de b7       	in	r29, 0x3e	; 62
   16100:	89 83       	std	Y+1, r24	; 0x01
   16102:	9a 83       	std	Y+2, r25	; 0x02
   16104:	6b 83       	std	Y+3, r22	; 0x03
	if (tc_is_tc0(void *tc)) {
   16106:	89 81       	ldd	r24, Y+1	; 0x01
   16108:	9a 81       	ldd	r25, Y+2	; 0x02
   1610a:	80 74       	andi	r24, 0x40	; 64
   1610c:	99 27       	eor	r25, r25
   1610e:	89 2b       	or	r24, r25
   16110:	61 f4       	brne	.+24     	; 0x1612a <tc_enable_cc_channels+0x34>
		((TC0_t *)tc)->CTRLB |= enablemask;
   16112:	89 81       	ldd	r24, Y+1	; 0x01
   16114:	9a 81       	ldd	r25, Y+2	; 0x02
   16116:	fc 01       	movw	r30, r24
   16118:	91 81       	ldd	r25, Z+1	; 0x01
   1611a:	8b 81       	ldd	r24, Y+3	; 0x03
   1611c:	29 2f       	mov	r18, r25
   1611e:	28 2b       	or	r18, r24
   16120:	89 81       	ldd	r24, Y+1	; 0x01
   16122:	9a 81       	ldd	r25, Y+2	; 0x02
   16124:	fc 01       	movw	r30, r24
   16126:	21 83       	std	Z+1, r18	; 0x01
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
   16128:	13 c0       	rjmp	.+38     	; 0x16150 <tc_enable_cc_channels+0x5a>
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
	} else if (tc_is_tc1(void *tc)) {
   1612a:	89 81       	ldd	r24, Y+1	; 0x01
   1612c:	9a 81       	ldd	r25, Y+2	; 0x02
   1612e:	80 74       	andi	r24, 0x40	; 64
   16130:	99 27       	eor	r25, r25
   16132:	89 2b       	or	r24, r25
   16134:	69 f0       	breq	.+26     	; 0x16150 <tc_enable_cc_channels+0x5a>
		((TC1_t *)tc)->CTRLB |=
   16136:	89 81       	ldd	r24, Y+1	; 0x01
   16138:	9a 81       	ldd	r25, Y+2	; 0x02
   1613a:	fc 01       	movw	r30, r24
   1613c:	81 81       	ldd	r24, Z+1	; 0x01
   1613e:	98 2f       	mov	r25, r24
   16140:	8b 81       	ldd	r24, Y+3	; 0x03
   16142:	80 73       	andi	r24, 0x30	; 48
   16144:	89 2b       	or	r24, r25
   16146:	28 2f       	mov	r18, r24
   16148:	89 81       	ldd	r24, Y+1	; 0x01
   1614a:	9a 81       	ldd	r25, Y+2	; 0x02
   1614c:	fc 01       	movw	r30, r24
   1614e:	21 83       	std	Z+1, r18	; 0x01
				enablemask & (TC1_CCAEN_bm | TC1_CCBEN_bm);
	}
}
   16150:	00 00       	nop
   16152:	23 96       	adiw	r28, 0x03	; 3
   16154:	cd bf       	out	0x3d, r28	; 61
   16156:	de bf       	out	0x3e, r29	; 62
   16158:	df 91       	pop	r29
   1615a:	cf 91       	pop	r28
   1615c:	08 95       	ret

0001615e <tc_write_cc_buffer>:
 * \param channel_index CC Channel
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
   1615e:	cf 93       	push	r28
   16160:	df 93       	push	r29
   16162:	cd b7       	in	r28, 0x3d	; 61
   16164:	de b7       	in	r29, 0x3e	; 62
   16166:	25 97       	sbiw	r28, 0x05	; 5
   16168:	cd bf       	out	0x3d, r28	; 61
   1616a:	de bf       	out	0x3e, r29	; 62
   1616c:	89 83       	std	Y+1, r24	; 0x01
   1616e:	9a 83       	std	Y+2, r25	; 0x02
   16170:	6b 83       	std	Y+3, r22	; 0x03
   16172:	4c 83       	std	Y+4, r20	; 0x04
   16174:	5d 83       	std	Y+5, r21	; 0x05
	if (tc_is_tc0(void *tc)) {
   16176:	89 81       	ldd	r24, Y+1	; 0x01
   16178:	9a 81       	ldd	r25, Y+2	; 0x02
   1617a:	80 74       	andi	r24, 0x40	; 64
   1617c:	99 27       	eor	r25, r25
   1617e:	89 2b       	or	r24, r25
   16180:	99 f5       	brne	.+102    	; 0x161e8 <tc_write_cc_buffer+0x8a>
		switch (channel_index) {
   16182:	8b 81       	ldd	r24, Y+3	; 0x03
   16184:	88 2f       	mov	r24, r24
   16186:	90 e0       	ldi	r25, 0x00	; 0
   16188:	82 30       	cpi	r24, 0x02	; 2
   1618a:	91 05       	cpc	r25, r1
   1618c:	a1 f0       	breq	.+40     	; 0x161b6 <tc_write_cc_buffer+0x58>
   1618e:	83 30       	cpi	r24, 0x03	; 3
   16190:	91 05       	cpc	r25, r1
   16192:	1c f4       	brge	.+6      	; 0x1619a <tc_write_cc_buffer+0x3c>
   16194:	01 97       	sbiw	r24, 0x01	; 1
   16196:	39 f0       	breq	.+14     	; 0x161a6 <tc_write_cc_buffer+0x48>
   16198:	46 c0       	rjmp	.+140    	; 0x16226 <tc_write_cc_buffer+0xc8>
   1619a:	83 30       	cpi	r24, 0x03	; 3
   1619c:	91 05       	cpc	r25, r1
   1619e:	99 f0       	breq	.+38     	; 0x161c6 <tc_write_cc_buffer+0x68>
   161a0:	04 97       	sbiw	r24, 0x04	; 4
   161a2:	c9 f0       	breq	.+50     	; 0x161d6 <tc_write_cc_buffer+0x78>
   161a4:	40 c0       	rjmp	.+128    	; 0x16226 <tc_write_cc_buffer+0xc8>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
   161a6:	89 81       	ldd	r24, Y+1	; 0x01
   161a8:	9a 81       	ldd	r25, Y+2	; 0x02
   161aa:	2c 81       	ldd	r18, Y+4	; 0x04
   161ac:	3d 81       	ldd	r19, Y+5	; 0x05
   161ae:	fc 01       	movw	r30, r24
   161b0:	20 af       	std	Z+56, r18	; 0x38
   161b2:	31 af       	std	Z+57, r19	; 0x39
			break;
   161b4:	38 c0       	rjmp	.+112    	; 0x16226 <tc_write_cc_buffer+0xc8>
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
   161b6:	89 81       	ldd	r24, Y+1	; 0x01
   161b8:	9a 81       	ldd	r25, Y+2	; 0x02
   161ba:	2c 81       	ldd	r18, Y+4	; 0x04
   161bc:	3d 81       	ldd	r19, Y+5	; 0x05
   161be:	fc 01       	movw	r30, r24
   161c0:	22 af       	std	Z+58, r18	; 0x3a
   161c2:	33 af       	std	Z+59, r19	; 0x3b
			break;
   161c4:	30 c0       	rjmp	.+96     	; 0x16226 <tc_write_cc_buffer+0xc8>
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
   161c6:	89 81       	ldd	r24, Y+1	; 0x01
   161c8:	9a 81       	ldd	r25, Y+2	; 0x02
   161ca:	2c 81       	ldd	r18, Y+4	; 0x04
   161cc:	3d 81       	ldd	r19, Y+5	; 0x05
   161ce:	fc 01       	movw	r30, r24
   161d0:	24 af       	std	Z+60, r18	; 0x3c
   161d2:	35 af       	std	Z+61, r19	; 0x3d
			break;
   161d4:	28 c0       	rjmp	.+80     	; 0x16226 <tc_write_cc_buffer+0xc8>
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
   161d6:	89 81       	ldd	r24, Y+1	; 0x01
   161d8:	9a 81       	ldd	r25, Y+2	; 0x02
   161da:	2c 81       	ldd	r18, Y+4	; 0x04
   161dc:	3d 81       	ldd	r19, Y+5	; 0x05
   161de:	fc 01       	movw	r30, r24
   161e0:	26 af       	std	Z+62, r18	; 0x3e
   161e2:	37 af       	std	Z+63, r19	; 0x3f
			break;
   161e4:	00 00       	nop
   161e6:	1f c0       	rjmp	.+62     	; 0x16226 <tc_write_cc_buffer+0xc8>
		}
	} else if (tc_is_tc1(void *tc)) {
   161e8:	89 81       	ldd	r24, Y+1	; 0x01
   161ea:	9a 81       	ldd	r25, Y+2	; 0x02
   161ec:	80 74       	andi	r24, 0x40	; 64
   161ee:	99 27       	eor	r25, r25
   161f0:	89 2b       	or	r24, r25
   161f2:	c9 f0       	breq	.+50     	; 0x16226 <tc_write_cc_buffer+0xc8>
			switch (channel_index) {
   161f4:	8b 81       	ldd	r24, Y+3	; 0x03
   161f6:	88 2f       	mov	r24, r24
   161f8:	90 e0       	ldi	r25, 0x00	; 0
   161fa:	81 30       	cpi	r24, 0x01	; 1
   161fc:	91 05       	cpc	r25, r1
   161fe:	19 f0       	breq	.+6      	; 0x16206 <tc_write_cc_buffer+0xa8>
   16200:	02 97       	sbiw	r24, 0x02	; 2
   16202:	49 f0       	breq	.+18     	; 0x16216 <tc_write_cc_buffer+0xb8>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
				break;
			default:
				return;
   16204:	10 c0       	rjmp	.+32     	; 0x16226 <tc_write_cc_buffer+0xc8>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
   16206:	89 81       	ldd	r24, Y+1	; 0x01
   16208:	9a 81       	ldd	r25, Y+2	; 0x02
   1620a:	2c 81       	ldd	r18, Y+4	; 0x04
   1620c:	3d 81       	ldd	r19, Y+5	; 0x05
   1620e:	fc 01       	movw	r30, r24
   16210:	20 af       	std	Z+56, r18	; 0x38
   16212:	31 af       	std	Z+57, r19	; 0x39
				break;
   16214:	08 c0       	rjmp	.+16     	; 0x16226 <tc_write_cc_buffer+0xc8>
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
   16216:	89 81       	ldd	r24, Y+1	; 0x01
   16218:	9a 81       	ldd	r25, Y+2	; 0x02
   1621a:	2c 81       	ldd	r18, Y+4	; 0x04
   1621c:	3d 81       	ldd	r19, Y+5	; 0x05
   1621e:	fc 01       	movw	r30, r24
   16220:	22 af       	std	Z+58, r18	; 0x3a
   16222:	33 af       	std	Z+59, r19	; 0x3b
				break;
   16224:	00 00       	nop
			default:
				return;
			}
		}
}
   16226:	25 96       	adiw	r28, 0x05	; 5
   16228:	cd bf       	out	0x3d, r28	; 61
   1622a:	de bf       	out	0x3e, r29	; 62
   1622c:	df 91       	pop	r29
   1622e:	cf 91       	pop	r28
   16230:	08 95       	ret

00016232 <tc_set_wgm>:
 *
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
   16232:	cf 93       	push	r28
   16234:	df 93       	push	r29
   16236:	00 d0       	rcall	.+0      	; 0x16238 <tc_set_wgm+0x6>
   16238:	cd b7       	in	r28, 0x3d	; 61
   1623a:	de b7       	in	r29, 0x3e	; 62
   1623c:	89 83       	std	Y+1, r24	; 0x01
   1623e:	9a 83       	std	Y+2, r25	; 0x02
   16240:	6b 83       	std	Y+3, r22	; 0x03
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
   16242:	89 81       	ldd	r24, Y+1	; 0x01
   16244:	9a 81       	ldd	r25, Y+2	; 0x02
   16246:	fc 01       	movw	r30, r24
   16248:	81 81       	ldd	r24, Z+1	; 0x01
   1624a:	98 2f       	mov	r25, r24
   1624c:	98 7f       	andi	r25, 0xF8	; 248
   1624e:	8b 81       	ldd	r24, Y+3	; 0x03
   16250:	89 2b       	or	r24, r25
   16252:	28 2f       	mov	r18, r24
   16254:	89 81       	ldd	r24, Y+1	; 0x01
   16256:	9a 81       	ldd	r25, Y+2	; 0x02
   16258:	fc 01       	movw	r30, r24
   1625a:	21 83       	std	Z+1, r18	; 0x01
}
   1625c:	00 00       	nop
   1625e:	23 96       	adiw	r28, 0x03	; 3
   16260:	cd bf       	out	0x3d, r28	; 61
   16262:	de bf       	out	0x3e, r29	; 62
   16264:	df 91       	pop	r29
   16266:	cf 91       	pop	r28
   16268:	08 95       	ret

0001626a <pwm_set_duty_cycle_percent>:
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
   1626a:	cf 93       	push	r28
   1626c:	df 93       	push	r29
   1626e:	00 d0       	rcall	.+0      	; 0x16270 <pwm_set_duty_cycle_percent+0x6>
   16270:	cd b7       	in	r28, 0x3d	; 61
   16272:	de b7       	in	r29, 0x3e	; 62
   16274:	89 83       	std	Y+1, r24	; 0x01
   16276:	9a 83       	std	Y+2, r25	; 0x02
   16278:	6b 83       	std	Y+3, r22	; 0x03
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
   1627a:	89 81       	ldd	r24, Y+1	; 0x01
   1627c:	9a 81       	ldd	r25, Y+2	; 0x02
   1627e:	fc 01       	movw	r30, r24
   16280:	85 81       	ldd	r24, Z+5	; 0x05
   16282:	96 81       	ldd	r25, Z+6	; 0x06
   16284:	9c 01       	movw	r18, r24
   16286:	40 e0       	ldi	r20, 0x00	; 0
   16288:	50 e0       	ldi	r21, 0x00	; 0
			(uint32_t)duty_cycle_scale) / 100));
   1628a:	8b 81       	ldd	r24, Y+3	; 0x03
   1628c:	88 2f       	mov	r24, r24
   1628e:	90 e0       	ldi	r25, 0x00	; 0
   16290:	a0 e0       	ldi	r26, 0x00	; 0
   16292:	b0 e0       	ldi	r27, 0x00	; 0
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
   16294:	bc 01       	movw	r22, r24
   16296:	cd 01       	movw	r24, r26
   16298:	b5 d5       	rcall	.+2922   	; 0x16e04 <__mulsi3>
   1629a:	dc 01       	movw	r26, r24
   1629c:	cb 01       	movw	r24, r22
			(uint32_t)duty_cycle_scale) / 100));
   1629e:	24 e6       	ldi	r18, 0x64	; 100
   162a0:	30 e0       	ldi	r19, 0x00	; 0
   162a2:	40 e0       	ldi	r20, 0x00	; 0
   162a4:	50 e0       	ldi	r21, 0x00	; 0
   162a6:	bc 01       	movw	r22, r24
   162a8:	cd 01       	movw	r24, r26
   162aa:	cf d5       	rcall	.+2974   	; 0x16e4a <__udivmodsi4>
   162ac:	da 01       	movw	r26, r20
   162ae:	c9 01       	movw	r24, r18
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
   162b0:	9c 01       	movw	r18, r24
   162b2:	89 81       	ldd	r24, Y+1	; 0x01
   162b4:	9a 81       	ldd	r25, Y+2	; 0x02
   162b6:	fc 01       	movw	r30, r24
   162b8:	62 81       	ldd	r22, Z+2	; 0x02
   162ba:	89 81       	ldd	r24, Y+1	; 0x01
   162bc:	9a 81       	ldd	r25, Y+2	; 0x02
   162be:	fc 01       	movw	r30, r24
   162c0:	80 81       	ld	r24, Z
   162c2:	91 81       	ldd	r25, Z+1	; 0x01
   162c4:	a9 01       	movw	r20, r18
   162c6:	4b df       	rcall	.-362    	; 0x1615e <tc_write_cc_buffer>
			(uint16_t)(((uint32_t)config->period *
			(uint32_t)duty_cycle_scale) / 100));
}
   162c8:	00 00       	nop
   162ca:	23 96       	adiw	r28, 0x03	; 3
   162cc:	cd bf       	out	0x3d, r28	; 61
   162ce:	de bf       	out	0x3e, r29	; 62
   162d0:	df 91       	pop	r29
   162d2:	cf 91       	pop	r28
   162d4:	08 95       	ret

000162d6 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
   162d6:	ef 92       	push	r14
   162d8:	ff 92       	push	r15
   162da:	0f 93       	push	r16
   162dc:	1f 93       	push	r17
   162de:	cf 93       	push	r28
   162e0:	df 93       	push	r29
   162e2:	cd b7       	in	r28, 0x3d	; 61
   162e4:	de b7       	in	r29, 0x3e	; 62
   162e6:	2c 97       	sbiw	r28, 0x0c	; 12
   162e8:	cd bf       	out	0x3d, r28	; 61
   162ea:	de bf       	out	0x3e, r29	; 62
   162ec:	89 87       	std	Y+9, r24	; 0x09
   162ee:	9a 87       	std	Y+10, r25	; 0x0a
   162f0:	6b 87       	std	Y+11, r22	; 0x0b
   162f2:	7c 87       	std	Y+12, r23	; 0x0c
	uint32_t cpu_hz = sysclk_get_cpu_hz();
   162f4:	c0 de       	rcall	.-640    	; 0x16076 <sysclk_get_cpu_hz>
   162f6:	dc 01       	movw	r26, r24
   162f8:	cb 01       	movw	r24, r22
   162fa:	8b 83       	std	Y+3, r24	; 0x03
   162fc:	9c 83       	std	Y+4, r25	; 0x04
   162fe:	ad 83       	std	Y+5, r26	; 0x05
   16300:	be 83       	std	Y+6, r27	; 0x06
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
   16302:	8b 85       	ldd	r24, Y+11	; 0x0b
   16304:	9c 85       	ldd	r25, Y+12	; 0x0c
   16306:	9c 01       	movw	r18, r24
   16308:	40 e0       	ldi	r20, 0x00	; 0
   1630a:	50 e0       	ldi	r21, 0x00	; 0
   1630c:	8b 81       	ldd	r24, Y+3	; 0x03
   1630e:	9c 81       	ldd	r25, Y+4	; 0x04
   16310:	ad 81       	ldd	r26, Y+5	; 0x05
   16312:	be 81       	ldd	r27, Y+6	; 0x06
   16314:	bc 01       	movw	r22, r24
   16316:	cd 01       	movw	r24, r26
   16318:	98 d5       	rcall	.+2864   	; 0x16e4a <__udivmodsi4>
   1631a:	da 01       	movw	r26, r20
   1631c:	c9 01       	movw	r24, r18
   1631e:	2f ef       	ldi	r18, 0xFF	; 255
   16320:	3f ef       	ldi	r19, 0xFF	; 255
   16322:	40 e0       	ldi	r20, 0x00	; 0
   16324:	50 e0       	ldi	r21, 0x00	; 0
   16326:	bc 01       	movw	r22, r24
   16328:	cd 01       	movw	r24, r26
   1632a:	8f d5       	rcall	.+2846   	; 0x16e4a <__udivmodsi4>
   1632c:	da 01       	movw	r26, r20
   1632e:	c9 01       	movw	r24, r18
   16330:	8f 83       	std	Y+7, r24	; 0x07
   16332:	98 87       	std	Y+8, r25	; 0x08
	if (smallest_div < 1) {
   16334:	8f 81       	ldd	r24, Y+7	; 0x07
   16336:	98 85       	ldd	r25, Y+8	; 0x08
   16338:	89 2b       	or	r24, r25
   1633a:	51 f4       	brne	.+20     	; 0x16350 <pwm_set_frequency+0x7a>
		dividor = 1;
   1633c:	81 e0       	ldi	r24, 0x01	; 1
   1633e:	90 e0       	ldi	r25, 0x00	; 0
   16340:	89 83       	std	Y+1, r24	; 0x01
   16342:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1;
   16344:	89 85       	ldd	r24, Y+9	; 0x09
   16346:	9a 85       	ldd	r25, Y+10	; 0x0a
   16348:	21 e0       	ldi	r18, 0x01	; 1
   1634a:	fc 01       	movw	r30, r24
   1634c:	24 83       	std	Z+4, r18	; 0x04
   1634e:	52 c0       	rjmp	.+164    	; 0x163f4 <pwm_set_frequency+0x11e>
	} else if (smallest_div < 2) {
   16350:	8f 81       	ldd	r24, Y+7	; 0x07
   16352:	98 85       	ldd	r25, Y+8	; 0x08
   16354:	02 97       	sbiw	r24, 0x02	; 2
   16356:	50 f4       	brcc	.+20     	; 0x1636c <pwm_set_frequency+0x96>
		dividor = 2;
   16358:	82 e0       	ldi	r24, 0x02	; 2
   1635a:	90 e0       	ldi	r25, 0x00	; 0
   1635c:	89 83       	std	Y+1, r24	; 0x01
   1635e:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV2;
   16360:	89 85       	ldd	r24, Y+9	; 0x09
   16362:	9a 85       	ldd	r25, Y+10	; 0x0a
   16364:	22 e0       	ldi	r18, 0x02	; 2
   16366:	fc 01       	movw	r30, r24
   16368:	24 83       	std	Z+4, r18	; 0x04
   1636a:	44 c0       	rjmp	.+136    	; 0x163f4 <pwm_set_frequency+0x11e>
	} else if (smallest_div < 4) {
   1636c:	8f 81       	ldd	r24, Y+7	; 0x07
   1636e:	98 85       	ldd	r25, Y+8	; 0x08
   16370:	04 97       	sbiw	r24, 0x04	; 4
   16372:	50 f4       	brcc	.+20     	; 0x16388 <pwm_set_frequency+0xb2>
		dividor = 4;
   16374:	84 e0       	ldi	r24, 0x04	; 4
   16376:	90 e0       	ldi	r25, 0x00	; 0
   16378:	89 83       	std	Y+1, r24	; 0x01
   1637a:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV4;
   1637c:	89 85       	ldd	r24, Y+9	; 0x09
   1637e:	9a 85       	ldd	r25, Y+10	; 0x0a
   16380:	23 e0       	ldi	r18, 0x03	; 3
   16382:	fc 01       	movw	r30, r24
   16384:	24 83       	std	Z+4, r18	; 0x04
   16386:	36 c0       	rjmp	.+108    	; 0x163f4 <pwm_set_frequency+0x11e>
	} else if (smallest_div < 8) {
   16388:	8f 81       	ldd	r24, Y+7	; 0x07
   1638a:	98 85       	ldd	r25, Y+8	; 0x08
   1638c:	08 97       	sbiw	r24, 0x08	; 8
   1638e:	50 f4       	brcc	.+20     	; 0x163a4 <pwm_set_frequency+0xce>
		dividor = 8;
   16390:	88 e0       	ldi	r24, 0x08	; 8
   16392:	90 e0       	ldi	r25, 0x00	; 0
   16394:	89 83       	std	Y+1, r24	; 0x01
   16396:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV8;
   16398:	89 85       	ldd	r24, Y+9	; 0x09
   1639a:	9a 85       	ldd	r25, Y+10	; 0x0a
   1639c:	24 e0       	ldi	r18, 0x04	; 4
   1639e:	fc 01       	movw	r30, r24
   163a0:	24 83       	std	Z+4, r18	; 0x04
   163a2:	28 c0       	rjmp	.+80     	; 0x163f4 <pwm_set_frequency+0x11e>
	} else if (smallest_div < 64) {
   163a4:	8f 81       	ldd	r24, Y+7	; 0x07
   163a6:	98 85       	ldd	r25, Y+8	; 0x08
   163a8:	80 34       	cpi	r24, 0x40	; 64
   163aa:	91 05       	cpc	r25, r1
   163ac:	50 f4       	brcc	.+20     	; 0x163c2 <pwm_set_frequency+0xec>
		dividor = 64;
   163ae:	80 e4       	ldi	r24, 0x40	; 64
   163b0:	90 e0       	ldi	r25, 0x00	; 0
   163b2:	89 83       	std	Y+1, r24	; 0x01
   163b4:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV64;
   163b6:	89 85       	ldd	r24, Y+9	; 0x09
   163b8:	9a 85       	ldd	r25, Y+10	; 0x0a
   163ba:	25 e0       	ldi	r18, 0x05	; 5
   163bc:	fc 01       	movw	r30, r24
   163be:	24 83       	std	Z+4, r18	; 0x04
   163c0:	19 c0       	rjmp	.+50     	; 0x163f4 <pwm_set_frequency+0x11e>
	} else if (smallest_div < 256) {
   163c2:	8f 81       	ldd	r24, Y+7	; 0x07
   163c4:	98 85       	ldd	r25, Y+8	; 0x08
   163c6:	8f 3f       	cpi	r24, 0xFF	; 255
   163c8:	91 05       	cpc	r25, r1
   163ca:	09 f0       	breq	.+2      	; 0x163ce <pwm_set_frequency+0xf8>
   163cc:	50 f4       	brcc	.+20     	; 0x163e2 <pwm_set_frequency+0x10c>
		dividor = 256;
   163ce:	80 e0       	ldi	r24, 0x00	; 0
   163d0:	91 e0       	ldi	r25, 0x01	; 1
   163d2:	89 83       	std	Y+1, r24	; 0x01
   163d4:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV256;
   163d6:	89 85       	ldd	r24, Y+9	; 0x09
   163d8:	9a 85       	ldd	r25, Y+10	; 0x0a
   163da:	26 e0       	ldi	r18, 0x06	; 6
   163dc:	fc 01       	movw	r30, r24
   163de:	24 83       	std	Z+4, r18	; 0x04
   163e0:	09 c0       	rjmp	.+18     	; 0x163f4 <pwm_set_frequency+0x11e>
	} else {
		dividor = 1024;
   163e2:	80 e0       	ldi	r24, 0x00	; 0
   163e4:	94 e0       	ldi	r25, 0x04	; 4
   163e6:	89 83       	std	Y+1, r24	; 0x01
   163e8:	9a 83       	std	Y+2, r25	; 0x02
		config->clk_sel = PWM_CLK_DIV1024;
   163ea:	89 85       	ldd	r24, Y+9	; 0x09
   163ec:	9a 85       	ldd	r25, Y+10	; 0x0a
   163ee:	27 e0       	ldi	r18, 0x07	; 7
   163f0:	fc 01       	movw	r30, r24
   163f2:	24 83       	std	Z+4, r18	; 0x04
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
   163f4:	89 81       	ldd	r24, Y+1	; 0x01
   163f6:	9a 81       	ldd	r25, Y+2	; 0x02
   163f8:	9c 01       	movw	r18, r24
   163fa:	40 e0       	ldi	r20, 0x00	; 0
   163fc:	50 e0       	ldi	r21, 0x00	; 0
   163fe:	8b 81       	ldd	r24, Y+3	; 0x03
   16400:	9c 81       	ldd	r25, Y+4	; 0x04
   16402:	ad 81       	ldd	r26, Y+5	; 0x05
   16404:	be 81       	ldd	r27, Y+6	; 0x06
   16406:	bc 01       	movw	r22, r24
   16408:	cd 01       	movw	r24, r26
   1640a:	1f d5       	rcall	.+2622   	; 0x16e4a <__udivmodsi4>
   1640c:	da 01       	movw	r26, r20
   1640e:	c9 01       	movw	r24, r18
   16410:	7c 01       	movw	r14, r24
   16412:	8d 01       	movw	r16, r26
   16414:	8b 85       	ldd	r24, Y+11	; 0x0b
   16416:	9c 85       	ldd	r25, Y+12	; 0x0c
   16418:	9c 01       	movw	r18, r24
   1641a:	40 e0       	ldi	r20, 0x00	; 0
   1641c:	50 e0       	ldi	r21, 0x00	; 0
   1641e:	c8 01       	movw	r24, r16
   16420:	b7 01       	movw	r22, r14
   16422:	13 d5       	rcall	.+2598   	; 0x16e4a <__udivmodsi4>
   16424:	da 01       	movw	r26, r20
   16426:	c9 01       	movw	r24, r18
   16428:	9c 01       	movw	r18, r24
   1642a:	89 85       	ldd	r24, Y+9	; 0x09
   1642c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1642e:	fc 01       	movw	r30, r24
   16430:	25 83       	std	Z+5, r18	; 0x05
   16432:	36 83       	std	Z+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
   16434:	89 85       	ldd	r24, Y+9	; 0x09
   16436:	9a 85       	ldd	r25, Y+10	; 0x0a
   16438:	fc 01       	movw	r30, r24
   1643a:	85 81       	ldd	r24, Z+5	; 0x05
   1643c:	96 81       	ldd	r25, Z+6	; 0x06
   1643e:	84 36       	cpi	r24, 0x64	; 100
   16440:	91 05       	cpc	r25, r1
   16442:	48 f4       	brcc	.+18     	; 0x16456 <pwm_set_frequency+0x180>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
   16444:	89 85       	ldd	r24, Y+9	; 0x09
   16446:	9a 85       	ldd	r25, Y+10	; 0x0a
   16448:	fc 01       	movw	r30, r24
   1644a:	14 82       	std	Z+4, r1	; 0x04
		config->period = 0;
   1644c:	89 85       	ldd	r24, Y+9	; 0x09
   1644e:	9a 85       	ldd	r25, Y+10	; 0x0a
   16450:	fc 01       	movw	r30, r24
   16452:	15 82       	std	Z+5, r1	; 0x05
   16454:	16 82       	std	Z+6, r1	; 0x06
		Assert(false);
	}
}
   16456:	00 00       	nop
   16458:	2c 96       	adiw	r28, 0x0c	; 12
   1645a:	cd bf       	out	0x3d, r28	; 61
   1645c:	de bf       	out	0x3e, r29	; 62
   1645e:	df 91       	pop	r29
   16460:	cf 91       	pop	r28
   16462:	1f 91       	pop	r17
   16464:	0f 91       	pop	r16
   16466:	ff 90       	pop	r15
   16468:	ef 90       	pop	r14
   1646a:	08 95       	ret

0001646c <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
   1646c:	cf 93       	push	r28
   1646e:	df 93       	push	r29
   16470:	cd b7       	in	r28, 0x3d	; 61
   16472:	de b7       	in	r29, 0x3e	; 62
   16474:	27 97       	sbiw	r28, 0x07	; 7
   16476:	cd bf       	out	0x3d, r28	; 61
   16478:	de bf       	out	0x3e, r29	; 62
   1647a:	8a 83       	std	Y+2, r24	; 0x02
   1647c:	9b 83       	std	Y+3, r25	; 0x03
   1647e:	6c 83       	std	Y+4, r22	; 0x04
   16480:	4d 83       	std	Y+5, r20	; 0x05
   16482:	2e 83       	std	Y+6, r18	; 0x06
   16484:	3f 83       	std	Y+7, r19	; 0x07
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
   16486:	19 82       	std	Y+1, r1	; 0x01

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
   16488:	8c 81       	ldd	r24, Y+4	; 0x04
   1648a:	88 2f       	mov	r24, r24
   1648c:	90 e0       	ldi	r25, 0x00	; 0
   1648e:	09 2e       	mov	r0, r25
   16490:	00 0c       	add	r0, r0
   16492:	aa 0b       	sbc	r26, r26
   16494:	bb 0b       	sbc	r27, r27
   16496:	40 e0       	ldi	r20, 0x00	; 0
   16498:	50 e0       	ldi	r21, 0x00	; 0
   1649a:	27 e0       	ldi	r18, 0x07	; 7
   1649c:	30 e0       	ldi	r19, 0x00	; 0
   1649e:	84 1b       	sub	r24, r20
   164a0:	95 0b       	sbc	r25, r21
   164a2:	28 17       	cp	r18, r24
   164a4:	39 07       	cpc	r19, r25
   164a6:	08 f4       	brcc	.+2      	; 0x164aa <pwm_init+0x3e>
   164a8:	0e c1       	rjmp	.+540    	; 0x166c6 <pwm_init+0x25a>
   164aa:	fc 01       	movw	r30, r24
   164ac:	88 27       	eor	r24, r24
   164ae:	ee 5d       	subi	r30, 0xDE	; 222
   164b0:	fe 4f       	sbci	r31, 0xFE	; 254
   164b2:	8f 4f       	sbci	r24, 0xFF	; 255
   164b4:	ec c4       	rjmp	.+2520   	; 0x16e8e <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
   164b6:	8a 81       	ldd	r24, Y+2	; 0x02
   164b8:	9b 81       	ldd	r25, Y+3	; 0x03
   164ba:	20 e0       	ldi	r18, 0x00	; 0
   164bc:	38 e0       	ldi	r19, 0x08	; 8
   164be:	fc 01       	movw	r30, r24
   164c0:	20 83       	st	Z, r18
   164c2:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel-1));
   164c4:	80 e4       	ldi	r24, 0x40	; 64
   164c6:	96 e0       	ldi	r25, 0x06	; 6
   164c8:	20 e4       	ldi	r18, 0x40	; 64
   164ca:	36 e0       	ldi	r19, 0x06	; 6
   164cc:	f9 01       	movw	r30, r18
   164ce:	20 81       	ld	r18, Z
   164d0:	62 2f       	mov	r22, r18
   164d2:	2d 81       	ldd	r18, Y+5	; 0x05
   164d4:	22 2f       	mov	r18, r18
   164d6:	30 e0       	ldi	r19, 0x00	; 0
   164d8:	a9 01       	movw	r20, r18
   164da:	41 50       	subi	r20, 0x01	; 1
   164dc:	51 09       	sbc	r21, r1
   164de:	21 e0       	ldi	r18, 0x01	; 1
   164e0:	30 e0       	ldi	r19, 0x00	; 0
   164e2:	02 c0       	rjmp	.+4      	; 0x164e8 <pwm_init+0x7c>
   164e4:	22 0f       	add	r18, r18
   164e6:	33 1f       	adc	r19, r19
   164e8:	4a 95       	dec	r20
   164ea:	e2 f7       	brpl	.-8      	; 0x164e4 <pwm_init+0x78>
   164ec:	26 2b       	or	r18, r22
   164ee:	fc 01       	movw	r30, r24
   164f0:	20 83       	st	Z, r18
		num_chan = 4;
   164f2:	84 e0       	ldi	r24, 0x04	; 4
   164f4:	89 83       	std	Y+1, r24	; 0x01
		break;
   164f6:	e8 c0       	rjmp	.+464    	; 0x166c8 <pwm_init+0x25c>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
   164f8:	8a 81       	ldd	r24, Y+2	; 0x02
   164fa:	9b 81       	ldd	r25, Y+3	; 0x03
   164fc:	20 e4       	ldi	r18, 0x40	; 64
   164fe:	38 e0       	ldi	r19, 0x08	; 8
   16500:	fc 01       	movw	r30, r24
   16502:	20 83       	st	Z, r18
   16504:	31 83       	std	Z+1, r19	; 0x01
		PORTC.DIR |= (1 << (channel+3));
   16506:	80 e4       	ldi	r24, 0x40	; 64
   16508:	96 e0       	ldi	r25, 0x06	; 6
   1650a:	20 e4       	ldi	r18, 0x40	; 64
   1650c:	36 e0       	ldi	r19, 0x06	; 6
   1650e:	f9 01       	movw	r30, r18
   16510:	20 81       	ld	r18, Z
   16512:	62 2f       	mov	r22, r18
   16514:	2d 81       	ldd	r18, Y+5	; 0x05
   16516:	22 2f       	mov	r18, r18
   16518:	30 e0       	ldi	r19, 0x00	; 0
   1651a:	a9 01       	movw	r20, r18
   1651c:	4d 5f       	subi	r20, 0xFD	; 253
   1651e:	5f 4f       	sbci	r21, 0xFF	; 255
   16520:	21 e0       	ldi	r18, 0x01	; 1
   16522:	30 e0       	ldi	r19, 0x00	; 0
   16524:	02 c0       	rjmp	.+4      	; 0x1652a <pwm_init+0xbe>
   16526:	22 0f       	add	r18, r18
   16528:	33 1f       	adc	r19, r19
   1652a:	4a 95       	dec	r20
   1652c:	e2 f7       	brpl	.-8      	; 0x16526 <pwm_init+0xba>
   1652e:	26 2b       	or	r18, r22
   16530:	fc 01       	movw	r30, r24
   16532:	20 83       	st	Z, r18
		num_chan = 2;
   16534:	82 e0       	ldi	r24, 0x02	; 2
   16536:	89 83       	std	Y+1, r24	; 0x01
		break;
   16538:	c7 c0       	rjmp	.+398    	; 0x166c8 <pwm_init+0x25c>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
   1653a:	8a 81       	ldd	r24, Y+2	; 0x02
   1653c:	9b 81       	ldd	r25, Y+3	; 0x03
   1653e:	20 e0       	ldi	r18, 0x00	; 0
   16540:	39 e0       	ldi	r19, 0x09	; 9
   16542:	fc 01       	movw	r30, r24
   16544:	20 83       	st	Z, r18
   16546:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel-1));
   16548:	80 e6       	ldi	r24, 0x60	; 96
   1654a:	96 e0       	ldi	r25, 0x06	; 6
   1654c:	20 e6       	ldi	r18, 0x60	; 96
   1654e:	36 e0       	ldi	r19, 0x06	; 6
   16550:	f9 01       	movw	r30, r18
   16552:	20 81       	ld	r18, Z
   16554:	62 2f       	mov	r22, r18
   16556:	2d 81       	ldd	r18, Y+5	; 0x05
   16558:	22 2f       	mov	r18, r18
   1655a:	30 e0       	ldi	r19, 0x00	; 0
   1655c:	a9 01       	movw	r20, r18
   1655e:	41 50       	subi	r20, 0x01	; 1
   16560:	51 09       	sbc	r21, r1
   16562:	21 e0       	ldi	r18, 0x01	; 1
   16564:	30 e0       	ldi	r19, 0x00	; 0
   16566:	02 c0       	rjmp	.+4      	; 0x1656c <pwm_init+0x100>
   16568:	22 0f       	add	r18, r18
   1656a:	33 1f       	adc	r19, r19
   1656c:	4a 95       	dec	r20
   1656e:	e2 f7       	brpl	.-8      	; 0x16568 <pwm_init+0xfc>
   16570:	26 2b       	or	r18, r22
   16572:	fc 01       	movw	r30, r24
   16574:	20 83       	st	Z, r18
		num_chan = 4;
   16576:	84 e0       	ldi	r24, 0x04	; 4
   16578:	89 83       	std	Y+1, r24	; 0x01
		break;
   1657a:	a6 c0       	rjmp	.+332    	; 0x166c8 <pwm_init+0x25c>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
   1657c:	8a 81       	ldd	r24, Y+2	; 0x02
   1657e:	9b 81       	ldd	r25, Y+3	; 0x03
   16580:	20 e4       	ldi	r18, 0x40	; 64
   16582:	39 e0       	ldi	r19, 0x09	; 9
   16584:	fc 01       	movw	r30, r24
   16586:	20 83       	st	Z, r18
   16588:	31 83       	std	Z+1, r19	; 0x01
		PORTD.DIR |= (1 << (channel+3));
   1658a:	80 e6       	ldi	r24, 0x60	; 96
   1658c:	96 e0       	ldi	r25, 0x06	; 6
   1658e:	20 e6       	ldi	r18, 0x60	; 96
   16590:	36 e0       	ldi	r19, 0x06	; 6
   16592:	f9 01       	movw	r30, r18
   16594:	20 81       	ld	r18, Z
   16596:	62 2f       	mov	r22, r18
   16598:	2d 81       	ldd	r18, Y+5	; 0x05
   1659a:	22 2f       	mov	r18, r18
   1659c:	30 e0       	ldi	r19, 0x00	; 0
   1659e:	a9 01       	movw	r20, r18
   165a0:	4d 5f       	subi	r20, 0xFD	; 253
   165a2:	5f 4f       	sbci	r21, 0xFF	; 255
   165a4:	21 e0       	ldi	r18, 0x01	; 1
   165a6:	30 e0       	ldi	r19, 0x00	; 0
   165a8:	02 c0       	rjmp	.+4      	; 0x165ae <pwm_init+0x142>
   165aa:	22 0f       	add	r18, r18
   165ac:	33 1f       	adc	r19, r19
   165ae:	4a 95       	dec	r20
   165b0:	e2 f7       	brpl	.-8      	; 0x165aa <pwm_init+0x13e>
   165b2:	26 2b       	or	r18, r22
   165b4:	fc 01       	movw	r30, r24
   165b6:	20 83       	st	Z, r18
		num_chan = 2;
   165b8:	82 e0       	ldi	r24, 0x02	; 2
   165ba:	89 83       	std	Y+1, r24	; 0x01
		break;
   165bc:	85 c0       	rjmp	.+266    	; 0x166c8 <pwm_init+0x25c>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
   165be:	8a 81       	ldd	r24, Y+2	; 0x02
   165c0:	9b 81       	ldd	r25, Y+3	; 0x03
   165c2:	20 e0       	ldi	r18, 0x00	; 0
   165c4:	3a e0       	ldi	r19, 0x0A	; 10
   165c6:	fc 01       	movw	r30, r24
   165c8:	20 83       	st	Z, r18
   165ca:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel-1));
   165cc:	80 e8       	ldi	r24, 0x80	; 128
   165ce:	96 e0       	ldi	r25, 0x06	; 6
   165d0:	20 e8       	ldi	r18, 0x80	; 128
   165d2:	36 e0       	ldi	r19, 0x06	; 6
   165d4:	f9 01       	movw	r30, r18
   165d6:	20 81       	ld	r18, Z
   165d8:	62 2f       	mov	r22, r18
   165da:	2d 81       	ldd	r18, Y+5	; 0x05
   165dc:	22 2f       	mov	r18, r18
   165de:	30 e0       	ldi	r19, 0x00	; 0
   165e0:	a9 01       	movw	r20, r18
   165e2:	41 50       	subi	r20, 0x01	; 1
   165e4:	51 09       	sbc	r21, r1
   165e6:	21 e0       	ldi	r18, 0x01	; 1
   165e8:	30 e0       	ldi	r19, 0x00	; 0
   165ea:	02 c0       	rjmp	.+4      	; 0x165f0 <pwm_init+0x184>
   165ec:	22 0f       	add	r18, r18
   165ee:	33 1f       	adc	r19, r19
   165f0:	4a 95       	dec	r20
   165f2:	e2 f7       	brpl	.-8      	; 0x165ec <pwm_init+0x180>
   165f4:	26 2b       	or	r18, r22
   165f6:	fc 01       	movw	r30, r24
   165f8:	20 83       	st	Z, r18
		num_chan = 4;
   165fa:	84 e0       	ldi	r24, 0x04	; 4
   165fc:	89 83       	std	Y+1, r24	; 0x01
		break;
   165fe:	64 c0       	rjmp	.+200    	; 0x166c8 <pwm_init+0x25c>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
   16600:	8a 81       	ldd	r24, Y+2	; 0x02
   16602:	9b 81       	ldd	r25, Y+3	; 0x03
   16604:	20 e4       	ldi	r18, 0x40	; 64
   16606:	3a e0       	ldi	r19, 0x0A	; 10
   16608:	fc 01       	movw	r30, r24
   1660a:	20 83       	st	Z, r18
   1660c:	31 83       	std	Z+1, r19	; 0x01
		PORTE.DIR |= (1 << (channel+3));
   1660e:	80 e8       	ldi	r24, 0x80	; 128
   16610:	96 e0       	ldi	r25, 0x06	; 6
   16612:	20 e8       	ldi	r18, 0x80	; 128
   16614:	36 e0       	ldi	r19, 0x06	; 6
   16616:	f9 01       	movw	r30, r18
   16618:	20 81       	ld	r18, Z
   1661a:	62 2f       	mov	r22, r18
   1661c:	2d 81       	ldd	r18, Y+5	; 0x05
   1661e:	22 2f       	mov	r18, r18
   16620:	30 e0       	ldi	r19, 0x00	; 0
   16622:	a9 01       	movw	r20, r18
   16624:	4d 5f       	subi	r20, 0xFD	; 253
   16626:	5f 4f       	sbci	r21, 0xFF	; 255
   16628:	21 e0       	ldi	r18, 0x01	; 1
   1662a:	30 e0       	ldi	r19, 0x00	; 0
   1662c:	02 c0       	rjmp	.+4      	; 0x16632 <pwm_init+0x1c6>
   1662e:	22 0f       	add	r18, r18
   16630:	33 1f       	adc	r19, r19
   16632:	4a 95       	dec	r20
   16634:	e2 f7       	brpl	.-8      	; 0x1662e <pwm_init+0x1c2>
   16636:	26 2b       	or	r18, r22
   16638:	fc 01       	movw	r30, r24
   1663a:	20 83       	st	Z, r18
		num_chan = 2;
   1663c:	82 e0       	ldi	r24, 0x02	; 2
   1663e:	89 83       	std	Y+1, r24	; 0x01
		break;
   16640:	43 c0       	rjmp	.+134    	; 0x166c8 <pwm_init+0x25c>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
   16642:	8a 81       	ldd	r24, Y+2	; 0x02
   16644:	9b 81       	ldd	r25, Y+3	; 0x03
   16646:	20 e0       	ldi	r18, 0x00	; 0
   16648:	3b e0       	ldi	r19, 0x0B	; 11
   1664a:	fc 01       	movw	r30, r24
   1664c:	20 83       	st	Z, r18
   1664e:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel-1));
   16650:	80 ea       	ldi	r24, 0xA0	; 160
   16652:	96 e0       	ldi	r25, 0x06	; 6
   16654:	20 ea       	ldi	r18, 0xA0	; 160
   16656:	36 e0       	ldi	r19, 0x06	; 6
   16658:	f9 01       	movw	r30, r18
   1665a:	20 81       	ld	r18, Z
   1665c:	62 2f       	mov	r22, r18
   1665e:	2d 81       	ldd	r18, Y+5	; 0x05
   16660:	22 2f       	mov	r18, r18
   16662:	30 e0       	ldi	r19, 0x00	; 0
   16664:	a9 01       	movw	r20, r18
   16666:	41 50       	subi	r20, 0x01	; 1
   16668:	51 09       	sbc	r21, r1
   1666a:	21 e0       	ldi	r18, 0x01	; 1
   1666c:	30 e0       	ldi	r19, 0x00	; 0
   1666e:	02 c0       	rjmp	.+4      	; 0x16674 <pwm_init+0x208>
   16670:	22 0f       	add	r18, r18
   16672:	33 1f       	adc	r19, r19
   16674:	4a 95       	dec	r20
   16676:	e2 f7       	brpl	.-8      	; 0x16670 <pwm_init+0x204>
   16678:	26 2b       	or	r18, r22
   1667a:	fc 01       	movw	r30, r24
   1667c:	20 83       	st	Z, r18
		num_chan = 4;
   1667e:	84 e0       	ldi	r24, 0x04	; 4
   16680:	89 83       	std	Y+1, r24	; 0x01
		break;
   16682:	22 c0       	rjmp	.+68     	; 0x166c8 <pwm_init+0x25c>
#endif
#if defined(TCF1)
	case PWM_TCF1:
		config->tc = &TCF1;
   16684:	8a 81       	ldd	r24, Y+2	; 0x02
   16686:	9b 81       	ldd	r25, Y+3	; 0x03
   16688:	20 e4       	ldi	r18, 0x40	; 64
   1668a:	3b e0       	ldi	r19, 0x0B	; 11
   1668c:	fc 01       	movw	r30, r24
   1668e:	20 83       	st	Z, r18
   16690:	31 83       	std	Z+1, r19	; 0x01
		PORTF.DIR |= (1 << (channel+3));
   16692:	80 ea       	ldi	r24, 0xA0	; 160
   16694:	96 e0       	ldi	r25, 0x06	; 6
   16696:	20 ea       	ldi	r18, 0xA0	; 160
   16698:	36 e0       	ldi	r19, 0x06	; 6
   1669a:	f9 01       	movw	r30, r18
   1669c:	20 81       	ld	r18, Z
   1669e:	62 2f       	mov	r22, r18
   166a0:	2d 81       	ldd	r18, Y+5	; 0x05
   166a2:	22 2f       	mov	r18, r18
   166a4:	30 e0       	ldi	r19, 0x00	; 0
   166a6:	a9 01       	movw	r20, r18
   166a8:	4d 5f       	subi	r20, 0xFD	; 253
   166aa:	5f 4f       	sbci	r21, 0xFF	; 255
   166ac:	21 e0       	ldi	r18, 0x01	; 1
   166ae:	30 e0       	ldi	r19, 0x00	; 0
   166b0:	02 c0       	rjmp	.+4      	; 0x166b6 <pwm_init+0x24a>
   166b2:	22 0f       	add	r18, r18
   166b4:	33 1f       	adc	r19, r19
   166b6:	4a 95       	dec	r20
   166b8:	e2 f7       	brpl	.-8      	; 0x166b2 <pwm_init+0x246>
   166ba:	26 2b       	or	r18, r22
   166bc:	fc 01       	movw	r30, r24
   166be:	20 83       	st	Z, r18
		num_chan = 2;
   166c0:	82 e0       	ldi	r24, 0x02	; 2
   166c2:	89 83       	std	Y+1, r24	; 0x01
		break;
   166c4:	01 c0       	rjmp	.+2      	; 0x166c8 <pwm_init+0x25c>
#endif
	default:
		Assert(false);
		break;
   166c6:	00 00       	nop
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
   166c8:	8a 81       	ldd	r24, Y+2	; 0x02
   166ca:	9b 81       	ldd	r25, Y+3	; 0x03
   166cc:	2d 81       	ldd	r18, Y+5	; 0x05
   166ce:	fc 01       	movw	r30, r24
   166d0:	22 83       	std	Z+2, r18	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
   166d2:	8d 81       	ldd	r24, Y+5	; 0x05
   166d4:	88 2f       	mov	r24, r24
   166d6:	90 e0       	ldi	r25, 0x00	; 0
   166d8:	82 30       	cpi	r24, 0x02	; 2
   166da:	91 05       	cpc	r25, r1
   166dc:	91 f0       	breq	.+36     	; 0x16702 <pwm_init+0x296>
   166de:	83 30       	cpi	r24, 0x03	; 3
   166e0:	91 05       	cpc	r25, r1
   166e2:	1c f4       	brge	.+6      	; 0x166ea <pwm_init+0x27e>
   166e4:	01 97       	sbiw	r24, 0x01	; 1
   166e6:	39 f0       	breq	.+14     	; 0x166f6 <pwm_init+0x28a>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
		break;
	default:
		Assert(false);
		break;
   166e8:	1e c0       	rjmp	.+60     	; 0x16726 <pwm_init+0x2ba>
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;

	/* Set the correct cc_mask */
	switch (channel) {
   166ea:	83 30       	cpi	r24, 0x03	; 3
   166ec:	91 05       	cpc	r25, r1
   166ee:	79 f0       	breq	.+30     	; 0x1670e <pwm_init+0x2a2>
   166f0:	04 97       	sbiw	r24, 0x04	; 4
   166f2:	99 f0       	breq	.+38     	; 0x1671a <pwm_init+0x2ae>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
		break;
	default:
		Assert(false);
		break;
   166f4:	18 c0       	rjmp	.+48     	; 0x16726 <pwm_init+0x2ba>
	config->channel = channel;

	/* Set the correct cc_mask */
	switch (channel) {
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
   166f6:	8a 81       	ldd	r24, Y+2	; 0x02
   166f8:	9b 81       	ldd	r25, Y+3	; 0x03
   166fa:	20 e1       	ldi	r18, 0x10	; 16
   166fc:	fc 01       	movw	r30, r24
   166fe:	23 83       	std	Z+3, r18	; 0x03
		break;
   16700:	12 c0       	rjmp	.+36     	; 0x16726 <pwm_init+0x2ba>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
   16702:	8a 81       	ldd	r24, Y+2	; 0x02
   16704:	9b 81       	ldd	r25, Y+3	; 0x03
   16706:	20 e2       	ldi	r18, 0x20	; 32
   16708:	fc 01       	movw	r30, r24
   1670a:	23 83       	std	Z+3, r18	; 0x03
		break;
   1670c:	0c c0       	rjmp	.+24     	; 0x16726 <pwm_init+0x2ba>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
   1670e:	8a 81       	ldd	r24, Y+2	; 0x02
   16710:	9b 81       	ldd	r25, Y+3	; 0x03
   16712:	20 e4       	ldi	r18, 0x40	; 64
   16714:	fc 01       	movw	r30, r24
   16716:	23 83       	std	Z+3, r18	; 0x03
		break;
   16718:	06 c0       	rjmp	.+12     	; 0x16726 <pwm_init+0x2ba>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
   1671a:	8a 81       	ldd	r24, Y+2	; 0x02
   1671c:	9b 81       	ldd	r25, Y+3	; 0x03
   1671e:	20 e8       	ldi	r18, 0x80	; 128
   16720:	fc 01       	movw	r30, r24
   16722:	23 83       	std	Z+3, r18	; 0x03
		break;
   16724:	00 00       	nop
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
   16726:	8a 81       	ldd	r24, Y+2	; 0x02
   16728:	9b 81       	ldd	r25, Y+3	; 0x03
   1672a:	fc 01       	movw	r30, r24
   1672c:	80 81       	ld	r24, Z
   1672e:	91 81       	ldd	r25, Z+1	; 0x01
   16730:	9f d9       	rcall	.-3266   	; 0x15a70 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
   16732:	8a 81       	ldd	r24, Y+2	; 0x02
   16734:	9b 81       	ldd	r25, Y+3	; 0x03
   16736:	fc 01       	movw	r30, r24
   16738:	80 81       	ld	r24, Z
   1673a:	91 81       	ldd	r25, Z+1	; 0x01
   1673c:	63 e0       	ldi	r22, 0x03	; 3
   1673e:	79 dd       	rcall	.-1294   	; 0x16232 <tc_set_wgm>

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
   16740:	8a 81       	ldd	r24, Y+2	; 0x02
   16742:	9b 81       	ldd	r25, Y+3	; 0x03
   16744:	fc 01       	movw	r30, r24
   16746:	15 82       	std	Z+5, r1	; 0x05
   16748:	16 82       	std	Z+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
   1674a:	8a 81       	ldd	r24, Y+2	; 0x02
   1674c:	9b 81       	ldd	r25, Y+3	; 0x03
   1674e:	fc 01       	movw	r30, r24
   16750:	14 82       	std	Z+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
   16752:	8a 81       	ldd	r24, Y+2	; 0x02
   16754:	9b 81       	ldd	r25, Y+3	; 0x03
   16756:	fc 01       	movw	r30, r24
   16758:	80 81       	ld	r24, Z
   1675a:	91 81       	ldd	r25, Z+1	; 0x01
   1675c:	60 e0       	ldi	r22, 0x00	; 0
   1675e:	97 dc       	rcall	.-1746   	; 0x1608e <tc_write_clock_source>

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
   16760:	2e 81       	ldd	r18, Y+6	; 0x06
   16762:	3f 81       	ldd	r19, Y+7	; 0x07
   16764:	8a 81       	ldd	r24, Y+2	; 0x02
   16766:	9b 81       	ldd	r25, Y+3	; 0x03
   16768:	b9 01       	movw	r22, r18
   1676a:	b5 dd       	rcall	.-1174   	; 0x162d6 <pwm_set_frequency>
}
   1676c:	00 00       	nop
   1676e:	27 96       	adiw	r28, 0x07	; 7
   16770:	cd bf       	out	0x3d, r28	; 61
   16772:	de bf       	out	0x3e, r29	; 62
   16774:	df 91       	pop	r29
   16776:	cf 91       	pop	r28
   16778:	08 95       	ret

0001677a <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
   1677a:	cf 93       	push	r28
   1677c:	df 93       	push	r29
   1677e:	00 d0       	rcall	.+0      	; 0x16780 <pwm_start+0x6>
   16780:	cd b7       	in	r28, 0x3d	; 61
   16782:	de b7       	in	r29, 0x3e	; 62
   16784:	89 83       	std	Y+1, r24	; 0x01
   16786:	9a 83       	std	Y+2, r25	; 0x02
   16788:	6b 83       	std	Y+3, r22	; 0x03
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
   1678a:	89 81       	ldd	r24, Y+1	; 0x01
   1678c:	9a 81       	ldd	r25, Y+2	; 0x02
   1678e:	6b 81       	ldd	r22, Y+3	; 0x03
   16790:	6c dd       	rcall	.-1320   	; 0x1626a <pwm_set_duty_cycle_percent>
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
   16792:	89 81       	ldd	r24, Y+1	; 0x01
   16794:	9a 81       	ldd	r25, Y+2	; 0x02
   16796:	fc 01       	movw	r30, r24
   16798:	25 81       	ldd	r18, Z+5	; 0x05
   1679a:	36 81       	ldd	r19, Z+6	; 0x06
   1679c:	89 81       	ldd	r24, Y+1	; 0x01
   1679e:	9a 81       	ldd	r25, Y+2	; 0x02
   167a0:	fc 01       	movw	r30, r24
   167a2:	80 81       	ld	r24, Z
   167a4:	91 81       	ldd	r25, Z+1	; 0x01
   167a6:	b9 01       	movw	r22, r18
   167a8:	8e dc       	rcall	.-1764   	; 0x160c6 <tc_write_period>
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
   167aa:	89 81       	ldd	r24, Y+1	; 0x01
   167ac:	9a 81       	ldd	r25, Y+2	; 0x02
   167ae:	fc 01       	movw	r30, r24
   167b0:	23 81       	ldd	r18, Z+3	; 0x03
   167b2:	89 81       	ldd	r24, Y+1	; 0x01
   167b4:	9a 81       	ldd	r25, Y+2	; 0x02
   167b6:	fc 01       	movw	r30, r24
   167b8:	80 81       	ld	r24, Z
   167ba:	91 81       	ldd	r25, Z+1	; 0x01
   167bc:	62 2f       	mov	r22, r18
   167be:	9b dc       	rcall	.-1738   	; 0x160f6 <tc_enable_cc_channels>
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
   167c0:	89 81       	ldd	r24, Y+1	; 0x01
   167c2:	9a 81       	ldd	r25, Y+2	; 0x02
   167c4:	fc 01       	movw	r30, r24
   167c6:	24 81       	ldd	r18, Z+4	; 0x04
   167c8:	89 81       	ldd	r24, Y+1	; 0x01
   167ca:	9a 81       	ldd	r25, Y+2	; 0x02
   167cc:	fc 01       	movw	r30, r24
   167ce:	80 81       	ld	r24, Z
   167d0:	91 81       	ldd	r25, Z+1	; 0x01
   167d2:	62 2f       	mov	r22, r18
   167d4:	5c dc       	rcall	.-1864   	; 0x1608e <tc_write_clock_source>
}
   167d6:	00 00       	nop
   167d8:	23 96       	adiw	r28, 0x03	; 3
   167da:	cd bf       	out	0x3d, r28	; 61
   167dc:	de bf       	out	0x3e, r29	; 62
   167de:	df 91       	pop	r29
   167e0:	cf 91       	pop	r28
   167e2:	08 95       	ret

000167e4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
   167e4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
   167e8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
   167ea:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
   167ec:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
   167f0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
   167f2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
   167f6:	08 95       	ret

000167f8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
   167f8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
   167fa:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
   167fc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
   167fe:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
   16800:	60 83       	st	Z, r22
	ret                             // Return to caller
   16802:	08 95       	ret

00016804 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   16804:	cf 93       	push	r28
   16806:	df 93       	push	r29
   16808:	cd b7       	in	r28, 0x3d	; 61
   1680a:	de b7       	in	r29, 0x3e	; 62
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
   1680c:	00 00       	nop
   1680e:	df 91       	pop	r29
   16810:	cf 91       	pop	r28
   16812:	08 95       	ret

00016814 <main>:
 */
#include <asf.h>
#include "RealMain.h"

int main (void)
{
   16814:	cf 93       	push	r28
   16816:	df 93       	push	r29
   16818:	cd b7       	in	r28, 0x3d	; 61
   1681a:	de b7       	in	r29, 0x3e	; 62
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
   1681c:	f3 df       	rcall	.-26     	; 0x16804 <board_init>

	/* Insert application code here, after the board has been initialized. */
	real_main();
   1681e:	0e 94 91 35 	call	0x6b22	; 0x6b22 <real_main>
   16822:	80 e0       	ldi	r24, 0x00	; 0
   16824:	90 e0       	ldi	r25, 0x00	; 0
}
   16826:	df 91       	pop	r29
   16828:	cf 91       	pop	r28
   1682a:	08 95       	ret

0001682c <__subsf3>:
   1682c:	50 58       	subi	r21, 0x80	; 128

0001682e <__addsf3>:
   1682e:	bb 27       	eor	r27, r27
   16830:	aa 27       	eor	r26, r26
   16832:	0e d0       	rcall	.+28     	; 0x16850 <__addsf3x>
   16834:	fd c1       	rjmp	.+1018   	; 0x16c30 <__fp_round>
   16836:	ee d1       	rcall	.+988    	; 0x16c14 <__fp_pscA>
   16838:	30 f0       	brcs	.+12     	; 0x16846 <__addsf3+0x18>
   1683a:	f3 d1       	rcall	.+998    	; 0x16c22 <__fp_pscB>
   1683c:	20 f0       	brcs	.+8      	; 0x16846 <__addsf3+0x18>
   1683e:	31 f4       	brne	.+12     	; 0x1684c <__addsf3+0x1e>
   16840:	9f 3f       	cpi	r25, 0xFF	; 255
   16842:	11 f4       	brne	.+4      	; 0x16848 <__addsf3+0x1a>
   16844:	1e f4       	brtc	.+6      	; 0x1684c <__addsf3+0x1e>
   16846:	d3 c1       	rjmp	.+934    	; 0x16bee <__fp_nan>
   16848:	0e f4       	brtc	.+2      	; 0x1684c <__addsf3+0x1e>
   1684a:	e0 95       	com	r30
   1684c:	e7 fb       	bst	r30, 7
   1684e:	c9 c1       	rjmp	.+914    	; 0x16be2 <__fp_inf>

00016850 <__addsf3x>:
   16850:	e9 2f       	mov	r30, r25
   16852:	ff d1       	rcall	.+1022   	; 0x16c52 <__fp_split3>
   16854:	80 f3       	brcs	.-32     	; 0x16836 <__addsf3+0x8>
   16856:	ba 17       	cp	r27, r26
   16858:	62 07       	cpc	r22, r18
   1685a:	73 07       	cpc	r23, r19
   1685c:	84 07       	cpc	r24, r20
   1685e:	95 07       	cpc	r25, r21
   16860:	18 f0       	brcs	.+6      	; 0x16868 <__addsf3x+0x18>
   16862:	71 f4       	brne	.+28     	; 0x16880 <__addsf3x+0x30>
   16864:	9e f5       	brtc	.+102    	; 0x168cc <__addsf3x+0x7c>
   16866:	17 c2       	rjmp	.+1070   	; 0x16c96 <__fp_zero>
   16868:	0e f4       	brtc	.+2      	; 0x1686c <__addsf3x+0x1c>
   1686a:	e0 95       	com	r30
   1686c:	0b 2e       	mov	r0, r27
   1686e:	ba 2f       	mov	r27, r26
   16870:	a0 2d       	mov	r26, r0
   16872:	0b 01       	movw	r0, r22
   16874:	b9 01       	movw	r22, r18
   16876:	90 01       	movw	r18, r0
   16878:	0c 01       	movw	r0, r24
   1687a:	ca 01       	movw	r24, r20
   1687c:	a0 01       	movw	r20, r0
   1687e:	11 24       	eor	r1, r1
   16880:	ff 27       	eor	r31, r31
   16882:	59 1b       	sub	r21, r25
   16884:	99 f0       	breq	.+38     	; 0x168ac <__addsf3x+0x5c>
   16886:	59 3f       	cpi	r21, 0xF9	; 249
   16888:	50 f4       	brcc	.+20     	; 0x1689e <__addsf3x+0x4e>
   1688a:	50 3e       	cpi	r21, 0xE0	; 224
   1688c:	68 f1       	brcs	.+90     	; 0x168e8 <__addsf3x+0x98>
   1688e:	1a 16       	cp	r1, r26
   16890:	f0 40       	sbci	r31, 0x00	; 0
   16892:	a2 2f       	mov	r26, r18
   16894:	23 2f       	mov	r18, r19
   16896:	34 2f       	mov	r19, r20
   16898:	44 27       	eor	r20, r20
   1689a:	58 5f       	subi	r21, 0xF8	; 248
   1689c:	f3 cf       	rjmp	.-26     	; 0x16884 <__addsf3x+0x34>
   1689e:	46 95       	lsr	r20
   168a0:	37 95       	ror	r19
   168a2:	27 95       	ror	r18
   168a4:	a7 95       	ror	r26
   168a6:	f0 40       	sbci	r31, 0x00	; 0
   168a8:	53 95       	inc	r21
   168aa:	c9 f7       	brne	.-14     	; 0x1689e <__addsf3x+0x4e>
   168ac:	7e f4       	brtc	.+30     	; 0x168cc <__addsf3x+0x7c>
   168ae:	1f 16       	cp	r1, r31
   168b0:	ba 0b       	sbc	r27, r26
   168b2:	62 0b       	sbc	r22, r18
   168b4:	73 0b       	sbc	r23, r19
   168b6:	84 0b       	sbc	r24, r20
   168b8:	ba f0       	brmi	.+46     	; 0x168e8 <__addsf3x+0x98>
   168ba:	91 50       	subi	r25, 0x01	; 1
   168bc:	a1 f0       	breq	.+40     	; 0x168e6 <__addsf3x+0x96>
   168be:	ff 0f       	add	r31, r31
   168c0:	bb 1f       	adc	r27, r27
   168c2:	66 1f       	adc	r22, r22
   168c4:	77 1f       	adc	r23, r23
   168c6:	88 1f       	adc	r24, r24
   168c8:	c2 f7       	brpl	.-16     	; 0x168ba <__addsf3x+0x6a>
   168ca:	0e c0       	rjmp	.+28     	; 0x168e8 <__addsf3x+0x98>
   168cc:	ba 0f       	add	r27, r26
   168ce:	62 1f       	adc	r22, r18
   168d0:	73 1f       	adc	r23, r19
   168d2:	84 1f       	adc	r24, r20
   168d4:	48 f4       	brcc	.+18     	; 0x168e8 <__addsf3x+0x98>
   168d6:	87 95       	ror	r24
   168d8:	77 95       	ror	r23
   168da:	67 95       	ror	r22
   168dc:	b7 95       	ror	r27
   168de:	f7 95       	ror	r31
   168e0:	9e 3f       	cpi	r25, 0xFE	; 254
   168e2:	08 f0       	brcs	.+2      	; 0x168e6 <__addsf3x+0x96>
   168e4:	b3 cf       	rjmp	.-154    	; 0x1684c <__addsf3+0x1e>
   168e6:	93 95       	inc	r25
   168e8:	88 0f       	add	r24, r24
   168ea:	08 f0       	brcs	.+2      	; 0x168ee <__addsf3x+0x9e>
   168ec:	99 27       	eor	r25, r25
   168ee:	ee 0f       	add	r30, r30
   168f0:	97 95       	ror	r25
   168f2:	87 95       	ror	r24
   168f4:	08 95       	ret

000168f6 <__cmpsf2>:
   168f6:	51 d1       	rcall	.+674    	; 0x16b9a <__fp_cmp>
   168f8:	08 f4       	brcc	.+2      	; 0x168fc <__cmpsf2+0x6>
   168fa:	81 e0       	ldi	r24, 0x01	; 1
   168fc:	08 95       	ret

000168fe <__divsf3>:
   168fe:	0c d0       	rcall	.+24     	; 0x16918 <__divsf3x>
   16900:	97 c1       	rjmp	.+814    	; 0x16c30 <__fp_round>
   16902:	8f d1       	rcall	.+798    	; 0x16c22 <__fp_pscB>
   16904:	40 f0       	brcs	.+16     	; 0x16916 <__divsf3+0x18>
   16906:	86 d1       	rcall	.+780    	; 0x16c14 <__fp_pscA>
   16908:	30 f0       	brcs	.+12     	; 0x16916 <__divsf3+0x18>
   1690a:	21 f4       	brne	.+8      	; 0x16914 <__divsf3+0x16>
   1690c:	5f 3f       	cpi	r21, 0xFF	; 255
   1690e:	19 f0       	breq	.+6      	; 0x16916 <__divsf3+0x18>
   16910:	68 c1       	rjmp	.+720    	; 0x16be2 <__fp_inf>
   16912:	51 11       	cpse	r21, r1
   16914:	c1 c1       	rjmp	.+898    	; 0x16c98 <__fp_szero>
   16916:	6b c1       	rjmp	.+726    	; 0x16bee <__fp_nan>

00016918 <__divsf3x>:
   16918:	9c d1       	rcall	.+824    	; 0x16c52 <__fp_split3>
   1691a:	98 f3       	brcs	.-26     	; 0x16902 <__divsf3+0x4>

0001691c <__divsf3_pse>:
   1691c:	99 23       	and	r25, r25
   1691e:	c9 f3       	breq	.-14     	; 0x16912 <__divsf3+0x14>
   16920:	55 23       	and	r21, r21
   16922:	b1 f3       	breq	.-20     	; 0x16910 <__divsf3+0x12>
   16924:	95 1b       	sub	r25, r21
   16926:	55 0b       	sbc	r21, r21
   16928:	bb 27       	eor	r27, r27
   1692a:	aa 27       	eor	r26, r26
   1692c:	62 17       	cp	r22, r18
   1692e:	73 07       	cpc	r23, r19
   16930:	84 07       	cpc	r24, r20
   16932:	38 f0       	brcs	.+14     	; 0x16942 <__divsf3_pse+0x26>
   16934:	9f 5f       	subi	r25, 0xFF	; 255
   16936:	5f 4f       	sbci	r21, 0xFF	; 255
   16938:	22 0f       	add	r18, r18
   1693a:	33 1f       	adc	r19, r19
   1693c:	44 1f       	adc	r20, r20
   1693e:	aa 1f       	adc	r26, r26
   16940:	a9 f3       	breq	.-22     	; 0x1692c <__divsf3_pse+0x10>
   16942:	33 d0       	rcall	.+102    	; 0x169aa <__divsf3_pse+0x8e>
   16944:	0e 2e       	mov	r0, r30
   16946:	3a f0       	brmi	.+14     	; 0x16956 <__divsf3_pse+0x3a>
   16948:	e0 e8       	ldi	r30, 0x80	; 128
   1694a:	30 d0       	rcall	.+96     	; 0x169ac <__divsf3_pse+0x90>
   1694c:	91 50       	subi	r25, 0x01	; 1
   1694e:	50 40       	sbci	r21, 0x00	; 0
   16950:	e6 95       	lsr	r30
   16952:	00 1c       	adc	r0, r0
   16954:	ca f7       	brpl	.-14     	; 0x16948 <__divsf3_pse+0x2c>
   16956:	29 d0       	rcall	.+82     	; 0x169aa <__divsf3_pse+0x8e>
   16958:	fe 2f       	mov	r31, r30
   1695a:	27 d0       	rcall	.+78     	; 0x169aa <__divsf3_pse+0x8e>
   1695c:	66 0f       	add	r22, r22
   1695e:	77 1f       	adc	r23, r23
   16960:	88 1f       	adc	r24, r24
   16962:	bb 1f       	adc	r27, r27
   16964:	26 17       	cp	r18, r22
   16966:	37 07       	cpc	r19, r23
   16968:	48 07       	cpc	r20, r24
   1696a:	ab 07       	cpc	r26, r27
   1696c:	b0 e8       	ldi	r27, 0x80	; 128
   1696e:	09 f0       	breq	.+2      	; 0x16972 <__divsf3_pse+0x56>
   16970:	bb 0b       	sbc	r27, r27
   16972:	80 2d       	mov	r24, r0
   16974:	bf 01       	movw	r22, r30
   16976:	ff 27       	eor	r31, r31
   16978:	93 58       	subi	r25, 0x83	; 131
   1697a:	5f 4f       	sbci	r21, 0xFF	; 255
   1697c:	2a f0       	brmi	.+10     	; 0x16988 <__divsf3_pse+0x6c>
   1697e:	9e 3f       	cpi	r25, 0xFE	; 254
   16980:	51 05       	cpc	r21, r1
   16982:	68 f0       	brcs	.+26     	; 0x1699e <__divsf3_pse+0x82>
   16984:	2e c1       	rjmp	.+604    	; 0x16be2 <__fp_inf>
   16986:	88 c1       	rjmp	.+784    	; 0x16c98 <__fp_szero>
   16988:	5f 3f       	cpi	r21, 0xFF	; 255
   1698a:	ec f3       	brlt	.-6      	; 0x16986 <__divsf3_pse+0x6a>
   1698c:	98 3e       	cpi	r25, 0xE8	; 232
   1698e:	dc f3       	brlt	.-10     	; 0x16986 <__divsf3_pse+0x6a>
   16990:	86 95       	lsr	r24
   16992:	77 95       	ror	r23
   16994:	67 95       	ror	r22
   16996:	b7 95       	ror	r27
   16998:	f7 95       	ror	r31
   1699a:	9f 5f       	subi	r25, 0xFF	; 255
   1699c:	c9 f7       	brne	.-14     	; 0x16990 <__divsf3_pse+0x74>
   1699e:	88 0f       	add	r24, r24
   169a0:	91 1d       	adc	r25, r1
   169a2:	96 95       	lsr	r25
   169a4:	87 95       	ror	r24
   169a6:	97 f9       	bld	r25, 7
   169a8:	08 95       	ret
   169aa:	e1 e0       	ldi	r30, 0x01	; 1
   169ac:	66 0f       	add	r22, r22
   169ae:	77 1f       	adc	r23, r23
   169b0:	88 1f       	adc	r24, r24
   169b2:	bb 1f       	adc	r27, r27
   169b4:	62 17       	cp	r22, r18
   169b6:	73 07       	cpc	r23, r19
   169b8:	84 07       	cpc	r24, r20
   169ba:	ba 07       	cpc	r27, r26
   169bc:	20 f0       	brcs	.+8      	; 0x169c6 <__divsf3_pse+0xaa>
   169be:	62 1b       	sub	r22, r18
   169c0:	73 0b       	sbc	r23, r19
   169c2:	84 0b       	sbc	r24, r20
   169c4:	ba 0b       	sbc	r27, r26
   169c6:	ee 1f       	adc	r30, r30
   169c8:	88 f7       	brcc	.-30     	; 0x169ac <__divsf3_pse+0x90>
   169ca:	e0 95       	com	r30
   169cc:	08 95       	ret

000169ce <__fixsfdi>:
   169ce:	be e3       	ldi	r27, 0x3E	; 62
   169d0:	04 d0       	rcall	.+8      	; 0x169da <__fixunssfdi+0x2>
   169d2:	08 f4       	brcc	.+2      	; 0x169d6 <__fixsfdi+0x8>
   169d4:	90 e8       	ldi	r25, 0x80	; 128
   169d6:	08 95       	ret

000169d8 <__fixunssfdi>:
   169d8:	bf e3       	ldi	r27, 0x3F	; 63
   169da:	22 27       	eor	r18, r18
   169dc:	33 27       	eor	r19, r19
   169de:	a9 01       	movw	r20, r18
   169e0:	40 d1       	rcall	.+640    	; 0x16c62 <__fp_splitA>
   169e2:	58 f1       	brcs	.+86     	; 0x16a3a <__fixunssfdi+0x62>
   169e4:	9f 57       	subi	r25, 0x7F	; 127
   169e6:	40 f1       	brcs	.+80     	; 0x16a38 <__fixunssfdi+0x60>
   169e8:	b9 17       	cp	r27, r25
   169ea:	38 f1       	brcs	.+78     	; 0x16a3a <__fixunssfdi+0x62>
   169ec:	bf e3       	ldi	r27, 0x3F	; 63
   169ee:	b9 1b       	sub	r27, r25
   169f0:	99 27       	eor	r25, r25
   169f2:	b8 50       	subi	r27, 0x08	; 8
   169f4:	3a f4       	brpl	.+14     	; 0x16a04 <__fixunssfdi+0x2c>
   169f6:	66 0f       	add	r22, r22
   169f8:	77 1f       	adc	r23, r23
   169fa:	88 1f       	adc	r24, r24
   169fc:	99 1f       	adc	r25, r25
   169fe:	b3 95       	inc	r27
   16a00:	d2 f3       	brmi	.-12     	; 0x169f6 <__fixunssfdi+0x1e>
   16a02:	16 c0       	rjmp	.+44     	; 0x16a30 <__fixunssfdi+0x58>
   16a04:	b8 50       	subi	r27, 0x08	; 8
   16a06:	4a f0       	brmi	.+18     	; 0x16a1a <__fixunssfdi+0x42>
   16a08:	23 2f       	mov	r18, r19
   16a0a:	34 2f       	mov	r19, r20
   16a0c:	45 2f       	mov	r20, r21
   16a0e:	56 2f       	mov	r21, r22
   16a10:	67 2f       	mov	r22, r23
   16a12:	78 2f       	mov	r23, r24
   16a14:	88 27       	eor	r24, r24
   16a16:	b8 50       	subi	r27, 0x08	; 8
   16a18:	ba f7       	brpl	.-18     	; 0x16a08 <__fixunssfdi+0x30>
   16a1a:	b8 5f       	subi	r27, 0xF8	; 248
   16a1c:	49 f0       	breq	.+18     	; 0x16a30 <__fixunssfdi+0x58>
   16a1e:	86 95       	lsr	r24
   16a20:	77 95       	ror	r23
   16a22:	67 95       	ror	r22
   16a24:	57 95       	ror	r21
   16a26:	47 95       	ror	r20
   16a28:	37 95       	ror	r19
   16a2a:	27 95       	ror	r18
   16a2c:	ba 95       	dec	r27
   16a2e:	b9 f7       	brne	.-18     	; 0x16a1e <__fixunssfdi+0x46>
   16a30:	0e f4       	brtc	.+2      	; 0x16a34 <__fixunssfdi+0x5c>
   16a32:	e0 d0       	rcall	.+448    	; 0x16bf4 <__fp_negdi>
   16a34:	88 94       	clc
   16a36:	08 95       	ret
   16a38:	88 94       	clc
   16a3a:	60 e0       	ldi	r22, 0x00	; 0
   16a3c:	70 e0       	ldi	r23, 0x00	; 0
   16a3e:	cb 01       	movw	r24, r22
   16a40:	08 95       	ret

00016a42 <__fixsfsi>:
   16a42:	04 d0       	rcall	.+8      	; 0x16a4c <__fixunssfsi>
   16a44:	68 94       	set
   16a46:	b1 11       	cpse	r27, r1
   16a48:	27 c1       	rjmp	.+590    	; 0x16c98 <__fp_szero>
   16a4a:	08 95       	ret

00016a4c <__fixunssfsi>:
   16a4c:	0a d1       	rcall	.+532    	; 0x16c62 <__fp_splitA>
   16a4e:	88 f0       	brcs	.+34     	; 0x16a72 <__fixunssfsi+0x26>
   16a50:	9f 57       	subi	r25, 0x7F	; 127
   16a52:	90 f0       	brcs	.+36     	; 0x16a78 <__fixunssfsi+0x2c>
   16a54:	b9 2f       	mov	r27, r25
   16a56:	99 27       	eor	r25, r25
   16a58:	b7 51       	subi	r27, 0x17	; 23
   16a5a:	a0 f0       	brcs	.+40     	; 0x16a84 <__fixunssfsi+0x38>
   16a5c:	d1 f0       	breq	.+52     	; 0x16a92 <__fixunssfsi+0x46>
   16a5e:	66 0f       	add	r22, r22
   16a60:	77 1f       	adc	r23, r23
   16a62:	88 1f       	adc	r24, r24
   16a64:	99 1f       	adc	r25, r25
   16a66:	1a f0       	brmi	.+6      	; 0x16a6e <__fixunssfsi+0x22>
   16a68:	ba 95       	dec	r27
   16a6a:	c9 f7       	brne	.-14     	; 0x16a5e <__fixunssfsi+0x12>
   16a6c:	12 c0       	rjmp	.+36     	; 0x16a92 <__fixunssfsi+0x46>
   16a6e:	b1 30       	cpi	r27, 0x01	; 1
   16a70:	81 f0       	breq	.+32     	; 0x16a92 <__fixunssfsi+0x46>
   16a72:	11 d1       	rcall	.+546    	; 0x16c96 <__fp_zero>
   16a74:	b1 e0       	ldi	r27, 0x01	; 1
   16a76:	08 95       	ret
   16a78:	0e c1       	rjmp	.+540    	; 0x16c96 <__fp_zero>
   16a7a:	67 2f       	mov	r22, r23
   16a7c:	78 2f       	mov	r23, r24
   16a7e:	88 27       	eor	r24, r24
   16a80:	b8 5f       	subi	r27, 0xF8	; 248
   16a82:	39 f0       	breq	.+14     	; 0x16a92 <__fixunssfsi+0x46>
   16a84:	b9 3f       	cpi	r27, 0xF9	; 249
   16a86:	cc f3       	brlt	.-14     	; 0x16a7a <__fixunssfsi+0x2e>
   16a88:	86 95       	lsr	r24
   16a8a:	77 95       	ror	r23
   16a8c:	67 95       	ror	r22
   16a8e:	b3 95       	inc	r27
   16a90:	d9 f7       	brne	.-10     	; 0x16a88 <__fixunssfsi+0x3c>
   16a92:	3e f4       	brtc	.+14     	; 0x16aa2 <__fixunssfsi+0x56>
   16a94:	90 95       	com	r25
   16a96:	80 95       	com	r24
   16a98:	70 95       	com	r23
   16a9a:	61 95       	neg	r22
   16a9c:	7f 4f       	sbci	r23, 0xFF	; 255
   16a9e:	8f 4f       	sbci	r24, 0xFF	; 255
   16aa0:	9f 4f       	sbci	r25, 0xFF	; 255
   16aa2:	08 95       	ret

00016aa4 <__floatunsisf>:
   16aa4:	e8 94       	clt
   16aa6:	09 c0       	rjmp	.+18     	; 0x16aba <__floatsisf+0x12>

00016aa8 <__floatsisf>:
   16aa8:	97 fb       	bst	r25, 7
   16aaa:	3e f4       	brtc	.+14     	; 0x16aba <__floatsisf+0x12>
   16aac:	90 95       	com	r25
   16aae:	80 95       	com	r24
   16ab0:	70 95       	com	r23
   16ab2:	61 95       	neg	r22
   16ab4:	7f 4f       	sbci	r23, 0xFF	; 255
   16ab6:	8f 4f       	sbci	r24, 0xFF	; 255
   16ab8:	9f 4f       	sbci	r25, 0xFF	; 255
   16aba:	99 23       	and	r25, r25
   16abc:	a9 f0       	breq	.+42     	; 0x16ae8 <__floatsisf+0x40>
   16abe:	f9 2f       	mov	r31, r25
   16ac0:	96 e9       	ldi	r25, 0x96	; 150
   16ac2:	bb 27       	eor	r27, r27
   16ac4:	93 95       	inc	r25
   16ac6:	f6 95       	lsr	r31
   16ac8:	87 95       	ror	r24
   16aca:	77 95       	ror	r23
   16acc:	67 95       	ror	r22
   16ace:	b7 95       	ror	r27
   16ad0:	f1 11       	cpse	r31, r1
   16ad2:	f8 cf       	rjmp	.-16     	; 0x16ac4 <__floatsisf+0x1c>
   16ad4:	fa f4       	brpl	.+62     	; 0x16b14 <__floatsisf+0x6c>
   16ad6:	bb 0f       	add	r27, r27
   16ad8:	11 f4       	brne	.+4      	; 0x16ade <__floatsisf+0x36>
   16ada:	60 ff       	sbrs	r22, 0
   16adc:	1b c0       	rjmp	.+54     	; 0x16b14 <__floatsisf+0x6c>
   16ade:	6f 5f       	subi	r22, 0xFF	; 255
   16ae0:	7f 4f       	sbci	r23, 0xFF	; 255
   16ae2:	8f 4f       	sbci	r24, 0xFF	; 255
   16ae4:	9f 4f       	sbci	r25, 0xFF	; 255
   16ae6:	16 c0       	rjmp	.+44     	; 0x16b14 <__floatsisf+0x6c>
   16ae8:	88 23       	and	r24, r24
   16aea:	11 f0       	breq	.+4      	; 0x16af0 <__floatsisf+0x48>
   16aec:	96 e9       	ldi	r25, 0x96	; 150
   16aee:	11 c0       	rjmp	.+34     	; 0x16b12 <__floatsisf+0x6a>
   16af0:	77 23       	and	r23, r23
   16af2:	21 f0       	breq	.+8      	; 0x16afc <__floatsisf+0x54>
   16af4:	9e e8       	ldi	r25, 0x8E	; 142
   16af6:	87 2f       	mov	r24, r23
   16af8:	76 2f       	mov	r23, r22
   16afa:	05 c0       	rjmp	.+10     	; 0x16b06 <__floatsisf+0x5e>
   16afc:	66 23       	and	r22, r22
   16afe:	71 f0       	breq	.+28     	; 0x16b1c <__floatsisf+0x74>
   16b00:	96 e8       	ldi	r25, 0x86	; 134
   16b02:	86 2f       	mov	r24, r22
   16b04:	70 e0       	ldi	r23, 0x00	; 0
   16b06:	60 e0       	ldi	r22, 0x00	; 0
   16b08:	2a f0       	brmi	.+10     	; 0x16b14 <__floatsisf+0x6c>
   16b0a:	9a 95       	dec	r25
   16b0c:	66 0f       	add	r22, r22
   16b0e:	77 1f       	adc	r23, r23
   16b10:	88 1f       	adc	r24, r24
   16b12:	da f7       	brpl	.-10     	; 0x16b0a <__floatsisf+0x62>
   16b14:	88 0f       	add	r24, r24
   16b16:	96 95       	lsr	r25
   16b18:	87 95       	ror	r24
   16b1a:	97 f9       	bld	r25, 7
   16b1c:	08 95       	ret

00016b1e <__floatundisf>:
   16b1e:	e8 94       	clt

00016b20 <__fp_di2sf>:
   16b20:	f9 2f       	mov	r31, r25
   16b22:	96 eb       	ldi	r25, 0xB6	; 182
   16b24:	ff 23       	and	r31, r31
   16b26:	81 f0       	breq	.+32     	; 0x16b48 <__fp_di2sf+0x28>
   16b28:	12 16       	cp	r1, r18
   16b2a:	13 06       	cpc	r1, r19
   16b2c:	14 06       	cpc	r1, r20
   16b2e:	44 0b       	sbc	r20, r20
   16b30:	93 95       	inc	r25
   16b32:	f6 95       	lsr	r31
   16b34:	87 95       	ror	r24
   16b36:	77 95       	ror	r23
   16b38:	67 95       	ror	r22
   16b3a:	57 95       	ror	r21
   16b3c:	40 40       	sbci	r20, 0x00	; 0
   16b3e:	ff 23       	and	r31, r31
   16b40:	b9 f7       	brne	.-18     	; 0x16b30 <__fp_di2sf+0x10>
   16b42:	1b c0       	rjmp	.+54     	; 0x16b7a <__fp_di2sf+0x5a>
   16b44:	99 27       	eor	r25, r25
   16b46:	08 95       	ret
   16b48:	88 23       	and	r24, r24
   16b4a:	51 f4       	brne	.+20     	; 0x16b60 <__fp_di2sf+0x40>
   16b4c:	98 50       	subi	r25, 0x08	; 8
   16b4e:	d2 f7       	brpl	.-12     	; 0x16b44 <__fp_di2sf+0x24>
   16b50:	87 2b       	or	r24, r23
   16b52:	76 2f       	mov	r23, r22
   16b54:	65 2f       	mov	r22, r21
   16b56:	54 2f       	mov	r21, r20
   16b58:	43 2f       	mov	r20, r19
   16b5a:	32 2f       	mov	r19, r18
   16b5c:	20 e0       	ldi	r18, 0x00	; 0
   16b5e:	b1 f3       	breq	.-20     	; 0x16b4c <__fp_di2sf+0x2c>
   16b60:	12 16       	cp	r1, r18
   16b62:	13 06       	cpc	r1, r19
   16b64:	14 06       	cpc	r1, r20
   16b66:	44 0b       	sbc	r20, r20
   16b68:	88 23       	and	r24, r24
   16b6a:	3a f0       	brmi	.+14     	; 0x16b7a <__fp_di2sf+0x5a>
   16b6c:	9a 95       	dec	r25
   16b6e:	44 0f       	add	r20, r20
   16b70:	55 1f       	adc	r21, r21
   16b72:	66 1f       	adc	r22, r22
   16b74:	77 1f       	adc	r23, r23
   16b76:	88 1f       	adc	r24, r24
   16b78:	ca f7       	brpl	.-14     	; 0x16b6c <__fp_di2sf+0x4c>
   16b7a:	55 23       	and	r21, r21
   16b7c:	4a f4       	brpl	.+18     	; 0x16b90 <__fp_di2sf+0x70>
   16b7e:	44 0f       	add	r20, r20
   16b80:	55 1f       	adc	r21, r21
   16b82:	11 f4       	brne	.+4      	; 0x16b88 <__fp_di2sf+0x68>
   16b84:	60 ff       	sbrs	r22, 0
   16b86:	04 c0       	rjmp	.+8      	; 0x16b90 <__fp_di2sf+0x70>
   16b88:	6f 5f       	subi	r22, 0xFF	; 255
   16b8a:	7f 4f       	sbci	r23, 0xFF	; 255
   16b8c:	8f 4f       	sbci	r24, 0xFF	; 255
   16b8e:	9f 4f       	sbci	r25, 0xFF	; 255
   16b90:	88 0f       	add	r24, r24
   16b92:	96 95       	lsr	r25
   16b94:	87 95       	ror	r24
   16b96:	97 f9       	bld	r25, 7
   16b98:	08 95       	ret

00016b9a <__fp_cmp>:
   16b9a:	99 0f       	add	r25, r25
   16b9c:	00 08       	sbc	r0, r0
   16b9e:	55 0f       	add	r21, r21
   16ba0:	aa 0b       	sbc	r26, r26
   16ba2:	e0 e8       	ldi	r30, 0x80	; 128
   16ba4:	fe ef       	ldi	r31, 0xFE	; 254
   16ba6:	16 16       	cp	r1, r22
   16ba8:	17 06       	cpc	r1, r23
   16baa:	e8 07       	cpc	r30, r24
   16bac:	f9 07       	cpc	r31, r25
   16bae:	c0 f0       	brcs	.+48     	; 0x16be0 <__fp_cmp+0x46>
   16bb0:	12 16       	cp	r1, r18
   16bb2:	13 06       	cpc	r1, r19
   16bb4:	e4 07       	cpc	r30, r20
   16bb6:	f5 07       	cpc	r31, r21
   16bb8:	98 f0       	brcs	.+38     	; 0x16be0 <__fp_cmp+0x46>
   16bba:	62 1b       	sub	r22, r18
   16bbc:	73 0b       	sbc	r23, r19
   16bbe:	84 0b       	sbc	r24, r20
   16bc0:	95 0b       	sbc	r25, r21
   16bc2:	39 f4       	brne	.+14     	; 0x16bd2 <__fp_cmp+0x38>
   16bc4:	0a 26       	eor	r0, r26
   16bc6:	61 f0       	breq	.+24     	; 0x16be0 <__fp_cmp+0x46>
   16bc8:	23 2b       	or	r18, r19
   16bca:	24 2b       	or	r18, r20
   16bcc:	25 2b       	or	r18, r21
   16bce:	21 f4       	brne	.+8      	; 0x16bd8 <__fp_cmp+0x3e>
   16bd0:	08 95       	ret
   16bd2:	0a 26       	eor	r0, r26
   16bd4:	09 f4       	brne	.+2      	; 0x16bd8 <__fp_cmp+0x3e>
   16bd6:	a1 40       	sbci	r26, 0x01	; 1
   16bd8:	a6 95       	lsr	r26
   16bda:	8f ef       	ldi	r24, 0xFF	; 255
   16bdc:	81 1d       	adc	r24, r1
   16bde:	81 1d       	adc	r24, r1
   16be0:	08 95       	ret

00016be2 <__fp_inf>:
   16be2:	97 f9       	bld	r25, 7
   16be4:	9f 67       	ori	r25, 0x7F	; 127
   16be6:	80 e8       	ldi	r24, 0x80	; 128
   16be8:	70 e0       	ldi	r23, 0x00	; 0
   16bea:	60 e0       	ldi	r22, 0x00	; 0
   16bec:	08 95       	ret

00016bee <__fp_nan>:
   16bee:	9f ef       	ldi	r25, 0xFF	; 255
   16bf0:	80 ec       	ldi	r24, 0xC0	; 192
   16bf2:	08 95       	ret

00016bf4 <__fp_negdi>:
   16bf4:	90 95       	com	r25
   16bf6:	80 95       	com	r24
   16bf8:	70 95       	com	r23
   16bfa:	60 95       	com	r22
   16bfc:	50 95       	com	r21
   16bfe:	40 95       	com	r20
   16c00:	30 95       	com	r19
   16c02:	21 95       	neg	r18
   16c04:	3f 4f       	sbci	r19, 0xFF	; 255
   16c06:	4f 4f       	sbci	r20, 0xFF	; 255
   16c08:	5f 4f       	sbci	r21, 0xFF	; 255
   16c0a:	6f 4f       	sbci	r22, 0xFF	; 255
   16c0c:	7f 4f       	sbci	r23, 0xFF	; 255
   16c0e:	8f 4f       	sbci	r24, 0xFF	; 255
   16c10:	9f 4f       	sbci	r25, 0xFF	; 255
   16c12:	08 95       	ret

00016c14 <__fp_pscA>:
   16c14:	00 24       	eor	r0, r0
   16c16:	0a 94       	dec	r0
   16c18:	16 16       	cp	r1, r22
   16c1a:	17 06       	cpc	r1, r23
   16c1c:	18 06       	cpc	r1, r24
   16c1e:	09 06       	cpc	r0, r25
   16c20:	08 95       	ret

00016c22 <__fp_pscB>:
   16c22:	00 24       	eor	r0, r0
   16c24:	0a 94       	dec	r0
   16c26:	12 16       	cp	r1, r18
   16c28:	13 06       	cpc	r1, r19
   16c2a:	14 06       	cpc	r1, r20
   16c2c:	05 06       	cpc	r0, r21
   16c2e:	08 95       	ret

00016c30 <__fp_round>:
   16c30:	09 2e       	mov	r0, r25
   16c32:	03 94       	inc	r0
   16c34:	00 0c       	add	r0, r0
   16c36:	11 f4       	brne	.+4      	; 0x16c3c <__fp_round+0xc>
   16c38:	88 23       	and	r24, r24
   16c3a:	52 f0       	brmi	.+20     	; 0x16c50 <__fp_round+0x20>
   16c3c:	bb 0f       	add	r27, r27
   16c3e:	40 f4       	brcc	.+16     	; 0x16c50 <__fp_round+0x20>
   16c40:	bf 2b       	or	r27, r31
   16c42:	11 f4       	brne	.+4      	; 0x16c48 <__fp_round+0x18>
   16c44:	60 ff       	sbrs	r22, 0
   16c46:	04 c0       	rjmp	.+8      	; 0x16c50 <__fp_round+0x20>
   16c48:	6f 5f       	subi	r22, 0xFF	; 255
   16c4a:	7f 4f       	sbci	r23, 0xFF	; 255
   16c4c:	8f 4f       	sbci	r24, 0xFF	; 255
   16c4e:	9f 4f       	sbci	r25, 0xFF	; 255
   16c50:	08 95       	ret

00016c52 <__fp_split3>:
   16c52:	57 fd       	sbrc	r21, 7
   16c54:	90 58       	subi	r25, 0x80	; 128
   16c56:	44 0f       	add	r20, r20
   16c58:	55 1f       	adc	r21, r21
   16c5a:	59 f0       	breq	.+22     	; 0x16c72 <__fp_splitA+0x10>
   16c5c:	5f 3f       	cpi	r21, 0xFF	; 255
   16c5e:	71 f0       	breq	.+28     	; 0x16c7c <__fp_splitA+0x1a>
   16c60:	47 95       	ror	r20

00016c62 <__fp_splitA>:
   16c62:	88 0f       	add	r24, r24
   16c64:	97 fb       	bst	r25, 7
   16c66:	99 1f       	adc	r25, r25
   16c68:	61 f0       	breq	.+24     	; 0x16c82 <__fp_splitA+0x20>
   16c6a:	9f 3f       	cpi	r25, 0xFF	; 255
   16c6c:	79 f0       	breq	.+30     	; 0x16c8c <__fp_splitA+0x2a>
   16c6e:	87 95       	ror	r24
   16c70:	08 95       	ret
   16c72:	12 16       	cp	r1, r18
   16c74:	13 06       	cpc	r1, r19
   16c76:	14 06       	cpc	r1, r20
   16c78:	55 1f       	adc	r21, r21
   16c7a:	f2 cf       	rjmp	.-28     	; 0x16c60 <__fp_split3+0xe>
   16c7c:	46 95       	lsr	r20
   16c7e:	f1 df       	rcall	.-30     	; 0x16c62 <__fp_splitA>
   16c80:	08 c0       	rjmp	.+16     	; 0x16c92 <__fp_splitA+0x30>
   16c82:	16 16       	cp	r1, r22
   16c84:	17 06       	cpc	r1, r23
   16c86:	18 06       	cpc	r1, r24
   16c88:	99 1f       	adc	r25, r25
   16c8a:	f1 cf       	rjmp	.-30     	; 0x16c6e <__fp_splitA+0xc>
   16c8c:	86 95       	lsr	r24
   16c8e:	71 05       	cpc	r23, r1
   16c90:	61 05       	cpc	r22, r1
   16c92:	08 94       	sec
   16c94:	08 95       	ret

00016c96 <__fp_zero>:
   16c96:	e8 94       	clt

00016c98 <__fp_szero>:
   16c98:	bb 27       	eor	r27, r27
   16c9a:	66 27       	eor	r22, r22
   16c9c:	77 27       	eor	r23, r23
   16c9e:	cb 01       	movw	r24, r22
   16ca0:	97 f9       	bld	r25, 7
   16ca2:	08 95       	ret

00016ca4 <__gesf2>:
   16ca4:	7a df       	rcall	.-268    	; 0x16b9a <__fp_cmp>
   16ca6:	08 f4       	brcc	.+2      	; 0x16caa <__gesf2+0x6>
   16ca8:	8f ef       	ldi	r24, 0xFF	; 255
   16caa:	08 95       	ret

00016cac <__mulsf3>:
   16cac:	0b d0       	rcall	.+22     	; 0x16cc4 <__mulsf3x>
   16cae:	c0 cf       	rjmp	.-128    	; 0x16c30 <__fp_round>
   16cb0:	b1 df       	rcall	.-158    	; 0x16c14 <__fp_pscA>
   16cb2:	28 f0       	brcs	.+10     	; 0x16cbe <__mulsf3+0x12>
   16cb4:	b6 df       	rcall	.-148    	; 0x16c22 <__fp_pscB>
   16cb6:	18 f0       	brcs	.+6      	; 0x16cbe <__mulsf3+0x12>
   16cb8:	95 23       	and	r25, r21
   16cba:	09 f0       	breq	.+2      	; 0x16cbe <__mulsf3+0x12>
   16cbc:	92 cf       	rjmp	.-220    	; 0x16be2 <__fp_inf>
   16cbe:	97 cf       	rjmp	.-210    	; 0x16bee <__fp_nan>
   16cc0:	11 24       	eor	r1, r1
   16cc2:	ea cf       	rjmp	.-44     	; 0x16c98 <__fp_szero>

00016cc4 <__mulsf3x>:
   16cc4:	c6 df       	rcall	.-116    	; 0x16c52 <__fp_split3>
   16cc6:	a0 f3       	brcs	.-24     	; 0x16cb0 <__mulsf3+0x4>

00016cc8 <__mulsf3_pse>:
   16cc8:	95 9f       	mul	r25, r21
   16cca:	d1 f3       	breq	.-12     	; 0x16cc0 <__mulsf3+0x14>
   16ccc:	95 0f       	add	r25, r21
   16cce:	50 e0       	ldi	r21, 0x00	; 0
   16cd0:	55 1f       	adc	r21, r21
   16cd2:	62 9f       	mul	r22, r18
   16cd4:	f0 01       	movw	r30, r0
   16cd6:	72 9f       	mul	r23, r18
   16cd8:	bb 27       	eor	r27, r27
   16cda:	f0 0d       	add	r31, r0
   16cdc:	b1 1d       	adc	r27, r1
   16cde:	63 9f       	mul	r22, r19
   16ce0:	aa 27       	eor	r26, r26
   16ce2:	f0 0d       	add	r31, r0
   16ce4:	b1 1d       	adc	r27, r1
   16ce6:	aa 1f       	adc	r26, r26
   16ce8:	64 9f       	mul	r22, r20
   16cea:	66 27       	eor	r22, r22
   16cec:	b0 0d       	add	r27, r0
   16cee:	a1 1d       	adc	r26, r1
   16cf0:	66 1f       	adc	r22, r22
   16cf2:	82 9f       	mul	r24, r18
   16cf4:	22 27       	eor	r18, r18
   16cf6:	b0 0d       	add	r27, r0
   16cf8:	a1 1d       	adc	r26, r1
   16cfa:	62 1f       	adc	r22, r18
   16cfc:	73 9f       	mul	r23, r19
   16cfe:	b0 0d       	add	r27, r0
   16d00:	a1 1d       	adc	r26, r1
   16d02:	62 1f       	adc	r22, r18
   16d04:	83 9f       	mul	r24, r19
   16d06:	a0 0d       	add	r26, r0
   16d08:	61 1d       	adc	r22, r1
   16d0a:	22 1f       	adc	r18, r18
   16d0c:	74 9f       	mul	r23, r20
   16d0e:	33 27       	eor	r19, r19
   16d10:	a0 0d       	add	r26, r0
   16d12:	61 1d       	adc	r22, r1
   16d14:	23 1f       	adc	r18, r19
   16d16:	84 9f       	mul	r24, r20
   16d18:	60 0d       	add	r22, r0
   16d1a:	21 1d       	adc	r18, r1
   16d1c:	82 2f       	mov	r24, r18
   16d1e:	76 2f       	mov	r23, r22
   16d20:	6a 2f       	mov	r22, r26
   16d22:	11 24       	eor	r1, r1
   16d24:	9f 57       	subi	r25, 0x7F	; 127
   16d26:	50 40       	sbci	r21, 0x00	; 0
   16d28:	8a f0       	brmi	.+34     	; 0x16d4c <__mulsf3_pse+0x84>
   16d2a:	e1 f0       	breq	.+56     	; 0x16d64 <__mulsf3_pse+0x9c>
   16d2c:	88 23       	and	r24, r24
   16d2e:	4a f0       	brmi	.+18     	; 0x16d42 <__mulsf3_pse+0x7a>
   16d30:	ee 0f       	add	r30, r30
   16d32:	ff 1f       	adc	r31, r31
   16d34:	bb 1f       	adc	r27, r27
   16d36:	66 1f       	adc	r22, r22
   16d38:	77 1f       	adc	r23, r23
   16d3a:	88 1f       	adc	r24, r24
   16d3c:	91 50       	subi	r25, 0x01	; 1
   16d3e:	50 40       	sbci	r21, 0x00	; 0
   16d40:	a9 f7       	brne	.-22     	; 0x16d2c <__mulsf3_pse+0x64>
   16d42:	9e 3f       	cpi	r25, 0xFE	; 254
   16d44:	51 05       	cpc	r21, r1
   16d46:	70 f0       	brcs	.+28     	; 0x16d64 <__mulsf3_pse+0x9c>
   16d48:	4c cf       	rjmp	.-360    	; 0x16be2 <__fp_inf>
   16d4a:	a6 cf       	rjmp	.-180    	; 0x16c98 <__fp_szero>
   16d4c:	5f 3f       	cpi	r21, 0xFF	; 255
   16d4e:	ec f3       	brlt	.-6      	; 0x16d4a <__mulsf3_pse+0x82>
   16d50:	98 3e       	cpi	r25, 0xE8	; 232
   16d52:	dc f3       	brlt	.-10     	; 0x16d4a <__mulsf3_pse+0x82>
   16d54:	86 95       	lsr	r24
   16d56:	77 95       	ror	r23
   16d58:	67 95       	ror	r22
   16d5a:	b7 95       	ror	r27
   16d5c:	f7 95       	ror	r31
   16d5e:	e7 95       	ror	r30
   16d60:	9f 5f       	subi	r25, 0xFF	; 255
   16d62:	c1 f7       	brne	.-16     	; 0x16d54 <__mulsf3_pse+0x8c>
   16d64:	fe 2b       	or	r31, r30
   16d66:	88 0f       	add	r24, r24
   16d68:	91 1d       	adc	r25, r1
   16d6a:	96 95       	lsr	r25
   16d6c:	87 95       	ror	r24
   16d6e:	97 f9       	bld	r25, 7
   16d70:	08 95       	ret

00016d72 <round>:
   16d72:	77 df       	rcall	.-274    	; 0x16c62 <__fp_splitA>
   16d74:	e0 f0       	brcs	.+56     	; 0x16dae <round+0x3c>
   16d76:	9e 37       	cpi	r25, 0x7E	; 126
   16d78:	d8 f0       	brcs	.+54     	; 0x16db0 <round+0x3e>
   16d7a:	96 39       	cpi	r25, 0x96	; 150
   16d7c:	b8 f4       	brcc	.+46     	; 0x16dac <round+0x3a>
   16d7e:	9e 38       	cpi	r25, 0x8E	; 142
   16d80:	48 f4       	brcc	.+18     	; 0x16d94 <round+0x22>
   16d82:	67 2f       	mov	r22, r23
   16d84:	78 2f       	mov	r23, r24
   16d86:	88 27       	eor	r24, r24
   16d88:	98 5f       	subi	r25, 0xF8	; 248
   16d8a:	f9 cf       	rjmp	.-14     	; 0x16d7e <round+0xc>
   16d8c:	86 95       	lsr	r24
   16d8e:	77 95       	ror	r23
   16d90:	67 95       	ror	r22
   16d92:	93 95       	inc	r25
   16d94:	95 39       	cpi	r25, 0x95	; 149
   16d96:	d0 f3       	brcs	.-12     	; 0x16d8c <round+0x1a>
   16d98:	b6 2f       	mov	r27, r22
   16d9a:	b1 70       	andi	r27, 0x01	; 1
   16d9c:	6b 0f       	add	r22, r27
   16d9e:	71 1d       	adc	r23, r1
   16da0:	81 1d       	adc	r24, r1
   16da2:	20 f4       	brcc	.+8      	; 0x16dac <round+0x3a>
   16da4:	87 95       	ror	r24
   16da6:	77 95       	ror	r23
   16da8:	67 95       	ror	r22
   16daa:	93 95       	inc	r25
   16dac:	02 c0       	rjmp	.+4      	; 0x16db2 <__fp_mintl>
   16dae:	1c c0       	rjmp	.+56     	; 0x16de8 <__fp_mpack>
   16db0:	73 cf       	rjmp	.-282    	; 0x16c98 <__fp_szero>

00016db2 <__fp_mintl>:
   16db2:	88 23       	and	r24, r24
   16db4:	71 f4       	brne	.+28     	; 0x16dd2 <__fp_mintl+0x20>
   16db6:	77 23       	and	r23, r23
   16db8:	21 f0       	breq	.+8      	; 0x16dc2 <__fp_mintl+0x10>
   16dba:	98 50       	subi	r25, 0x08	; 8
   16dbc:	87 2b       	or	r24, r23
   16dbe:	76 2f       	mov	r23, r22
   16dc0:	07 c0       	rjmp	.+14     	; 0x16dd0 <__fp_mintl+0x1e>
   16dc2:	66 23       	and	r22, r22
   16dc4:	11 f4       	brne	.+4      	; 0x16dca <__fp_mintl+0x18>
   16dc6:	99 27       	eor	r25, r25
   16dc8:	0d c0       	rjmp	.+26     	; 0x16de4 <__fp_mintl+0x32>
   16dca:	90 51       	subi	r25, 0x10	; 16
   16dcc:	86 2b       	or	r24, r22
   16dce:	70 e0       	ldi	r23, 0x00	; 0
   16dd0:	60 e0       	ldi	r22, 0x00	; 0
   16dd2:	2a f0       	brmi	.+10     	; 0x16dde <__fp_mintl+0x2c>
   16dd4:	9a 95       	dec	r25
   16dd6:	66 0f       	add	r22, r22
   16dd8:	77 1f       	adc	r23, r23
   16dda:	88 1f       	adc	r24, r24
   16ddc:	da f7       	brpl	.-10     	; 0x16dd4 <__fp_mintl+0x22>
   16dde:	88 0f       	add	r24, r24
   16de0:	96 95       	lsr	r25
   16de2:	87 95       	ror	r24
   16de4:	97 f9       	bld	r25, 7
   16de6:	08 95       	ret

00016de8 <__fp_mpack>:
   16de8:	9f 3f       	cpi	r25, 0xFF	; 255
   16dea:	31 f0       	breq	.+12     	; 0x16df8 <__fp_mpack_finite+0xc>

00016dec <__fp_mpack_finite>:
   16dec:	91 50       	subi	r25, 0x01	; 1
   16dee:	20 f4       	brcc	.+8      	; 0x16df8 <__fp_mpack_finite+0xc>
   16df0:	87 95       	ror	r24
   16df2:	77 95       	ror	r23
   16df4:	67 95       	ror	r22
   16df6:	b7 95       	ror	r27
   16df8:	88 0f       	add	r24, r24
   16dfa:	91 1d       	adc	r25, r1
   16dfc:	96 95       	lsr	r25
   16dfe:	87 95       	ror	r24
   16e00:	97 f9       	bld	r25, 7
   16e02:	08 95       	ret

00016e04 <__mulsi3>:
   16e04:	db 01       	movw	r26, r22
   16e06:	8f 93       	push	r24
   16e08:	9f 93       	push	r25
   16e0a:	59 d0       	rcall	.+178    	; 0x16ebe <__muluhisi3>
   16e0c:	bf 91       	pop	r27
   16e0e:	af 91       	pop	r26
   16e10:	a2 9f       	mul	r26, r18
   16e12:	80 0d       	add	r24, r0
   16e14:	91 1d       	adc	r25, r1
   16e16:	a3 9f       	mul	r26, r19
   16e18:	90 0d       	add	r25, r0
   16e1a:	b2 9f       	mul	r27, r18
   16e1c:	90 0d       	add	r25, r0
   16e1e:	11 24       	eor	r1, r1
   16e20:	08 95       	ret

00016e22 <__udivmodhi4>:
   16e22:	aa 1b       	sub	r26, r26
   16e24:	bb 1b       	sub	r27, r27
   16e26:	51 e1       	ldi	r21, 0x11	; 17
   16e28:	07 c0       	rjmp	.+14     	; 0x16e38 <__udivmodhi4_ep>

00016e2a <__udivmodhi4_loop>:
   16e2a:	aa 1f       	adc	r26, r26
   16e2c:	bb 1f       	adc	r27, r27
   16e2e:	a6 17       	cp	r26, r22
   16e30:	b7 07       	cpc	r27, r23
   16e32:	10 f0       	brcs	.+4      	; 0x16e38 <__udivmodhi4_ep>
   16e34:	a6 1b       	sub	r26, r22
   16e36:	b7 0b       	sbc	r27, r23

00016e38 <__udivmodhi4_ep>:
   16e38:	88 1f       	adc	r24, r24
   16e3a:	99 1f       	adc	r25, r25
   16e3c:	5a 95       	dec	r21
   16e3e:	a9 f7       	brne	.-22     	; 0x16e2a <__udivmodhi4_loop>
   16e40:	80 95       	com	r24
   16e42:	90 95       	com	r25
   16e44:	bc 01       	movw	r22, r24
   16e46:	cd 01       	movw	r24, r26
   16e48:	08 95       	ret

00016e4a <__udivmodsi4>:
   16e4a:	a1 e2       	ldi	r26, 0x21	; 33
   16e4c:	1a 2e       	mov	r1, r26
   16e4e:	aa 1b       	sub	r26, r26
   16e50:	bb 1b       	sub	r27, r27
   16e52:	fd 01       	movw	r30, r26
   16e54:	0d c0       	rjmp	.+26     	; 0x16e70 <__udivmodsi4_ep>

00016e56 <__udivmodsi4_loop>:
   16e56:	aa 1f       	adc	r26, r26
   16e58:	bb 1f       	adc	r27, r27
   16e5a:	ee 1f       	adc	r30, r30
   16e5c:	ff 1f       	adc	r31, r31
   16e5e:	a2 17       	cp	r26, r18
   16e60:	b3 07       	cpc	r27, r19
   16e62:	e4 07       	cpc	r30, r20
   16e64:	f5 07       	cpc	r31, r21
   16e66:	20 f0       	brcs	.+8      	; 0x16e70 <__udivmodsi4_ep>
   16e68:	a2 1b       	sub	r26, r18
   16e6a:	b3 0b       	sbc	r27, r19
   16e6c:	e4 0b       	sbc	r30, r20
   16e6e:	f5 0b       	sbc	r31, r21

00016e70 <__udivmodsi4_ep>:
   16e70:	66 1f       	adc	r22, r22
   16e72:	77 1f       	adc	r23, r23
   16e74:	88 1f       	adc	r24, r24
   16e76:	99 1f       	adc	r25, r25
   16e78:	1a 94       	dec	r1
   16e7a:	69 f7       	brne	.-38     	; 0x16e56 <__udivmodsi4_loop>
   16e7c:	60 95       	com	r22
   16e7e:	70 95       	com	r23
   16e80:	80 95       	com	r24
   16e82:	90 95       	com	r25
   16e84:	9b 01       	movw	r18, r22
   16e86:	ac 01       	movw	r20, r24
   16e88:	bd 01       	movw	r22, r26
   16e8a:	cf 01       	movw	r24, r30
   16e8c:	08 95       	ret

00016e8e <__tablejump2__>:
   16e8e:	ee 0f       	add	r30, r30
   16e90:	ff 1f       	adc	r31, r31
   16e92:	88 1f       	adc	r24, r24
   16e94:	8b bf       	out	0x3b, r24	; 59
   16e96:	07 90       	elpm	r0, Z+
   16e98:	f6 91       	elpm	r31, Z
   16e9a:	e0 2d       	mov	r30, r0
   16e9c:	1b be       	out	0x3b, r1	; 59
   16e9e:	19 94       	eijmp

00016ea0 <__umulhisi3>:
   16ea0:	a2 9f       	mul	r26, r18
   16ea2:	b0 01       	movw	r22, r0
   16ea4:	b3 9f       	mul	r27, r19
   16ea6:	c0 01       	movw	r24, r0
   16ea8:	a3 9f       	mul	r26, r19
   16eaa:	70 0d       	add	r23, r0
   16eac:	81 1d       	adc	r24, r1
   16eae:	11 24       	eor	r1, r1
   16eb0:	91 1d       	adc	r25, r1
   16eb2:	b2 9f       	mul	r27, r18
   16eb4:	70 0d       	add	r23, r0
   16eb6:	81 1d       	adc	r24, r1
   16eb8:	11 24       	eor	r1, r1
   16eba:	91 1d       	adc	r25, r1
   16ebc:	08 95       	ret

00016ebe <__muluhisi3>:
   16ebe:	f0 df       	rcall	.-32     	; 0x16ea0 <__umulhisi3>
   16ec0:	a5 9f       	mul	r26, r21
   16ec2:	90 0d       	add	r25, r0
   16ec4:	b4 9f       	mul	r27, r20
   16ec6:	90 0d       	add	r25, r0
   16ec8:	a4 9f       	mul	r26, r20
   16eca:	80 0d       	add	r24, r0
   16ecc:	91 1d       	adc	r25, r1
   16ece:	11 24       	eor	r1, r1
   16ed0:	08 95       	ret

00016ed2 <__umoddi3>:
   16ed2:	68 94       	set
   16ed4:	01 c0       	rjmp	.+2      	; 0x16ed8 <__udivdi3_umoddi3>

00016ed6 <__udivdi3>:
   16ed6:	e8 94       	clt

00016ed8 <__udivdi3_umoddi3>:
   16ed8:	8f 92       	push	r8
   16eda:	9f 92       	push	r9
   16edc:	cf 93       	push	r28
   16ede:	df 93       	push	r29
   16ee0:	05 d0       	rcall	.+10     	; 0x16eec <__udivmod64>
   16ee2:	df 91       	pop	r29
   16ee4:	cf 91       	pop	r28
   16ee6:	9f 90       	pop	r9
   16ee8:	8f 90       	pop	r8
   16eea:	08 95       	ret

00016eec <__udivmod64>:
   16eec:	88 24       	eor	r8, r8
   16eee:	99 24       	eor	r9, r9
   16ef0:	f4 01       	movw	r30, r8
   16ef2:	e4 01       	movw	r28, r8
   16ef4:	b0 e4       	ldi	r27, 0x40	; 64
   16ef6:	9f 93       	push	r25
   16ef8:	aa 27       	eor	r26, r26
   16efa:	9a 15       	cp	r25, r10
   16efc:	8b 04       	cpc	r8, r11
   16efe:	9c 04       	cpc	r9, r12
   16f00:	ed 05       	cpc	r30, r13
   16f02:	fe 05       	cpc	r31, r14
   16f04:	cf 05       	cpc	r28, r15
   16f06:	d0 07       	cpc	r29, r16
   16f08:	a1 07       	cpc	r26, r17
   16f0a:	98 f4       	brcc	.+38     	; 0x16f32 <__udivmod64+0x46>
   16f0c:	ad 2f       	mov	r26, r29
   16f0e:	dc 2f       	mov	r29, r28
   16f10:	cf 2f       	mov	r28, r31
   16f12:	fe 2f       	mov	r31, r30
   16f14:	e9 2d       	mov	r30, r9
   16f16:	98 2c       	mov	r9, r8
   16f18:	89 2e       	mov	r8, r25
   16f1a:	98 2f       	mov	r25, r24
   16f1c:	87 2f       	mov	r24, r23
   16f1e:	76 2f       	mov	r23, r22
   16f20:	65 2f       	mov	r22, r21
   16f22:	54 2f       	mov	r21, r20
   16f24:	43 2f       	mov	r20, r19
   16f26:	32 2f       	mov	r19, r18
   16f28:	22 27       	eor	r18, r18
   16f2a:	b8 50       	subi	r27, 0x08	; 8
   16f2c:	31 f7       	brne	.-52     	; 0x16efa <__udivmod64+0xe>
   16f2e:	bf 91       	pop	r27
   16f30:	27 c0       	rjmp	.+78     	; 0x16f80 <__udivmod64+0x94>
   16f32:	1b 2e       	mov	r1, r27
   16f34:	bf 91       	pop	r27
   16f36:	bb 27       	eor	r27, r27
   16f38:	22 0f       	add	r18, r18
   16f3a:	33 1f       	adc	r19, r19
   16f3c:	44 1f       	adc	r20, r20
   16f3e:	55 1f       	adc	r21, r21
   16f40:	66 1f       	adc	r22, r22
   16f42:	77 1f       	adc	r23, r23
   16f44:	88 1f       	adc	r24, r24
   16f46:	99 1f       	adc	r25, r25
   16f48:	88 1c       	adc	r8, r8
   16f4a:	99 1c       	adc	r9, r9
   16f4c:	ee 1f       	adc	r30, r30
   16f4e:	ff 1f       	adc	r31, r31
   16f50:	cc 1f       	adc	r28, r28
   16f52:	dd 1f       	adc	r29, r29
   16f54:	aa 1f       	adc	r26, r26
   16f56:	bb 1f       	adc	r27, r27
   16f58:	8a 14       	cp	r8, r10
   16f5a:	9b 04       	cpc	r9, r11
   16f5c:	ec 05       	cpc	r30, r12
   16f5e:	fd 05       	cpc	r31, r13
   16f60:	ce 05       	cpc	r28, r14
   16f62:	df 05       	cpc	r29, r15
   16f64:	a0 07       	cpc	r26, r16
   16f66:	b1 07       	cpc	r27, r17
   16f68:	48 f0       	brcs	.+18     	; 0x16f7c <__udivmod64+0x90>
   16f6a:	8a 18       	sub	r8, r10
   16f6c:	9b 08       	sbc	r9, r11
   16f6e:	ec 09       	sbc	r30, r12
   16f70:	fd 09       	sbc	r31, r13
   16f72:	ce 09       	sbc	r28, r14
   16f74:	df 09       	sbc	r29, r15
   16f76:	a0 0b       	sbc	r26, r16
   16f78:	b1 0b       	sbc	r27, r17
   16f7a:	21 60       	ori	r18, 0x01	; 1
   16f7c:	1a 94       	dec	r1
   16f7e:	e1 f6       	brne	.-72     	; 0x16f38 <__udivmod64+0x4c>
   16f80:	2e f4       	brtc	.+10     	; 0x16f8c <__udivmod64+0xa0>
   16f82:	94 01       	movw	r18, r8
   16f84:	af 01       	movw	r20, r30
   16f86:	be 01       	movw	r22, r28
   16f88:	cd 01       	movw	r24, r26
   16f8a:	00 0c       	add	r0, r0
   16f8c:	08 95       	ret

00016f8e <__ashldi3>:
   16f8e:	0f 93       	push	r16
   16f90:	08 30       	cpi	r16, 0x08	; 8
   16f92:	90 f0       	brcs	.+36     	; 0x16fb8 <__ashldi3+0x2a>
   16f94:	98 2f       	mov	r25, r24
   16f96:	87 2f       	mov	r24, r23
   16f98:	76 2f       	mov	r23, r22
   16f9a:	65 2f       	mov	r22, r21
   16f9c:	54 2f       	mov	r21, r20
   16f9e:	43 2f       	mov	r20, r19
   16fa0:	32 2f       	mov	r19, r18
   16fa2:	22 27       	eor	r18, r18
   16fa4:	08 50       	subi	r16, 0x08	; 8
   16fa6:	f4 cf       	rjmp	.-24     	; 0x16f90 <__ashldi3+0x2>
   16fa8:	22 0f       	add	r18, r18
   16faa:	33 1f       	adc	r19, r19
   16fac:	44 1f       	adc	r20, r20
   16fae:	55 1f       	adc	r21, r21
   16fb0:	66 1f       	adc	r22, r22
   16fb2:	77 1f       	adc	r23, r23
   16fb4:	88 1f       	adc	r24, r24
   16fb6:	99 1f       	adc	r25, r25
   16fb8:	0a 95       	dec	r16
   16fba:	b2 f7       	brpl	.-20     	; 0x16fa8 <__ashldi3+0x1a>
   16fbc:	0f 91       	pop	r16
   16fbe:	08 95       	ret

00016fc0 <__adddi3>:
   16fc0:	2a 0d       	add	r18, r10
   16fc2:	3b 1d       	adc	r19, r11
   16fc4:	4c 1d       	adc	r20, r12
   16fc6:	5d 1d       	adc	r21, r13
   16fc8:	6e 1d       	adc	r22, r14
   16fca:	7f 1d       	adc	r23, r15
   16fcc:	80 1f       	adc	r24, r16
   16fce:	91 1f       	adc	r25, r17
   16fd0:	08 95       	ret

00016fd2 <atof>:
   16fd2:	66 27       	eor	r22, r22
   16fd4:	77 27       	eor	r23, r23
   16fd6:	46 c0       	rjmp	.+140    	; 0x17064 <strtod>

00016fd8 <memcpy>:
   16fd8:	fb 01       	movw	r30, r22
   16fda:	dc 01       	movw	r26, r24
   16fdc:	02 c0       	rjmp	.+4      	; 0x16fe2 <memcpy+0xa>
   16fde:	01 90       	ld	r0, Z+
   16fe0:	0d 92       	st	X+, r0
   16fe2:	41 50       	subi	r20, 0x01	; 1
   16fe4:	50 40       	sbci	r21, 0x00	; 0
   16fe6:	d8 f7       	brcc	.-10     	; 0x16fde <memcpy+0x6>
   16fe8:	08 95       	ret

00016fea <memset>:
   16fea:	dc 01       	movw	r26, r24
   16fec:	01 c0       	rjmp	.+2      	; 0x16ff0 <memset+0x6>
   16fee:	6d 93       	st	X+, r22
   16ff0:	41 50       	subi	r20, 0x01	; 1
   16ff2:	50 40       	sbci	r21, 0x00	; 0
   16ff4:	e0 f7       	brcc	.-8      	; 0x16fee <memset+0x4>
   16ff6:	08 95       	ret

00016ff8 <strlen>:
   16ff8:	fc 01       	movw	r30, r24
   16ffa:	01 90       	ld	r0, Z+
   16ffc:	00 20       	and	r0, r0
   16ffe:	e9 f7       	brne	.-6      	; 0x16ffa <strlen+0x2>
   17000:	80 95       	com	r24
   17002:	90 95       	com	r25
   17004:	8e 0f       	add	r24, r30
   17006:	9f 1f       	adc	r25, r31
   17008:	08 95       	ret

0001700a <itoa>:
   1700a:	45 32       	cpi	r20, 0x25	; 37
   1700c:	51 05       	cpc	r21, r1
   1700e:	18 f4       	brcc	.+6      	; 0x17016 <itoa+0xc>
   17010:	42 30       	cpi	r20, 0x02	; 2
   17012:	08 f0       	brcs	.+2      	; 0x17016 <itoa+0xc>
   17014:	04 c0       	rjmp	.+8      	; 0x1701e <__itoa_ncheck>
   17016:	fb 01       	movw	r30, r22
   17018:	10 82       	st	Z, r1
   1701a:	cb 01       	movw	r24, r22
   1701c:	08 95       	ret

0001701e <__itoa_ncheck>:
   1701e:	bb 27       	eor	r27, r27
   17020:	4a 30       	cpi	r20, 0x0A	; 10
   17022:	31 f4       	brne	.+12     	; 0x17030 <__itoa_ncheck+0x12>
   17024:	99 23       	and	r25, r25
   17026:	22 f4       	brpl	.+8      	; 0x17030 <__itoa_ncheck+0x12>
   17028:	bd e2       	ldi	r27, 0x2D	; 45
   1702a:	90 95       	com	r25
   1702c:	81 95       	neg	r24
   1702e:	9f 4f       	sbci	r25, 0xFF	; 255
   17030:	01 c0       	rjmp	.+2      	; 0x17034 <__utoa_common>

00017032 <__utoa_ncheck>:
   17032:	bb 27       	eor	r27, r27

00017034 <__utoa_common>:
   17034:	fb 01       	movw	r30, r22
   17036:	55 27       	eor	r21, r21
   17038:	aa 27       	eor	r26, r26
   1703a:	88 0f       	add	r24, r24
   1703c:	99 1f       	adc	r25, r25
   1703e:	aa 1f       	adc	r26, r26
   17040:	a4 17       	cp	r26, r20
   17042:	10 f0       	brcs	.+4      	; 0x17048 <__utoa_common+0x14>
   17044:	a4 1b       	sub	r26, r20
   17046:	83 95       	inc	r24
   17048:	50 51       	subi	r21, 0x10	; 16
   1704a:	b9 f7       	brne	.-18     	; 0x1703a <__utoa_common+0x6>
   1704c:	a0 5d       	subi	r26, 0xD0	; 208
   1704e:	aa 33       	cpi	r26, 0x3A	; 58
   17050:	08 f0       	brcs	.+2      	; 0x17054 <__utoa_common+0x20>
   17052:	a9 5d       	subi	r26, 0xD9	; 217
   17054:	a1 93       	st	Z+, r26
   17056:	00 97       	sbiw	r24, 0x00	; 0
   17058:	79 f7       	brne	.-34     	; 0x17038 <__utoa_common+0x4>
   1705a:	b1 11       	cpse	r27, r1
   1705c:	b1 93       	st	Z+, r27
   1705e:	11 92       	st	Z+, r1
   17060:	cb 01       	movw	r24, r22
   17062:	73 c1       	rjmp	.+742    	; 0x1734a <strrev>

00017064 <strtod>:
   17064:	8f 92       	push	r8
   17066:	9f 92       	push	r9
   17068:	af 92       	push	r10
   1706a:	bf 92       	push	r11
   1706c:	cf 92       	push	r12
   1706e:	df 92       	push	r13
   17070:	ef 92       	push	r14
   17072:	ff 92       	push	r15
   17074:	0f 93       	push	r16
   17076:	1f 93       	push	r17
   17078:	cf 93       	push	r28
   1707a:	df 93       	push	r29
   1707c:	ec 01       	movw	r28, r24
   1707e:	6b 01       	movw	r12, r22
   17080:	61 15       	cp	r22, r1
   17082:	71 05       	cpc	r23, r1
   17084:	19 f0       	breq	.+6      	; 0x1708c <strtod+0x28>
   17086:	fb 01       	movw	r30, r22
   17088:	80 83       	st	Z, r24
   1708a:	91 83       	std	Z+1, r25	; 0x01
   1708c:	7e 01       	movw	r14, r28
   1708e:	ff ef       	ldi	r31, 0xFF	; 255
   17090:	ef 1a       	sub	r14, r31
   17092:	ff 0a       	sbc	r15, r31
   17094:	08 81       	ld	r16, Y
   17096:	80 2f       	mov	r24, r16
   17098:	90 e0       	ldi	r25, 0x00	; 0
   1709a:	37 d1       	rcall	.+622    	; 0x1730a <isspace>
   1709c:	89 2b       	or	r24, r25
   1709e:	11 f0       	breq	.+4      	; 0x170a4 <strtod+0x40>
   170a0:	e7 01       	movw	r28, r14
   170a2:	f4 cf       	rjmp	.-24     	; 0x1708c <strtod+0x28>
   170a4:	0d 32       	cpi	r16, 0x2D	; 45
   170a6:	39 f4       	brne	.+14     	; 0x170b6 <strtod+0x52>
   170a8:	7e 01       	movw	r14, r28
   170aa:	82 e0       	ldi	r24, 0x02	; 2
   170ac:	e8 0e       	add	r14, r24
   170ae:	f1 1c       	adc	r15, r1
   170b0:	09 81       	ldd	r16, Y+1	; 0x01
   170b2:	11 e0       	ldi	r17, 0x01	; 1
   170b4:	08 c0       	rjmp	.+16     	; 0x170c6 <strtod+0x62>
   170b6:	0b 32       	cpi	r16, 0x2B	; 43
   170b8:	29 f4       	brne	.+10     	; 0x170c4 <strtod+0x60>
   170ba:	7e 01       	movw	r14, r28
   170bc:	92 e0       	ldi	r25, 0x02	; 2
   170be:	e9 0e       	add	r14, r25
   170c0:	f1 1c       	adc	r15, r1
   170c2:	09 81       	ldd	r16, Y+1	; 0x01
   170c4:	10 e0       	ldi	r17, 0x00	; 0
   170c6:	e7 01       	movw	r28, r14
   170c8:	21 97       	sbiw	r28, 0x01	; 1
   170ca:	43 e0       	ldi	r20, 0x03	; 3
   170cc:	50 e0       	ldi	r21, 0x00	; 0
   170ce:	6c e5       	ldi	r22, 0x5C	; 92
   170d0:	72 e0       	ldi	r23, 0x02	; 2
   170d2:	ce 01       	movw	r24, r28
   170d4:	22 d1       	rcall	.+580    	; 0x1731a <strncasecmp_P>
   170d6:	89 2b       	or	r24, r25
   170d8:	b9 f4       	brne	.+46     	; 0x17108 <strtod+0xa4>
   170da:	23 96       	adiw	r28, 0x03	; 3
   170dc:	45 e0       	ldi	r20, 0x05	; 5
   170de:	50 e0       	ldi	r21, 0x00	; 0
   170e0:	67 e5       	ldi	r22, 0x57	; 87
   170e2:	72 e0       	ldi	r23, 0x02	; 2
   170e4:	ce 01       	movw	r24, r28
   170e6:	19 d1       	rcall	.+562    	; 0x1731a <strncasecmp_P>
   170e8:	89 2b       	or	r24, r25
   170ea:	09 f4       	brne	.+2      	; 0x170ee <strtod+0x8a>
   170ec:	25 96       	adiw	r28, 0x05	; 5
   170ee:	c1 14       	cp	r12, r1
   170f0:	d1 04       	cpc	r13, r1
   170f2:	19 f0       	breq	.+6      	; 0x170fa <strtod+0x96>
   170f4:	f6 01       	movw	r30, r12
   170f6:	c0 83       	st	Z, r28
   170f8:	d1 83       	std	Z+1, r29	; 0x01
   170fa:	11 11       	cpse	r17, r1
   170fc:	f0 c0       	rjmp	.+480    	; 0x172de <strtod+0x27a>
   170fe:	60 e0       	ldi	r22, 0x00	; 0
   17100:	70 e0       	ldi	r23, 0x00	; 0
   17102:	80 e8       	ldi	r24, 0x80	; 128
   17104:	9f e7       	ldi	r25, 0x7F	; 127
   17106:	f4 c0       	rjmp	.+488    	; 0x172f0 <strtod+0x28c>
   17108:	43 e0       	ldi	r20, 0x03	; 3
   1710a:	50 e0       	ldi	r21, 0x00	; 0
   1710c:	64 e5       	ldi	r22, 0x54	; 84
   1710e:	72 e0       	ldi	r23, 0x02	; 2
   17110:	ce 01       	movw	r24, r28
   17112:	03 d1       	rcall	.+518    	; 0x1731a <strncasecmp_P>
   17114:	89 2b       	or	r24, r25
   17116:	59 f4       	brne	.+22     	; 0x1712e <strtod+0xca>
   17118:	c1 14       	cp	r12, r1
   1711a:	d1 04       	cpc	r13, r1
   1711c:	09 f4       	brne	.+2      	; 0x17120 <strtod+0xbc>
   1711e:	e4 c0       	rjmp	.+456    	; 0x172e8 <strtod+0x284>
   17120:	f2 e0       	ldi	r31, 0x02	; 2
   17122:	ef 0e       	add	r14, r31
   17124:	f1 1c       	adc	r15, r1
   17126:	f6 01       	movw	r30, r12
   17128:	e0 82       	st	Z, r14
   1712a:	f1 82       	std	Z+1, r15	; 0x01
   1712c:	dd c0       	rjmp	.+442    	; 0x172e8 <strtod+0x284>
   1712e:	20 e0       	ldi	r18, 0x00	; 0
   17130:	30 e0       	ldi	r19, 0x00	; 0
   17132:	a9 01       	movw	r20, r18
   17134:	c0 e0       	ldi	r28, 0x00	; 0
   17136:	d0 e0       	ldi	r29, 0x00	; 0
   17138:	f7 01       	movw	r30, r14
   1713a:	60 ed       	ldi	r22, 0xD0	; 208
   1713c:	a6 2e       	mov	r10, r22
   1713e:	a0 0e       	add	r10, r16
   17140:	89 e0       	ldi	r24, 0x09	; 9
   17142:	8a 15       	cp	r24, r10
   17144:	28 f1       	brcs	.+74     	; 0x17190 <strtod+0x12c>
   17146:	91 2f       	mov	r25, r17
   17148:	92 60       	ori	r25, 0x02	; 2
   1714a:	b9 2e       	mov	r11, r25
   1714c:	81 2f       	mov	r24, r17
   1714e:	88 70       	andi	r24, 0x08	; 8
   17150:	12 ff       	sbrs	r17, 2
   17152:	04 c0       	rjmp	.+8      	; 0x1715c <strtod+0xf8>
   17154:	81 11       	cpse	r24, r1
   17156:	23 c0       	rjmp	.+70     	; 0x1719e <strtod+0x13a>
   17158:	21 96       	adiw	r28, 0x01	; 1
   1715a:	21 c0       	rjmp	.+66     	; 0x1719e <strtod+0x13a>
   1715c:	81 11       	cpse	r24, r1
   1715e:	21 97       	sbiw	r28, 0x01	; 1
   17160:	a5 e0       	ldi	r26, 0x05	; 5
   17162:	b0 e0       	ldi	r27, 0x00	; 0
   17164:	ac de       	rcall	.-680    	; 0x16ebe <__muluhisi3>
   17166:	dc 01       	movw	r26, r24
   17168:	cb 01       	movw	r24, r22
   1716a:	88 0f       	add	r24, r24
   1716c:	99 1f       	adc	r25, r25
   1716e:	aa 1f       	adc	r26, r26
   17170:	bb 1f       	adc	r27, r27
   17172:	9c 01       	movw	r18, r24
   17174:	ad 01       	movw	r20, r26
   17176:	2a 0d       	add	r18, r10
   17178:	31 1d       	adc	r19, r1
   1717a:	41 1d       	adc	r20, r1
   1717c:	51 1d       	adc	r21, r1
   1717e:	28 39       	cpi	r18, 0x98	; 152
   17180:	89 e9       	ldi	r24, 0x99	; 153
   17182:	38 07       	cpc	r19, r24
   17184:	48 07       	cpc	r20, r24
   17186:	89 e1       	ldi	r24, 0x19	; 25
   17188:	58 07       	cpc	r21, r24
   1718a:	48 f0       	brcs	.+18     	; 0x1719e <strtod+0x13a>
   1718c:	16 60       	ori	r17, 0x06	; 6
   1718e:	06 c0       	rjmp	.+12     	; 0x1719c <strtod+0x138>
   17190:	9e ef       	ldi	r25, 0xFE	; 254
   17192:	a9 12       	cpse	r10, r25
   17194:	0a c0       	rjmp	.+20     	; 0x171aa <strtod+0x146>
   17196:	13 fd       	sbrc	r17, 3
   17198:	40 c0       	rjmp	.+128    	; 0x1721a <strtod+0x1b6>
   1719a:	18 60       	ori	r17, 0x08	; 8
   1719c:	b1 2e       	mov	r11, r17
   1719e:	8f ef       	ldi	r24, 0xFF	; 255
   171a0:	e8 1a       	sub	r14, r24
   171a2:	f8 0a       	sbc	r15, r24
   171a4:	00 81       	ld	r16, Z
   171a6:	1b 2d       	mov	r17, r11
   171a8:	c7 cf       	rjmp	.-114    	; 0x17138 <strtod+0xd4>
   171aa:	80 2f       	mov	r24, r16
   171ac:	8f 7d       	andi	r24, 0xDF	; 223
   171ae:	85 34       	cpi	r24, 0x45	; 69
   171b0:	a1 f5       	brne	.+104    	; 0x1721a <strtod+0x1b6>
   171b2:	80 81       	ld	r24, Z
   171b4:	8d 32       	cpi	r24, 0x2D	; 45
   171b6:	11 f4       	brne	.+4      	; 0x171bc <strtod+0x158>
   171b8:	10 61       	ori	r17, 0x10	; 16
   171ba:	06 c0       	rjmp	.+12     	; 0x171c8 <strtod+0x164>
   171bc:	8b 32       	cpi	r24, 0x2B	; 43
   171be:	21 f0       	breq	.+8      	; 0x171c8 <strtod+0x164>
   171c0:	31 96       	adiw	r30, 0x01	; 1
   171c2:	61 e0       	ldi	r22, 0x01	; 1
   171c4:	70 e0       	ldi	r23, 0x00	; 0
   171c6:	04 c0       	rjmp	.+8      	; 0x171d0 <strtod+0x16c>
   171c8:	81 81       	ldd	r24, Z+1	; 0x01
   171ca:	32 96       	adiw	r30, 0x02	; 2
   171cc:	62 e0       	ldi	r22, 0x02	; 2
   171ce:	70 e0       	ldi	r23, 0x00	; 0
   171d0:	80 53       	subi	r24, 0x30	; 48
   171d2:	8a 30       	cpi	r24, 0x0A	; 10
   171d4:	18 f0       	brcs	.+6      	; 0x171dc <strtod+0x178>
   171d6:	e6 1b       	sub	r30, r22
   171d8:	f7 0b       	sbc	r31, r23
   171da:	1f c0       	rjmp	.+62     	; 0x1721a <strtod+0x1b6>
   171dc:	60 e0       	ldi	r22, 0x00	; 0
   171de:	70 e0       	ldi	r23, 0x00	; 0
   171e0:	60 38       	cpi	r22, 0x80	; 128
   171e2:	9c e0       	ldi	r25, 0x0C	; 12
   171e4:	79 07       	cpc	r23, r25
   171e6:	5c f4       	brge	.+22     	; 0x171fe <strtod+0x19a>
   171e8:	db 01       	movw	r26, r22
   171ea:	aa 0f       	add	r26, r26
   171ec:	bb 1f       	adc	r27, r27
   171ee:	aa 0f       	add	r26, r26
   171f0:	bb 1f       	adc	r27, r27
   171f2:	6a 0f       	add	r22, r26
   171f4:	7b 1f       	adc	r23, r27
   171f6:	66 0f       	add	r22, r22
   171f8:	77 1f       	adc	r23, r23
   171fa:	68 0f       	add	r22, r24
   171fc:	71 1d       	adc	r23, r1
   171fe:	31 96       	adiw	r30, 0x01	; 1
   17200:	df 01       	movw	r26, r30
   17202:	11 97       	sbiw	r26, 0x01	; 1
   17204:	8c 91       	ld	r24, X
   17206:	80 53       	subi	r24, 0x30	; 48
   17208:	8a 30       	cpi	r24, 0x0A	; 10
   1720a:	50 f3       	brcs	.-44     	; 0x171e0 <strtod+0x17c>
   1720c:	14 ff       	sbrs	r17, 4
   1720e:	03 c0       	rjmp	.+6      	; 0x17216 <strtod+0x1b2>
   17210:	71 95       	neg	r23
   17212:	61 95       	neg	r22
   17214:	71 09       	sbc	r23, r1
   17216:	c6 0f       	add	r28, r22
   17218:	d7 1f       	adc	r29, r23
   1721a:	11 ff       	sbrs	r17, 1
   1721c:	08 c0       	rjmp	.+16     	; 0x1722e <strtod+0x1ca>
   1721e:	c1 14       	cp	r12, r1
   17220:	d1 04       	cpc	r13, r1
   17222:	29 f0       	breq	.+10     	; 0x1722e <strtod+0x1ca>
   17224:	cf 01       	movw	r24, r30
   17226:	01 97       	sbiw	r24, 0x01	; 1
   17228:	f6 01       	movw	r30, r12
   1722a:	80 83       	st	Z, r24
   1722c:	91 83       	std	Z+1, r25	; 0x01
   1722e:	ca 01       	movw	r24, r20
   17230:	b9 01       	movw	r22, r18
   17232:	38 dc       	rcall	.-1936   	; 0x16aa4 <__floatunsisf>
   17234:	21 2f       	mov	r18, r17
   17236:	23 70       	andi	r18, 0x03	; 3
   17238:	23 30       	cpi	r18, 0x03	; 3
   1723a:	19 f0       	breq	.+6      	; 0x17242 <strtod+0x1de>
   1723c:	4b 01       	movw	r8, r22
   1723e:	5c 01       	movw	r10, r24
   17240:	06 c0       	rjmp	.+12     	; 0x1724e <strtod+0x1ea>
   17242:	4b 01       	movw	r8, r22
   17244:	5c 01       	movw	r10, r24
   17246:	b7 fa       	bst	r11, 7
   17248:	b0 94       	com	r11
   1724a:	b7 f8       	bld	r11, 7
   1724c:	b0 94       	com	r11
   1724e:	20 e0       	ldi	r18, 0x00	; 0
   17250:	30 e0       	ldi	r19, 0x00	; 0
   17252:	a9 01       	movw	r20, r18
   17254:	c5 01       	movw	r24, r10
   17256:	b4 01       	movw	r22, r8
   17258:	4e db       	rcall	.-2404   	; 0x168f6 <__cmpsf2>
   1725a:	88 23       	and	r24, r24
   1725c:	09 f4       	brne	.+2      	; 0x17260 <strtod+0x1fc>
   1725e:	3c c0       	rjmp	.+120    	; 0x172d8 <strtod+0x274>
   17260:	d7 ff       	sbrs	r29, 7
   17262:	06 c0       	rjmp	.+12     	; 0x17270 <strtod+0x20c>
   17264:	d1 95       	neg	r29
   17266:	c1 95       	neg	r28
   17268:	d1 09       	sbc	r29, r1
   1726a:	03 e7       	ldi	r16, 0x73	; 115
   1726c:	12 e0       	ldi	r17, 0x02	; 2
   1726e:	02 c0       	rjmp	.+4      	; 0x17274 <strtod+0x210>
   17270:	0b e8       	ldi	r16, 0x8B	; 139
   17272:	12 e0       	ldi	r17, 0x02	; 2
   17274:	68 01       	movw	r12, r16
   17276:	f8 e1       	ldi	r31, 0x18	; 24
   17278:	cf 1a       	sub	r12, r31
   1727a:	d1 08       	sbc	r13, r1
   1727c:	90 e2       	ldi	r25, 0x20	; 32
   1727e:	e9 2e       	mov	r14, r25
   17280:	f1 2c       	mov	r15, r1
   17282:	ce 15       	cp	r28, r14
   17284:	df 05       	cpc	r29, r15
   17286:	6c f0       	brlt	.+26     	; 0x172a2 <strtod+0x23e>
   17288:	f8 01       	movw	r30, r16
   1728a:	25 91       	lpm	r18, Z+
   1728c:	35 91       	lpm	r19, Z+
   1728e:	45 91       	lpm	r20, Z+
   17290:	54 91       	lpm	r21, Z
   17292:	c5 01       	movw	r24, r10
   17294:	b4 01       	movw	r22, r8
   17296:	0a dd       	rcall	.-1516   	; 0x16cac <__mulsf3>
   17298:	4b 01       	movw	r8, r22
   1729a:	5c 01       	movw	r10, r24
   1729c:	ce 19       	sub	r28, r14
   1729e:	df 09       	sbc	r29, r15
   172a0:	f0 cf       	rjmp	.-32     	; 0x17282 <strtod+0x21e>
   172a2:	04 50       	subi	r16, 0x04	; 4
   172a4:	11 09       	sbc	r17, r1
   172a6:	f5 94       	asr	r15
   172a8:	e7 94       	ror	r14
   172aa:	0c 15       	cp	r16, r12
   172ac:	1d 05       	cpc	r17, r13
   172ae:	49 f7       	brne	.-46     	; 0x17282 <strtod+0x21e>
   172b0:	8a 2d       	mov	r24, r10
   172b2:	88 0f       	add	r24, r24
   172b4:	8b 2d       	mov	r24, r11
   172b6:	88 1f       	adc	r24, r24
   172b8:	8f 3f       	cpi	r24, 0xFF	; 255
   172ba:	41 f0       	breq	.+16     	; 0x172cc <strtod+0x268>
   172bc:	20 e0       	ldi	r18, 0x00	; 0
   172be:	30 e0       	ldi	r19, 0x00	; 0
   172c0:	a9 01       	movw	r20, r18
   172c2:	c5 01       	movw	r24, r10
   172c4:	b4 01       	movw	r22, r8
   172c6:	17 db       	rcall	.-2514   	; 0x168f6 <__cmpsf2>
   172c8:	81 11       	cpse	r24, r1
   172ca:	06 c0       	rjmp	.+12     	; 0x172d8 <strtod+0x274>
   172cc:	82 e2       	ldi	r24, 0x22	; 34
   172ce:	90 e0       	ldi	r25, 0x00	; 0
   172d0:	80 93 bd 29 	sts	0x29BD, r24	; 0x8029bd <errno>
   172d4:	90 93 be 29 	sts	0x29BE, r25	; 0x8029be <errno+0x1>
   172d8:	c5 01       	movw	r24, r10
   172da:	b4 01       	movw	r22, r8
   172dc:	09 c0       	rjmp	.+18     	; 0x172f0 <strtod+0x28c>
   172de:	60 e0       	ldi	r22, 0x00	; 0
   172e0:	70 e0       	ldi	r23, 0x00	; 0
   172e2:	80 e8       	ldi	r24, 0x80	; 128
   172e4:	9f ef       	ldi	r25, 0xFF	; 255
   172e6:	04 c0       	rjmp	.+8      	; 0x172f0 <strtod+0x28c>
   172e8:	60 e0       	ldi	r22, 0x00	; 0
   172ea:	70 e0       	ldi	r23, 0x00	; 0
   172ec:	80 ec       	ldi	r24, 0xC0	; 192
   172ee:	9f e7       	ldi	r25, 0x7F	; 127
   172f0:	df 91       	pop	r29
   172f2:	cf 91       	pop	r28
   172f4:	1f 91       	pop	r17
   172f6:	0f 91       	pop	r16
   172f8:	ff 90       	pop	r15
   172fa:	ef 90       	pop	r14
   172fc:	df 90       	pop	r13
   172fe:	cf 90       	pop	r12
   17300:	bf 90       	pop	r11
   17302:	af 90       	pop	r10
   17304:	9f 90       	pop	r9
   17306:	8f 90       	pop	r8
   17308:	08 95       	ret

0001730a <isspace>:
   1730a:	91 11       	cpse	r25, r1
   1730c:	2e c0       	rjmp	.+92     	; 0x1736a <__ctype_isfalse>
   1730e:	80 32       	cpi	r24, 0x20	; 32
   17310:	19 f0       	breq	.+6      	; 0x17318 <isspace+0xe>
   17312:	89 50       	subi	r24, 0x09	; 9
   17314:	85 50       	subi	r24, 0x05	; 5
   17316:	d0 f7       	brcc	.-12     	; 0x1730c <isspace+0x2>
   17318:	08 95       	ret

0001731a <strncasecmp_P>:
   1731a:	fb 01       	movw	r30, r22
   1731c:	dc 01       	movw	r26, r24
   1731e:	41 50       	subi	r20, 0x01	; 1
   17320:	50 40       	sbci	r21, 0x00	; 0
   17322:	88 f0       	brcs	.+34     	; 0x17346 <strncasecmp_P+0x2c>
   17324:	8d 91       	ld	r24, X+
   17326:	81 34       	cpi	r24, 0x41	; 65
   17328:	1c f0       	brlt	.+6      	; 0x17330 <strncasecmp_P+0x16>
   1732a:	8b 35       	cpi	r24, 0x5B	; 91
   1732c:	0c f4       	brge	.+2      	; 0x17330 <strncasecmp_P+0x16>
   1732e:	80 5e       	subi	r24, 0xE0	; 224
   17330:	65 91       	lpm	r22, Z+
   17332:	61 34       	cpi	r22, 0x41	; 65
   17334:	1c f0       	brlt	.+6      	; 0x1733c <strncasecmp_P+0x22>
   17336:	6b 35       	cpi	r22, 0x5B	; 91
   17338:	0c f4       	brge	.+2      	; 0x1733c <strncasecmp_P+0x22>
   1733a:	60 5e       	subi	r22, 0xE0	; 224
   1733c:	86 1b       	sub	r24, r22
   1733e:	61 11       	cpse	r22, r1
   17340:	71 f3       	breq	.-36     	; 0x1731e <strncasecmp_P+0x4>
   17342:	99 0b       	sbc	r25, r25
   17344:	08 95       	ret
   17346:	88 1b       	sub	r24, r24
   17348:	fc cf       	rjmp	.-8      	; 0x17342 <strncasecmp_P+0x28>

0001734a <strrev>:
   1734a:	dc 01       	movw	r26, r24
   1734c:	fc 01       	movw	r30, r24
   1734e:	67 2f       	mov	r22, r23
   17350:	71 91       	ld	r23, Z+
   17352:	77 23       	and	r23, r23
   17354:	e1 f7       	brne	.-8      	; 0x1734e <strrev+0x4>
   17356:	32 97       	sbiw	r30, 0x02	; 2
   17358:	04 c0       	rjmp	.+8      	; 0x17362 <strrev+0x18>
   1735a:	7c 91       	ld	r23, X
   1735c:	6d 93       	st	X+, r22
   1735e:	70 83       	st	Z, r23
   17360:	62 91       	ld	r22, -Z
   17362:	ae 17       	cp	r26, r30
   17364:	bf 07       	cpc	r27, r31
   17366:	c8 f3       	brcs	.-14     	; 0x1735a <strrev+0x10>
   17368:	08 95       	ret

0001736a <__ctype_isfalse>:
   1736a:	99 27       	eor	r25, r25
   1736c:	88 27       	eor	r24, r24

0001736e <__ctype_istrue>:
   1736e:	08 95       	ret

00017370 <_exit>:
   17370:	f8 94       	cli

00017372 <__stop_program>:
   17372:	ff cf       	rjmp	.-2      	; 0x17372 <__stop_program>

Disassembly of section .BOOT:

00017374 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   17374:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   17376:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   17378:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   1737a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   1737e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   17382:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   17384:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   17388:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   1738a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   1738e:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   17390:	08 95       	ret

00017392 <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   17392:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   17396:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   17398:	fc cf       	rjmp	.-8      	; 0x17392 <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   1739a:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   1739c:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   1739e:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   173a0:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   173a4:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   173a6:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   173aa:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   173ac:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   173ae:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   173b0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   173b4:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   173b6:	08 95       	ret
